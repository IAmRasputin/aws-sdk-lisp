;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/transcribe/api
  (:use)
  (:nicknames #:aws/transcribe)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/transcribe/api)
(common-lisp:progn
 (common-lisp:defclass transcribe-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "transcribe"))
 (common-lisp:export 'transcribe-request))
(common-lisp:progn
 (common-lisp:define-condition transcribe-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'transcribe-error))
(common-lisp:defvar *error-map*
  '(("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("InternalFailureException" . internal-failure-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("NotFoundException" . not-found-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (absolute-time-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-absolute-time-range-"))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp-milliseconds common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or timestamp-milliseconds common-lisp:null))
   (first common-lisp:nil :type
    (common-lisp:or timestamp-milliseconds common-lisp:null))
   (last common-lisp:nil :type
    (common-lisp:or timestamp-milliseconds common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'absolute-time-range 'make-absolute-time-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input absolute-time-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input absolute-time-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first))
      (common-lisp:list
       (common-lisp:cons "First"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last))
      (common-lisp:list
       (common-lisp:cons "Last"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input absolute-time-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (transcribe-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:deftype base-model-name () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype clmlanguage-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (call-analytics-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-call-analytics-job-"))
   (call-analytics-job-name common-lisp:nil :type
    (common-lisp:or call-analytics-job-name common-lisp:null))
   (call-analytics-job-status common-lisp:nil :type
    (common-lisp:or call-analytics-job-status common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (media-sample-rate-hertz common-lisp:nil :type
    (common-lisp:or media-sample-rate-hertz common-lisp:null))
   (media-format common-lisp:nil :type
    (common-lisp:or media-format common-lisp:null))
   (media common-lisp:nil :type (common-lisp:or media common-lisp:null))
   (transcript common-lisp:nil :type
    (common-lisp:or transcript common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (completion-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (data-access-role-arn common-lisp:nil :type
    (common-lisp:or data-access-role-arn common-lisp:null))
   (identified-language-score common-lisp:nil :type
    (common-lisp:or identified-language-score common-lisp:null))
   (settings common-lisp:nil :type
    (common-lisp:or call-analytics-job-settings common-lisp:null))
   (channel-definitions common-lisp:nil :type
    (common-lisp:or channel-definitions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'call-analytics-job 'make-call-analytics-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input call-analytics-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input call-analytics-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'call-analytics-job-name))
      (common-lisp:list
       (common-lisp:cons "CallAnalyticsJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'call-analytics-job-status))
      (common-lisp:list
       (common-lisp:cons "CallAnalyticsJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-sample-rate-hertz))
      (common-lisp:list
       (common-lisp:cons "MediaSampleRateHertz"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-format))
      (common-lisp:list
       (common-lisp:cons "MediaFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media))
      (common-lisp:list
       (common-lisp:cons "Media"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript))
      (common-lisp:list
       (common-lisp:cons "Transcript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "CompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identified-language-score))
      (common-lisp:list
       (common-lisp:cons "IdentifiedLanguageScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-definitions))
      (common-lisp:list
       (common-lisp:cons "ChannelDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input call-analytics-job))
   common-lisp:nil))
(common-lisp:deftype call-analytics-job-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (call-analytics-job-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-call-analytics-job-settings-"))
   (vocabulary-name common-lisp:nil :type
    (common-lisp:or vocabulary-name common-lisp:null))
   (vocabulary-filter-name common-lisp:nil :type
    (common-lisp:or vocabulary-filter-name common-lisp:null))
   (vocabulary-filter-method common-lisp:nil :type
    (common-lisp:or vocabulary-filter-method common-lisp:null))
   (language-model-name common-lisp:nil :type
    (common-lisp:or model-name common-lisp:null))
   (content-redaction common-lisp:nil :type
    (common-lisp:or content-redaction common-lisp:null))
   (language-options common-lisp:nil :type
    (common-lisp:or language-options common-lisp:null))
   (language-id-settings common-lisp:nil :type
    (common-lisp:or language-id-settings-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'call-analytics-job-settings
                    'make-call-analytics-job-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          call-analytics-job-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          call-analytics-job-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-method))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-model-name))
      (common-lisp:list
       (common-lisp:cons "LanguageModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-redaction))
      (common-lisp:list
       (common-lisp:cons "ContentRedaction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-options))
      (common-lisp:list
       (common-lisp:cons "LanguageOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'language-id-settings))
      (common-lisp:list
       (common-lisp:cons "LanguageIdSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          call-analytics-job-settings))
   common-lisp:nil))
(common-lisp:deftype call-analytics-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype call-analytics-job-summaries ()
   '(trivial-types:proper-list call-analytics-job-summary))
 (common-lisp:defun |make-call-analytics-job-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            call-analytics-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (call-analytics-job-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-call-analytics-job-summary-"))
   (call-analytics-job-name common-lisp:nil :type
    (common-lisp:or call-analytics-job-name common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (completion-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (call-analytics-job-status common-lisp:nil :type
    (common-lisp:or call-analytics-job-status common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'call-analytics-job-summary
                    'make-call-analytics-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          call-analytics-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          call-analytics-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'call-analytics-job-name))
      (common-lisp:list
       (common-lisp:cons "CallAnalyticsJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "CompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'call-analytics-job-status))
      (common-lisp:list
       (common-lisp:cons "CallAnalyticsJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          call-analytics-job-summary))
   common-lisp:nil))
(common-lisp:deftype category-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (category-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-category-properties-"))
   (category-name common-lisp:nil :type
    (common-lisp:or category-name common-lisp:null))
   (rules common-lisp:nil :type (common-lisp:or rule-list common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (last-update-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (input-type common-lisp:nil :type
    (common-lisp:or input-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'category-properties 'make-category-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input category-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input category-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-name))
      (common-lisp:list
       (common-lisp:cons "CategoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-type))
      (common-lisp:list
       (common-lisp:cons "InputType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input category-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype category-properties-list ()
   '(trivial-types:proper-list category-properties))
 (common-lisp:defun |make-category-properties-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list category-properties))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (channel-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-channel-definition-"))
   (channel-id common-lisp:nil :type
    (common-lisp:or channel-id common-lisp:null))
   (participant-role common-lisp:nil :type
    (common-lisp:or participant-role common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'channel-definition 'make-channel-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-role))
      (common-lisp:list
       (common-lisp:cons "ParticipantRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype channel-definitions ()
   '(trivial-types:proper-list channel-definition))
 (common-lisp:defun |make-channel-definitions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list channel-definition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype channel-id () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (transcribe-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (content-redaction (:copier common-lisp:nil)
      (:conc-name "struct-shape-content-redaction-"))
   (redaction-type (common-lisp:error ":redaction-type is required") :type
    (common-lisp:or redaction-type common-lisp:null))
   (redaction-output (common-lisp:error ":redaction-output is required") :type
    (common-lisp:or redaction-output common-lisp:null))
   (pii-entity-types common-lisp:nil :type
    (common-lisp:or pii-entity-types common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'content-redaction 'make-content-redaction))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input content-redaction))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input content-redaction))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redaction-type))
      (common-lisp:list
       (common-lisp:cons "RedactionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redaction-output))
      (common-lisp:list
       (common-lisp:cons "RedactionOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pii-entity-types))
      (common-lisp:list
       (common-lisp:cons "PiiEntityTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input content-redaction))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-call-analytics-category-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-call-analytics-category-request-"))
   (category-name (common-lisp:error ":category-name is required") :type
    (common-lisp:or category-name common-lisp:null))
   (rules (common-lisp:error ":rules is required") :type
    (common-lisp:or rule-list common-lisp:null))
   (input-type common-lisp:nil :type
    (common-lisp:or input-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-call-analytics-category-request
                    'make-create-call-analytics-category-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-call-analytics-category-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-call-analytics-category-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-name))
      (common-lisp:list
       (common-lisp:cons "CategoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-type))
      (common-lisp:list
       (common-lisp:cons "InputType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-call-analytics-category-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-call-analytics-category-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-call-analytics-category-response-"))
   (category-properties common-lisp:nil :type
    (common-lisp:or category-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-call-analytics-category-response
                    'make-create-call-analytics-category-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-call-analytics-category-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-call-analytics-category-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-properties))
      (common-lisp:list
       (common-lisp:cons "CategoryProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-call-analytics-category-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-language-model-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-language-model-request-"))
   (language-code (common-lisp:error ":language-code is required") :type
    (common-lisp:or clmlanguage-code common-lisp:null))
   (base-model-name (common-lisp:error ":base-model-name is required") :type
    (common-lisp:or base-model-name common-lisp:null))
   (model-name (common-lisp:error ":model-name is required") :type
    (common-lisp:or model-name common-lisp:null))
   (input-data-config (common-lisp:error ":input-data-config is required")
    :type (common-lisp:or input-data-config common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-language-model-request
                    'make-create-language-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-language-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-language-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-model-name))
      (common-lisp:list
       (common-lisp:cons "BaseModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-language-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-language-model-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-language-model-response-"))
   (language-code common-lisp:nil :type
    (common-lisp:or clmlanguage-code common-lisp:null))
   (base-model-name common-lisp:nil :type
    (common-lisp:or base-model-name common-lisp:null))
   (model-name common-lisp:nil :type
    (common-lisp:or model-name common-lisp:null))
   (input-data-config common-lisp:nil :type
    (common-lisp:or input-data-config common-lisp:null))
   (model-status common-lisp:nil :type
    (common-lisp:or model-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-language-model-response
                    'make-create-language-model-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-language-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-language-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-model-name))
      (common-lisp:list
       (common-lisp:cons "BaseModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-status))
      (common-lisp:list
       (common-lisp:cons "ModelStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-language-model-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-medical-vocabulary-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-medical-vocabulary-request-"))
   (vocabulary-name (common-lisp:error ":vocabulary-name is required") :type
    (common-lisp:or vocabulary-name common-lisp:null))
   (language-code (common-lisp:error ":language-code is required") :type
    (common-lisp:or language-code common-lisp:null))
   (vocabulary-file-uri (common-lisp:error ":vocabulary-file-uri is required")
    :type (common-lisp:or uri common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-medical-vocabulary-request
                    'make-create-medical-vocabulary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-medical-vocabulary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-medical-vocabulary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-file-uri))
      (common-lisp:list
       (common-lisp:cons "VocabularyFileUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-medical-vocabulary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-medical-vocabulary-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-medical-vocabulary-response-"))
   (vocabulary-name common-lisp:nil :type
    (common-lisp:or vocabulary-name common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (vocabulary-state common-lisp:nil :type
    (common-lisp:or vocabulary-state common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-medical-vocabulary-response
                    'make-create-medical-vocabulary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-medical-vocabulary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-medical-vocabulary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-state))
      (common-lisp:list
       (common-lisp:cons "VocabularyState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-medical-vocabulary-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-vocabulary-filter-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-vocabulary-filter-request-"))
   (vocabulary-filter-name
    (common-lisp:error ":vocabulary-filter-name is required") :type
    (common-lisp:or vocabulary-filter-name common-lisp:null))
   (language-code (common-lisp:error ":language-code is required") :type
    (common-lisp:or language-code common-lisp:null))
   (words common-lisp:nil :type (common-lisp:or words common-lisp:null))
   (vocabulary-filter-file-uri common-lisp:nil :type
    (common-lisp:or uri common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-vocabulary-filter-request
                    'make-create-vocabulary-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'words))
      (common-lisp:list
       (common-lisp:cons "Words"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-file-uri))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterFileUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-vocabulary-filter-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-vocabulary-filter-response-"))
   (vocabulary-filter-name common-lisp:nil :type
    (common-lisp:or vocabulary-filter-name common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-vocabulary-filter-response
                    'make-create-vocabulary-filter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-filter-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-vocabulary-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-vocabulary-request-"))
   (vocabulary-name (common-lisp:error ":vocabulary-name is required") :type
    (common-lisp:or vocabulary-name common-lisp:null))
   (language-code (common-lisp:error ":language-code is required") :type
    (common-lisp:or language-code common-lisp:null))
   (phrases common-lisp:nil :type (common-lisp:or phrases common-lisp:null))
   (vocabulary-file-uri common-lisp:nil :type
    (common-lisp:or uri common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-vocabulary-request
                    'make-create-vocabulary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phrases))
      (common-lisp:list
       (common-lisp:cons "Phrases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-file-uri))
      (common-lisp:list
       (common-lisp:cons "VocabularyFileUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-vocabulary-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-vocabulary-response-"))
   (vocabulary-name common-lisp:nil :type
    (common-lisp:or vocabulary-name common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (vocabulary-state common-lisp:nil :type
    (common-lisp:or vocabulary-state common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-vocabulary-response
                    'make-create-vocabulary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-state))
      (common-lisp:list
       (common-lisp:cons "VocabularyState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vocabulary-response))
   common-lisp:nil))
(common-lisp:deftype data-access-role-arn () 'common-lisp:string)
(common-lisp:deftype date-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-call-analytics-category-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-call-analytics-category-request-"))
   (category-name (common-lisp:error ":category-name is required") :type
    (common-lisp:or category-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-call-analytics-category-request
                    'make-delete-call-analytics-category-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-call-analytics-category-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-call-analytics-category-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-name))
      (common-lisp:list
       (common-lisp:cons "CategoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-call-analytics-category-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-call-analytics-category-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-call-analytics-category-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-call-analytics-category-response
                    'make-delete-call-analytics-category-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-call-analytics-category-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-call-analytics-category-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-call-analytics-category-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-call-analytics-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-call-analytics-job-request-"))
   (call-analytics-job-name
    (common-lisp:error ":call-analytics-job-name is required") :type
    (common-lisp:or call-analytics-job-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-call-analytics-job-request
                    'make-delete-call-analytics-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-call-analytics-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-call-analytics-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'call-analytics-job-name))
      (common-lisp:list
       (common-lisp:cons "CallAnalyticsJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-call-analytics-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-call-analytics-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-call-analytics-job-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-call-analytics-job-response
                    'make-delete-call-analytics-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-call-analytics-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-call-analytics-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-call-analytics-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-language-model-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-language-model-request-"))
   (model-name (common-lisp:error ":model-name is required") :type
    (common-lisp:or model-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-language-model-request
                    'make-delete-language-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-language-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-language-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-language-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-medical-transcription-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-medical-transcription-job-request-"))
   (medical-transcription-job-name
    (common-lisp:error ":medical-transcription-job-name is required") :type
    (common-lisp:or transcription-job-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-medical-transcription-job-request
                    'make-delete-medical-transcription-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-medical-transcription-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-medical-transcription-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medical-transcription-job-name))
      (common-lisp:list
       (common-lisp:cons "MedicalTranscriptionJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-medical-transcription-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-medical-vocabulary-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-medical-vocabulary-request-"))
   (vocabulary-name (common-lisp:error ":vocabulary-name is required") :type
    (common-lisp:or vocabulary-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-medical-vocabulary-request
                    'make-delete-medical-vocabulary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-medical-vocabulary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-medical-vocabulary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-medical-vocabulary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-transcription-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-transcription-job-request-"))
   (transcription-job-name
    (common-lisp:error ":transcription-job-name is required") :type
    (common-lisp:or transcription-job-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-transcription-job-request
                    'make-delete-transcription-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-transcription-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-transcription-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcription-job-name))
      (common-lisp:list
       (common-lisp:cons "TranscriptionJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-transcription-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-vocabulary-filter-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-vocabulary-filter-request-"))
   (vocabulary-filter-name
    (common-lisp:error ":vocabulary-filter-name is required") :type
    (common-lisp:or vocabulary-filter-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-vocabulary-filter-request
                    'make-delete-vocabulary-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vocabulary-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vocabulary-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vocabulary-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-vocabulary-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-vocabulary-request-"))
   (vocabulary-name (common-lisp:error ":vocabulary-name is required") :type
    (common-lisp:or vocabulary-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-vocabulary-request
                    'make-delete-vocabulary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vocabulary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vocabulary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vocabulary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-language-model-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-language-model-request-"))
   (model-name (common-lisp:error ":model-name is required") :type
    (common-lisp:or model-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-language-model-request
                    'make-describe-language-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-language-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-language-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-language-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-language-model-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-language-model-response-"))
   (language-model common-lisp:nil :type
    (common-lisp:or language-model common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-language-model-response
                    'make-describe-language-model-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-language-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-language-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-model))
      (common-lisp:list
       (common-lisp:cons "LanguageModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-language-model-response))
   common-lisp:nil))
(common-lisp:deftype duration-in-seconds () 'common-lisp:single-float)
(common-lisp:deftype failure-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-call-analytics-category-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-call-analytics-category-request-"))
   (category-name (common-lisp:error ":category-name is required") :type
    (common-lisp:or category-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-call-analytics-category-request
                    'make-get-call-analytics-category-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-call-analytics-category-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-call-analytics-category-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-name))
      (common-lisp:list
       (common-lisp:cons "CategoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-call-analytics-category-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-call-analytics-category-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-call-analytics-category-response-"))
   (category-properties common-lisp:nil :type
    (common-lisp:or category-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-call-analytics-category-response
                    'make-get-call-analytics-category-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-call-analytics-category-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-call-analytics-category-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-properties))
      (common-lisp:list
       (common-lisp:cons "CategoryProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-call-analytics-category-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-call-analytics-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-call-analytics-job-request-"))
   (call-analytics-job-name
    (common-lisp:error ":call-analytics-job-name is required") :type
    (common-lisp:or call-analytics-job-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-call-analytics-job-request
                    'make-get-call-analytics-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-call-analytics-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-call-analytics-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'call-analytics-job-name))
      (common-lisp:list
       (common-lisp:cons "CallAnalyticsJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-call-analytics-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-call-analytics-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-call-analytics-job-response-"))
   (call-analytics-job common-lisp:nil :type
    (common-lisp:or call-analytics-job common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-call-analytics-job-response
                    'make-get-call-analytics-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-call-analytics-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-call-analytics-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'call-analytics-job))
      (common-lisp:list
       (common-lisp:cons "CallAnalyticsJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-call-analytics-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-medical-transcription-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-medical-transcription-job-request-"))
   (medical-transcription-job-name
    (common-lisp:error ":medical-transcription-job-name is required") :type
    (common-lisp:or transcription-job-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-medical-transcription-job-request
                    'make-get-medical-transcription-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-transcription-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-transcription-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medical-transcription-job-name))
      (common-lisp:list
       (common-lisp:cons "MedicalTranscriptionJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-transcription-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-medical-transcription-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-medical-transcription-job-response-"))
   (medical-transcription-job common-lisp:nil :type
    (common-lisp:or medical-transcription-job common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-medical-transcription-job-response
                    'make-get-medical-transcription-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-transcription-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-transcription-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medical-transcription-job))
      (common-lisp:list
       (common-lisp:cons "MedicalTranscriptionJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-transcription-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-medical-vocabulary-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-medical-vocabulary-request-"))
   (vocabulary-name (common-lisp:error ":vocabulary-name is required") :type
    (common-lisp:or vocabulary-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-medical-vocabulary-request
                    'make-get-medical-vocabulary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-vocabulary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-vocabulary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-vocabulary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-medical-vocabulary-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-medical-vocabulary-response-"))
   (vocabulary-name common-lisp:nil :type
    (common-lisp:or vocabulary-name common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (vocabulary-state common-lisp:nil :type
    (common-lisp:or vocabulary-state common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (download-uri common-lisp:nil :type (common-lisp:or uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-medical-vocabulary-response
                    'make-get-medical-vocabulary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-vocabulary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-vocabulary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-state))
      (common-lisp:list
       (common-lisp:cons "VocabularyState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'download-uri))
      (common-lisp:list
       (common-lisp:cons "DownloadUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-medical-vocabulary-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-transcription-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-transcription-job-request-"))
   (transcription-job-name
    (common-lisp:error ":transcription-job-name is required") :type
    (common-lisp:or transcription-job-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-transcription-job-request
                    'make-get-transcription-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-transcription-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-transcription-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcription-job-name))
      (common-lisp:list
       (common-lisp:cons "TranscriptionJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-transcription-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-transcription-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-transcription-job-response-"))
   (transcription-job common-lisp:nil :type
    (common-lisp:or transcription-job common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-transcription-job-response
                    'make-get-transcription-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-transcription-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-transcription-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcription-job))
      (common-lisp:list
       (common-lisp:cons "TranscriptionJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-transcription-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-vocabulary-filter-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-vocabulary-filter-request-"))
   (vocabulary-filter-name
    (common-lisp:error ":vocabulary-filter-name is required") :type
    (common-lisp:or vocabulary-filter-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-vocabulary-filter-request
                    'make-get-vocabulary-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-vocabulary-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-vocabulary-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-vocabulary-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-vocabulary-filter-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-vocabulary-filter-response-"))
   (vocabulary-filter-name common-lisp:nil :type
    (common-lisp:or vocabulary-filter-name common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (download-uri common-lisp:nil :type (common-lisp:or uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-vocabulary-filter-response
                    'make-get-vocabulary-filter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-vocabulary-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-vocabulary-filter-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'download-uri))
      (common-lisp:list
       (common-lisp:cons "DownloadUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-vocabulary-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-vocabulary-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-vocabulary-request-"))
   (vocabulary-name (common-lisp:error ":vocabulary-name is required") :type
    (common-lisp:or vocabulary-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-vocabulary-request 'make-get-vocabulary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-vocabulary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-vocabulary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-vocabulary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-vocabulary-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-vocabulary-response-"))
   (vocabulary-name common-lisp:nil :type
    (common-lisp:or vocabulary-name common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (vocabulary-state common-lisp:nil :type
    (common-lisp:or vocabulary-state common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (download-uri common-lisp:nil :type (common-lisp:or uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-vocabulary-response 'make-get-vocabulary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-vocabulary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-vocabulary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-state))
      (common-lisp:list
       (common-lisp:cons "VocabularyState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'download-uri))
      (common-lisp:list
       (common-lisp:cons "DownloadUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-vocabulary-response))
   common-lisp:nil))
(common-lisp:deftype identified-language-score () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defstruct
     (input-data-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-data-config-"))
   (s3uri (common-lisp:error ":s3uri is required") :type
    (common-lisp:or uri common-lisp:null))
   (tuning-data-s3uri common-lisp:nil :type
    (common-lisp:or uri common-lisp:null))
   (data-access-role-arn
    (common-lisp:error ":data-access-role-arn is required") :type
    (common-lisp:or data-access-role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-data-config 'make-input-data-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-data-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-data-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tuning-data-s3uri))
      (common-lisp:list
       (common-lisp:cons "TuningDataS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-data-config))
   common-lisp:nil))
(common-lisp:deftype input-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-failure-exception
     (transcribe-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-failure-exception
                    'internal-failure-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (interruption-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-interruption-filter-"))
   (threshold common-lisp:nil :type
    (common-lisp:or timestamp-milliseconds common-lisp:null))
   (participant-role common-lisp:nil :type
    (common-lisp:or participant-role common-lisp:null))
   (absolute-time-range common-lisp:nil :type
    (common-lisp:or absolute-time-range common-lisp:null))
   (relative-time-range common-lisp:nil :type
    (common-lisp:or relative-time-range common-lisp:null))
   (negate common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'interruption-filter 'make-interruption-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input interruption-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input interruption-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "Threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-role))
      (common-lisp:list
       (common-lisp:cons "ParticipantRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'absolute-time-range))
      (common-lisp:list
       (common-lisp:cons "AbsoluteTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relative-time-range))
      (common-lisp:list
       (common-lisp:cons "RelativeTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'negate))
      (common-lisp:list
       (common-lisp:cons "Negate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input interruption-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (job-execution-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-execution-settings-"))
   (allow-deferred-execution common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (data-access-role-arn common-lisp:nil :type
    (common-lisp:or data-access-role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-execution-settings 'make-job-execution-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-deferred-execution))
      (common-lisp:list
       (common-lisp:cons "AllowDeferredExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          job-execution-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype kmsencryption-context-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-kmsencryption-context-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype kmskey-id () 'common-lisp:string)
(common-lisp:deftype language-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (language-code-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-language-code-item-"))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (duration-in-seconds common-lisp:nil :type
    (common-lisp:or duration-in-seconds common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'language-code-item 'make-language-code-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input language-code-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input language-code-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input language-code-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype language-code-list ()
   '(trivial-types:proper-list language-code-item))
 (common-lisp:defun |make-language-code-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list language-code-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (language-id-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-language-id-settings-"))
   (vocabulary-name common-lisp:nil :type
    (common-lisp:or vocabulary-name common-lisp:null))
   (vocabulary-filter-name common-lisp:nil :type
    (common-lisp:or vocabulary-filter-name common-lisp:null))
   (language-model-name common-lisp:nil :type
    (common-lisp:or model-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'language-id-settings 'make-language-id-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input language-id-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input language-id-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-model-name))
      (common-lisp:list
       (common-lisp:cons "LanguageModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input language-id-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype language-id-settings-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-language-id-settings-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (language-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-language-model-"))
   (model-name common-lisp:nil :type
    (common-lisp:or model-name common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or clmlanguage-code common-lisp:null))
   (base-model-name common-lisp:nil :type
    (common-lisp:or base-model-name common-lisp:null))
   (model-status common-lisp:nil :type
    (common-lisp:or model-status common-lisp:null))
   (upgrade-availability common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (input-data-config common-lisp:nil :type
    (common-lisp:or input-data-config common-lisp:null)))
 (common-lisp:export (common-lisp:list 'language-model 'make-language-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input language-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input language-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-model-name))
      (common-lisp:list
       (common-lisp:cons "BaseModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-status))
      (common-lisp:list
       (common-lisp:cons "ModelStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'upgrade-availability))
      (common-lisp:list
       (common-lisp:cons "UpgradeAvailability"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input language-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype language-options ()
   '(trivial-types:proper-list language-code))
 (common-lisp:defun |make-language-options|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list language-code))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (transcribe-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-call-analytics-categories-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-call-analytics-categories-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-call-analytics-categories-request
                    'make-list-call-analytics-categories-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-call-analytics-categories-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-call-analytics-categories-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-call-analytics-categories-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-call-analytics-categories-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-call-analytics-categories-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (categories common-lisp:nil :type
    (common-lisp:or category-properties-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-call-analytics-categories-response
                    'make-list-call-analytics-categories-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-call-analytics-categories-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-call-analytics-categories-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'categories))
      (common-lisp:list
       (common-lisp:cons "Categories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-call-analytics-categories-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-call-analytics-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-call-analytics-jobs-request-"))
   (status common-lisp:nil :type
    (common-lisp:or call-analytics-job-status common-lisp:null))
   (job-name-contains common-lisp:nil :type
    (common-lisp:or call-analytics-job-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-call-analytics-jobs-request
                    'make-list-call-analytics-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-call-analytics-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-call-analytics-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name-contains))
      (common-lisp:list
       (common-lisp:cons "JobNameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-call-analytics-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-call-analytics-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-call-analytics-jobs-response-"))
   (status common-lisp:nil :type
    (common-lisp:or call-analytics-job-status common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (call-analytics-job-summaries common-lisp:nil :type
    (common-lisp:or call-analytics-job-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-call-analytics-jobs-response
                    'make-list-call-analytics-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-call-analytics-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-call-analytics-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'call-analytics-job-summaries))
      (common-lisp:list
       (common-lisp:cons "CallAnalyticsJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-call-analytics-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-language-models-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-language-models-request-"))
   (status-equals common-lisp:nil :type
    (common-lisp:or model-status common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or model-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-language-models-request
                    'make-list-language-models-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-language-models-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-language-models-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-equals))
      (common-lisp:list
       (common-lisp:cons "StatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-language-models-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-language-models-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-language-models-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (models common-lisp:nil :type (common-lisp:or models common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-language-models-response
                    'make-list-language-models-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-language-models-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-language-models-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'models))
      (common-lisp:list
       (common-lisp:cons "Models"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-language-models-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-medical-transcription-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-medical-transcription-jobs-request-"))
   (status common-lisp:nil :type
    (common-lisp:or transcription-job-status common-lisp:null))
   (job-name-contains common-lisp:nil :type
    (common-lisp:or transcription-job-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-medical-transcription-jobs-request
                    'make-list-medical-transcription-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-transcription-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-transcription-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name-contains))
      (common-lisp:list
       (common-lisp:cons "JobNameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-transcription-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-medical-transcription-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-medical-transcription-jobs-response-"))
   (status common-lisp:nil :type
    (common-lisp:or transcription-job-status common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (medical-transcription-job-summaries common-lisp:nil :type
    (common-lisp:or medical-transcription-job-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-medical-transcription-jobs-response
                    'make-list-medical-transcription-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-transcription-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-transcription-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medical-transcription-job-summaries))
      (common-lisp:list
       (common-lisp:cons "MedicalTranscriptionJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-transcription-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-medical-vocabularies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-medical-vocabularies-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (state-equals common-lisp:nil :type
    (common-lisp:or vocabulary-state common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or vocabulary-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-medical-vocabularies-request
                    'make-list-medical-vocabularies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-vocabularies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-vocabularies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-equals))
      (common-lisp:list
       (common-lisp:cons "StateEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-vocabularies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-medical-vocabularies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-medical-vocabularies-response-"))
   (status common-lisp:nil :type
    (common-lisp:or vocabulary-state common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (vocabularies common-lisp:nil :type
    (common-lisp:or vocabularies common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-medical-vocabularies-response
                    'make-list-medical-vocabularies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-vocabularies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-vocabularies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabularies))
      (common-lisp:list
       (common-lisp:cons "Vocabularies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-medical-vocabularies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or transcribe-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (resource-arn common-lisp:nil :type
    (common-lisp:or transcribe-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-transcription-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-transcription-jobs-request-"))
   (status common-lisp:nil :type
    (common-lisp:or transcription-job-status common-lisp:null))
   (job-name-contains common-lisp:nil :type
    (common-lisp:or transcription-job-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-transcription-jobs-request
                    'make-list-transcription-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-transcription-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-transcription-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name-contains))
      (common-lisp:list
       (common-lisp:cons "JobNameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-transcription-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-transcription-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-transcription-jobs-response-"))
   (status common-lisp:nil :type
    (common-lisp:or transcription-job-status common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (transcription-job-summaries common-lisp:nil :type
    (common-lisp:or transcription-job-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-transcription-jobs-response
                    'make-list-transcription-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-transcription-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-transcription-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcription-job-summaries))
      (common-lisp:list
       (common-lisp:cons "TranscriptionJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-transcription-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-vocabularies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-vocabularies-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (state-equals common-lisp:nil :type
    (common-lisp:or vocabulary-state common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or vocabulary-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-vocabularies-request
                    'make-list-vocabularies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vocabularies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vocabularies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-equals))
      (common-lisp:list
       (common-lisp:cons "StateEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vocabularies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-vocabularies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-vocabularies-response-"))
   (status common-lisp:nil :type
    (common-lisp:or vocabulary-state common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (vocabularies common-lisp:nil :type
    (common-lisp:or vocabularies common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-vocabularies-response
                    'make-list-vocabularies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vocabularies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vocabularies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabularies))
      (common-lisp:list
       (common-lisp:cons "Vocabularies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vocabularies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-vocabulary-filters-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-vocabulary-filters-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or vocabulary-filter-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-vocabulary-filters-request
                    'make-list-vocabulary-filters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vocabulary-filters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vocabulary-filters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vocabulary-filters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-vocabulary-filters-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-vocabulary-filters-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (vocabulary-filters common-lisp:nil :type
    (common-lisp:or vocabulary-filters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-vocabulary-filters-response
                    'make-list-vocabulary-filters-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vocabulary-filters-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vocabulary-filters-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-filters))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vocabulary-filters-response))
   common-lisp:nil))
(common-lisp:deftype max-alternatives () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype max-speakers () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (media (:copier common-lisp:nil) (:conc-name "struct-shape-media-"))
   (media-file-uri common-lisp:nil :type (common-lisp:or uri common-lisp:null))
   (redacted-media-file-uri common-lisp:nil :type
    (common-lisp:or uri common-lisp:null)))
 (common-lisp:export (common-lisp:list 'media 'make-media))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input media))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input media))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-file-uri))
      (common-lisp:list
       (common-lisp:cons "MediaFileUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redacted-media-file-uri))
      (common-lisp:list
       (common-lisp:cons "RedactedMediaFileUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input media))
   common-lisp:nil))
(common-lisp:deftype media-format () 'common-lisp:string)
(common-lisp:deftype media-sample-rate-hertz () 'common-lisp:integer)
(common-lisp:deftype medical-content-identification-type () 'common-lisp:string)
(common-lisp:deftype medical-media-sample-rate-hertz () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (medical-transcript (:copier common-lisp:nil)
      (:conc-name "struct-shape-medical-transcript-"))
   (transcript-file-uri common-lisp:nil :type
    (common-lisp:or uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'medical-transcript 'make-medical-transcript))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input medical-transcript))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input medical-transcript))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript-file-uri))
      (common-lisp:list
       (common-lisp:cons "TranscriptFileUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input medical-transcript))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (medical-transcription-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-medical-transcription-job-"))
   (medical-transcription-job-name common-lisp:nil :type
    (common-lisp:or transcription-job-name common-lisp:null))
   (transcription-job-status common-lisp:nil :type
    (common-lisp:or transcription-job-status common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (media-sample-rate-hertz common-lisp:nil :type
    (common-lisp:or medical-media-sample-rate-hertz common-lisp:null))
   (media-format common-lisp:nil :type
    (common-lisp:or media-format common-lisp:null))
   (media common-lisp:nil :type (common-lisp:or media common-lisp:null))
   (transcript common-lisp:nil :type
    (common-lisp:or medical-transcript common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (completion-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (settings common-lisp:nil :type
    (common-lisp:or medical-transcription-setting common-lisp:null))
   (content-identification-type common-lisp:nil :type
    (common-lisp:or medical-content-identification-type common-lisp:null))
   (specialty common-lisp:nil :type
    (common-lisp:or specialty common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'medical-transcription-job
                    'make-medical-transcription-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcription-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcription-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medical-transcription-job-name))
      (common-lisp:list
       (common-lisp:cons "MedicalTranscriptionJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcription-job-status))
      (common-lisp:list
       (common-lisp:cons "TranscriptionJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-sample-rate-hertz))
      (common-lisp:list
       (common-lisp:cons "MediaSampleRateHertz"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-format))
      (common-lisp:list
       (common-lisp:cons "MediaFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media))
      (common-lisp:list
       (common-lisp:cons "Media"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript))
      (common-lisp:list
       (common-lisp:cons "Transcript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "CompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-identification-type))
      (common-lisp:list
       (common-lisp:cons "ContentIdentificationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'specialty))
      (common-lisp:list
       (common-lisp:cons "Specialty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcription-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype medical-transcription-job-summaries ()
   '(trivial-types:proper-list medical-transcription-job-summary))
 (common-lisp:defun |make-medical-transcription-job-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            medical-transcription-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (medical-transcription-job-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-medical-transcription-job-summary-"))
   (medical-transcription-job-name common-lisp:nil :type
    (common-lisp:or transcription-job-name common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (completion-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (transcription-job-status common-lisp:nil :type
    (common-lisp:or transcription-job-status common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (output-location-type common-lisp:nil :type
    (common-lisp:or output-location-type common-lisp:null))
   (specialty common-lisp:nil :type
    (common-lisp:or specialty common-lisp:null))
   (content-identification-type common-lisp:nil :type
    (common-lisp:or medical-content-identification-type common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'medical-transcription-job-summary
                    'make-medical-transcription-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcription-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcription-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medical-transcription-job-name))
      (common-lisp:list
       (common-lisp:cons "MedicalTranscriptionJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "CompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcription-job-status))
      (common-lisp:list
       (common-lisp:cons "TranscriptionJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-location-type))
      (common-lisp:list
       (common-lisp:cons "OutputLocationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'specialty))
      (common-lisp:list
       (common-lisp:cons "Specialty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-identification-type))
      (common-lisp:list
       (common-lisp:cons "ContentIdentificationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcription-job-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (medical-transcription-setting (:copier common-lisp:nil)
      (:conc-name "struct-shape-medical-transcription-setting-"))
   (show-speaker-labels common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (max-speaker-labels common-lisp:nil :type
    (common-lisp:or max-speakers common-lisp:null))
   (channel-identification common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (show-alternatives common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (max-alternatives common-lisp:nil :type
    (common-lisp:or max-alternatives common-lisp:null))
   (vocabulary-name common-lisp:nil :type
    (common-lisp:or vocabulary-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'medical-transcription-setting
                    'make-medical-transcription-setting))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcription-setting))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcription-setting))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show-speaker-labels))
      (common-lisp:list
       (common-lisp:cons "ShowSpeakerLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-speaker-labels))
      (common-lisp:list
       (common-lisp:cons "MaxSpeakerLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'channel-identification))
      (common-lisp:list
       (common-lisp:cons "ChannelIdentification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show-alternatives))
      (common-lisp:list
       (common-lisp:cons "ShowAlternatives"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-alternatives))
      (common-lisp:list
       (common-lisp:cons "MaxAlternatives"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          medical-transcription-setting))
   common-lisp:nil))
(common-lisp:deftype model-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (model-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-settings-"))
   (language-model-name common-lisp:nil :type
    (common-lisp:or model-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'model-settings 'make-model-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-model-name))
      (common-lisp:list
       (common-lisp:cons "LanguageModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-settings))
   common-lisp:nil))
(common-lisp:deftype model-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype models () '(trivial-types:proper-list language-model))
 (common-lisp:defun |make-models|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list language-model))
   aws-sdk/generator/shape::members))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (non-talk-time-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-non-talk-time-filter-"))
   (threshold common-lisp:nil :type
    (common-lisp:or timestamp-milliseconds common-lisp:null))
   (absolute-time-range common-lisp:nil :type
    (common-lisp:or absolute-time-range common-lisp:null))
   (relative-time-range common-lisp:nil :type
    (common-lisp:or relative-time-range common-lisp:null))
   (negate common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'non-talk-time-filter 'make-non-talk-time-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input non-talk-time-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input non-talk-time-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "Threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'absolute-time-range))
      (common-lisp:list
       (common-lisp:cons "AbsoluteTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relative-time-range))
      (common-lisp:list
       (common-lisp:cons "RelativeTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'negate))
      (common-lisp:list
       (common-lisp:cons "Negate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input non-talk-time-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (transcribe-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:deftype output-bucket-name () 'common-lisp:string)
(common-lisp:deftype output-key () 'common-lisp:string)
(common-lisp:deftype output-location-type () 'common-lisp:string)
(common-lisp:deftype participant-role () 'common-lisp:string)
(common-lisp:deftype percentage () 'common-lisp:integer)
(common-lisp:deftype phrase () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype phrases () '(trivial-types:proper-list phrase))
 (common-lisp:defun |make-phrases|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list phrase))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pii-entity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype pii-entity-types ()
   '(trivial-types:proper-list pii-entity-type))
 (common-lisp:defun |make-pii-entity-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pii-entity-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype redaction-output () 'common-lisp:string)
(common-lisp:deftype redaction-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (relative-time-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-relative-time-range-"))
   (start-percentage common-lisp:nil :type
    (common-lisp:or percentage common-lisp:null))
   (end-percentage common-lisp:nil :type
    (common-lisp:or percentage common-lisp:null))
   (first common-lisp:nil :type (common-lisp:or percentage common-lisp:null))
   (last common-lisp:nil :type (common-lisp:or percentage common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'relative-time-range 'make-relative-time-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input relative-time-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input relative-time-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-percentage))
      (common-lisp:list
       (common-lisp:cons "StartPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-percentage))
      (common-lisp:list
       (common-lisp:cons "EndPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first))
      (common-lisp:list
       (common-lisp:cons "First"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last))
      (common-lisp:list
       (common-lisp:cons "Last"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input relative-time-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rule (:copier common-lisp:nil) (:conc-name "struct-shape-rule-"))
   (non-talk-time-filter common-lisp:nil :type
    (common-lisp:or non-talk-time-filter common-lisp:null))
   (interruption-filter common-lisp:nil :type
    (common-lisp:or interruption-filter common-lisp:null))
   (transcript-filter common-lisp:nil :type
    (common-lisp:or transcript-filter common-lisp:null))
   (sentiment-filter common-lisp:nil :type
    (common-lisp:or sentiment-filter common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rule 'make-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'non-talk-time-filter))
      (common-lisp:list
       (common-lisp:cons "NonTalkTimeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interruption-filter))
      (common-lisp:list
       (common-lisp:cons "InterruptionFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript-filter))
      (common-lisp:list
       (common-lisp:cons "TranscriptFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sentiment-filter))
      (common-lisp:list
       (common-lisp:cons "SentimentFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-list () '(trivial-types:proper-list rule))
 (common-lisp:defun |make-rule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (sentiment-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-sentiment-filter-"))
   (sentiments (common-lisp:error ":sentiments is required") :type
    (common-lisp:or sentiment-value-list common-lisp:null))
   (absolute-time-range common-lisp:nil :type
    (common-lisp:or absolute-time-range common-lisp:null))
   (relative-time-range common-lisp:nil :type
    (common-lisp:or relative-time-range common-lisp:null))
   (participant-role common-lisp:nil :type
    (common-lisp:or participant-role common-lisp:null))
   (negate common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sentiment-filter 'make-sentiment-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sentiment-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sentiment-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sentiments))
      (common-lisp:list
       (common-lisp:cons "Sentiments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'absolute-time-range))
      (common-lisp:list
       (common-lisp:cons "AbsoluteTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relative-time-range))
      (common-lisp:list
       (common-lisp:cons "RelativeTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-role))
      (common-lisp:list
       (common-lisp:cons "ParticipantRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'negate))
      (common-lisp:list
       (common-lisp:cons "Negate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sentiment-filter))
   common-lisp:nil))
(common-lisp:deftype sentiment-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sentiment-value-list ()
   '(trivial-types:proper-list sentiment-value))
 (common-lisp:defun |make-sentiment-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sentiment-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (settings (:copier common-lisp:nil) (:conc-name "struct-shape-settings-"))
   (vocabulary-name common-lisp:nil :type
    (common-lisp:or vocabulary-name common-lisp:null))
   (show-speaker-labels common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (max-speaker-labels common-lisp:nil :type
    (common-lisp:or max-speakers common-lisp:null))
   (channel-identification common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (show-alternatives common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (max-alternatives common-lisp:nil :type
    (common-lisp:or max-alternatives common-lisp:null))
   (vocabulary-filter-name common-lisp:nil :type
    (common-lisp:or vocabulary-filter-name common-lisp:null))
   (vocabulary-filter-method common-lisp:nil :type
    (common-lisp:or vocabulary-filter-method common-lisp:null)))
 (common-lisp:export (common-lisp:list 'settings 'make-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show-speaker-labels))
      (common-lisp:list
       (common-lisp:cons "ShowSpeakerLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-speaker-labels))
      (common-lisp:list
       (common-lisp:cons "MaxSpeakerLabels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'channel-identification))
      (common-lisp:list
       (common-lisp:cons "ChannelIdentification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'show-alternatives))
      (common-lisp:list
       (common-lisp:cons "ShowAlternatives"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-alternatives))
      (common-lisp:list
       (common-lisp:cons "MaxAlternatives"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-method))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input settings))
   common-lisp:nil))
(common-lisp:deftype specialty () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-call-analytics-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-call-analytics-job-request-"))
   (call-analytics-job-name
    (common-lisp:error ":call-analytics-job-name is required") :type
    (common-lisp:or call-analytics-job-name common-lisp:null))
   (media (common-lisp:error ":media is required") :type
    (common-lisp:or media common-lisp:null))
   (output-location common-lisp:nil :type
    (common-lisp:or uri common-lisp:null))
   (output-encryption-kmskey-id common-lisp:nil :type
    (common-lisp:or kmskey-id common-lisp:null))
   (data-access-role-arn common-lisp:nil :type
    (common-lisp:or data-access-role-arn common-lisp:null))
   (settings common-lisp:nil :type
    (common-lisp:or call-analytics-job-settings common-lisp:null))
   (channel-definitions common-lisp:nil :type
    (common-lisp:or channel-definitions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-call-analytics-job-request
                    'make-start-call-analytics-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-call-analytics-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-call-analytics-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'call-analytics-job-name))
      (common-lisp:list
       (common-lisp:cons "CallAnalyticsJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media))
      (common-lisp:list
       (common-lisp:cons "Media"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-location))
      (common-lisp:list
       (common-lisp:cons "OutputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-encryption-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "OutputEncryptionKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "DataAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-definitions))
      (common-lisp:list
       (common-lisp:cons "ChannelDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-call-analytics-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-call-analytics-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-call-analytics-job-response-"))
   (call-analytics-job common-lisp:nil :type
    (common-lisp:or call-analytics-job common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-call-analytics-job-response
                    'make-start-call-analytics-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-call-analytics-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-call-analytics-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'call-analytics-job))
      (common-lisp:list
       (common-lisp:cons "CallAnalyticsJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-call-analytics-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-medical-transcription-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-medical-transcription-job-request-"))
   (medical-transcription-job-name
    (common-lisp:error ":medical-transcription-job-name is required") :type
    (common-lisp:or transcription-job-name common-lisp:null))
   (language-code (common-lisp:error ":language-code is required") :type
    (common-lisp:or language-code common-lisp:null))
   (media-sample-rate-hertz common-lisp:nil :type
    (common-lisp:or medical-media-sample-rate-hertz common-lisp:null))
   (media-format common-lisp:nil :type
    (common-lisp:or media-format common-lisp:null))
   (media (common-lisp:error ":media is required") :type
    (common-lisp:or media common-lisp:null))
   (output-bucket-name (common-lisp:error ":output-bucket-name is required")
    :type (common-lisp:or output-bucket-name common-lisp:null))
   (output-key common-lisp:nil :type
    (common-lisp:or output-key common-lisp:null))
   (output-encryption-kmskey-id common-lisp:nil :type
    (common-lisp:or kmskey-id common-lisp:null))
   (kmsencryption-context common-lisp:nil :type
    (common-lisp:or kmsencryption-context-map common-lisp:null))
   (settings common-lisp:nil :type
    (common-lisp:or medical-transcription-setting common-lisp:null))
   (content-identification-type common-lisp:nil :type
    (common-lisp:or medical-content-identification-type common-lisp:null))
   (specialty (common-lisp:error ":specialty is required") :type
    (common-lisp:or specialty common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-medical-transcription-job-request
                    'make-start-medical-transcription-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-transcription-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-transcription-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medical-transcription-job-name))
      (common-lisp:list
       (common-lisp:cons "MedicalTranscriptionJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-sample-rate-hertz))
      (common-lisp:list
       (common-lisp:cons "MediaSampleRateHertz"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-format))
      (common-lisp:list
       (common-lisp:cons "MediaFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media))
      (common-lisp:list
       (common-lisp:cons "Media"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-bucket-name))
      (common-lisp:list
       (common-lisp:cons "OutputBucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-key))
      (common-lisp:list
       (common-lisp:cons "OutputKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-encryption-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "OutputEncryptionKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kmsencryption-context))
      (common-lisp:list
       (common-lisp:cons "KMSEncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'content-identification-type))
      (common-lisp:list
       (common-lisp:cons "ContentIdentificationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'specialty))
      (common-lisp:list
       (common-lisp:cons "Specialty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-transcription-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-medical-transcription-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-medical-transcription-job-response-"))
   (medical-transcription-job common-lisp:nil :type
    (common-lisp:or medical-transcription-job common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-medical-transcription-job-response
                    'make-start-medical-transcription-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-transcription-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-transcription-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'medical-transcription-job))
      (common-lisp:list
       (common-lisp:cons "MedicalTranscriptionJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-medical-transcription-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-transcription-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-transcription-job-request-"))
   (transcription-job-name
    (common-lisp:error ":transcription-job-name is required") :type
    (common-lisp:or transcription-job-name common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (media-sample-rate-hertz common-lisp:nil :type
    (common-lisp:or media-sample-rate-hertz common-lisp:null))
   (media-format common-lisp:nil :type
    (common-lisp:or media-format common-lisp:null))
   (media (common-lisp:error ":media is required") :type
    (common-lisp:or media common-lisp:null))
   (output-bucket-name common-lisp:nil :type
    (common-lisp:or output-bucket-name common-lisp:null))
   (output-key common-lisp:nil :type
    (common-lisp:or output-key common-lisp:null))
   (output-encryption-kmskey-id common-lisp:nil :type
    (common-lisp:or kmskey-id common-lisp:null))
   (kmsencryption-context common-lisp:nil :type
    (common-lisp:or kmsencryption-context-map common-lisp:null))
   (settings common-lisp:nil :type (common-lisp:or settings common-lisp:null))
   (model-settings common-lisp:nil :type
    (common-lisp:or model-settings common-lisp:null))
   (job-execution-settings common-lisp:nil :type
    (common-lisp:or job-execution-settings common-lisp:null))
   (content-redaction common-lisp:nil :type
    (common-lisp:or content-redaction common-lisp:null))
   (identify-language common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (identify-multiple-languages common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (language-options common-lisp:nil :type
    (common-lisp:or language-options common-lisp:null))
   (subtitles common-lisp:nil :type
    (common-lisp:or subtitles common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (language-id-settings common-lisp:nil :type
    (common-lisp:or language-id-settings-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-transcription-job-request
                    'make-start-transcription-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-transcription-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-transcription-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcription-job-name))
      (common-lisp:list
       (common-lisp:cons "TranscriptionJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-sample-rate-hertz))
      (common-lisp:list
       (common-lisp:cons "MediaSampleRateHertz"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-format))
      (common-lisp:list
       (common-lisp:cons "MediaFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media))
      (common-lisp:list
       (common-lisp:cons "Media"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-bucket-name))
      (common-lisp:list
       (common-lisp:cons "OutputBucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-key))
      (common-lisp:list
       (common-lisp:cons "OutputKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-encryption-kmskey-id))
      (common-lisp:list
       (common-lisp:cons "OutputEncryptionKMSKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kmsencryption-context))
      (common-lisp:list
       (common-lisp:cons "KMSEncryptionContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-settings))
      (common-lisp:list
       (common-lisp:cons "ModelSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-execution-settings))
      (common-lisp:list
       (common-lisp:cons "JobExecutionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-redaction))
      (common-lisp:list
       (common-lisp:cons "ContentRedaction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identify-language))
      (common-lisp:list
       (common-lisp:cons "IdentifyLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identify-multiple-languages))
      (common-lisp:list
       (common-lisp:cons "IdentifyMultipleLanguages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-options))
      (common-lisp:list
       (common-lisp:cons "LanguageOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitles))
      (common-lisp:list
       (common-lisp:cons "Subtitles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'language-id-settings))
      (common-lisp:list
       (common-lisp:cons "LanguageIdSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-transcription-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-transcription-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-transcription-job-response-"))
   (transcription-job common-lisp:nil :type
    (common-lisp:or transcription-job common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-transcription-job-response
                    'make-start-transcription-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-transcription-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-transcription-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcription-job))
      (common-lisp:list
       (common-lisp:cons "TranscriptionJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-transcription-job-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-target-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-string-target-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype subtitle-file-uris () '(trivial-types:proper-list uri))
 (common-lisp:defun |make-subtitle-file-uris|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list uri))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subtitle-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subtitle-formats ()
   '(trivial-types:proper-list subtitle-format))
 (common-lisp:defun |make-subtitle-formats|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subtitle-format))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subtitle-output-start-index () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (subtitles (:copier common-lisp:nil)
      (:conc-name "struct-shape-subtitles-"))
   (formats common-lisp:nil :type
    (common-lisp:or subtitle-formats common-lisp:null))
   (output-start-index common-lisp:nil :type
    (common-lisp:or subtitle-output-start-index common-lisp:null)))
 (common-lisp:export (common-lisp:list 'subtitles 'make-subtitles))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subtitles))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subtitles))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'formats))
      (common-lisp:list
       (common-lisp:cons "Formats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-start-index))
      (common-lisp:list
       (common-lisp:cons "OutputStartIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subtitles))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (subtitles-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-subtitles-output-"))
   (formats common-lisp:nil :type
    (common-lisp:or subtitle-formats common-lisp:null))
   (subtitle-file-uris common-lisp:nil :type
    (common-lisp:or subtitle-file-uris common-lisp:null))
   (output-start-index common-lisp:nil :type
    (common-lisp:or subtitle-output-start-index common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subtitles-output 'make-subtitles-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subtitles-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subtitles-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'formats))
      (common-lisp:list
       (common-lisp:cons "Formats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle-file-uris))
      (common-lisp:list
       (common-lisp:cons "SubtitleFileUris"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-start-index))
      (common-lisp:list
       (common-lisp:cons "OutputStartIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subtitles-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or transcribe-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype timestamp-milliseconds () 'common-lisp:integer)
(common-lisp:deftype transcribe-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (transcript (:copier common-lisp:nil)
      (:conc-name "struct-shape-transcript-"))
   (transcript-file-uri common-lisp:nil :type
    (common-lisp:or uri common-lisp:null))
   (redacted-transcript-file-uri common-lisp:nil :type
    (common-lisp:or uri common-lisp:null)))
 (common-lisp:export (common-lisp:list 'transcript 'make-transcript))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transcript))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transcript))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript-file-uri))
      (common-lisp:list
       (common-lisp:cons "TranscriptFileUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redacted-transcript-file-uri))
      (common-lisp:list
       (common-lisp:cons "RedactedTranscriptFileUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transcript))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (transcript-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-transcript-filter-"))
   (transcript-filter-type
    (common-lisp:error ":transcript-filter-type is required") :type
    (common-lisp:or transcript-filter-type common-lisp:null))
   (absolute-time-range common-lisp:nil :type
    (common-lisp:or absolute-time-range common-lisp:null))
   (relative-time-range common-lisp:nil :type
    (common-lisp:or relative-time-range common-lisp:null))
   (participant-role common-lisp:nil :type
    (common-lisp:or participant-role common-lisp:null))
   (negate common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (targets (common-lisp:error ":targets is required") :type
    (common-lisp:or string-target-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transcript-filter 'make-transcript-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transcript-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transcript-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcript-filter-type))
      (common-lisp:list
       (common-lisp:cons "TranscriptFilterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'absolute-time-range))
      (common-lisp:list
       (common-lisp:cons "AbsoluteTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relative-time-range))
      (common-lisp:list
       (common-lisp:cons "RelativeTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'participant-role))
      (common-lisp:list
       (common-lisp:cons "ParticipantRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'negate))
      (common-lisp:list
       (common-lisp:cons "Negate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targets))
      (common-lisp:list
       (common-lisp:cons "Targets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transcript-filter))
   common-lisp:nil))
(common-lisp:deftype transcript-filter-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (transcription-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-transcription-job-"))
   (transcription-job-name common-lisp:nil :type
    (common-lisp:or transcription-job-name common-lisp:null))
   (transcription-job-status common-lisp:nil :type
    (common-lisp:or transcription-job-status common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (media-sample-rate-hertz common-lisp:nil :type
    (common-lisp:or media-sample-rate-hertz common-lisp:null))
   (media-format common-lisp:nil :type
    (common-lisp:or media-format common-lisp:null))
   (media common-lisp:nil :type (common-lisp:or media common-lisp:null))
   (transcript common-lisp:nil :type
    (common-lisp:or transcript common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (completion-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (settings common-lisp:nil :type (common-lisp:or settings common-lisp:null))
   (model-settings common-lisp:nil :type
    (common-lisp:or model-settings common-lisp:null))
   (job-execution-settings common-lisp:nil :type
    (common-lisp:or job-execution-settings common-lisp:null))
   (content-redaction common-lisp:nil :type
    (common-lisp:or content-redaction common-lisp:null))
   (identify-language common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (identify-multiple-languages common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (language-options common-lisp:nil :type
    (common-lisp:or language-options common-lisp:null))
   (identified-language-score common-lisp:nil :type
    (common-lisp:or identified-language-score common-lisp:null))
   (language-codes common-lisp:nil :type
    (common-lisp:or language-code-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (subtitles common-lisp:nil :type
    (common-lisp:or subtitles-output common-lisp:null))
   (language-id-settings common-lisp:nil :type
    (common-lisp:or language-id-settings-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transcription-job 'make-transcription-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transcription-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transcription-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcription-job-name))
      (common-lisp:list
       (common-lisp:cons "TranscriptionJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcription-job-status))
      (common-lisp:list
       (common-lisp:cons "TranscriptionJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-sample-rate-hertz))
      (common-lisp:list
       (common-lisp:cons "MediaSampleRateHertz"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-format))
      (common-lisp:list
       (common-lisp:cons "MediaFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media))
      (common-lisp:list
       (common-lisp:cons "Media"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript))
      (common-lisp:list
       (common-lisp:cons "Transcript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "CompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-settings))
      (common-lisp:list
       (common-lisp:cons "ModelSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-execution-settings))
      (common-lisp:list
       (common-lisp:cons "JobExecutionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-redaction))
      (common-lisp:list
       (common-lisp:cons "ContentRedaction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identify-language))
      (common-lisp:list
       (common-lisp:cons "IdentifyLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identify-multiple-languages))
      (common-lisp:list
       (common-lisp:cons "IdentifyMultipleLanguages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-options))
      (common-lisp:list
       (common-lisp:cons "LanguageOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identified-language-score))
      (common-lisp:list
       (common-lisp:cons "IdentifiedLanguageScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-codes))
      (common-lisp:list
       (common-lisp:cons "LanguageCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitles))
      (common-lisp:list
       (common-lisp:cons "Subtitles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'language-id-settings))
      (common-lisp:list
       (common-lisp:cons "LanguageIdSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transcription-job))
   common-lisp:nil))
(common-lisp:deftype transcription-job-name () 'common-lisp:string)
(common-lisp:deftype transcription-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype transcription-job-summaries ()
   '(trivial-types:proper-list transcription-job-summary))
 (common-lisp:defun |make-transcription-job-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            transcription-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (transcription-job-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-transcription-job-summary-"))
   (transcription-job-name common-lisp:nil :type
    (common-lisp:or transcription-job-name common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (completion-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (transcription-job-status common-lisp:nil :type
    (common-lisp:or transcription-job-status common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (output-location-type common-lisp:nil :type
    (common-lisp:or output-location-type common-lisp:null))
   (content-redaction common-lisp:nil :type
    (common-lisp:or content-redaction common-lisp:null))
   (model-settings common-lisp:nil :type
    (common-lisp:or model-settings common-lisp:null))
   (identify-language common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (identify-multiple-languages common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (identified-language-score common-lisp:nil :type
    (common-lisp:or identified-language-score common-lisp:null))
   (language-codes common-lisp:nil :type
    (common-lisp:or language-code-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transcription-job-summary
                    'make-transcription-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transcription-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transcription-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcription-job-name))
      (common-lisp:list
       (common-lisp:cons "TranscriptionJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "CompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transcription-job-status))
      (common-lisp:list
       (common-lisp:cons "TranscriptionJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-location-type))
      (common-lisp:list
       (common-lisp:cons "OutputLocationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-redaction))
      (common-lisp:list
       (common-lisp:cons "ContentRedaction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-settings))
      (common-lisp:list
       (common-lisp:cons "ModelSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identify-language))
      (common-lisp:list
       (common-lisp:cons "IdentifyLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identify-multiple-languages))
      (common-lisp:list
       (common-lisp:cons "IdentifyMultipleLanguages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identified-language-score))
      (common-lisp:list
       (common-lisp:cons "IdentifiedLanguageScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-codes))
      (common-lisp:list
       (common-lisp:cons "LanguageCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transcription-job-summary))
   common-lisp:nil))
(common-lisp:deftype type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or transcribe-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-call-analytics-category-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-call-analytics-category-request-"))
   (category-name (common-lisp:error ":category-name is required") :type
    (common-lisp:or category-name common-lisp:null))
   (rules (common-lisp:error ":rules is required") :type
    (common-lisp:or rule-list common-lisp:null))
   (input-type common-lisp:nil :type
    (common-lisp:or input-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-call-analytics-category-request
                    'make-update-call-analytics-category-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-call-analytics-category-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-call-analytics-category-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-name))
      (common-lisp:list
       (common-lisp:cons "CategoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-type))
      (common-lisp:list
       (common-lisp:cons "InputType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-call-analytics-category-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-call-analytics-category-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-call-analytics-category-response-"))
   (category-properties common-lisp:nil :type
    (common-lisp:or category-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-call-analytics-category-response
                    'make-update-call-analytics-category-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-call-analytics-category-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-call-analytics-category-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-properties))
      (common-lisp:list
       (common-lisp:cons "CategoryProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-call-analytics-category-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-medical-vocabulary-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-medical-vocabulary-request-"))
   (vocabulary-name (common-lisp:error ":vocabulary-name is required") :type
    (common-lisp:or vocabulary-name common-lisp:null))
   (language-code (common-lisp:error ":language-code is required") :type
    (common-lisp:or language-code common-lisp:null))
   (vocabulary-file-uri (common-lisp:error ":vocabulary-file-uri is required")
    :type (common-lisp:or uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-medical-vocabulary-request
                    'make-update-medical-vocabulary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-medical-vocabulary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-medical-vocabulary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-file-uri))
      (common-lisp:list
       (common-lisp:cons "VocabularyFileUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-medical-vocabulary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-medical-vocabulary-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-medical-vocabulary-response-"))
   (vocabulary-name common-lisp:nil :type
    (common-lisp:or vocabulary-name common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (vocabulary-state common-lisp:nil :type
    (common-lisp:or vocabulary-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-medical-vocabulary-response
                    'make-update-medical-vocabulary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-medical-vocabulary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-medical-vocabulary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-state))
      (common-lisp:list
       (common-lisp:cons "VocabularyState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-medical-vocabulary-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-vocabulary-filter-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-vocabulary-filter-request-"))
   (vocabulary-filter-name
    (common-lisp:error ":vocabulary-filter-name is required") :type
    (common-lisp:or vocabulary-filter-name common-lisp:null))
   (words common-lisp:nil :type (common-lisp:or words common-lisp:null))
   (vocabulary-filter-file-uri common-lisp:nil :type
    (common-lisp:or uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-vocabulary-filter-request
                    'make-update-vocabulary-filter-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vocabulary-filter-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vocabulary-filter-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'words))
      (common-lisp:list
       (common-lisp:cons "Words"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-file-uri))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterFileUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vocabulary-filter-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-vocabulary-filter-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-vocabulary-filter-response-"))
   (vocabulary-filter-name common-lisp:nil :type
    (common-lisp:or vocabulary-filter-name common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-vocabulary-filter-response
                    'make-update-vocabulary-filter-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vocabulary-filter-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vocabulary-filter-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vocabulary-filter-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-vocabulary-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-vocabulary-request-"))
   (vocabulary-name (common-lisp:error ":vocabulary-name is required") :type
    (common-lisp:or vocabulary-name common-lisp:null))
   (language-code (common-lisp:error ":language-code is required") :type
    (common-lisp:or language-code common-lisp:null))
   (phrases common-lisp:nil :type (common-lisp:or phrases common-lisp:null))
   (vocabulary-file-uri common-lisp:nil :type
    (common-lisp:or uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-vocabulary-request
                    'make-update-vocabulary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vocabulary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vocabulary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phrases))
      (common-lisp:list
       (common-lisp:cons "Phrases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-file-uri))
      (common-lisp:list
       (common-lisp:cons "VocabularyFileUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vocabulary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-vocabulary-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-vocabulary-response-"))
   (vocabulary-name common-lisp:nil :type
    (common-lisp:or vocabulary-name common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (vocabulary-state common-lisp:nil :type
    (common-lisp:or vocabulary-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-vocabulary-response
                    'make-update-vocabulary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vocabulary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vocabulary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-state))
      (common-lisp:list
       (common-lisp:cons "VocabularyState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vocabulary-response))
   common-lisp:nil))
(common-lisp:deftype uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vocabularies ()
   '(trivial-types:proper-list vocabulary-info))
 (common-lisp:defun |make-vocabularies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vocabulary-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (vocabulary-filter-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-vocabulary-filter-info-"))
   (vocabulary-filter-name common-lisp:nil :type
    (common-lisp:or vocabulary-filter-name common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vocabulary-filter-info 'make-vocabulary-filter-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vocabulary-filter-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vocabulary-filter-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vocabulary-filter-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyFilterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vocabulary-filter-info))
   common-lisp:nil))
(common-lisp:deftype vocabulary-filter-method () 'common-lisp:string)
(common-lisp:deftype vocabulary-filter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vocabulary-filters ()
   '(trivial-types:proper-list vocabulary-filter-info))
 (common-lisp:defun |make-vocabulary-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vocabulary-filter-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (vocabulary-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-vocabulary-info-"))
   (vocabulary-name common-lisp:nil :type
    (common-lisp:or vocabulary-name common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or date-time common-lisp:null))
   (vocabulary-state common-lisp:nil :type
    (common-lisp:or vocabulary-state common-lisp:null)))
 (common-lisp:export (common-lisp:list 'vocabulary-info 'make-vocabulary-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vocabulary-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vocabulary-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-name))
      (common-lisp:list
       (common-lisp:cons "VocabularyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vocabulary-state))
      (common-lisp:list
       (common-lisp:cons "VocabularyState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vocabulary-info))
   common-lisp:nil))
(common-lisp:deftype vocabulary-name () 'common-lisp:string)
(common-lisp:deftype vocabulary-state () 'common-lisp:string)
(common-lisp:deftype word () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype words () '(trivial-types:proper-list word))
 (common-lisp:defun |make-words|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list word))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun create-call-analytics-category
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key category-name rules input-type)
   (common-lisp:declare (common-lisp:ignorable category-name rules input-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-call-analytics-category-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCallAnalyticsCategory"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-call-analytics-category))
(common-lisp:progn
 (common-lisp:defun create-language-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key language-code base-model-name model-name
                     input-data-config tags)
   (common-lisp:declare
    (common-lisp:ignorable language-code base-model-name model-name
     input-data-config tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-language-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateLanguageModel"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-language-model))
(common-lisp:progn
 (common-lisp:defun create-medical-vocabulary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vocabulary-name language-code
                     vocabulary-file-uri tags)
   (common-lisp:declare
    (common-lisp:ignorable vocabulary-name language-code vocabulary-file-uri
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-medical-vocabulary-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateMedicalVocabulary"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-medical-vocabulary))
(common-lisp:progn
 (common-lisp:defun create-vocabulary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vocabulary-name language-code phrases
                     vocabulary-file-uri tags)
   (common-lisp:declare
    (common-lisp:ignorable vocabulary-name language-code phrases
     vocabulary-file-uri tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-vocabulary-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateVocabulary"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-vocabulary))
(common-lisp:progn
 (common-lisp:defun create-vocabulary-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vocabulary-filter-name language-code
                     words vocabulary-filter-file-uri tags)
   (common-lisp:declare
    (common-lisp:ignorable vocabulary-filter-name language-code words
     vocabulary-filter-file-uri tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-vocabulary-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateVocabularyFilter"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-vocabulary-filter))
(common-lisp:progn
 (common-lisp:defun delete-call-analytics-category
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key category-name)
   (common-lisp:declare (common-lisp:ignorable category-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-call-analytics-category-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCallAnalyticsCategory"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-call-analytics-category))
(common-lisp:progn
 (common-lisp:defun delete-call-analytics-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key call-analytics-job-name)
   (common-lisp:declare (common-lisp:ignorable call-analytics-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-call-analytics-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCallAnalyticsJob"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-call-analytics-job))
(common-lisp:progn
 (common-lisp:defun delete-language-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-name)
   (common-lisp:declare (common-lisp:ignorable model-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-language-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteLanguageModel"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-language-model))
(common-lisp:progn
 (common-lisp:defun delete-medical-transcription-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key medical-transcription-job-name)
   (common-lisp:declare (common-lisp:ignorable medical-transcription-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-medical-transcription-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteMedicalTranscriptionJob"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-medical-transcription-job))
(common-lisp:progn
 (common-lisp:defun delete-medical-vocabulary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vocabulary-name)
   (common-lisp:declare (common-lisp:ignorable vocabulary-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-medical-vocabulary-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteMedicalVocabulary"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-medical-vocabulary))
(common-lisp:progn
 (common-lisp:defun delete-transcription-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transcription-job-name)
   (common-lisp:declare (common-lisp:ignorable transcription-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-transcription-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteTranscriptionJob"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-transcription-job))
(common-lisp:progn
 (common-lisp:defun delete-vocabulary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vocabulary-name)
   (common-lisp:declare (common-lisp:ignorable vocabulary-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-vocabulary-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteVocabulary"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-vocabulary))
(common-lisp:progn
 (common-lisp:defun delete-vocabulary-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vocabulary-filter-name)
   (common-lisp:declare (common-lisp:ignorable vocabulary-filter-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-vocabulary-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteVocabularyFilter"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-vocabulary-filter))
(common-lisp:progn
 (common-lisp:defun describe-language-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-name)
   (common-lisp:declare (common-lisp:ignorable model-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-language-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeLanguageModel"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-language-model))
(common-lisp:progn
 (common-lisp:defun get-call-analytics-category
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key category-name)
   (common-lisp:declare (common-lisp:ignorable category-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-call-analytics-category-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCallAnalyticsCategory"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-call-analytics-category))
(common-lisp:progn
 (common-lisp:defun get-call-analytics-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key call-analytics-job-name)
   (common-lisp:declare (common-lisp:ignorable call-analytics-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-call-analytics-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCallAnalyticsJob"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-call-analytics-job))
(common-lisp:progn
 (common-lisp:defun get-medical-transcription-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key medical-transcription-job-name)
   (common-lisp:declare (common-lisp:ignorable medical-transcription-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-medical-transcription-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetMedicalTranscriptionJob"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-medical-transcription-job))
(common-lisp:progn
 (common-lisp:defun get-medical-vocabulary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vocabulary-name)
   (common-lisp:declare (common-lisp:ignorable vocabulary-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-medical-vocabulary-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetMedicalVocabulary"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-medical-vocabulary))
(common-lisp:progn
 (common-lisp:defun get-transcription-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transcription-job-name)
   (common-lisp:declare (common-lisp:ignorable transcription-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-transcription-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTranscriptionJob"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-transcription-job))
(common-lisp:progn
 (common-lisp:defun get-vocabulary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vocabulary-name)
   (common-lisp:declare (common-lisp:ignorable vocabulary-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-vocabulary-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetVocabulary"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-vocabulary))
(common-lisp:progn
 (common-lisp:defun get-vocabulary-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vocabulary-filter-name)
   (common-lisp:declare (common-lisp:ignorable vocabulary-filter-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-vocabulary-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetVocabularyFilter"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-vocabulary-filter))
(common-lisp:progn
 (common-lisp:defun list-call-analytics-categories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-call-analytics-categories-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCallAnalyticsCategories"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-call-analytics-categories))
(common-lisp:progn
 (common-lisp:defun list-call-analytics-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key status job-name-contains next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable status job-name-contains next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-call-analytics-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCallAnalyticsJobs"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-call-analytics-jobs))
(common-lisp:progn
 (common-lisp:defun list-language-models
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key status-equals name-contains next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable status-equals name-contains next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-language-models-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListLanguageModels"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-language-models))
(common-lisp:progn
 (common-lisp:defun list-medical-transcription-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key status job-name-contains next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable status job-name-contains next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-medical-transcription-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMedicalTranscriptionJobs"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-medical-transcription-jobs))
(common-lisp:progn
 (common-lisp:defun list-medical-vocabularies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results state-equals
                     name-contains)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results state-equals name-contains))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-medical-vocabularies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMedicalVocabularies"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-medical-vocabularies))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-transcription-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key status job-name-contains next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable status job-name-contains next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-transcription-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTranscriptionJobs"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-transcription-jobs))
(common-lisp:progn
 (common-lisp:defun list-vocabularies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results state-equals
                     name-contains)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results state-equals name-contains))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-vocabularies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListVocabularies"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-vocabularies))
(common-lisp:progn
 (common-lisp:defun list-vocabulary-filters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results name-contains)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results name-contains))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-vocabulary-filters-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListVocabularyFilters"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-vocabulary-filters))
(common-lisp:progn
 (common-lisp:defun start-call-analytics-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key call-analytics-job-name media
                     output-location output-encryption-kmskey-id
                     data-access-role-arn settings channel-definitions)
   (common-lisp:declare
    (common-lisp:ignorable call-analytics-job-name media output-location
     output-encryption-kmskey-id data-access-role-arn settings
     channel-definitions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-call-analytics-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartCallAnalyticsJob"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-call-analytics-job))
(common-lisp:progn
 (common-lisp:defun start-medical-transcription-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key medical-transcription-job-name
                     language-code media-sample-rate-hertz media-format media
                     output-bucket-name output-key output-encryption-kmskey-id
                     kmsencryption-context settings content-identification-type
                     specialty type tags)
   (common-lisp:declare
    (common-lisp:ignorable medical-transcription-job-name language-code
     media-sample-rate-hertz media-format media output-bucket-name output-key
     output-encryption-kmskey-id kmsencryption-context settings
     content-identification-type specialty type tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-medical-transcription-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartMedicalTranscriptionJob"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-medical-transcription-job))
(common-lisp:progn
 (common-lisp:defun start-transcription-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transcription-job-name language-code
                     media-sample-rate-hertz media-format media
                     output-bucket-name output-key output-encryption-kmskey-id
                     kmsencryption-context settings model-settings
                     job-execution-settings content-redaction identify-language
                     identify-multiple-languages language-options subtitles
                     tags language-id-settings)
   (common-lisp:declare
    (common-lisp:ignorable transcription-job-name language-code
     media-sample-rate-hertz media-format media output-bucket-name output-key
     output-encryption-kmskey-id kmsencryption-context settings model-settings
     job-execution-settings content-redaction identify-language
     identify-multiple-languages language-options subtitles tags
     language-id-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-transcription-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartTranscriptionJob"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-transcription-job))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-call-analytics-category
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key category-name rules input-type)
   (common-lisp:declare (common-lisp:ignorable category-name rules input-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-call-analytics-category-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateCallAnalyticsCategory"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-call-analytics-category))
(common-lisp:progn
 (common-lisp:defun update-medical-vocabulary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vocabulary-name language-code
                     vocabulary-file-uri)
   (common-lisp:declare
    (common-lisp:ignorable vocabulary-name language-code vocabulary-file-uri))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-medical-vocabulary-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateMedicalVocabulary"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-medical-vocabulary))
(common-lisp:progn
 (common-lisp:defun update-vocabulary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vocabulary-name language-code phrases
                     vocabulary-file-uri)
   (common-lisp:declare
    (common-lisp:ignorable vocabulary-name language-code phrases
     vocabulary-file-uri))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-vocabulary-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateVocabulary"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-vocabulary))
(common-lisp:progn
 (common-lisp:defun update-vocabulary-filter
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vocabulary-filter-name words
                     vocabulary-filter-file-uri)
   (common-lisp:declare
    (common-lisp:ignorable vocabulary-filter-name words
     vocabulary-filter-file-uri))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-vocabulary-filter-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transcribe-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateVocabularyFilter"
                                                        "2017-10-26"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-vocabulary-filter))
