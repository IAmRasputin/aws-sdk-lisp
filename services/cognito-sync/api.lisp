;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/cognito-sync/api
  (:use)
  (:nicknames #:aws/cognito-sync)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/cognito-sync/api)
(common-lisp:progn
 (common-lisp:defclass cognito-sync-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "cognito-sync" :protocol
                        :rest-json))
 (common-lisp:export 'cognito-sync-request))
(common-lisp:progn
 (common-lisp:define-condition cognito-sync-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'cognito-sync-error))
(common-lisp:defvar *error-map*
  '(("AlreadyStreamedException" . already-streamed-exception)
    ("ConcurrentModificationException" . concurrent-modification-exception)
    ("DuplicateRequestException" . duplicate-request-exception)
    ("InternalErrorException" . internal-error-exception)
    ("InvalidConfigurationException" . invalid-configuration-exception)
    ("InvalidLambdaFunctionOutputException"
     . invalid-lambda-function-output-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("LambdaThrottledException" . lambda-throttled-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("NotAuthorizedException" . not-authorized-exception)
    ("ResourceConflictException" . resource-conflict-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("TooManyRequestsException" . too-many-requests-exception)))
(common-lisp:progn
 (common-lisp:define-condition already-streamed-exception
     (cognito-sync-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       already-streamed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'already-streamed-exception
                    'already-streamed-exception-message)))
(common-lisp:deftype application-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype application-arn-list ()
   '(trivial-types:proper-list application-arn))
 (common-lisp:defun |make-application-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype assume-role-arn () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass bulk-publish-request common-lisp:nil
                       ((identity-pool-id :initarg :identity-pool-id :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor %bulk-publish-request-identity-pool-id
                         :initform
                         (common-lisp:error ":identity-pool-id is required"))))
 (common-lisp:export
  (common-lisp:list 'bulk-publish-request 'make-bulk-publish-request))
 (common-lisp:defun make-bulk-publish-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identity-pool-id)
   (common-lisp:apply #'common-lisp:make-instance 'bulk-publish-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bulk-publish-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bulk-publish-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bulk-publish-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass bulk-publish-response common-lisp:nil
                       ((identity-pool-id :initarg :identity-pool-id :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor %bulk-publish-response-identity-pool-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'bulk-publish-response 'make-bulk-publish-response))
 (common-lisp:defun make-bulk-publish-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identity-pool-id)
   (common-lisp:apply #'common-lisp:make-instance 'bulk-publish-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bulk-publish-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bulk-publish-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bulk-publish-response))
   common-lisp:nil))
(common-lisp:deftype bulk-publish-status () 'common-lisp:string)
(common-lisp:deftype client-context () 'common-lisp:string)
(common-lisp:deftype cognito-event-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cognito-streams common-lisp:nil
                       ((streaming-status :initarg :streaming-status :type
                         (common-lisp:or streaming-status common-lisp:null)
                         :accessor %cognito-streams-streaming-status :initform
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or assume-role-arn common-lisp:null)
                         :accessor %cognito-streams-role-arn :initform
                         common-lisp:nil)
                        (stream-name :initarg :stream-name :type
                         (common-lisp:or stream-name common-lisp:null)
                         :accessor %cognito-streams-stream-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'cognito-streams 'make-cognito-streams))
 (common-lisp:defun make-cognito-streams
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key streaming-status role-arn stream-name)
   (common-lisp:apply #'common-lisp:make-instance 'cognito-streams
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cognito-streams))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cognito-streams))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streaming-status))
      (common-lisp:list
       (common-lisp:cons "StreamingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cognito-streams))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (cognito-sync-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:progn
 (common-lisp:defclass dataset common-lisp:nil
                       ((num-records :initarg :num-records :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %dataset-num-records :initform common-lisp:nil)
                        (data-storage :initarg :data-storage :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %dataset-data-storage :initform common-lisp:nil)
                        (last-modified-by :initarg :last-modified-by :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dataset-last-modified-by :initform common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %dataset-last-modified-date :initform common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %dataset-creation-date :initform common-lisp:nil)
                        (dataset-name :initarg :dataset-name :type
                         (common-lisp:or dataset-name common-lisp:null)
                         :accessor %dataset-dataset-name :initform
                         common-lisp:nil)
                        (identity-id :initarg :identity-id :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor %dataset-identity-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'dataset 'make-dataset))
 (common-lisp:defun make-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key num-records data-storage last-modified-by
                     last-modified-date creation-date dataset-name identity-id)
   (common-lisp:apply #'common-lisp:make-instance 'dataset
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-id))
      (common-lisp:list
       (common-lisp:cons "IdentityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-name))
      (common-lisp:list
       (common-lisp:cons "DatasetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-storage))
      (common-lisp:list
       (common-lisp:cons "DataStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-records))
      (common-lisp:list
       (common-lisp:cons "NumRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dataset-list () '(trivial-types:proper-list dataset))
 (common-lisp:defun |make-dataset-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dataset))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dataset-name () 'common-lisp:string)
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-dataset-request common-lisp:nil
                       ((dataset-name :initarg :dataset-name :type
                         (common-lisp:or dataset-name common-lisp:null)
                         :accessor %delete-dataset-request-dataset-name
                         :initform
                         (common-lisp:error ":dataset-name is required"))
                        (identity-id :initarg :identity-id :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor %delete-dataset-request-identity-id
                         :initform
                         (common-lisp:error ":identity-id is required"))
                        (identity-pool-id :initarg :identity-pool-id :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor %delete-dataset-request-identity-pool-id
                         :initform
                         (common-lisp:error ":identity-pool-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-dataset-request 'make-delete-dataset-request))
 (common-lisp:defun make-delete-dataset-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dataset-name identity-id
                     identity-pool-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dataset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-dataset-response common-lisp:nil
                       ((dataset :initarg :dataset :type
                         (common-lisp:or dataset common-lisp:null) :accessor
                         %delete-dataset-response-dataset :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-dataset-response 'make-delete-dataset-response))
 (common-lisp:defun make-delete-dataset-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dataset)
   (common-lisp:apply #'common-lisp:make-instance 'delete-dataset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset))
      (common-lisp:list
       (common-lisp:cons "Dataset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dataset-request common-lisp:nil
                       ((dataset-name :initarg :dataset-name :type
                         (common-lisp:or dataset-name common-lisp:null)
                         :accessor %describe-dataset-request-dataset-name
                         :initform
                         (common-lisp:error ":dataset-name is required"))
                        (identity-id :initarg :identity-id :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor %describe-dataset-request-identity-id
                         :initform
                         (common-lisp:error ":identity-id is required"))
                        (identity-pool-id :initarg :identity-pool-id :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor %describe-dataset-request-identity-pool-id
                         :initform
                         (common-lisp:error ":identity-pool-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-dataset-request 'make-describe-dataset-request))
 (common-lisp:defun make-describe-dataset-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dataset-name identity-id
                     identity-pool-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dataset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dataset-response common-lisp:nil
                       ((dataset :initarg :dataset :type
                         (common-lisp:or dataset common-lisp:null) :accessor
                         %describe-dataset-response-dataset :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-dataset-response
                    'make-describe-dataset-response))
 (common-lisp:defun make-describe-dataset-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dataset)
   (common-lisp:apply #'common-lisp:make-instance 'describe-dataset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset))
      (common-lisp:list
       (common-lisp:cons "Dataset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-identity-pool-usage-request common-lisp:nil
                       ((identity-pool-id :initarg :identity-pool-id :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         %describe-identity-pool-usage-request-identity-pool-id
                         :initform
                         (common-lisp:error ":identity-pool-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-identity-pool-usage-request
                    'make-describe-identity-pool-usage-request))
 (common-lisp:defun make-describe-identity-pool-usage-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identity-pool-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-identity-pool-usage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-pool-usage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-pool-usage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-pool-usage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-identity-pool-usage-response common-lisp:nil
                       ((identity-pool-usage :initarg :identity-pool-usage
                         :type
                         (common-lisp:or identity-pool-usage common-lisp:null)
                         :accessor
                         %describe-identity-pool-usage-response-identity-pool-usage
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-identity-pool-usage-response
                    'make-describe-identity-pool-usage-response))
 (common-lisp:defun make-describe-identity-pool-usage-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identity-pool-usage)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-identity-pool-usage-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-pool-usage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-pool-usage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-usage))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolUsage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-pool-usage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-identity-usage-request common-lisp:nil
                       ((identity-id :initarg :identity-id :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor %describe-identity-usage-request-identity-id
                         :initform
                         (common-lisp:error ":identity-id is required"))
                        (identity-pool-id :initarg :identity-pool-id :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         %describe-identity-usage-request-identity-pool-id
                         :initform
                         (common-lisp:error ":identity-pool-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-identity-usage-request
                    'make-describe-identity-usage-request))
 (common-lisp:defun make-describe-identity-usage-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identity-id identity-pool-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-identity-usage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-usage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-usage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-usage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-identity-usage-response common-lisp:nil
                       ((identity-usage :initarg :identity-usage :type
                         (common-lisp:or identity-usage common-lisp:null)
                         :accessor
                         %describe-identity-usage-response-identity-usage
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-identity-usage-response
                    'make-describe-identity-usage-response))
 (common-lisp:defun make-describe-identity-usage-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identity-usage)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-identity-usage-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-usage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-usage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-usage))
      (common-lisp:list
       (common-lisp:cons "IdentityUsage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-identity-usage-response))
   common-lisp:nil))
(common-lisp:deftype device-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition duplicate-request-exception
     (cognito-sync-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       duplicate-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'duplicate-request-exception
                    'duplicate-request-exception-message)))
(common-lisp:progn
 (common-lisp:deftype events () 'common-lisp:hash-table)
 (common-lisp:defun |make-events| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-bulk-publish-details-request common-lisp:nil
                       ((identity-pool-id :initarg :identity-pool-id :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         %get-bulk-publish-details-request-identity-pool-id
                         :initform
                         (common-lisp:error ":identity-pool-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-bulk-publish-details-request
                    'make-get-bulk-publish-details-request))
 (common-lisp:defun make-get-bulk-publish-details-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identity-pool-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bulk-publish-details-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bulk-publish-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bulk-publish-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bulk-publish-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-bulk-publish-details-response common-lisp:nil
                       ((failure-message :initarg :failure-message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-bulk-publish-details-response-failure-message
                         :initform common-lisp:nil)
                        (bulk-publish-status :initarg :bulk-publish-status
                         :type
                         (common-lisp:or bulk-publish-status common-lisp:null)
                         :accessor
                         %get-bulk-publish-details-response-bulk-publish-status
                         :initform common-lisp:nil)
                        (bulk-publish-complete-time :initarg
                         :bulk-publish-complete-time :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %get-bulk-publish-details-response-bulk-publish-complete-time
                         :initform common-lisp:nil)
                        (bulk-publish-start-time :initarg
                         :bulk-publish-start-time :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %get-bulk-publish-details-response-bulk-publish-start-time
                         :initform common-lisp:nil)
                        (identity-pool-id :initarg :identity-pool-id :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         %get-bulk-publish-details-response-identity-pool-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-bulk-publish-details-response
                    'make-get-bulk-publish-details-response))
 (common-lisp:defun make-get-bulk-publish-details-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failure-message bulk-publish-status
                     bulk-publish-complete-time bulk-publish-start-time
                     identity-pool-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-bulk-publish-details-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bulk-publish-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bulk-publish-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bulk-publish-start-time))
      (common-lisp:list
       (common-lisp:cons "BulkPublishStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bulk-publish-complete-time))
      (common-lisp:list
       (common-lisp:cons "BulkPublishCompleteTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bulk-publish-status))
      (common-lisp:list
       (common-lisp:cons "BulkPublishStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-message))
      (common-lisp:list
       (common-lisp:cons "FailureMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bulk-publish-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cognito-events-request common-lisp:nil
                       ((identity-pool-id :initarg :identity-pool-id :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor %get-cognito-events-request-identity-pool-id
                         :initform
                         (common-lisp:error ":identity-pool-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-cognito-events-request
                    'make-get-cognito-events-request))
 (common-lisp:defun make-get-cognito-events-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identity-pool-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-cognito-events-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cognito-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cognito-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cognito-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-cognito-events-response common-lisp:nil
                       ((events :initarg :events :type
                         (common-lisp:or events common-lisp:null) :accessor
                         %get-cognito-events-response-events :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-cognito-events-response
                    'make-get-cognito-events-response))
 (common-lisp:defun make-get-cognito-events-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key events)
   (common-lisp:apply #'common-lisp:make-instance 'get-cognito-events-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cognito-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cognito-events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cognito-events-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-identity-pool-configuration-request common-lisp:nil
                       ((identity-pool-id :initarg :identity-pool-id :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         %get-identity-pool-configuration-request-identity-pool-id
                         :initform
                         (common-lisp:error ":identity-pool-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-identity-pool-configuration-request
                    'make-get-identity-pool-configuration-request))
 (common-lisp:defun make-get-identity-pool-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identity-pool-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-identity-pool-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-pool-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-pool-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-pool-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-identity-pool-configuration-response common-lisp:nil
                       ((cognito-streams :initarg :cognito-streams :type
                         (common-lisp:or cognito-streams common-lisp:null)
                         :accessor
                         %get-identity-pool-configuration-response-cognito-streams
                         :initform common-lisp:nil)
                        (push-sync :initarg :push-sync :type
                         (common-lisp:or push-sync common-lisp:null) :accessor
                         %get-identity-pool-configuration-response-push-sync
                         :initform common-lisp:nil)
                        (identity-pool-id :initarg :identity-pool-id :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         %get-identity-pool-configuration-response-identity-pool-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-identity-pool-configuration-response
                    'make-get-identity-pool-configuration-response))
 (common-lisp:defun make-get-identity-pool-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cognito-streams push-sync
                     identity-pool-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-identity-pool-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-pool-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-pool-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'push-sync))
      (common-lisp:list
       (common-lisp:cons "PushSync"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cognito-streams))
      (common-lisp:list
       (common-lisp:cons "CognitoStreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-identity-pool-configuration-response))
   common-lisp:nil))
(common-lisp:deftype identity-id () 'common-lisp:string)
(common-lisp:deftype identity-pool-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass identity-pool-usage common-lisp:nil
                       ((last-modified-date :initarg :last-modified-date :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %identity-pool-usage-last-modified-date :initform
                         common-lisp:nil)
                        (data-storage :initarg :data-storage :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %identity-pool-usage-data-storage :initform
                         common-lisp:nil)
                        (sync-sessions-count :initarg :sync-sessions-count
                         :type (common-lisp:or long common-lisp:null) :accessor
                         %identity-pool-usage-sync-sessions-count :initform
                         common-lisp:nil)
                        (identity-pool-id :initarg :identity-pool-id :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor %identity-pool-usage-identity-pool-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'identity-pool-usage 'make-identity-pool-usage))
 (common-lisp:defun make-identity-pool-usage
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-modified-date data-storage
                     sync-sessions-count identity-pool-id)
   (common-lisp:apply #'common-lisp:make-instance 'identity-pool-usage
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input identity-pool-usage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input identity-pool-usage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-sessions-count))
      (common-lisp:list
       (common-lisp:cons "SyncSessionsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-storage))
      (common-lisp:list
       (common-lisp:cons "DataStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input identity-pool-usage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype identity-pool-usage-list ()
   '(trivial-types:proper-list identity-pool-usage))
 (common-lisp:defun |make-identity-pool-usage-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list identity-pool-usage))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass identity-usage common-lisp:nil
                       ((data-storage :initarg :data-storage :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %identity-usage-data-storage :initform
                         common-lisp:nil)
                        (dataset-count :initarg :dataset-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %identity-usage-dataset-count :initform
                         common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %identity-usage-last-modified-date :initform
                         common-lisp:nil)
                        (identity-pool-id :initarg :identity-pool-id :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor %identity-usage-identity-pool-id :initform
                         common-lisp:nil)
                        (identity-id :initarg :identity-id :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor %identity-usage-identity-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'identity-usage 'make-identity-usage))
 (common-lisp:defun make-identity-usage
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-storage dataset-count
                     last-modified-date identity-pool-id identity-id)
   (common-lisp:apply #'common-lisp:make-instance 'identity-usage
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input identity-usage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input identity-usage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-id))
      (common-lisp:list
       (common-lisp:cons "IdentityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-count))
      (common-lisp:list
       (common-lisp:cons "DatasetCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-storage))
      (common-lisp:list
       (common-lisp:cons "DataStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input identity-usage))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:deftype integer-string () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-error-exception
     (cognito-sync-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-error-exception
                    'internal-error-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-configuration-exception
     (cognito-sync-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-configuration-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-configuration-exception
                    'invalid-configuration-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-lambda-function-output-exception
     (cognito-sync-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-lambda-function-output-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-lambda-function-output-exception
                    'invalid-lambda-function-output-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (cognito-sync-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-parameter-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message)))
(common-lisp:deftype lambda-function-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition lambda-throttled-exception
     (cognito-sync-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       lambda-throttled-exception-message)))
 (common-lisp:export
  (common-lisp:list 'lambda-throttled-exception
                    'lambda-throttled-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (cognito-sync-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-datasets-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or integer-string common-lisp:null)
                         :accessor %list-datasets-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-datasets-request-next-token :initform
                         common-lisp:nil)
                        (identity-id :initarg :identity-id :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor %list-datasets-request-identity-id :initform
                         (common-lisp:error ":identity-id is required"))
                        (identity-pool-id :initarg :identity-pool-id :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor %list-datasets-request-identity-pool-id
                         :initform
                         (common-lisp:error ":identity-pool-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-datasets-request 'make-list-datasets-request))
 (common-lisp:defun make-list-datasets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token identity-id
                     identity-pool-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-datasets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-datasets-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-datasets-response-next-token :initform
                         common-lisp:nil)
                        (count :initarg :count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %list-datasets-response-count :initform
                         common-lisp:nil)
                        (datasets :initarg :datasets :type
                         (common-lisp:or dataset-list common-lisp:null)
                         :accessor %list-datasets-response-datasets :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-datasets-response 'make-list-datasets-response))
 (common-lisp:defun make-list-datasets-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token count datasets)
   (common-lisp:apply #'common-lisp:make-instance 'list-datasets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datasets))
      (common-lisp:list
       (common-lisp:cons "Datasets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-identity-pool-usage-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or integer-string common-lisp:null)
                         :accessor
                         %list-identity-pool-usage-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-identity-pool-usage-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-identity-pool-usage-request
                    'make-list-identity-pool-usage-request))
 (common-lisp:defun make-list-identity-pool-usage-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-identity-pool-usage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-pool-usage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-pool-usage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-pool-usage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-identity-pool-usage-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-identity-pool-usage-response-next-token
                         :initform common-lisp:nil)
                        (count :initarg :count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %list-identity-pool-usage-response-count :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %list-identity-pool-usage-response-max-results
                         :initform common-lisp:nil)
                        (identity-pool-usages :initarg :identity-pool-usages
                         :type
                         (common-lisp:or identity-pool-usage-list
                                         common-lisp:null)
                         :accessor
                         %list-identity-pool-usage-response-identity-pool-usages
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-identity-pool-usage-response
                    'make-list-identity-pool-usage-response))
 (common-lisp:defun make-list-identity-pool-usage-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token count max-results
                     identity-pool-usages)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-identity-pool-usage-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-pool-usage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-pool-usage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-pool-usages))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolUsages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-identity-pool-usage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-records-request common-lisp:nil
                       ((sync-session-token :initarg :sync-session-token :type
                         (common-lisp:or sync-session-token common-lisp:null)
                         :accessor %list-records-request-sync-session-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or integer-string common-lisp:null)
                         :accessor %list-records-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-records-request-next-token :initform
                         common-lisp:nil)
                        (last-sync-count :initarg :last-sync-count :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %list-records-request-last-sync-count :initform
                         common-lisp:nil)
                        (dataset-name :initarg :dataset-name :type
                         (common-lisp:or dataset-name common-lisp:null)
                         :accessor %list-records-request-dataset-name :initform
                         (common-lisp:error ":dataset-name is required"))
                        (identity-id :initarg :identity-id :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor %list-records-request-identity-id :initform
                         (common-lisp:error ":identity-id is required"))
                        (identity-pool-id :initarg :identity-pool-id :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor %list-records-request-identity-pool-id
                         :initform
                         (common-lisp:error ":identity-pool-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-records-request 'make-list-records-request))
 (common-lisp:defun make-list-records-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sync-session-token max-results next-token
                     last-sync-count dataset-name identity-id identity-pool-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-records-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-records-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-records-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-records-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-records-response common-lisp:nil
                       ((sync-session-token :initarg :sync-session-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-records-response-sync-session-token :initform
                         common-lisp:nil)
                        (dataset-deleted-after-requested-sync-count :initarg
                         :dataset-deleted-after-requested-sync-count :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %list-records-response-dataset-deleted-after-requested-sync-count
                         :initform common-lisp:nil)
                        (dataset-exists :initarg :dataset-exists :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %list-records-response-dataset-exists :initform
                         common-lisp:nil)
                        (merged-dataset-names :initarg :merged-dataset-names
                         :type
                         (common-lisp:or merged-dataset-name-list
                                         common-lisp:null)
                         :accessor %list-records-response-merged-dataset-names
                         :initform common-lisp:nil)
                        (last-modified-by :initarg :last-modified-by :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-records-response-last-modified-by :initform
                         common-lisp:nil)
                        (dataset-sync-count :initarg :dataset-sync-count :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %list-records-response-dataset-sync-count :initform
                         common-lisp:nil)
                        (count :initarg :count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %list-records-response-count :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-records-response-next-token :initform
                         common-lisp:nil)
                        (records :initarg :records :type
                         (common-lisp:or record-list common-lisp:null)
                         :accessor %list-records-response-records :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-records-response 'make-list-records-response))
 (common-lisp:defun make-list-records-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sync-session-token
                     dataset-deleted-after-requested-sync-count dataset-exists
                     merged-dataset-names last-modified-by dataset-sync-count
                     count next-token records)
   (common-lisp:apply #'common-lisp:make-instance 'list-records-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-records-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-records-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records))
      (common-lisp:list
       (common-lisp:cons "Records"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-sync-count))
      (common-lisp:list
       (common-lisp:cons "DatasetSyncCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'merged-dataset-names))
      (common-lisp:list
       (common-lisp:cons "MergedDatasetNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-exists))
      (common-lisp:list
       (common-lisp:cons "DatasetExists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataset-deleted-after-requested-sync-count))
      (common-lisp:list
       (common-lisp:cons "DatasetDeletedAfterRequestedSyncCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-session-token))
      (common-lisp:list
       (common-lisp:cons "SyncSessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-records-response))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype merged-dataset-name-list ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-merged-dataset-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition not-authorized-exception
     (cognito-sync-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       not-authorized-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-authorized-exception
                    'not-authorized-exception-message)))
(common-lisp:deftype operation () 'common-lisp:string)
(common-lisp:deftype platform () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass push-sync common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or assume-role-arn common-lisp:null)
                         :accessor %push-sync-role-arn :initform
                         common-lisp:nil)
                        (application-arns :initarg :application-arns :type
                         (common-lisp:or application-arn-list common-lisp:null)
                         :accessor %push-sync-application-arns :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'push-sync 'make-push-sync))
 (common-lisp:defun make-push-sync
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn application-arns)
   (common-lisp:apply #'common-lisp:make-instance 'push-sync
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input push-sync))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input push-sync))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-arns))
      (common-lisp:list
       (common-lisp:cons "ApplicationArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input push-sync))
   common-lisp:nil))
(common-lisp:deftype push-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass record common-lisp:nil
                       ((device-last-modified-date :initarg
                         :device-last-modified-date :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %record-device-last-modified-date :initform
                         common-lisp:nil)
                        (last-modified-by :initarg :last-modified-by :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %record-last-modified-by :initform common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %record-last-modified-date :initform common-lisp:nil)
                        (sync-count :initarg :sync-count :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %record-sync-count :initform common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or record-value common-lisp:null)
                         :accessor %record-value :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or record-key common-lisp:null) :accessor
                         %record-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'record 'make-record))
 (common-lisp:defun make-record
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-last-modified-date
                     last-modified-by last-modified-date sync-count value key)
   (common-lisp:apply #'common-lisp:make-instance 'record
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-count))
      (common-lisp:list
       (common-lisp:cons "SyncCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-last-modified-date))
      (common-lisp:list
       (common-lisp:cons "DeviceLastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input record))
   common-lisp:nil))
(common-lisp:deftype record-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype record-list () '(trivial-types:proper-list record))
 (common-lisp:defun |make-record-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass record-patch common-lisp:nil
                       ((device-last-modified-date :initarg
                         :device-last-modified-date :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %record-patch-device-last-modified-date :initform
                         common-lisp:nil)
                        (sync-count :initarg :sync-count :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %record-patch-sync-count :initform
                         (common-lisp:error ":sync-count is required"))
                        (value :initarg :value :type
                         (common-lisp:or record-value common-lisp:null)
                         :accessor %record-patch-value :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or record-key common-lisp:null) :accessor
                         %record-patch-key :initform
                         (common-lisp:error ":key is required"))
                        (op :initarg :op :type
                         (common-lisp:or operation common-lisp:null) :accessor
                         %record-patch-op :initform
                         (common-lisp:error ":op is required"))))
 (common-lisp:export (common-lisp:list 'record-patch 'make-record-patch))
 (common-lisp:defun make-record-patch
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-last-modified-date sync-count
                     value key op)
   (common-lisp:apply #'common-lisp:make-instance 'record-patch
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input record-patch))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input record-patch))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'op))
      (common-lisp:list
       (common-lisp:cons "Op"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-count))
      (common-lisp:list
       (common-lisp:cons "SyncCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-last-modified-date))
      (common-lisp:list
       (common-lisp:cons "DeviceLastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input record-patch))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype record-patch-list ()
   '(trivial-types:proper-list record-patch))
 (common-lisp:defun |make-record-patch-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list record-patch))
   aws-sdk/generator/shape::members))
(common-lisp:deftype record-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass register-device-request common-lisp:nil
                       ((token :initarg :token :type
                         (common-lisp:or push-token common-lisp:null) :accessor
                         %register-device-request-token :initform
                         (common-lisp:error ":token is required"))
                        (platform :initarg :platform :type
                         (common-lisp:or platform common-lisp:null) :accessor
                         %register-device-request-platform :initform
                         (common-lisp:error ":platform is required"))
                        (identity-id :initarg :identity-id :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor %register-device-request-identity-id
                         :initform
                         (common-lisp:error ":identity-id is required"))
                        (identity-pool-id :initarg :identity-pool-id :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor %register-device-request-identity-pool-id
                         :initform
                         (common-lisp:error ":identity-pool-id is required"))))
 (common-lisp:export
  (common-lisp:list 'register-device-request 'make-register-device-request))
 (common-lisp:defun make-register-device-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key token platform identity-id
                     identity-pool-id)
   (common-lisp:apply #'common-lisp:make-instance 'register-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "Platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "Token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-device-response common-lisp:nil
                       ((device-id :initarg :device-id :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         %register-device-response-device-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'register-device-response 'make-register-device-response))
 (common-lisp:defun make-register-device-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-id)
   (common-lisp:apply #'common-lisp:make-instance 'register-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-conflict-exception
     (cognito-sync-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-conflict-exception
                    'resource-conflict-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (cognito-sync-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass set-cognito-events-request common-lisp:nil
                       ((events :initarg :events :type
                         (common-lisp:or events common-lisp:null) :accessor
                         %set-cognito-events-request-events :initform
                         (common-lisp:error ":events is required"))
                        (identity-pool-id :initarg :identity-pool-id :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor %set-cognito-events-request-identity-pool-id
                         :initform
                         (common-lisp:error ":identity-pool-id is required"))))
 (common-lisp:export
  (common-lisp:list 'set-cognito-events-request
                    'make-set-cognito-events-request))
 (common-lisp:defun make-set-cognito-events-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key events identity-pool-id)
   (common-lisp:apply #'common-lisp:make-instance 'set-cognito-events-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-cognito-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-cognito-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-cognito-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-identity-pool-configuration-request common-lisp:nil
                       ((cognito-streams :initarg :cognito-streams :type
                         (common-lisp:or cognito-streams common-lisp:null)
                         :accessor
                         %set-identity-pool-configuration-request-cognito-streams
                         :initform common-lisp:nil)
                        (push-sync :initarg :push-sync :type
                         (common-lisp:or push-sync common-lisp:null) :accessor
                         %set-identity-pool-configuration-request-push-sync
                         :initform common-lisp:nil)
                        (identity-pool-id :initarg :identity-pool-id :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         %set-identity-pool-configuration-request-identity-pool-id
                         :initform
                         (common-lisp:error ":identity-pool-id is required"))))
 (common-lisp:export
  (common-lisp:list 'set-identity-pool-configuration-request
                    'make-set-identity-pool-configuration-request))
 (common-lisp:defun make-set-identity-pool-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cognito-streams push-sync
                     identity-pool-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-identity-pool-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-pool-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-pool-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'push-sync))
      (common-lisp:list
       (common-lisp:cons "PushSync"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cognito-streams))
      (common-lisp:list
       (common-lisp:cons "CognitoStreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-pool-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-identity-pool-configuration-response common-lisp:nil
                       ((cognito-streams :initarg :cognito-streams :type
                         (common-lisp:or cognito-streams common-lisp:null)
                         :accessor
                         %set-identity-pool-configuration-response-cognito-streams
                         :initform common-lisp:nil)
                        (push-sync :initarg :push-sync :type
                         (common-lisp:or push-sync common-lisp:null) :accessor
                         %set-identity-pool-configuration-response-push-sync
                         :initform common-lisp:nil)
                        (identity-pool-id :initarg :identity-pool-id :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         %set-identity-pool-configuration-response-identity-pool-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'set-identity-pool-configuration-response
                    'make-set-identity-pool-configuration-response))
 (common-lisp:defun make-set-identity-pool-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cognito-streams push-sync
                     identity-pool-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-identity-pool-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-pool-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-pool-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'push-sync))
      (common-lisp:list
       (common-lisp:cons "PushSync"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cognito-streams))
      (common-lisp:list
       (common-lisp:cons "CognitoStreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-identity-pool-configuration-response))
   common-lisp:nil))
(common-lisp:deftype stream-name () 'common-lisp:string)
(common-lisp:deftype streaming-status () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass subscribe-to-dataset-request common-lisp:nil
                       ((device-id :initarg :device-id :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         %subscribe-to-dataset-request-device-id :initform
                         (common-lisp:error ":device-id is required"))
                        (dataset-name :initarg :dataset-name :type
                         (common-lisp:or dataset-name common-lisp:null)
                         :accessor %subscribe-to-dataset-request-dataset-name
                         :initform
                         (common-lisp:error ":dataset-name is required"))
                        (identity-id :initarg :identity-id :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor %subscribe-to-dataset-request-identity-id
                         :initform
                         (common-lisp:error ":identity-id is required"))
                        (identity-pool-id :initarg :identity-pool-id :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         %subscribe-to-dataset-request-identity-pool-id
                         :initform
                         (common-lisp:error ":identity-pool-id is required"))))
 (common-lisp:export
  (common-lisp:list 'subscribe-to-dataset-request
                    'make-subscribe-to-dataset-request))
 (common-lisp:defun make-subscribe-to-dataset-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-id dataset-name identity-id
                     identity-pool-id)
   (common-lisp:apply #'common-lisp:make-instance 'subscribe-to-dataset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscribe-to-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscribe-to-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscribe-to-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass subscribe-to-dataset-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'subscribe-to-dataset-response
                    'make-subscribe-to-dataset-response))
 (common-lisp:defun make-subscribe-to-dataset-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'subscribe-to-dataset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscribe-to-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscribe-to-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscribe-to-dataset-response))
   common-lisp:nil))
(common-lisp:deftype sync-session-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (cognito-sync-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-message)))
(common-lisp:progn
 (common-lisp:defclass unsubscribe-from-dataset-request common-lisp:nil
                       ((device-id :initarg :device-id :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         %unsubscribe-from-dataset-request-device-id :initform
                         (common-lisp:error ":device-id is required"))
                        (dataset-name :initarg :dataset-name :type
                         (common-lisp:or dataset-name common-lisp:null)
                         :accessor
                         %unsubscribe-from-dataset-request-dataset-name
                         :initform
                         (common-lisp:error ":dataset-name is required"))
                        (identity-id :initarg :identity-id :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor
                         %unsubscribe-from-dataset-request-identity-id
                         :initform
                         (common-lisp:error ":identity-id is required"))
                        (identity-pool-id :initarg :identity-pool-id :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor
                         %unsubscribe-from-dataset-request-identity-pool-id
                         :initform
                         (common-lisp:error ":identity-pool-id is required"))))
 (common-lisp:export
  (common-lisp:list 'unsubscribe-from-dataset-request
                    'make-unsubscribe-from-dataset-request))
 (common-lisp:defun make-unsubscribe-from-dataset-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-id dataset-name identity-id
                     identity-pool-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'unsubscribe-from-dataset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unsubscribe-from-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unsubscribe-from-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unsubscribe-from-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass unsubscribe-from-dataset-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'unsubscribe-from-dataset-response
                    'make-unsubscribe-from-dataset-response))
 (common-lisp:defun make-unsubscribe-from-dataset-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'unsubscribe-from-dataset-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unsubscribe-from-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unsubscribe-from-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unsubscribe-from-dataset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-records-request common-lisp:nil
                       ((client-context :initarg :client-context :type
                         (common-lisp:or client-context common-lisp:null)
                         :accessor %update-records-request-client-context
                         :initform common-lisp:nil)
                        (sync-session-token :initarg :sync-session-token :type
                         (common-lisp:or sync-session-token common-lisp:null)
                         :accessor %update-records-request-sync-session-token
                         :initform
                         (common-lisp:error ":sync-session-token is required"))
                        (record-patches :initarg :record-patches :type
                         (common-lisp:or record-patch-list common-lisp:null)
                         :accessor %update-records-request-record-patches
                         :initform common-lisp:nil)
                        (device-id :initarg :device-id :type
                         (common-lisp:or device-id common-lisp:null) :accessor
                         %update-records-request-device-id :initform
                         common-lisp:nil)
                        (dataset-name :initarg :dataset-name :type
                         (common-lisp:or dataset-name common-lisp:null)
                         :accessor %update-records-request-dataset-name
                         :initform
                         (common-lisp:error ":dataset-name is required"))
                        (identity-id :initarg :identity-id :type
                         (common-lisp:or identity-id common-lisp:null)
                         :accessor %update-records-request-identity-id
                         :initform
                         (common-lisp:error ":identity-id is required"))
                        (identity-pool-id :initarg :identity-pool-id :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor %update-records-request-identity-pool-id
                         :initform
                         (common-lisp:error ":identity-pool-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-records-request 'make-update-records-request))
 (common-lisp:defun make-update-records-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-context sync-session-token
                     record-patches device-id dataset-name identity-id
                     identity-pool-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-records-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-records-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-context))
      (common-lisp:cons "x-amz-Client-Context"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-records-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-id))
      (common-lisp:list
       (common-lisp:cons "DeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-patches))
      (common-lisp:list
       (common-lisp:cons "RecordPatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-session-token))
      (common-lisp:list
       (common-lisp:cons "SyncSessionToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-records-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-records-response common-lisp:nil
                       ((records :initarg :records :type
                         (common-lisp:or record-list common-lisp:null)
                         :accessor %update-records-response-records :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-records-response 'make-update-records-response))
 (common-lisp:defun make-update-records-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key records)
   (common-lisp:apply #'common-lisp:make-instance 'update-records-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-records-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-records-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'records))
      (common-lisp:list
       (common-lisp:cons "Records"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-records-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun bulk-publish
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-id)
   (common-lisp:declare (common-lisp:ignorable identity-pool-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-bulk-publish-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-sync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/identitypools/~A/bulkpublish"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identity-pool-id))))
                                                        "BulkPublish"
                                                        "2014-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'bulk-publish))
(common-lisp:progn
 (common-lisp:defun delete-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-id identity-id
                     dataset-name)
   (common-lisp:declare
    (common-lisp:ignorable identity-pool-id identity-id dataset-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-sync-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/identitypools/~A/identities/~A/datasets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identity-pool-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identity-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-name))))
                                                        "DeleteDataset"
                                                        "2014-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-dataset))
(common-lisp:progn
 (common-lisp:defun describe-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-id identity-id
                     dataset-name)
   (common-lisp:declare
    (common-lisp:ignorable identity-pool-id identity-id dataset-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-sync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/identitypools/~A/identities/~A/datasets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identity-pool-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identity-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-name))))
                                                        "DescribeDataset"
                                                        "2014-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-dataset))
(common-lisp:progn
 (common-lisp:defun describe-identity-pool-usage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-id)
   (common-lisp:declare (common-lisp:ignorable identity-pool-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-identity-pool-usage-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-sync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/identitypools/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identity-pool-id))))
                                                        "DescribeIdentityPoolUsage"
                                                        "2014-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-identity-pool-usage))
(common-lisp:progn
 (common-lisp:defun describe-identity-usage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-id identity-id)
   (common-lisp:declare (common-lisp:ignorable identity-pool-id identity-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-identity-usage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-sync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/identitypools/~A/identities/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identity-pool-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identity-id))))
                                                        "DescribeIdentityUsage"
                                                        "2014-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-identity-usage))
(common-lisp:progn
 (common-lisp:defun get-bulk-publish-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-id)
   (common-lisp:declare (common-lisp:ignorable identity-pool-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bulk-publish-details-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-sync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/identitypools/~A/getBulkPublishDetails"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identity-pool-id))))
                                                        "GetBulkPublishDetails"
                                                        "2014-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bulk-publish-details))
(common-lisp:progn
 (common-lisp:defun get-cognito-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-id)
   (common-lisp:declare (common-lisp:ignorable identity-pool-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-cognito-events-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-sync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/identitypools/~A/events"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identity-pool-id))))
                                                        "GetCognitoEvents"
                                                        "2014-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-cognito-events))
(common-lisp:progn
 (common-lisp:defun get-identity-pool-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-id)
   (common-lisp:declare (common-lisp:ignorable identity-pool-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-identity-pool-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-sync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/identitypools/~A/configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identity-pool-id))))
                                                        "GetIdentityPoolConfiguration"
                                                        "2014-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-identity-pool-configuration))
(common-lisp:progn
 (common-lisp:defun list-datasets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-id identity-id next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable identity-pool-id identity-id next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-datasets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-sync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/identitypools/~A/identities/~A/datasets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identity-pool-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identity-id))))
                                                        "ListDatasets"
                                                        "2014-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-datasets))
(common-lisp:progn
 (common-lisp:defun list-identity-pool-usage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-identity-pool-usage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-sync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/identitypools"
                                                        "ListIdentityPoolUsage"
                                                        "2014-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-identity-pool-usage))
(common-lisp:progn
 (common-lisp:defun list-records
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-id identity-id dataset-name
                     last-sync-count next-token max-results sync-session-token)
   (common-lisp:declare
    (common-lisp:ignorable identity-pool-id identity-id dataset-name
     last-sync-count next-token max-results sync-session-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-records-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-sync-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/identitypools/~A/identities/~A/datasets/~A/records"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identity-pool-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identity-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-name))))
                                                        "ListRecords"
                                                        "2014-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-records))
(common-lisp:progn
 (common-lisp:defun register-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-id identity-id platform
                     token)
   (common-lisp:declare
    (common-lisp:ignorable identity-pool-id identity-id platform token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-sync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/identitypools/~A/identity/~A/device"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identity-pool-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identity-id))))
                                                        "RegisterDevice"
                                                        "2014-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-device))
(common-lisp:progn
 (common-lisp:defun set-cognito-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-id events)
   (common-lisp:declare (common-lisp:ignorable identity-pool-id events))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-cognito-events-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-sync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/identitypools/~A/events"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identity-pool-id))))
                                                        "SetCognitoEvents"
                                                        "2014-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-cognito-events))
(common-lisp:progn
 (common-lisp:defun set-identity-pool-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-id push-sync
                     cognito-streams)
   (common-lisp:declare
    (common-lisp:ignorable identity-pool-id push-sync cognito-streams))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-identity-pool-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-sync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/identitypools/~A/configuration"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identity-pool-id))))
                                                        "SetIdentityPoolConfiguration"
                                                        "2014-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-identity-pool-configuration))
(common-lisp:progn
 (common-lisp:defun subscribe-to-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-id identity-id dataset-name
                     device-id)
   (common-lisp:declare
    (common-lisp:ignorable identity-pool-id identity-id dataset-name
     device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-subscribe-to-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-sync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/identitypools/~A/identities/~A/datasets/~A/subscriptions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identity-pool-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identity-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'device-id))))
                                                        "SubscribeToDataset"
                                                        "2014-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'subscribe-to-dataset))
(common-lisp:progn
 (common-lisp:defun unsubscribe-from-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-id identity-id dataset-name
                     device-id)
   (common-lisp:declare
    (common-lisp:ignorable identity-pool-id identity-id dataset-name
     device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-unsubscribe-from-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-sync-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/identitypools/~A/identities/~A/datasets/~A/subscriptions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identity-pool-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identity-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'device-id))))
                                                        "UnsubscribeFromDataset"
                                                        "2014-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'unsubscribe-from-dataset))
(common-lisp:progn
 (common-lisp:defun update-records
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-pool-id identity-id dataset-name
                     device-id record-patches sync-session-token
                     client-context)
   (common-lisp:declare
    (common-lisp:ignorable identity-pool-id identity-id dataset-name device-id
     record-patches sync-session-token client-context))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-records-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cognito-sync-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/identitypools/~A/identities/~A/datasets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identity-pool-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identity-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dataset-name))))
                                                        "UpdateRecords"
                                                        "2014-06-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-records))
