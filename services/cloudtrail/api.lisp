;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/cloudtrail/api
  (:use)
  (:nicknames #:aws/cloudtrail)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/cloudtrail/api)
(common-lisp:progn
 (common-lisp:defclass cloudtrail-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "cloudtrail"))
 (common-lisp:export 'cloudtrail-request))
(common-lisp:progn
 (common-lisp:define-condition cloudtrail-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'cloudtrail-error))
(common-lisp:defvar *error-map*
  '(("AccountHasOngoingImportException" . account-has-ongoing-import-exception)
    ("AccountNotFoundException" . account-not-found-exception)
    ("AccountNotRegisteredException" . account-not-registered-exception)
    ("AccountRegisteredException" . account-registered-exception)
    ("CannotDelegateManagementAccountException"
     . cannot-delegate-management-account-exception)
    ("ChannelARNInvalidException" . channel-arninvalid-exception)
    ("ChannelAlreadyExistsException" . channel-already-exists-exception)
    ("ChannelExistsForEDSException" . channel-exists-for-edsexception)
    ("ChannelMaxLimitExceededException" . channel-max-limit-exceeded-exception)
    ("ChannelNotFoundException" . channel-not-found-exception)
    ("CloudTrailARNInvalidException" . cloud-trail-arninvalid-exception)
    ("CloudTrailAccessNotEnabledException"
     . cloud-trail-access-not-enabled-exception)
    ("CloudTrailInvalidClientTokenIdException"
     . cloud-trail-invalid-client-token-id-exception)
    ("CloudWatchLogsDeliveryUnavailableException"
     . cloud-watch-logs-delivery-unavailable-exception)
    ("ConflictException" . conflict-exception)
    ("DelegatedAdminAccountLimitExceededException"
     . delegated-admin-account-limit-exceeded-exception)
    ("EventDataStoreARNInvalidException"
     . event-data-store-arninvalid-exception)
    ("EventDataStoreAlreadyExistsException"
     . event-data-store-already-exists-exception)
    ("EventDataStoreHasOngoingImportException"
     . event-data-store-has-ongoing-import-exception)
    ("EventDataStoreMaxLimitExceededException"
     . event-data-store-max-limit-exceeded-exception)
    ("EventDataStoreNotFoundException" . event-data-store-not-found-exception)
    ("EventDataStoreTerminationProtectedException"
     . event-data-store-termination-protected-exception)
    ("ImportNotFoundException" . import-not-found-exception)
    ("InactiveEventDataStoreException" . inactive-event-data-store-exception)
    ("InactiveQueryException" . inactive-query-exception)
    ("InsightNotEnabledException" . insight-not-enabled-exception)
    ("InsufficientDependencyServiceAccessPermissionException"
     . insufficient-dependency-service-access-permission-exception)
    ("InsufficientEncryptionPolicyException"
     . insufficient-encryption-policy-exception)
    ("InsufficientS3BucketPolicyException"
     . insufficient-s3bucket-policy-exception)
    ("InsufficientSnsTopicPolicyException"
     . insufficient-sns-topic-policy-exception)
    ("InvalidCloudWatchLogsLogGroupArnException"
     . invalid-cloud-watch-logs-log-group-arn-exception)
    ("InvalidCloudWatchLogsRoleArnException"
     . invalid-cloud-watch-logs-role-arn-exception)
    ("InvalidDateRangeException" . invalid-date-range-exception)
    ("InvalidEventCategoryException" . invalid-event-category-exception)
    ("InvalidEventDataStoreCategoryException"
     . invalid-event-data-store-category-exception)
    ("InvalidEventDataStoreStatusException"
     . invalid-event-data-store-status-exception)
    ("InvalidEventSelectorsException" . invalid-event-selectors-exception)
    ("InvalidHomeRegionException" . invalid-home-region-exception)
    ("InvalidImportSourceException" . invalid-import-source-exception)
    ("InvalidInsightSelectorsException" . invalid-insight-selectors-exception)
    ("InvalidKmsKeyIdException" . invalid-kms-key-id-exception)
    ("InvalidLookupAttributesException" . invalid-lookup-attributes-exception)
    ("InvalidMaxResultsException" . invalid-max-results-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("InvalidParameterCombinationException"
     . invalid-parameter-combination-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("InvalidQueryStatementException" . invalid-query-statement-exception)
    ("InvalidQueryStatusException" . invalid-query-status-exception)
    ("InvalidS3BucketNameException" . invalid-s3bucket-name-exception)
    ("InvalidS3PrefixException" . invalid-s3prefix-exception)
    ("InvalidSnsTopicNameException" . invalid-sns-topic-name-exception)
    ("InvalidSourceException" . invalid-source-exception)
    ("InvalidTagParameterException" . invalid-tag-parameter-exception)
    ("InvalidTimeRangeException" . invalid-time-range-exception)
    ("InvalidTokenException" . invalid-token-exception)
    ("InvalidTrailNameException" . invalid-trail-name-exception)
    ("KmsException" . kms-exception)
    ("KmsKeyDisabledException" . kms-key-disabled-exception)
    ("KmsKeyNotFoundException" . kms-key-not-found-exception)
    ("MaxConcurrentQueriesException" . max-concurrent-queries-exception)
    ("MaximumNumberOfTrailsExceededException"
     . maximum-number-of-trails-exceeded-exception)
    ("NoManagementAccountSLRExistsException"
     . no-management-account-slrexists-exception)
    ("NotOrganizationManagementAccountException"
     . not-organization-management-account-exception)
    ("NotOrganizationMasterAccountException"
     . not-organization-master-account-exception)
    ("OperationNotPermittedException" . operation-not-permitted-exception)
    ("OrganizationNotInAllFeaturesModeException"
     . organization-not-in-all-features-mode-exception)
    ("OrganizationsNotInUseException" . organizations-not-in-use-exception)
    ("QueryIdNotFoundException" . query-id-not-found-exception)
    ("ResourceARNNotValidException" . resource-arnnot-valid-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourcePolicyNotFoundException" . resource-policy-not-found-exception)
    ("ResourcePolicyNotValidException" . resource-policy-not-valid-exception)
    ("ResourceTypeNotSupportedException"
     . resource-type-not-supported-exception)
    ("S3BucketDoesNotExistException" . s3bucket-does-not-exist-exception)
    ("TagsLimitExceededException" . tags-limit-exceeded-exception)
    ("TrailAlreadyExistsException" . trail-already-exists-exception)
    ("TrailNotFoundException" . trail-not-found-exception)
    ("TrailNotProvidedException" . trail-not-provided-exception)
    ("UnsupportedOperationException" . unsupported-operation-exception)))
(common-lisp:progn
 (common-lisp:define-condition account-has-ongoing-import-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'account-has-ongoing-import-exception)))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition account-not-found-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'account-not-found-exception)))
(common-lisp:progn
 (common-lisp:define-condition account-not-registered-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'account-not-registered-exception)))
(common-lisp:progn
 (common-lisp:define-condition account-registered-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'account-registered-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (add-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-tags-request-"))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or string common-lisp:null))
   (tags-list (common-lisp:error ":tags-list is required") :type
    (common-lisp:or tags-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-tags-request 'make-add-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags-list))
      (common-lisp:list
       (common-lisp:cons "TagsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-tags-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-tags-response-")))
 (common-lisp:export
  (common-lisp:list 'add-tags-response 'make-add-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (advanced-event-selector (:copier common-lisp:nil)
      (:conc-name "struct-shape-advanced-event-selector-"))
   (name common-lisp:nil :type (common-lisp:or selector-name common-lisp:null))
   (field-selectors (common-lisp:error ":field-selectors is required") :type
    (common-lisp:or advanced-field-selectors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'advanced-event-selector 'make-advanced-event-selector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          advanced-event-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          advanced-event-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-selectors))
      (common-lisp:list
       (common-lisp:cons "FieldSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          advanced-event-selector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype advanced-event-selectors ()
   '(trivial-types:proper-list advanced-event-selector))
 (common-lisp:defun |make-advanced-event-selectors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list advanced-event-selector))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (advanced-field-selector (:copier common-lisp:nil)
      (:conc-name "struct-shape-advanced-field-selector-"))
   (field (common-lisp:error ":field is required") :type
    (common-lisp:or selector-field common-lisp:null))
   (equals common-lisp:nil :type (common-lisp:or operator common-lisp:null))
   (starts-with common-lisp:nil :type
    (common-lisp:or operator common-lisp:null))
   (ends-with common-lisp:nil :type (common-lisp:or operator common-lisp:null))
   (not-equals common-lisp:nil :type
    (common-lisp:or operator common-lisp:null))
   (not-starts-with common-lisp:nil :type
    (common-lisp:or operator common-lisp:null))
   (not-ends-with common-lisp:nil :type
    (common-lisp:or operator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'advanced-field-selector 'make-advanced-field-selector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          advanced-field-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          advanced-field-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field))
      (common-lisp:list
       (common-lisp:cons "Field"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'equals))
      (common-lisp:list
       (common-lisp:cons "Equals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'starts-with))
      (common-lisp:list
       (common-lisp:cons "StartsWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ends-with))
      (common-lisp:list
       (common-lisp:cons "EndsWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-equals))
      (common-lisp:list
       (common-lisp:cons "NotEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-starts-with))
      (common-lisp:list
       (common-lisp:cons "NotStartsWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-ends-with))
      (common-lisp:list
       (common-lisp:cons "NotEndsWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          advanced-field-selector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype advanced-field-selectors ()
   '(trivial-types:proper-list advanced-field-selector))
 (common-lisp:defun |make-advanced-field-selectors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list advanced-field-selector))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype byte-buffer ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-query-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-query-request-"))
   (event-data-store common-lisp:nil :type
    (common-lisp:or event-data-store-arn common-lisp:null))
   (query-id (common-lisp:error ":query-id is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-query-request 'make-cancel-query-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cancel-query-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cancel-query-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-data-store))
      (common-lisp:list
       (common-lisp:cons "EventDataStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cancel-query-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-query-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-query-response-"))
   (query-id (common-lisp:error ":query-id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (query-status (common-lisp:error ":query-status is required") :type
    (common-lisp:or query-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-query-response 'make-cancel-query-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-query-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-query-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-status))
      (common-lisp:list
       (common-lisp:cons "QueryStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-query-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition cannot-delegate-management-account-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cannot-delegate-management-account-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (channel (:copier common-lisp:nil) (:conc-name "struct-shape-channel-"))
   (channel-arn common-lisp:nil :type
    (common-lisp:or channel-arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or channel-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'channel 'make-channel))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition channel-arninvalid-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'channel-arninvalid-exception)))
(common-lisp:progn
 (common-lisp:define-condition channel-already-exists-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'channel-already-exists-exception)))
(common-lisp:deftype channel-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition channel-exists-for-edsexception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'channel-exists-for-edsexception)))
(common-lisp:progn
 (common-lisp:define-condition channel-max-limit-exceeded-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'channel-max-limit-exceeded-exception)))
(common-lisp:deftype channel-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition channel-not-found-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'channel-not-found-exception)))
(common-lisp:progn
 (common-lisp:deftype channels () '(trivial-types:proper-list channel))
 (common-lisp:defun |make-channels|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list channel))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition cloud-trail-arninvalid-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'cloud-trail-arninvalid-exception)))
(common-lisp:progn
 (common-lisp:define-condition cloud-trail-access-not-enabled-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cloud-trail-access-not-enabled-exception)))
(common-lisp:progn
 (common-lisp:define-condition cloud-trail-invalid-client-token-id-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cloud-trail-invalid-client-token-id-exception)))
(common-lisp:progn
 (common-lisp:define-condition cloud-watch-logs-delivery-unavailable-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cloud-watch-logs-delivery-unavailable-exception)))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'conflict-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-channel-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or channel-name common-lisp:null))
   (source (common-lisp:error ":source is required") :type
    (common-lisp:or source common-lisp:null))
   (destinations (common-lisp:error ":destinations is required") :type
    (common-lisp:or destinations common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-channel-request 'make-create-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-channel-response-"))
   (channel-arn common-lisp:nil :type
    (common-lisp:or channel-arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or channel-name common-lisp:null))
   (source common-lisp:nil :type (common-lisp:or source common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or destinations common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-channel-response 'make-create-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-event-data-store-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-event-data-store-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or event-data-store-name common-lisp:null))
   (advanced-event-selectors common-lisp:nil :type
    (common-lisp:or advanced-event-selectors common-lisp:null))
   (multi-region-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (organization-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (retention-period common-lisp:nil :type
    (common-lisp:or retention-period common-lisp:null))
   (termination-protection-enabled common-lisp:nil :type
    (common-lisp:or termination-protection-enabled common-lisp:null))
   (tags-list common-lisp:nil :type
    (common-lisp:or tags-list common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or event-data-store-kms-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-event-data-store-request
                    'make-create-event-data-store-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-data-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-data-store-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-event-selectors))
      (common-lisp:list
       (common-lisp:cons "AdvancedEventSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multi-region-enabled))
      (common-lisp:list
       (common-lisp:cons "MultiRegionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-enabled))
      (common-lisp:list
       (common-lisp:cons "OrganizationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "RetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "TerminationProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags-list))
      (common-lisp:list
       (common-lisp:cons "TagsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-data-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-event-data-store-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-event-data-store-response-"))
   (event-data-store-arn common-lisp:nil :type
    (common-lisp:or event-data-store-arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or event-data-store-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or event-data-store-status common-lisp:null))
   (advanced-event-selectors common-lisp:nil :type
    (common-lisp:or advanced-event-selectors common-lisp:null))
   (multi-region-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (organization-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (retention-period common-lisp:nil :type
    (common-lisp:or retention-period common-lisp:null))
   (termination-protection-enabled common-lisp:nil :type
    (common-lisp:or termination-protection-enabled common-lisp:null))
   (tags-list common-lisp:nil :type
    (common-lisp:or tags-list common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (updated-timestamp common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or event-data-store-kms-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-event-data-store-response
                    'make-create-event-data-store-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-event-data-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-event-data-store-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-data-store-arn))
      (common-lisp:list
       (common-lisp:cons "EventDataStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-event-selectors))
      (common-lisp:list
       (common-lisp:cons "AdvancedEventSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multi-region-enabled))
      (common-lisp:list
       (common-lisp:cons "MultiRegionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-enabled))
      (common-lisp:list
       (common-lisp:cons "OrganizationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "RetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "TerminationProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags-list))
      (common-lisp:list
       (common-lisp:cons "TagsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "UpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-event-data-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-trail-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-trail-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (s3bucket-name (common-lisp:error ":s3bucket-name is required") :type
    (common-lisp:or string common-lisp:null))
   (s3key-prefix common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (sns-topic-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (include-global-service-events common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (is-multi-region-trail common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (enable-log-file-validation common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (cloud-watch-logs-log-group-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cloud-watch-logs-role-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (is-organization-trail common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (tags-list common-lisp:nil :type
    (common-lisp:or tags-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-trail-request 'make-create-trail-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-trail-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-trail-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "S3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-name))
      (common-lisp:list
       (common-lisp:cons "SnsTopicName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-global-service-events))
      (common-lisp:list
       (common-lisp:cons "IncludeGlobalServiceEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-multi-region-trail))
      (common-lisp:list
       (common-lisp:cons "IsMultiRegionTrail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-log-file-validation))
      (common-lisp:list
       (common-lisp:cons "EnableLogFileValidation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-log-group-arn))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsLogGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-role-arn))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-organization-trail))
      (common-lisp:list
       (common-lisp:cons "IsOrganizationTrail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags-list))
      (common-lisp:list
       (common-lisp:cons "TagsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-trail-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-trail-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-trail-response-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (s3bucket-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (s3key-prefix common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (sns-topic-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (sns-topic-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (include-global-service-events common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (is-multi-region-trail common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (trail-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (log-file-validation-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (cloud-watch-logs-log-group-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cloud-watch-logs-role-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (is-organization-trail common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-trail-response 'make-create-trail-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-trail-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-trail-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "S3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-name))
      (common-lisp:list
       (common-lisp:cons "SnsTopicName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-global-service-events))
      (common-lisp:list
       (common-lisp:cons "IncludeGlobalServiceEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-multi-region-trail))
      (common-lisp:list
       (common-lisp:cons "IsMultiRegionTrail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trail-arn))
      (common-lisp:list
       (common-lisp:cons "TrailARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-file-validation-enabled))
      (common-lisp:list
       (common-lisp:cons "LogFileValidationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-log-group-arn))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsLogGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-role-arn))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-organization-trail))
      (common-lisp:list
       (common-lisp:cons "IsOrganizationTrail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-trail-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-resource-"))
   (type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or data-resource-values common-lisp:null)))
 (common-lisp:export (common-lisp:list 'data-resource 'make-data-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-resource-values ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-data-resource-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype data-resources ()
   '(trivial-types:proper-list data-resource))
 (common-lisp:defun |make-data-resources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-resource))
   aws-sdk/generator/shape::members))
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition delegated-admin-account-limit-exceeded-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delegated-admin-account-limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-channel-request-"))
   (channel (common-lisp:error ":channel is required") :type
    (common-lisp:or channel-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-channel-request 'make-delete-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-channel-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-channel-response 'make-delete-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-event-data-store-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-event-data-store-request-"))
   (event-data-store (common-lisp:error ":event-data-store is required") :type
    (common-lisp:or event-data-store-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-event-data-store-request
                    'make-delete-event-data-store-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-data-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-data-store-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-data-store))
      (common-lisp:list
       (common-lisp:cons "EventDataStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-data-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-event-data-store-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-event-data-store-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-event-data-store-response
                    'make-delete-event-data-store-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-data-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-data-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-event-data-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-resource-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-resource-policy-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-request
                    'make-delete-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-resource-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-resource-policy-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-response
                    'make-delete-resource-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-trail-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-trail-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-trail-request 'make-delete-trail-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-trail-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-trail-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-trail-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-trail-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-trail-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-trail-response 'make-delete-trail-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-trail-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-trail-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-trail-response))
   common-lisp:nil))
(common-lisp:deftype delivery-s3uri () 'common-lisp:string)
(common-lisp:deftype delivery-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-organization-delegated-admin-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-deregister-organization-delegated-admin-request-"))
   (delegated-admin-account-id
    (common-lisp:error ":delegated-admin-account-id is required") :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deregister-organization-delegated-admin-request
                    'make-deregister-organization-delegated-admin-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-organization-delegated-admin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-organization-delegated-admin-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delegated-admin-account-id))
      (common-lisp:list
       (common-lisp:cons "DelegatedAdminAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-organization-delegated-admin-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-organization-delegated-admin-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-deregister-organization-delegated-admin-response-")))
 (common-lisp:export
  (common-lisp:list 'deregister-organization-delegated-admin-response
                    'make-deregister-organization-delegated-admin-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-organization-delegated-admin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-organization-delegated-admin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-organization-delegated-admin-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-query-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-query-request-"))
   (event-data-store common-lisp:nil :type
    (common-lisp:or event-data-store-arn common-lisp:null))
   (query-id (common-lisp:error ":query-id is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-query-request 'make-describe-query-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-query-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-query-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-data-store))
      (common-lisp:list
       (common-lisp:cons "EventDataStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-query-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-query-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-query-response-"))
   (query-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (query-string common-lisp:nil :type
    (common-lisp:or query-statement common-lisp:null))
   (query-status common-lisp:nil :type
    (common-lisp:or query-status common-lisp:null))
   (query-statistics common-lisp:nil :type
    (common-lisp:or query-statistics-for-describe-query common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null))
   (delivery-s3uri common-lisp:nil :type
    (common-lisp:or delivery-s3uri common-lisp:null))
   (delivery-status common-lisp:nil :type
    (common-lisp:or delivery-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-query-response 'make-describe-query-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-query-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-query-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "QueryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-status))
      (common-lisp:list
       (common-lisp:cons "QueryStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-statistics))
      (common-lisp:list
       (common-lisp:cons "QueryStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-s3uri))
      (common-lisp:list
       (common-lisp:cons "DeliveryS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-status))
      (common-lisp:list
       (common-lisp:cons "DeliveryStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-query-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-trails-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-trails-request-"))
   (trail-name-list common-lisp:nil :type
    (common-lisp:or trail-name-list common-lisp:null))
   (include-shadow-trails common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-trails-request 'make-describe-trails-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-trails-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-trails-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trail-name-list))
      (common-lisp:list
       (common-lisp:cons "trailNameList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-shadow-trails))
      (common-lisp:list
       (common-lisp:cons "includeShadowTrails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-trails-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-trails-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-trails-response-"))
   (trail-list common-lisp:nil :type
    (common-lisp:or trail-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-trails-response 'make-describe-trails-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-trails-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-trails-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trail-list))
      (common-lisp:list
       (common-lisp:cons "trailList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-trails-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (destination (:copier common-lisp:nil)
      (:conc-name "struct-shape-destination-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or destination-type common-lisp:null))
   (location (common-lisp:error ":location is required") :type
    (common-lisp:or location common-lisp:null)))
 (common-lisp:export (common-lisp:list 'destination 'make-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination))
   common-lisp:nil))
(common-lisp:deftype destination-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype destinations () '(trivial-types:proper-list destination))
 (common-lisp:defun |make-destinations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list destination))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (event (:copier common-lisp:nil) (:conc-name "struct-shape-event-"))
   (event-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (event-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (read-only common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (access-key-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (event-time common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (event-source common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (username common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (resources common-lisp:nil :type
    (common-lisp:or resource-list common-lisp:null))
   (cloud-trail-event common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'event 'make-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "EventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-name))
      (common-lisp:list
       (common-lisp:cons "EventName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-only))
      (common-lisp:list
       (common-lisp:cons "ReadOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-time))
      (common-lisp:list
       (common-lisp:cons "EventTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-source))
      (common-lisp:list
       (common-lisp:cons "EventSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cloud-trail-event))
      (common-lisp:list
       (common-lisp:cons "CloudTrailEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event))
   common-lisp:nil))
(common-lisp:deftype event-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (event-data-store (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-data-store-"))
   (event-data-store-arn common-lisp:nil :type
    (common-lisp:or event-data-store-arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or event-data-store-name common-lisp:null))
   (termination-protection-enabled common-lisp:nil :type
    (common-lisp:or termination-protection-enabled common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or event-data-store-status common-lisp:null))
   (advanced-event-selectors common-lisp:nil :type
    (common-lisp:or advanced-event-selectors common-lisp:null))
   (multi-region-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (organization-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (retention-period common-lisp:nil :type
    (common-lisp:or retention-period common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (updated-timestamp common-lisp:nil :type
    (common-lisp:or date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-data-store 'make-event-data-store))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-data-store))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-data-store))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-data-store-arn))
      (common-lisp:list
       (common-lisp:cons "EventDataStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "TerminationProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-event-selectors))
      (common-lisp:list
       (common-lisp:cons "AdvancedEventSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multi-region-enabled))
      (common-lisp:list
       (common-lisp:cons "MultiRegionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-enabled))
      (common-lisp:list
       (common-lisp:cons "OrganizationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "RetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "UpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-data-store))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition event-data-store-arninvalid-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'event-data-store-arninvalid-exception)))
(common-lisp:progn
 (common-lisp:define-condition event-data-store-already-exists-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'event-data-store-already-exists-exception)))
(common-lisp:deftype event-data-store-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition event-data-store-has-ongoing-import-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'event-data-store-has-ongoing-import-exception)))
(common-lisp:deftype event-data-store-kms-key-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition event-data-store-max-limit-exceeded-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'event-data-store-max-limit-exceeded-exception)))
(common-lisp:deftype event-data-store-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition event-data-store-not-found-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'event-data-store-not-found-exception)))
(common-lisp:deftype event-data-store-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition event-data-store-termination-protected-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'event-data-store-termination-protected-exception)))
(common-lisp:progn
 (common-lisp:deftype event-data-stores ()
   '(trivial-types:proper-list event-data-store))
 (common-lisp:defun |make-event-data-stores|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-data-store))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (event-selector (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-selector-"))
   (read-write-type common-lisp:nil :type
    (common-lisp:or read-write-type common-lisp:null))
   (include-management-events common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (data-resources common-lisp:nil :type
    (common-lisp:or data-resources common-lisp:null))
   (exclude-management-event-sources common-lisp:nil :type
    (common-lisp:or exclude-management-event-sources common-lisp:null)))
 (common-lisp:export (common-lisp:list 'event-selector 'make-event-selector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'read-write-type))
      (common-lisp:list
       (common-lisp:cons "ReadWriteType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-management-events))
      (common-lisp:list
       (common-lisp:cons "IncludeManagementEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-resources))
      (common-lisp:list
       (common-lisp:cons "DataResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-management-event-sources))
      (common-lisp:list
       (common-lisp:cons "ExcludeManagementEventSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-selector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-selectors ()
   '(trivial-types:proper-list event-selector))
 (common-lisp:defun |make-event-selectors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-selector))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype events-list () '(trivial-types:proper-list event))
 (common-lisp:defun |make-events-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype exclude-management-event-sources ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-exclude-management-event-sources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-channel-request-"))
   (channel (common-lisp:error ":channel is required") :type
    (common-lisp:or channel-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-channel-request 'make-get-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-channel-response-"))
   (channel-arn common-lisp:nil :type
    (common-lisp:or channel-arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or channel-name common-lisp:null))
   (source common-lisp:nil :type (common-lisp:or source common-lisp:null))
   (source-config common-lisp:nil :type
    (common-lisp:or source-config common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or destinations common-lisp:null))
   (ingestion-status common-lisp:nil :type
    (common-lisp:or ingestion-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-channel-response 'make-get-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-config))
      (common-lisp:list
       (common-lisp:cons "SourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-status))
      (common-lisp:list
       (common-lisp:cons "IngestionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-event-data-store-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-event-data-store-request-"))
   (event-data-store (common-lisp:error ":event-data-store is required") :type
    (common-lisp:or event-data-store-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-event-data-store-request
                    'make-get-event-data-store-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-event-data-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-event-data-store-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-data-store))
      (common-lisp:list
       (common-lisp:cons "EventDataStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-event-data-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-event-data-store-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-event-data-store-response-"))
   (event-data-store-arn common-lisp:nil :type
    (common-lisp:or event-data-store-arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or event-data-store-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or event-data-store-status common-lisp:null))
   (advanced-event-selectors common-lisp:nil :type
    (common-lisp:or advanced-event-selectors common-lisp:null))
   (multi-region-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (organization-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (retention-period common-lisp:nil :type
    (common-lisp:or retention-period common-lisp:null))
   (termination-protection-enabled common-lisp:nil :type
    (common-lisp:or termination-protection-enabled common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (updated-timestamp common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or event-data-store-kms-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-event-data-store-response
                    'make-get-event-data-store-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-event-data-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-event-data-store-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-data-store-arn))
      (common-lisp:list
       (common-lisp:cons "EventDataStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-event-selectors))
      (common-lisp:list
       (common-lisp:cons "AdvancedEventSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multi-region-enabled))
      (common-lisp:list
       (common-lisp:cons "MultiRegionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-enabled))
      (common-lisp:list
       (common-lisp:cons "OrganizationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "RetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "TerminationProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "UpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-event-data-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-event-selectors-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-event-selectors-request-"))
   (trail-name (common-lisp:error ":trail-name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-event-selectors-request
                    'make-get-event-selectors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-event-selectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-event-selectors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trail-name))
      (common-lisp:list
       (common-lisp:cons "TrailName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-event-selectors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-event-selectors-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-event-selectors-response-"))
   (trail-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (event-selectors common-lisp:nil :type
    (common-lisp:or event-selectors common-lisp:null))
   (advanced-event-selectors common-lisp:nil :type
    (common-lisp:or advanced-event-selectors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-event-selectors-response
                    'make-get-event-selectors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-event-selectors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-event-selectors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trail-arn))
      (common-lisp:list
       (common-lisp:cons "TrailARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-selectors))
      (common-lisp:list
       (common-lisp:cons "EventSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-event-selectors))
      (common-lisp:list
       (common-lisp:cons "AdvancedEventSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-event-selectors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-import-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-import-request-"))
   (import-id (common-lisp:error ":import-id is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-import-request 'make-get-import-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-import-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-id))
      (common-lisp:list
       (common-lisp:cons "ImportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-import-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-import-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-import-response-"))
   (import-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or import-destinations common-lisp:null))
   (import-source common-lisp:nil :type
    (common-lisp:or import-source common-lisp:null))
   (start-event-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (end-event-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (import-status common-lisp:nil :type
    (common-lisp:or import-status common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (updated-timestamp common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (import-statistics common-lisp:nil :type
    (common-lisp:or import-statistics common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-import-response 'make-get-import-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-import-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-import-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-id))
      (common-lisp:list
       (common-lisp:cons "ImportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-source))
      (common-lisp:list
       (common-lisp:cons "ImportSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-event-time))
      (common-lisp:list
       (common-lisp:cons "StartEventTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-event-time))
      (common-lisp:list
       (common-lisp:cons "EndEventTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-status))
      (common-lisp:list
       (common-lisp:cons "ImportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "UpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-statistics))
      (common-lisp:list
       (common-lisp:cons "ImportStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-import-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-insight-selectors-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-insight-selectors-request-"))
   (trail-name (common-lisp:error ":trail-name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-insight-selectors-request
                    'make-get-insight-selectors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-selectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-selectors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trail-name))
      (common-lisp:list
       (common-lisp:cons "TrailName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-selectors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-insight-selectors-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-insight-selectors-response-"))
   (trail-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (insight-selectors common-lisp:nil :type
    (common-lisp:or insight-selectors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-insight-selectors-response
                    'make-get-insight-selectors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-selectors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-selectors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trail-arn))
      (common-lisp:list
       (common-lisp:cons "TrailARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-selectors))
      (common-lisp:list
       (common-lisp:cons "InsightSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-insight-selectors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-query-results-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-query-results-request-"))
   (event-data-store common-lisp:nil :type
    (common-lisp:or event-data-store-arn common-lisp:null))
   (query-id (common-lisp:error ":query-id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-query-results common-lisp:nil :type
    (common-lisp:or max-query-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-query-results-request
                    'make-get-query-results-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-data-store))
      (common-lisp:list
       (common-lisp:cons "EventDataStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-query-results))
      (common-lisp:list
       (common-lisp:cons "MaxQueryResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-query-results-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-query-results-response-"))
   (query-status common-lisp:nil :type
    (common-lisp:or query-status common-lisp:null))
   (query-statistics common-lisp:nil :type
    (common-lisp:or query-statistics common-lisp:null))
   (query-result-rows common-lisp:nil :type
    (common-lisp:or query-result-rows common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-query-results-response
                    'make-get-query-results-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-status))
      (common-lisp:list
       (common-lisp:cons "QueryStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-statistics))
      (common-lisp:list
       (common-lisp:cons "QueryStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-result-rows))
      (common-lisp:list
       (common-lisp:cons "QueryResultRows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-query-results-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resource-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resource-policy-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resource-policy-request
                    'make-get-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resource-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resource-policy-response-"))
   (resource-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (resource-policy common-lisp:nil :type
    (common-lisp:or resource-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resource-policy-response
                    'make-get-resource-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-policy))
      (common-lisp:list
       (common-lisp:cons "ResourcePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-trail-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-trail-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-trail-request 'make-get-trail-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-trail-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-trail-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-trail-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-trail-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-trail-response-"))
   (trail common-lisp:nil :type (common-lisp:or trail common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-trail-response 'make-get-trail-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-trail-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-trail-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trail))
      (common-lisp:list
       (common-lisp:cons "Trail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-trail-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-trail-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-trail-status-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-trail-status-request 'make-get-trail-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-trail-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-trail-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-trail-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-trail-status-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-trail-status-response-"))
   (is-logging common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (latest-delivery-error common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (latest-notification-error common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (latest-delivery-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (latest-notification-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (start-logging-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (stop-logging-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (latest-cloud-watch-logs-delivery-error common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (latest-cloud-watch-logs-delivery-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (latest-digest-delivery-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (latest-digest-delivery-error common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (latest-delivery-attempt-time common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (latest-notification-attempt-time common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (latest-notification-attempt-succeeded common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (latest-delivery-attempt-succeeded common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (time-logging-started common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (time-logging-stopped common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-trail-status-response
                    'make-get-trail-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-trail-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-trail-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-logging))
      (common-lisp:list
       (common-lisp:cons "IsLogging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-delivery-error))
      (common-lisp:list
       (common-lisp:cons "LatestDeliveryError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-notification-error))
      (common-lisp:list
       (common-lisp:cons "LatestNotificationError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-delivery-time))
      (common-lisp:list
       (common-lisp:cons "LatestDeliveryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-notification-time))
      (common-lisp:list
       (common-lisp:cons "LatestNotificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-logging-time))
      (common-lisp:list
       (common-lisp:cons "StartLoggingTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-logging-time))
      (common-lisp:list
       (common-lisp:cons "StopLoggingTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-cloud-watch-logs-delivery-error))
      (common-lisp:list
       (common-lisp:cons "LatestCloudWatchLogsDeliveryError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-cloud-watch-logs-delivery-time))
      (common-lisp:list
       (common-lisp:cons "LatestCloudWatchLogsDeliveryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-digest-delivery-time))
      (common-lisp:list
       (common-lisp:cons "LatestDigestDeliveryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-digest-delivery-error))
      (common-lisp:list
       (common-lisp:cons "LatestDigestDeliveryError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-delivery-attempt-time))
      (common-lisp:list
       (common-lisp:cons "LatestDeliveryAttemptTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-notification-attempt-time))
      (common-lisp:list
       (common-lisp:cons "LatestNotificationAttemptTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-notification-attempt-succeeded))
      (common-lisp:list
       (common-lisp:cons "LatestNotificationAttemptSucceeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-delivery-attempt-succeeded))
      (common-lisp:list
       (common-lisp:cons "LatestDeliveryAttemptSucceeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-logging-started))
      (common-lisp:list
       (common-lisp:cons "TimeLoggingStarted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-logging-stopped))
      (common-lisp:list
       (common-lisp:cons "TimeLoggingStopped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-trail-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype import-destinations ()
   '(trivial-types:proper-list event-data-store-arn))
 (common-lisp:defun |make-import-destinations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-data-store-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype import-failure-list ()
   '(trivial-types:proper-list import-failure-list-item))
 (common-lisp:defun |make-import-failure-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            import-failure-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (import-failure-list-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-failure-list-item-"))
   (location common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or import-failure-status common-lisp:null))
   (error-type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-failure-list-item 'make-import-failure-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-failure-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-failure-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-type))
      (common-lisp:list
       (common-lisp:cons "ErrorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-failure-list-item))
   common-lisp:nil))
(common-lisp:deftype import-failure-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition import-not-found-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'import-not-found-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (import-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-source-"))
   (s3 (common-lisp:error ":s3 is required") :type
    (common-lisp:or s3import-source common-lisp:null)))
 (common-lisp:export (common-lisp:list 'import-source 'make-import-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3))
      (common-lisp:list
       (common-lisp:cons "S3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-statistics (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-statistics-"))
   (prefixes-found common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (prefixes-completed common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (files-completed common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (events-completed common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (failed-entries common-lisp:nil :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-statistics 'make-import-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefixes-found))
      (common-lisp:list
       (common-lisp:cons "PrefixesFound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefixes-completed))
      (common-lisp:list
       (common-lisp:cons "PrefixesCompleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'files-completed))
      (common-lisp:list
       (common-lisp:cons "FilesCompleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events-completed))
      (common-lisp:list
       (common-lisp:cons "EventsCompleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-entries))
      (common-lisp:list
       (common-lisp:cons "FailedEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-statistics))
   common-lisp:nil))
(common-lisp:deftype import-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype imports-list ()
   '(trivial-types:proper-list imports-list-item))
 (common-lisp:defun |make-imports-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list imports-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (imports-list-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-imports-list-item-"))
   (import-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (import-status common-lisp:nil :type
    (common-lisp:or import-status common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or import-destinations common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (updated-timestamp common-lisp:nil :type
    (common-lisp:or date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'imports-list-item 'make-imports-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input imports-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input imports-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-id))
      (common-lisp:list
       (common-lisp:cons "ImportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-status))
      (common-lisp:list
       (common-lisp:cons "ImportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "UpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input imports-list-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition inactive-event-data-store-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'inactive-event-data-store-exception)))
(common-lisp:progn
 (common-lisp:define-condition inactive-query-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'inactive-query-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (ingestion-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-ingestion-status-"))
   (latest-ingestion-success-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (latest-ingestion-success-event-id common-lisp:nil :type
    (common-lisp:or uuid common-lisp:null))
   (latest-ingestion-error-code common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null))
   (latest-ingestion-attempt-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (latest-ingestion-attempt-event-id common-lisp:nil :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ingestion-status 'make-ingestion-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ingestion-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ingestion-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-ingestion-success-time))
      (common-lisp:list
       (common-lisp:cons "LatestIngestionSuccessTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-ingestion-success-event-id))
      (common-lisp:list
       (common-lisp:cons "LatestIngestionSuccessEventID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-ingestion-error-code))
      (common-lisp:list
       (common-lisp:cons "LatestIngestionErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-ingestion-attempt-time))
      (common-lisp:list
       (common-lisp:cons "LatestIngestionAttemptTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-ingestion-attempt-event-id))
      (common-lisp:list
       (common-lisp:cons "LatestIngestionAttemptEventID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ingestion-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition insight-not-enabled-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'insight-not-enabled-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (insight-selector (:copier common-lisp:nil)
      (:conc-name "struct-shape-insight-selector-"))
   (insight-type common-lisp:nil :type
    (common-lisp:or insight-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'insight-selector 'make-insight-selector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input insight-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input insight-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-type))
      (common-lisp:list
       (common-lisp:cons "InsightType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input insight-selector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype insight-selectors ()
   '(trivial-types:proper-list insight-selector))
 (common-lisp:defun |make-insight-selectors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list insight-selector))
   aws-sdk/generator/shape::members))
(common-lisp:deftype insight-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition insufficient-dependency-service-access-permission-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list
   'insufficient-dependency-service-access-permission-exception)))
(common-lisp:progn
 (common-lisp:define-condition insufficient-encryption-policy-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'insufficient-encryption-policy-exception)))
(common-lisp:progn
 (common-lisp:define-condition insufficient-s3bucket-policy-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'insufficient-s3bucket-policy-exception)))
(common-lisp:progn
 (common-lisp:define-condition insufficient-sns-topic-policy-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'insufficient-sns-topic-policy-exception)))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-cloud-watch-logs-log-group-arn-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-cloud-watch-logs-log-group-arn-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-cloud-watch-logs-role-arn-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-cloud-watch-logs-role-arn-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-date-range-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-date-range-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-event-category-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-event-category-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-event-data-store-category-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-event-data-store-category-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-event-data-store-status-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-event-data-store-status-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-event-selectors-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-event-selectors-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-home-region-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-home-region-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-import-source-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-import-source-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-insight-selectors-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-insight-selectors-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-kms-key-id-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-kms-key-id-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-lookup-attributes-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-lookup-attributes-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-max-results-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-max-results-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-next-token-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-combination-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-combination-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-parameter-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-query-statement-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-query-statement-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-query-status-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-query-status-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-s3bucket-name-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-s3bucket-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-s3prefix-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-s3prefix-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-sns-topic-name-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-sns-topic-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-source-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-source-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-tag-parameter-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-tag-parameter-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-time-range-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-time-range-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-token-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-token-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-trail-name-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-trail-name-exception)))
(common-lisp:progn
 (common-lisp:define-condition kms-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'kms-exception)))
(common-lisp:progn
 (common-lisp:define-condition kms-key-disabled-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'kms-key-disabled-exception)))
(common-lisp:progn
 (common-lisp:define-condition kms-key-not-found-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'kms-key-not-found-exception)))
(common-lisp:deftype list-channels-max-results-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-channels-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-channels-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-channels-max-results-count common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-channels-request 'make-list-channels-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-channels-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-channels-response-"))
   (channels common-lisp:nil :type (common-lisp:or channels common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-channels-response 'make-list-channels-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "Channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-response))
   common-lisp:nil))
(common-lisp:deftype list-event-data-stores-max-results-count ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-event-data-stores-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-event-data-stores-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-event-data-stores-max-results-count
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-event-data-stores-request
                    'make-list-event-data-stores-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-data-stores-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-data-stores-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-data-stores-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-event-data-stores-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-event-data-stores-response-"))
   (event-data-stores common-lisp:nil :type
    (common-lisp:or event-data-stores common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-event-data-stores-response
                    'make-list-event-data-stores-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-data-stores-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-data-stores-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-data-stores))
      (common-lisp:list
       (common-lisp:cons "EventDataStores"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-data-stores-response))
   common-lisp:nil))
(common-lisp:deftype list-import-failures-max-results-count ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-import-failures-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-import-failures-request-"))
   (import-id (common-lisp:error ":import-id is required") :type
    (common-lisp:or uuid common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-import-failures-max-results-count common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-import-failures-request
                    'make-list-import-failures-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-import-failures-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-import-failures-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-id))
      (common-lisp:list
       (common-lisp:cons "ImportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-import-failures-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-import-failures-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-import-failures-response-"))
   (failures common-lisp:nil :type
    (common-lisp:or import-failure-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-import-failures-response
                    'make-list-import-failures-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-import-failures-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-import-failures-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failures))
      (common-lisp:list
       (common-lisp:cons "Failures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-import-failures-response))
   common-lisp:nil))
(common-lisp:deftype list-imports-max-results-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-imports-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-imports-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-imports-max-results-count common-lisp:null))
   (destination common-lisp:nil :type
    (common-lisp:or event-data-store-arn common-lisp:null))
   (import-status common-lisp:nil :type
    (common-lisp:or import-status common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-imports-request 'make-list-imports-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-imports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-imports-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-status))
      (common-lisp:list
       (common-lisp:cons "ImportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-imports-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-imports-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-imports-response-"))
   (imports common-lisp:nil :type
    (common-lisp:or imports-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-imports-response 'make-list-imports-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-imports-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-imports-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'imports))
      (common-lisp:list
       (common-lisp:cons "Imports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-imports-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-public-keys-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-public-keys-request-"))
   (start-time common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-public-keys-request 'make-list-public-keys-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-public-keys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-public-keys-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-public-keys-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-public-keys-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-public-keys-response-"))
   (public-key-list common-lisp:nil :type
    (common-lisp:or public-key-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-public-keys-response
                    'make-list-public-keys-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-public-keys-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-public-keys-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key-list))
      (common-lisp:list
       (common-lisp:cons "PublicKeyList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-public-keys-response))
   common-lisp:nil))
(common-lisp:deftype list-queries-max-results-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-queries-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-queries-request-"))
   (event-data-store (common-lisp:error ":event-data-store is required") :type
    (common-lisp:or event-data-store-arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-queries-max-results-count common-lisp:null))
   (start-time common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (query-status common-lisp:nil :type
    (common-lisp:or query-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-queries-request 'make-list-queries-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-queries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-queries-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-data-store))
      (common-lisp:list
       (common-lisp:cons "EventDataStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-status))
      (common-lisp:list
       (common-lisp:cons "QueryStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-queries-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-queries-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-queries-response-"))
   (queries common-lisp:nil :type (common-lisp:or queries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-queries-response 'make-list-queries-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-queries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-queries-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'queries))
      (common-lisp:list
       (common-lisp:cons "Queries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-queries-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-request-"))
   (resource-id-list (common-lisp:error ":resource-id-list is required") :type
    (common-lisp:or resource-id-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-request 'make-list-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id-list))
      (common-lisp:list
       (common-lisp:cons "ResourceIdList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-response-"))
   (resource-tag-list common-lisp:nil :type
    (common-lisp:or resource-tag-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-response 'make-list-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-tag-list))
      (common-lisp:list
       (common-lisp:cons "ResourceTagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-trails-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-trails-request-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-trails-request 'make-list-trails-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-trails-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-trails-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-trails-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-trails-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-trails-response-"))
   (trails common-lisp:nil :type (common-lisp:or trails common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-trails-response 'make-list-trails-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-trails-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-trails-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trails))
      (common-lisp:list
       (common-lisp:cons "Trails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-trails-response))
   common-lisp:nil))
(common-lisp:deftype location () 'common-lisp:string)
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (lookup-attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-lookup-attribute-"))
   (attribute-key (common-lisp:error ":attribute-key is required") :type
    (common-lisp:or lookup-attribute-key common-lisp:null))
   (attribute-value (common-lisp:error ":attribute-value is required") :type
    (common-lisp:or lookup-attribute-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lookup-attribute 'make-lookup-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lookup-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lookup-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-key))
      (common-lisp:list
       (common-lisp:cons "AttributeKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-value))
      (common-lisp:list
       (common-lisp:cons "AttributeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lookup-attribute))
   common-lisp:nil))
(common-lisp:deftype lookup-attribute-key () 'common-lisp:string)
(common-lisp:deftype lookup-attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype lookup-attributes-list ()
   '(trivial-types:proper-list lookup-attribute))
 (common-lisp:defun |make-lookup-attributes-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lookup-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (lookup-events-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-lookup-events-request-"))
   (lookup-attributes common-lisp:nil :type
    (common-lisp:or lookup-attributes-list common-lisp:null))
   (start-time common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or date common-lisp:null))
   (event-category common-lisp:nil :type
    (common-lisp:or event-category common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lookup-events-request 'make-lookup-events-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lookup-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lookup-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lookup-attributes))
      (common-lisp:list
       (common-lisp:cons "LookupAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-category))
      (common-lisp:list
       (common-lisp:cons "EventCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lookup-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lookup-events-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-lookup-events-response-"))
   (events common-lisp:nil :type (common-lisp:or events-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lookup-events-response 'make-lookup-events-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lookup-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lookup-events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lookup-events-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition max-concurrent-queries-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'max-concurrent-queries-exception)))
(common-lisp:deftype max-query-results () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition maximum-number-of-trails-exceeded-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'maximum-number-of-trails-exceeded-exception)))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition no-management-account-slrexists-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'no-management-account-slrexists-exception)))
(common-lisp:progn
 (common-lisp:define-condition not-organization-management-account-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'not-organization-management-account-exception)))
(common-lisp:progn
 (common-lisp:define-condition not-organization-master-account-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'not-organization-master-account-exception)))
(common-lisp:progn
 (common-lisp:define-condition operation-not-permitted-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'operation-not-permitted-exception)))
(common-lisp:progn
 (common-lisp:deftype operator () '(trivial-types:proper-list operator-value))
 (common-lisp:defun |make-operator|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list operator-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype operator-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition organization-not-in-all-features-mode-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'organization-not-in-all-features-mode-exception)))
(common-lisp:progn
 (common-lisp:define-condition organizations-not-in-use-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'organizations-not-in-use-exception)))
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (public-key (:copier common-lisp:nil)
      (:conc-name "struct-shape-public-key-"))
   (value common-lisp:nil :type (common-lisp:or byte-buffer common-lisp:null))
   (validity-start-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (validity-end-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (fingerprint common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'public-key 'make-public-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input public-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input public-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validity-start-time))
      (common-lisp:list
       (common-lisp:cons "ValidityStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validity-end-time))
      (common-lisp:list
       (common-lisp:cons "ValidityEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fingerprint))
      (common-lisp:list
       (common-lisp:cons "Fingerprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input public-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype public-key-list ()
   '(trivial-types:proper-list public-key))
 (common-lisp:defun |make-public-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list public-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (put-event-selectors-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-event-selectors-request-"))
   (trail-name (common-lisp:error ":trail-name is required") :type
    (common-lisp:or string common-lisp:null))
   (event-selectors common-lisp:nil :type
    (common-lisp:or event-selectors common-lisp:null))
   (advanced-event-selectors common-lisp:nil :type
    (common-lisp:or advanced-event-selectors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-event-selectors-request
                    'make-put-event-selectors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-event-selectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-event-selectors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trail-name))
      (common-lisp:list
       (common-lisp:cons "TrailName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-selectors))
      (common-lisp:list
       (common-lisp:cons "EventSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-event-selectors))
      (common-lisp:list
       (common-lisp:cons "AdvancedEventSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-event-selectors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-event-selectors-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-event-selectors-response-"))
   (trail-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (event-selectors common-lisp:nil :type
    (common-lisp:or event-selectors common-lisp:null))
   (advanced-event-selectors common-lisp:nil :type
    (common-lisp:or advanced-event-selectors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-event-selectors-response
                    'make-put-event-selectors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-event-selectors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-event-selectors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trail-arn))
      (common-lisp:list
       (common-lisp:cons "TrailARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-selectors))
      (common-lisp:list
       (common-lisp:cons "EventSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-event-selectors))
      (common-lisp:list
       (common-lisp:cons "AdvancedEventSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-event-selectors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-insight-selectors-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-insight-selectors-request-"))
   (trail-name (common-lisp:error ":trail-name is required") :type
    (common-lisp:or string common-lisp:null))
   (insight-selectors (common-lisp:error ":insight-selectors is required")
    :type (common-lisp:or insight-selectors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-insight-selectors-request
                    'make-put-insight-selectors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-insight-selectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-insight-selectors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trail-name))
      (common-lisp:list
       (common-lisp:cons "TrailName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-selectors))
      (common-lisp:list
       (common-lisp:cons "InsightSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-insight-selectors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-insight-selectors-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-insight-selectors-response-"))
   (trail-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (insight-selectors common-lisp:nil :type
    (common-lisp:or insight-selectors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-insight-selectors-response
                    'make-put-insight-selectors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-insight-selectors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-insight-selectors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trail-arn))
      (common-lisp:list
       (common-lisp:cons "TrailARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insight-selectors))
      (common-lisp:list
       (common-lisp:cons "InsightSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-insight-selectors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-resource-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-resource-policy-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (resource-policy (common-lisp:error ":resource-policy is required") :type
    (common-lisp:or resource-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-request
                    'make-put-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-policy))
      (common-lisp:list
       (common-lisp:cons "ResourcePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-resource-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-resource-policy-response-"))
   (resource-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (resource-policy common-lisp:nil :type
    (common-lisp:or resource-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-response
                    'make-put-resource-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-policy))
      (common-lisp:list
       (common-lisp:cons "ResourcePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype queries () '(trivial-types:proper-list query))
 (common-lisp:defun |make-queries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list query))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (query (:copier common-lisp:nil) (:conc-name "struct-shape-query-"))
   (query-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (query-status common-lisp:nil :type
    (common-lisp:or query-status common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null)))
 (common-lisp:export (common-lisp:list 'query 'make-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-status))
      (common-lisp:list
       (common-lisp:cons "QueryStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition query-id-not-found-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'query-id-not-found-exception)))
(common-lisp:progn
 (common-lisp:deftype query-result-column () 'common-lisp:hash-table)
 (common-lisp:defun |make-query-result-column|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype query-result-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype query-result-row ()
   '(trivial-types:proper-list query-result-column))
 (common-lisp:defun |make-query-result-row|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list query-result-column))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype query-result-rows ()
   '(trivial-types:proper-list query-result-row))
 (common-lisp:defun |make-query-result-rows|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list query-result-row))
   aws-sdk/generator/shape::members))
(common-lisp:deftype query-result-value () 'common-lisp:string)
(common-lisp:deftype query-statement () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (query-statistics (:copier common-lisp:nil)
      (:conc-name "struct-shape-query-statistics-"))
   (results-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (total-results-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (bytes-scanned common-lisp:nil :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'query-statistics 'make-query-statistics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results-count))
      (common-lisp:list
       (common-lisp:cons "ResultsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-results-count))
      (common-lisp:list
       (common-lisp:cons "TotalResultsCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-scanned))
      (common-lisp:list
       (common-lisp:cons "BytesScanned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (query-statistics-for-describe-query (:copier common-lisp:nil)
      (:conc-name "struct-shape-query-statistics-for-describe-query-"))
   (events-matched common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (events-scanned common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (bytes-scanned common-lisp:nil :type (common-lisp:or long common-lisp:null))
   (execution-time-in-millis common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'query-statistics-for-describe-query
                    'make-query-statistics-for-describe-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-statistics-for-describe-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-statistics-for-describe-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events-matched))
      (common-lisp:list
       (common-lisp:cons "EventsMatched"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events-scanned))
      (common-lisp:list
       (common-lisp:cons "EventsScanned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bytes-scanned))
      (common-lisp:list
       (common-lisp:cons "BytesScanned"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-time-in-millis))
      (common-lisp:list
       (common-lisp:cons "ExecutionTimeInMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-statistics-for-describe-query))
   common-lisp:nil))
(common-lisp:deftype query-status () 'common-lisp:string)
(common-lisp:deftype read-write-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (register-organization-delegated-admin-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-register-organization-delegated-admin-request-"))
   (member-account-id (common-lisp:error ":member-account-id is required")
    :type (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-organization-delegated-admin-request
                    'make-register-organization-delegated-admin-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-organization-delegated-admin-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-organization-delegated-admin-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-account-id))
      (common-lisp:list
       (common-lisp:cons "MemberAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-organization-delegated-admin-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-organization-delegated-admin-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-register-organization-delegated-admin-response-")))
 (common-lisp:export
  (common-lisp:list 'register-organization-delegated-admin-response
                    'make-register-organization-delegated-admin-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-organization-delegated-admin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-organization-delegated-admin-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-organization-delegated-admin-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-tags-request-"))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or string common-lisp:null))
   (tags-list (common-lisp:error ":tags-list is required") :type
    (common-lisp:or tags-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-tags-request 'make-remove-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remove-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remove-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags-list))
      (common-lisp:list
       (common-lisp:cons "TagsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remove-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-tags-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-tags-response-")))
 (common-lisp:export
  (common-lisp:list 'remove-tags-response 'make-remove-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remove-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remove-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remove-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource (:copier common-lisp:nil) (:conc-name "struct-shape-resource-"))
   (resource-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (resource-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource 'make-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-arnnot-valid-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-arnnot-valid-exception)))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-id-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-resource-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype resource-list () '(trivial-types:proper-list resource))
 (common-lisp:defun |make-resource-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-found-exception)))
(common-lisp:deftype resource-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-policy-not-found-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-policy-not-found-exception)))
(common-lisp:progn
 (common-lisp:define-condition resource-policy-not-valid-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-policy-not-valid-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-tag (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-tag-"))
   (resource-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (tags-list common-lisp:nil :type
    (common-lisp:or tags-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-tag 'make-resource-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags-list))
      (common-lisp:list
       (common-lisp:cons "TagsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-tag-list ()
   '(trivial-types:proper-list resource-tag))
 (common-lisp:defun |make-resource-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-type-not-supported-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-type-not-supported-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-event-data-store-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-event-data-store-request-"))
   (event-data-store (common-lisp:error ":event-data-store is required") :type
    (common-lisp:or event-data-store-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-event-data-store-request
                    'make-restore-event-data-store-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-event-data-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-event-data-store-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-data-store))
      (common-lisp:list
       (common-lisp:cons "EventDataStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-event-data-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (restore-event-data-store-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-restore-event-data-store-response-"))
   (event-data-store-arn common-lisp:nil :type
    (common-lisp:or event-data-store-arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or event-data-store-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or event-data-store-status common-lisp:null))
   (advanced-event-selectors common-lisp:nil :type
    (common-lisp:or advanced-event-selectors common-lisp:null))
   (multi-region-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (organization-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (retention-period common-lisp:nil :type
    (common-lisp:or retention-period common-lisp:null))
   (termination-protection-enabled common-lisp:nil :type
    (common-lisp:or termination-protection-enabled common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (updated-timestamp common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or event-data-store-kms-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'restore-event-data-store-response
                    'make-restore-event-data-store-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          restore-event-data-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          restore-event-data-store-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-data-store-arn))
      (common-lisp:list
       (common-lisp:cons "EventDataStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-event-selectors))
      (common-lisp:list
       (common-lisp:cons "AdvancedEventSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multi-region-enabled))
      (common-lisp:list
       (common-lisp:cons "MultiRegionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-enabled))
      (common-lisp:list
       (common-lisp:cons "OrganizationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "RetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "TerminationProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "UpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          restore-event-data-store-response))
   common-lisp:nil))
(common-lisp:deftype retention-period () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition s3bucket-does-not-exist-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 's3bucket-does-not-exist-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (s3import-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3import-source-"))
   (s3location-uri (common-lisp:error ":s3location-uri is required") :type
    (common-lisp:or string common-lisp:null))
   (s3bucket-region (common-lisp:error ":s3bucket-region is required") :type
    (common-lisp:or string common-lisp:null))
   (s3bucket-access-role-arn
    (common-lisp:error ":s3bucket-access-role-arn is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3import-source 'make-s3import-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3import-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3import-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3location-uri))
      (common-lisp:list
       (common-lisp:cons "S3LocationUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-region))
      (common-lisp:list
       (common-lisp:cons "S3BucketRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3bucket-access-role-arn))
      (common-lisp:list
       (common-lisp:cons "S3BucketAccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3import-source))
   common-lisp:nil))
(common-lisp:deftype selector-field () 'common-lisp:string)
(common-lisp:deftype selector-name () 'common-lisp:string)
(common-lisp:deftype source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (source-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-config-"))
   (apply-to-all-regions common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (advanced-event-selectors common-lisp:nil :type
    (common-lisp:or advanced-event-selectors common-lisp:null)))
 (common-lisp:export (common-lisp:list 'source-config 'make-source-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'apply-to-all-regions))
      (common-lisp:list
       (common-lisp:cons "ApplyToAllRegions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-event-selectors))
      (common-lisp:list
       (common-lisp:cons "AdvancedEventSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-import-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-import-request-"))
   (destinations common-lisp:nil :type
    (common-lisp:or import-destinations common-lisp:null))
   (import-source common-lisp:nil :type
    (common-lisp:or import-source common-lisp:null))
   (start-event-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (end-event-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (import-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-import-request 'make-start-import-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-import-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-source))
      (common-lisp:list
       (common-lisp:cons "ImportSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-event-time))
      (common-lisp:list
       (common-lisp:cons "StartEventTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-event-time))
      (common-lisp:list
       (common-lisp:cons "EndEventTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-id))
      (common-lisp:list
       (common-lisp:cons "ImportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-import-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-import-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-import-response-"))
   (import-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or import-destinations common-lisp:null))
   (import-source common-lisp:nil :type
    (common-lisp:or import-source common-lisp:null))
   (start-event-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (end-event-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (import-status common-lisp:nil :type
    (common-lisp:or import-status common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (updated-timestamp common-lisp:nil :type
    (common-lisp:or date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-import-response 'make-start-import-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-import-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-import-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-id))
      (common-lisp:list
       (common-lisp:cons "ImportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-source))
      (common-lisp:list
       (common-lisp:cons "ImportSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-event-time))
      (common-lisp:list
       (common-lisp:cons "StartEventTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-event-time))
      (common-lisp:list
       (common-lisp:cons "EndEventTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-status))
      (common-lisp:list
       (common-lisp:cons "ImportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "UpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-import-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-logging-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-logging-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-logging-request 'make-start-logging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-logging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-logging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-logging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-logging-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-logging-response-")))
 (common-lisp:export
  (common-lisp:list 'start-logging-response 'make-start-logging-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-logging-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-logging-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-logging-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-query-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-query-request-"))
   (query-statement (common-lisp:error ":query-statement is required") :type
    (common-lisp:or query-statement common-lisp:null))
   (delivery-s3uri common-lisp:nil :type
    (common-lisp:or delivery-s3uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-query-request 'make-start-query-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-query-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-query-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-statement))
      (common-lisp:list
       (common-lisp:cons "QueryStatement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-s3uri))
      (common-lisp:list
       (common-lisp:cons "DeliveryS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-query-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-query-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-query-response-"))
   (query-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-query-response 'make-start-query-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-query-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-query-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-id))
      (common-lisp:list
       (common-lisp:cons "QueryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-query-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-import-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-import-request-"))
   (import-id (common-lisp:error ":import-id is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-import-request 'make-stop-import-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-import-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-import-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-id))
      (common-lisp:list
       (common-lisp:cons "ImportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-import-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-import-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-import-response-"))
   (import-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (import-source common-lisp:nil :type
    (common-lisp:or import-source common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or import-destinations common-lisp:null))
   (import-status common-lisp:nil :type
    (common-lisp:or import-status common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (updated-timestamp common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (start-event-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (end-event-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (import-statistics common-lisp:nil :type
    (common-lisp:or import-statistics common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-import-response 'make-stop-import-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-import-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-import-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-id))
      (common-lisp:list
       (common-lisp:cons "ImportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-source))
      (common-lisp:list
       (common-lisp:cons "ImportSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-status))
      (common-lisp:list
       (common-lisp:cons "ImportStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "UpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-event-time))
      (common-lisp:list
       (common-lisp:cons "StartEventTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-event-time))
      (common-lisp:list
       (common-lisp:cons "EndEventTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-statistics))
      (common-lisp:list
       (common-lisp:cons "ImportStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-import-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-logging-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-logging-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-logging-request 'make-stop-logging-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-logging-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-logging-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-logging-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-logging-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-logging-response-")))
 (common-lisp:export
  (common-lisp:list 'stop-logging-response 'make-stop-logging-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-logging-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-logging-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-logging-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition tags-limit-exceeded-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'tags-limit-exceeded-exception)))
(common-lisp:progn
 (common-lisp:deftype tags-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tags-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype termination-protection-enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (trail (:copier common-lisp:nil) (:conc-name "struct-shape-trail-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (s3bucket-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (s3key-prefix common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (sns-topic-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (sns-topic-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (include-global-service-events common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (is-multi-region-trail common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (home-region common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (trail-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (log-file-validation-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (cloud-watch-logs-log-group-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cloud-watch-logs-role-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (has-custom-event-selectors common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (has-insight-selectors common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (is-organization-trail common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'trail 'make-trail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "S3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-name))
      (common-lisp:list
       (common-lisp:cons "SnsTopicName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-global-service-events))
      (common-lisp:list
       (common-lisp:cons "IncludeGlobalServiceEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-multi-region-trail))
      (common-lisp:list
       (common-lisp:cons "IsMultiRegionTrail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-region))
      (common-lisp:list
       (common-lisp:cons "HomeRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trail-arn))
      (common-lisp:list
       (common-lisp:cons "TrailARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-file-validation-enabled))
      (common-lisp:list
       (common-lisp:cons "LogFileValidationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-log-group-arn))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsLogGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-role-arn))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'has-custom-event-selectors))
      (common-lisp:list
       (common-lisp:cons "HasCustomEventSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'has-insight-selectors))
      (common-lisp:list
       (common-lisp:cons "HasInsightSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-organization-trail))
      (common-lisp:list
       (common-lisp:cons "IsOrganizationTrail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition trail-already-exists-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'trail-already-exists-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (trail-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-trail-info-"))
   (trail-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (home-region common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'trail-info 'make-trail-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trail-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trail-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trail-arn))
      (common-lisp:list
       (common-lisp:cons "TrailARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-region))
      (common-lisp:list
       (common-lisp:cons "HomeRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trail-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype trail-list () '(trivial-types:proper-list trail))
 (common-lisp:defun |make-trail-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype trail-name-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-trail-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition trail-not-found-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'trail-not-found-exception)))
(common-lisp:progn
 (common-lisp:define-condition trail-not-provided-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'trail-not-provided-exception)))
(common-lisp:progn
 (common-lisp:deftype trails () '(trivial-types:proper-list trail-info))
 (common-lisp:defun |make-trails|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trail-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unsupported-operation-exception
     (cloudtrail-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'unsupported-operation-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-channel-request-"))
   (channel (common-lisp:error ":channel is required") :type
    (common-lisp:or channel-arn common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or destinations common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or channel-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-channel-request 'make-update-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-channel-response-"))
   (channel-arn common-lisp:nil :type
    (common-lisp:or channel-arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or channel-name common-lisp:null))
   (source common-lisp:nil :type (common-lisp:or source common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or destinations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-channel-response 'make-update-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-arn))
      (common-lisp:list
       (common-lisp:cons "ChannelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-event-data-store-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-event-data-store-request-"))
   (event-data-store (common-lisp:error ":event-data-store is required") :type
    (common-lisp:or event-data-store-arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or event-data-store-name common-lisp:null))
   (advanced-event-selectors common-lisp:nil :type
    (common-lisp:or advanced-event-selectors common-lisp:null))
   (multi-region-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (organization-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (retention-period common-lisp:nil :type
    (common-lisp:or retention-period common-lisp:null))
   (termination-protection-enabled common-lisp:nil :type
    (common-lisp:or termination-protection-enabled common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or event-data-store-kms-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-event-data-store-request
                    'make-update-event-data-store-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-event-data-store-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-event-data-store-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-data-store))
      (common-lisp:list
       (common-lisp:cons "EventDataStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-event-selectors))
      (common-lisp:list
       (common-lisp:cons "AdvancedEventSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multi-region-enabled))
      (common-lisp:list
       (common-lisp:cons "MultiRegionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-enabled))
      (common-lisp:list
       (common-lisp:cons "OrganizationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "RetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "TerminationProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-event-data-store-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-event-data-store-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-event-data-store-response-"))
   (event-data-store-arn common-lisp:nil :type
    (common-lisp:or event-data-store-arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or event-data-store-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or event-data-store-status common-lisp:null))
   (advanced-event-selectors common-lisp:nil :type
    (common-lisp:or advanced-event-selectors common-lisp:null))
   (multi-region-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (organization-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (retention-period common-lisp:nil :type
    (common-lisp:or retention-period common-lisp:null))
   (termination-protection-enabled common-lisp:nil :type
    (common-lisp:or termination-protection-enabled common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (updated-timestamp common-lisp:nil :type
    (common-lisp:or date common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or event-data-store-kms-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-event-data-store-response
                    'make-update-event-data-store-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-event-data-store-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-event-data-store-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-data-store-arn))
      (common-lisp:list
       (common-lisp:cons "EventDataStoreArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-event-selectors))
      (common-lisp:list
       (common-lisp:cons "AdvancedEventSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multi-region-enabled))
      (common-lisp:list
       (common-lisp:cons "MultiRegionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organization-enabled))
      (common-lisp:list
       (common-lisp:cons "OrganizationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "RetentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-protection-enabled))
      (common-lisp:list
       (common-lisp:cons "TerminationProtectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "UpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-event-data-store-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-trail-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-trail-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string common-lisp:null))
   (s3bucket-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (s3key-prefix common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (sns-topic-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (include-global-service-events common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (is-multi-region-trail common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (enable-log-file-validation common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (cloud-watch-logs-log-group-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cloud-watch-logs-role-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (is-organization-trail common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-trail-request 'make-update-trail-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-trail-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-trail-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "S3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-name))
      (common-lisp:list
       (common-lisp:cons "SnsTopicName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-global-service-events))
      (common-lisp:list
       (common-lisp:cons "IncludeGlobalServiceEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-multi-region-trail))
      (common-lisp:list
       (common-lisp:cons "IsMultiRegionTrail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-log-file-validation))
      (common-lisp:list
       (common-lisp:cons "EnableLogFileValidation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-log-group-arn))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsLogGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-role-arn))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-organization-trail))
      (common-lisp:list
       (common-lisp:cons "IsOrganizationTrail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-trail-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-trail-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-trail-response-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (s3bucket-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (s3key-prefix common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (sns-topic-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (sns-topic-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (include-global-service-events common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (is-multi-region-trail common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (trail-arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (log-file-validation-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (cloud-watch-logs-log-group-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (cloud-watch-logs-role-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (kms-key-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (is-organization-trail common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-trail-response 'make-update-trail-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-trail-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-trail-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key-prefix))
      (common-lisp:list
       (common-lisp:cons "S3KeyPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-name))
      (common-lisp:list
       (common-lisp:cons "SnsTopicName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-global-service-events))
      (common-lisp:list
       (common-lisp:cons "IncludeGlobalServiceEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-multi-region-trail))
      (common-lisp:list
       (common-lisp:cons "IsMultiRegionTrail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trail-arn))
      (common-lisp:list
       (common-lisp:cons "TrailARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-file-validation-enabled))
      (common-lisp:list
       (common-lisp:cons "LogFileValidationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-log-group-arn))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsLogGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-role-arn))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-organization-trail))
      (common-lisp:list
       (common-lisp:cons "IsOrganizationTrail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-trail-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun add-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id tags-list)
   (common-lisp:declare (common-lisp:ignorable resource-id tags-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "AddTags"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-tags))
(common-lisp:progn
 (common-lisp:defun cancel-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-data-store query-id)
   (common-lisp:declare (common-lisp:ignorable event-data-store query-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-query-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CancelQuery"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-query))
(common-lisp:progn
 (common-lisp:defun create-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name source destinations tags)
   (common-lisp:declare (common-lisp:ignorable name source destinations tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateChannel"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-channel))
(common-lisp:progn
 (common-lisp:defun create-event-data-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name advanced-event-selectors
                     multi-region-enabled organization-enabled retention-period
                     termination-protection-enabled tags-list kms-key-id)
   (common-lisp:declare
    (common-lisp:ignorable name advanced-event-selectors multi-region-enabled
     organization-enabled retention-period termination-protection-enabled
     tags-list kms-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-event-data-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateEventDataStore"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-event-data-store))
(common-lisp:progn
 (common-lisp:defun create-trail
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name s3bucket-name s3key-prefix
                     sns-topic-name include-global-service-events
                     is-multi-region-trail enable-log-file-validation
                     cloud-watch-logs-log-group-arn cloud-watch-logs-role-arn
                     kms-key-id is-organization-trail tags-list)
   (common-lisp:declare
    (common-lisp:ignorable name s3bucket-name s3key-prefix sns-topic-name
     include-global-service-events is-multi-region-trail
     enable-log-file-validation cloud-watch-logs-log-group-arn
     cloud-watch-logs-role-arn kms-key-id is-organization-trail tags-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-trail-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateTrail"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-trail))
(common-lisp:progn
 (common-lisp:defun delete-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel)
   (common-lisp:declare (common-lisp:ignorable channel))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteChannel"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-channel))
(common-lisp:progn
 (common-lisp:defun delete-event-data-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-data-store)
   (common-lisp:declare (common-lisp:ignorable event-data-store))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-event-data-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEventDataStore"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-event-data-store))
(common-lisp:progn
 (common-lisp:defun delete-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteResourcePolicy"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-resource-policy))
(common-lisp:progn
 (common-lisp:defun delete-trail
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-trail-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteTrail"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-trail))
(common-lisp:progn
 (common-lisp:defun deregister-organization-delegated-admin
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key delegated-admin-account-id)
   (common-lisp:declare (common-lisp:ignorable delegated-admin-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-organization-delegated-admin-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeregisterOrganizationDelegatedAdmin"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-organization-delegated-admin))
(common-lisp:progn
 (common-lisp:defun describe-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-data-store query-id)
   (common-lisp:declare (common-lisp:ignorable event-data-store query-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-query-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeQuery"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-query))
(common-lisp:progn
 (common-lisp:defun describe-trails
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trail-name-list include-shadow-trails)
   (common-lisp:declare
    (common-lisp:ignorable trail-name-list include-shadow-trails))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-trails-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeTrails"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-trails))
(common-lisp:progn
 (common-lisp:defun get-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel)
   (common-lisp:declare (common-lisp:ignorable channel))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetChannel"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-channel))
(common-lisp:progn
 (common-lisp:defun get-event-data-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-data-store)
   (common-lisp:declare (common-lisp:ignorable event-data-store))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-event-data-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetEventDataStore"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-event-data-store))
(common-lisp:progn
 (common-lisp:defun get-event-selectors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trail-name)
   (common-lisp:declare (common-lisp:ignorable trail-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-event-selectors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetEventSelectors"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-event-selectors))
(common-lisp:progn
 (common-lisp:defun get-import
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key import-id)
   (common-lisp:declare (common-lisp:ignorable import-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-import-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetImport"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-import))
(common-lisp:progn
 (common-lisp:defun get-insight-selectors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trail-name)
   (common-lisp:declare (common-lisp:ignorable trail-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-insight-selectors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetInsightSelectors"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-insight-selectors))
(common-lisp:progn
 (common-lisp:defun get-query-results
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-data-store query-id next-token
                     max-query-results)
   (common-lisp:declare
    (common-lisp:ignorable event-data-store query-id next-token
     max-query-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-query-results-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetQueryResults"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-query-results))
(common-lisp:progn
 (common-lisp:defun get-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetResourcePolicy"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resource-policy))
(common-lisp:progn
 (common-lisp:defun get-trail
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-trail-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetTrail"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-trail))
(common-lisp:progn
 (common-lisp:defun get-trail-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-trail-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTrailStatus"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-trail-status))
(common-lisp:progn
 (common-lisp:defun list-channels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-channels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListChannels"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-channels))
(common-lisp:progn
 (common-lisp:defun list-event-data-stores
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-event-data-stores-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListEventDataStores"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-event-data-stores))
(common-lisp:progn
 (common-lisp:defun list-import-failures
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key import-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable import-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-import-failures-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListImportFailures"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-import-failures))
(common-lisp:progn
 (common-lisp:defun list-imports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results destination import-status
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable max-results destination import-status next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-imports-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListImports"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-imports))
(common-lisp:progn
 (common-lisp:defun list-public-keys
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key start-time end-time next-token)
   (common-lisp:declare (common-lisp:ignorable start-time end-time next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-public-keys-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPublicKeys"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-public-keys))
(common-lisp:progn
 (common-lisp:defun list-queries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-data-store next-token max-results
                     start-time end-time query-status)
   (common-lisp:declare
    (common-lisp:ignorable event-data-store next-token max-results start-time
     end-time query-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-queries-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListQueries"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-queries))
(common-lisp:progn
 (common-lisp:defun list-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id-list next-token)
   (common-lisp:declare (common-lisp:ignorable resource-id-list next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListTags"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags))
(common-lisp:progn
 (common-lisp:defun list-trails
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-trails-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListTrails"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-trails))
(common-lisp:progn
 (common-lisp:defun lookup-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lookup-attributes start-time end-time
                     event-category max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable lookup-attributes start-time end-time event-category
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-lookup-events-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "LookupEvents"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'lookup-events))
(common-lisp:progn
 (common-lisp:defun put-event-selectors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trail-name event-selectors
                     advanced-event-selectors)
   (common-lisp:declare
    (common-lisp:ignorable trail-name event-selectors
     advanced-event-selectors))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-event-selectors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutEventSelectors"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-event-selectors))
(common-lisp:progn
 (common-lisp:defun put-insight-selectors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trail-name insight-selectors)
   (common-lisp:declare (common-lisp:ignorable trail-name insight-selectors))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-insight-selectors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutInsightSelectors"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-insight-selectors))
(common-lisp:progn
 (common-lisp:defun put-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn resource-policy)
   (common-lisp:declare (common-lisp:ignorable resource-arn resource-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutResourcePolicy"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-resource-policy))
(common-lisp:progn
 (common-lisp:defun register-organization-delegated-admin
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key member-account-id)
   (common-lisp:declare (common-lisp:ignorable member-account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-register-organization-delegated-admin-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterOrganizationDelegatedAdmin"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-organization-delegated-admin))
(common-lisp:progn
 (common-lisp:defun remove-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id tags-list)
   (common-lisp:declare (common-lisp:ignorable resource-id tags-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "RemoveTags"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-tags))
(common-lisp:progn
 (common-lisp:defun restore-event-data-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-data-store)
   (common-lisp:declare (common-lisp:ignorable event-data-store))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-restore-event-data-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RestoreEventDataStore"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'restore-event-data-store))
(common-lisp:progn
 (common-lisp:defun start-import
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destinations import-source
                     start-event-time end-event-time import-id)
   (common-lisp:declare
    (common-lisp:ignorable destinations import-source start-event-time
     end-event-time import-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-import-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartImport"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-import))
(common-lisp:progn
 (common-lisp:defun start-logging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-logging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartLogging"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-logging))
(common-lisp:progn
 (common-lisp:defun start-query
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key query-statement delivery-s3uri)
   (common-lisp:declare (common-lisp:ignorable query-statement delivery-s3uri))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-query-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "StartQuery"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-query))
(common-lisp:progn
 (common-lisp:defun stop-import
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key import-id)
   (common-lisp:declare (common-lisp:ignorable import-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-import-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "StopImport"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-import))
(common-lisp:progn
 (common-lisp:defun stop-logging
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-logging-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopLogging"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-logging))
(common-lisp:progn
 (common-lisp:defun update-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel destinations name)
   (common-lisp:declare (common-lisp:ignorable channel destinations name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateChannel"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-channel))
(common-lisp:progn
 (common-lisp:defun update-event-data-store
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key event-data-store name
                     advanced-event-selectors multi-region-enabled
                     organization-enabled retention-period
                     termination-protection-enabled kms-key-id)
   (common-lisp:declare
    (common-lisp:ignorable event-data-store name advanced-event-selectors
     multi-region-enabled organization-enabled retention-period
     termination-protection-enabled kms-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-event-data-store-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateEventDataStore"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-event-data-store))
(common-lisp:progn
 (common-lisp:defun update-trail
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name s3bucket-name s3key-prefix
                     sns-topic-name include-global-service-events
                     is-multi-region-trail enable-log-file-validation
                     cloud-watch-logs-log-group-arn cloud-watch-logs-role-arn
                     kms-key-id is-organization-trail)
   (common-lisp:declare
    (common-lisp:ignorable name s3bucket-name s3key-prefix sns-topic-name
     include-global-service-events is-multi-region-trail
     enable-log-file-validation cloud-watch-logs-log-group-arn
     cloud-watch-logs-role-arn kms-key-id is-organization-trail))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-trail-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudtrail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateTrail"
                                                        "2013-11-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-trail))
