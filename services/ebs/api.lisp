;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/ebs/api
  (:use)
  (:nicknames #:aws/ebs)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/ebs/api)
(common-lisp:progn
 (common-lisp:defclass ebs-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "ebs" :protocol :rest-json))
 (common-lisp:export 'ebs-request))
(common-lisp:progn
 (common-lisp:define-condition ebs-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'ebs-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConcurrentLimitExceededException" . concurrent-limit-exceeded-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("RequestThrottledException" . request-throttled-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (ebs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       access-denied-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message
                    'access-denied-exception-reason)))
(common-lisp:deftype access-denied-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass block common-lisp:nil
                       ((block-token :initarg :block-token :type
                         (common-lisp:or block-token common-lisp:null)
                         :accessor %block-block-token :initform
                         common-lisp:nil)
                        (block-index :initarg :block-index :type
                         (common-lisp:or block-index common-lisp:null)
                         :accessor %block-block-index :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'block 'make-block))
 (common-lisp:defun make-block
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key block-token block-index)
   (common-lisp:apply #'common-lisp:make-instance 'block
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input block))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input block))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-index))
      (common-lisp:list
       (common-lisp:cons "BlockIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-token))
      (common-lisp:list
       (common-lisp:cons "BlockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input block))
   common-lisp:nil))
(common-lisp:deftype block-data ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype block-index () 'common-lisp:integer)
(common-lisp:deftype block-size () 'common-lisp:integer)
(common-lisp:deftype block-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype blocks () '(trivial-types:proper-list block))
 (common-lisp:defun |make-blocks|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list block))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass changed-block common-lisp:nil
                       ((second-block-token :initarg :second-block-token :type
                         (common-lisp:or block-token common-lisp:null)
                         :accessor %changed-block-second-block-token :initform
                         common-lisp:nil)
                        (first-block-token :initarg :first-block-token :type
                         (common-lisp:or block-token common-lisp:null)
                         :accessor %changed-block-first-block-token :initform
                         common-lisp:nil)
                        (block-index :initarg :block-index :type
                         (common-lisp:or block-index common-lisp:null)
                         :accessor %changed-block-block-index :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'changed-block 'make-changed-block))
 (common-lisp:defun make-changed-block
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key second-block-token first-block-token
                     block-index)
   (common-lisp:apply #'common-lisp:make-instance 'changed-block
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input changed-block))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input changed-block))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-index))
      (common-lisp:list
       (common-lisp:cons "BlockIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'first-block-token))
      (common-lisp:list
       (common-lisp:cons "FirstBlockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'second-block-token))
      (common-lisp:list
       (common-lisp:cons "SecondBlockToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input changed-block))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype changed-blocks ()
   '(trivial-types:proper-list changed-block))
 (common-lisp:defun |make-changed-blocks|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list changed-block))
   aws-sdk/generator/shape::members))
(common-lisp:deftype changed-blocks-count () 'common-lisp:integer)
(common-lisp:deftype checksum () 'common-lisp:string)
(common-lisp:deftype checksum-aggregation-method () 'common-lisp:string)
(common-lisp:deftype checksum-algorithm () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass complete-snapshot-request common-lisp:nil
                       ((checksum-aggregation-method :initarg
                         :checksum-aggregation-method :type
                         (common-lisp:or checksum-aggregation-method
                                         common-lisp:null)
                         :accessor
                         %complete-snapshot-request-checksum-aggregation-method
                         :initform common-lisp:nil)
                        (checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         %complete-snapshot-request-checksum-algorithm
                         :initform common-lisp:nil)
                        (checksum :initarg :checksum :type
                         (common-lisp:or checksum common-lisp:null) :accessor
                         %complete-snapshot-request-checksum :initform
                         common-lisp:nil)
                        (changed-blocks-count :initarg :changed-blocks-count
                         :type
                         (common-lisp:or changed-blocks-count common-lisp:null)
                         :accessor
                         %complete-snapshot-request-changed-blocks-count
                         :initform
                         (common-lisp:error
                          ":changed-blocks-count is required"))
                        (snapshot-id :initarg :snapshot-id :type
                         (common-lisp:or snapshot-id common-lisp:null)
                         :accessor %complete-snapshot-request-snapshot-id
                         :initform
                         (common-lisp:error ":snapshot-id is required"))))
 (common-lisp:export
  (common-lisp:list 'complete-snapshot-request
                    'make-complete-snapshot-request))
 (common-lisp:defun make-complete-snapshot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key checksum-aggregation-method
                     checksum-algorithm checksum changed-blocks-count
                     snapshot-id)
   (common-lisp:apply #'common-lisp:make-instance 'complete-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          complete-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'changed-blocks-count))
      (common-lisp:cons "x-amz-ChangedBlocksCount"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:cons "x-amz-Checksum" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-Checksum-Algorithm"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'checksum-aggregation-method))
      (common-lisp:cons "x-amz-Checksum-Aggregation-Method"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          complete-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          complete-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass complete-snapshot-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %complete-snapshot-response-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'complete-snapshot-response
                    'make-complete-snapshot-response))
 (common-lisp:defun make-complete-snapshot-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'complete-snapshot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          complete-snapshot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          complete-snapshot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          complete-snapshot-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition concurrent-limit-exceeded-exception
     (ebs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-limit-exceeded-exception
                    'concurrent-limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (ebs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype data-length () 'common-lisp:integer)
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-snapshot-block-request common-lisp:nil
                       ((block-token :initarg :block-token :type
                         (common-lisp:or block-token common-lisp:null)
                         :accessor %get-snapshot-block-request-block-token
                         :initform
                         (common-lisp:error ":block-token is required"))
                        (block-index :initarg :block-index :type
                         (common-lisp:or block-index common-lisp:null)
                         :accessor %get-snapshot-block-request-block-index
                         :initform
                         (common-lisp:error ":block-index is required"))
                        (snapshot-id :initarg :snapshot-id :type
                         (common-lisp:or snapshot-id common-lisp:null)
                         :accessor %get-snapshot-block-request-snapshot-id
                         :initform
                         (common-lisp:error ":snapshot-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-snapshot-block-request
                    'make-get-snapshot-block-request))
 (common-lisp:defun make-get-snapshot-block-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key block-token block-index snapshot-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-snapshot-block-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshot-block-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshot-block-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshot-block-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-snapshot-block-response common-lisp:nil
                       ((checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         %get-snapshot-block-response-checksum-algorithm
                         :initform common-lisp:nil)
                        (checksum :initarg :checksum :type
                         (common-lisp:or checksum common-lisp:null) :accessor
                         %get-snapshot-block-response-checksum :initform
                         common-lisp:nil)
                        (block-data :initarg :block-data :type
                         (common-lisp:or block-data common-lisp:null) :accessor
                         %get-snapshot-block-response-block-data :initform
                         common-lisp:nil)
                        (data-length :initarg :data-length :type
                         (common-lisp:or data-length common-lisp:null)
                         :accessor %get-snapshot-block-response-data-length
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-snapshot-block-response
                    'make-get-snapshot-block-response))
 (common-lisp:defun make-get-snapshot-block-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key checksum-algorithm checksum block-data
                     data-length)
   (common-lisp:apply #'common-lisp:make-instance 'get-snapshot-block-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshot-block-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-length))
      (common-lisp:cons "x-amz-Data-Length" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:cons "x-amz-Checksum" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-Checksum-Algorithm"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshot-block-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-data))
      (common-lisp:list
       (common-lisp:cons "BlockData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-snapshot-block-response))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'block-data))))
(common-lisp:deftype idempotency-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (ebs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-changed-blocks-request common-lisp:nil
                       ((starting-block-index :initarg :starting-block-index
                         :type (common-lisp:or block-index common-lisp:null)
                         :accessor
                         %list-changed-blocks-request-starting-block-index
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-changed-blocks-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-changed-blocks-request-next-token :initform
                         common-lisp:nil)
                        (second-snapshot-id :initarg :second-snapshot-id :type
                         (common-lisp:or snapshot-id common-lisp:null)
                         :accessor
                         %list-changed-blocks-request-second-snapshot-id
                         :initform
                         (common-lisp:error ":second-snapshot-id is required"))
                        (first-snapshot-id :initarg :first-snapshot-id :type
                         (common-lisp:or snapshot-id common-lisp:null)
                         :accessor
                         %list-changed-blocks-request-first-snapshot-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-changed-blocks-request
                    'make-list-changed-blocks-request))
 (common-lisp:defun make-list-changed-blocks-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key starting-block-index max-results
                     next-token second-snapshot-id first-snapshot-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-changed-blocks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-changed-blocks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-changed-blocks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-changed-blocks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-changed-blocks-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-changed-blocks-response-next-token :initform
                         common-lisp:nil)
                        (block-size :initarg :block-size :type
                         (common-lisp:or block-size common-lisp:null) :accessor
                         %list-changed-blocks-response-block-size :initform
                         common-lisp:nil)
                        (volume-size :initarg :volume-size :type
                         (common-lisp:or volume-size common-lisp:null)
                         :accessor %list-changed-blocks-response-volume-size
                         :initform common-lisp:nil)
                        (expiry-time :initarg :expiry-time :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %list-changed-blocks-response-expiry-time :initform
                         common-lisp:nil)
                        (changed-blocks :initarg :changed-blocks :type
                         (common-lisp:or changed-blocks common-lisp:null)
                         :accessor %list-changed-blocks-response-changed-blocks
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-changed-blocks-response
                    'make-list-changed-blocks-response))
 (common-lisp:defun make-list-changed-blocks-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token block-size volume-size
                     expiry-time changed-blocks)
   (common-lisp:apply #'common-lisp:make-instance 'list-changed-blocks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-changed-blocks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-changed-blocks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changed-blocks))
      (common-lisp:list
       (common-lisp:cons "ChangedBlocks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiry-time))
      (common-lisp:list
       (common-lisp:cons "ExpiryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size))
      (common-lisp:list
       (common-lisp:cons "VolumeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-size))
      (common-lisp:list
       (common-lisp:cons "BlockSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-changed-blocks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-snapshot-blocks-request common-lisp:nil
                       ((starting-block-index :initarg :starting-block-index
                         :type (common-lisp:or block-index common-lisp:null)
                         :accessor
                         %list-snapshot-blocks-request-starting-block-index
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-snapshot-blocks-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-snapshot-blocks-request-next-token :initform
                         common-lisp:nil)
                        (snapshot-id :initarg :snapshot-id :type
                         (common-lisp:or snapshot-id common-lisp:null)
                         :accessor %list-snapshot-blocks-request-snapshot-id
                         :initform
                         (common-lisp:error ":snapshot-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-snapshot-blocks-request
                    'make-list-snapshot-blocks-request))
 (common-lisp:defun make-list-snapshot-blocks-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key starting-block-index max-results
                     next-token snapshot-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-snapshot-blocks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-snapshot-blocks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-snapshot-blocks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-snapshot-blocks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-snapshot-blocks-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or page-token common-lisp:null) :accessor
                         %list-snapshot-blocks-response-next-token :initform
                         common-lisp:nil)
                        (block-size :initarg :block-size :type
                         (common-lisp:or block-size common-lisp:null) :accessor
                         %list-snapshot-blocks-response-block-size :initform
                         common-lisp:nil)
                        (volume-size :initarg :volume-size :type
                         (common-lisp:or volume-size common-lisp:null)
                         :accessor %list-snapshot-blocks-response-volume-size
                         :initform common-lisp:nil)
                        (expiry-time :initarg :expiry-time :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %list-snapshot-blocks-response-expiry-time :initform
                         common-lisp:nil)
                        (blocks :initarg :blocks :type
                         (common-lisp:or blocks common-lisp:null) :accessor
                         %list-snapshot-blocks-response-blocks :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-snapshot-blocks-response
                    'make-list-snapshot-blocks-response))
 (common-lisp:defun make-list-snapshot-blocks-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token block-size volume-size
                     expiry-time blocks)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-snapshot-blocks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-snapshot-blocks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-snapshot-blocks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blocks))
      (common-lisp:list
       (common-lisp:cons "Blocks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiry-time))
      (common-lisp:list
       (common-lisp:cons "ExpiryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size))
      (common-lisp:list
       (common-lisp:cons "VolumeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-size))
      (common-lisp:list
       (common-lisp:cons "BlockSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-snapshot-blocks-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype owner-id () 'common-lisp:string)
(common-lisp:deftype page-token () 'common-lisp:string)
(common-lisp:deftype progress () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass put-snapshot-block-request common-lisp:nil
                       ((checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         %put-snapshot-block-request-checksum-algorithm
                         :initform
                         (common-lisp:error ":checksum-algorithm is required"))
                        (checksum :initarg :checksum :type
                         (common-lisp:or checksum common-lisp:null) :accessor
                         %put-snapshot-block-request-checksum :initform
                         (common-lisp:error ":checksum is required"))
                        (progress :initarg :progress :type
                         (common-lisp:or progress common-lisp:null) :accessor
                         %put-snapshot-block-request-progress :initform
                         common-lisp:nil)
                        (data-length :initarg :data-length :type
                         (common-lisp:or data-length common-lisp:null)
                         :accessor %put-snapshot-block-request-data-length
                         :initform
                         (common-lisp:error ":data-length is required"))
                        (block-data :initarg :block-data :type
                         (common-lisp:or block-data common-lisp:null) :accessor
                         %put-snapshot-block-request-block-data :initform
                         (common-lisp:error ":block-data is required"))
                        (block-index :initarg :block-index :type
                         (common-lisp:or block-index common-lisp:null)
                         :accessor %put-snapshot-block-request-block-index
                         :initform
                         (common-lisp:error ":block-index is required"))
                        (snapshot-id :initarg :snapshot-id :type
                         (common-lisp:or snapshot-id common-lisp:null)
                         :accessor %put-snapshot-block-request-snapshot-id
                         :initform
                         (common-lisp:error ":snapshot-id is required"))))
 (common-lisp:export
  (common-lisp:list 'put-snapshot-block-request
                    'make-put-snapshot-block-request))
 (common-lisp:defun make-put-snapshot-block-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key checksum-algorithm checksum progress
                     data-length block-data block-index snapshot-id)
   (common-lisp:apply #'common-lisp:make-instance 'put-snapshot-block-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-snapshot-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-length))
      (common-lisp:cons "x-amz-Data-Length" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:cons "x-amz-Progress" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:cons "x-amz-Checksum" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-Checksum-Algorithm"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-snapshot-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-data))
      (common-lisp:list
       (common-lisp:cons "BlockData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-snapshot-block-request))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'block-data))))
(common-lisp:progn
 (common-lisp:defclass put-snapshot-block-response common-lisp:nil
                       ((checksum-algorithm :initarg :checksum-algorithm :type
                         (common-lisp:or checksum-algorithm common-lisp:null)
                         :accessor
                         %put-snapshot-block-response-checksum-algorithm
                         :initform common-lisp:nil)
                        (checksum :initarg :checksum :type
                         (common-lisp:or checksum common-lisp:null) :accessor
                         %put-snapshot-block-response-checksum :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-snapshot-block-response
                    'make-put-snapshot-block-response))
 (common-lisp:defun make-put-snapshot-block-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key checksum-algorithm checksum)
   (common-lisp:apply #'common-lisp:make-instance 'put-snapshot-block-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-snapshot-block-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum))
      (common-lisp:cons "x-amz-Checksum" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checksum-algorithm))
      (common-lisp:cons "x-amz-Checksum-Algorithm"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-snapshot-block-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-snapshot-block-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition request-throttled-exception
     (ebs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       request-throttled-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       request-throttled-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'request-throttled-exception
                    'request-throttled-exception-message
                    'request-throttled-exception-reason)))
(common-lisp:deftype request-throttled-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (ebs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       resource-not-found-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-reason)))
(common-lisp:deftype resource-not-found-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (ebs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       service-quota-exceeded-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-reason)))
(common-lisp:deftype service-quota-exceeded-exception-reason ()
  'common-lisp:string)
(common-lisp:deftype snapshot-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-snapshot-request common-lisp:nil
                       ((timeout :initarg :timeout :type
                         (common-lisp:or timeout common-lisp:null) :accessor
                         %start-snapshot-request-timeout :initform
                         common-lisp:nil)
                        (kms-key-arn :initarg :kms-key-arn :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor %start-snapshot-request-kms-key-arn
                         :initform common-lisp:nil)
                        (encrypted :initarg :encrypted :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %start-snapshot-request-encrypted :initform
                         common-lisp:nil)
                        (client-token :initarg :client-token :type
                         (common-lisp:or idempotency-token common-lisp:null)
                         :accessor %start-snapshot-request-client-token
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %start-snapshot-request-description
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %start-snapshot-request-tags :initform
                         common-lisp:nil)
                        (parent-snapshot-id :initarg :parent-snapshot-id :type
                         (common-lisp:or snapshot-id common-lisp:null)
                         :accessor %start-snapshot-request-parent-snapshot-id
                         :initform common-lisp:nil)
                        (volume-size :initarg :volume-size :type
                         (common-lisp:or volume-size common-lisp:null)
                         :accessor %start-snapshot-request-volume-size
                         :initform
                         (common-lisp:error ":volume-size is required"))))
 (common-lisp:export
  (common-lisp:list 'start-snapshot-request 'make-start-snapshot-request))
 (common-lisp:defun make-start-snapshot-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timeout kms-key-arn encrypted
                     client-token description tags parent-snapshot-id
                     volume-size)
   (common-lisp:apply #'common-lisp:make-instance 'start-snapshot-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size))
      (common-lisp:list
       (common-lisp:cons "VolumeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-snapshot-id))
      (common-lisp:list
       (common-lisp:cons "ParentSnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted))
      (common-lisp:list
       (common-lisp:cons "Encrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-snapshot-response common-lisp:nil
                       ((kms-key-arn :initarg :kms-key-arn :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor %start-snapshot-response-kms-key-arn
                         :initform common-lisp:nil)
                        (parent-snapshot-id :initarg :parent-snapshot-id :type
                         (common-lisp:or snapshot-id common-lisp:null)
                         :accessor %start-snapshot-response-parent-snapshot-id
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %start-snapshot-response-tags :initform
                         common-lisp:nil)
                        (block-size :initarg :block-size :type
                         (common-lisp:or block-size common-lisp:null) :accessor
                         %start-snapshot-response-block-size :initform
                         common-lisp:nil)
                        (volume-size :initarg :volume-size :type
                         (common-lisp:or volume-size common-lisp:null)
                         :accessor %start-snapshot-response-volume-size
                         :initform common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or time-stamp common-lisp:null) :accessor
                         %start-snapshot-response-start-time :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %start-snapshot-response-status :initform
                         common-lisp:nil)
                        (owner-id :initarg :owner-id :type
                         (common-lisp:or owner-id common-lisp:null) :accessor
                         %start-snapshot-response-owner-id :initform
                         common-lisp:nil)
                        (snapshot-id :initarg :snapshot-id :type
                         (common-lisp:or snapshot-id common-lisp:null)
                         :accessor %start-snapshot-response-snapshot-id
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %start-snapshot-response-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-snapshot-response 'make-start-snapshot-response))
 (common-lisp:defun make-start-snapshot-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key-arn parent-snapshot-id tags
                     block-size volume-size start-time status owner-id
                     snapshot-id description)
   (common-lisp:apply #'common-lisp:make-instance 'start-snapshot-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-snapshot-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-snapshot-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "SnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size))
      (common-lisp:list
       (common-lisp:cons "VolumeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-size))
      (common-lisp:list
       (common-lisp:cons "BlockSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-snapshot-id))
      (common-lisp:list
       (common-lisp:cons "ParentSnapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-snapshot-response))
   common-lisp:nil))
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype time-stamp () 'common-lisp:string)
(common-lisp:deftype timeout () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (ebs-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:deftype volume-size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defun complete-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-id changed-blocks-count checksum
                     checksum-algorithm checksum-aggregation-method)
   (common-lisp:declare
    (common-lisp:ignorable snapshot-id changed-blocks-count checksum
     checksum-algorithm checksum-aggregation-method))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-complete-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ebs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/snapshots/completion/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'snapshot-id))))
                                                        "CompleteSnapshot"
                                                        "2019-11-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'complete-snapshot))
(common-lisp:progn
 (common-lisp:defun get-snapshot-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-id block-index block-token)
   (common-lisp:declare
    (common-lisp:ignorable snapshot-id block-index block-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-snapshot-block-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ebs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/snapshots/~A/blocks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'snapshot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'block-index))))
                                                        "GetSnapshotBlock"
                                                        "2019-11-02")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-snapshot-block))
(common-lisp:progn
 (common-lisp:defun list-changed-blocks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key first-snapshot-id second-snapshot-id
                     next-token max-results starting-block-index)
   (common-lisp:declare
    (common-lisp:ignorable first-snapshot-id second-snapshot-id next-token
     max-results starting-block-index))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-changed-blocks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ebs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/snapshots/~A/changedblocks"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'second-snapshot-id))))
                                                        "ListChangedBlocks"
                                                        "2019-11-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-changed-blocks))
(common-lisp:progn
 (common-lisp:defun list-snapshot-blocks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-id next-token max-results
                     starting-block-index)
   (common-lisp:declare
    (common-lisp:ignorable snapshot-id next-token max-results
     starting-block-index))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-snapshot-blocks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ebs-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/snapshots/~A/blocks"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'snapshot-id))))
                                                        "ListSnapshotBlocks"
                                                        "2019-11-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-snapshot-blocks))
(common-lisp:progn
 (common-lisp:defun put-snapshot-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key snapshot-id block-index block-data
                     data-length progress checksum checksum-algorithm)
   (common-lisp:declare
    (common-lisp:ignorable snapshot-id block-index block-data data-length
     progress checksum checksum-algorithm))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-snapshot-block-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ebs-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/snapshots/~A/blocks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'snapshot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'block-index))))
                                                        "PutSnapshotBlock"
                                                        "2019-11-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-snapshot-block))
(common-lisp:progn
 (common-lisp:defun start-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key volume-size parent-snapshot-id tags
                     description client-token encrypted kms-key-arn timeout)
   (common-lisp:declare
    (common-lisp:ignorable volume-size parent-snapshot-id tags description
     client-token encrypted kms-key-arn timeout))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'ebs-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/snapshots"
                                                        "StartSnapshot"
                                                        "2019-11-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-snapshot))
