;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/lookoutequipment/api
  (:use)
  (:nicknames #:aws/lookoutequipment)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/lookoutequipment/api)
(common-lisp:progn
 (common-lisp:defclass lookoutequipment-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "lookoutequipment"))
 (common-lisp:export 'lookoutequipment-request))
(common-lisp:progn
 (common-lisp:define-condition lookoutequipment-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'lookoutequipment-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (lookoutequipment-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype amazon-resource-arn () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype bounded-length-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (categorical-values (:copier common-lisp:nil)
      (:conc-name "struct-shape-categorical-values-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or statistical-issue-status common-lisp:null))
   (number-of-category common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'categorical-values 'make-categorical-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input categorical-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input categorical-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-category))
      (common-lisp:list
       (common-lisp:cons "NumberOfCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input categorical-values))
   common-lisp:nil))
(common-lisp:deftype comments () 'common-lisp:string)
(common-lisp:deftype component-name () 'common-lisp:string)
(common-lisp:deftype component-timestamp-delimiter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (lookoutequipment-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (count-percent (:copier common-lisp:nil)
      (:conc-name "struct-shape-count-percent-"))
   (count (common-lisp:error ":count is required") :type
    (common-lisp:or integer common-lisp:null))
   (percentage (common-lisp:error ":percentage is required") :type
    (common-lisp:or float common-lisp:null)))
 (common-lisp:export (common-lisp:list 'count-percent 'make-count-percent))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input count-percent))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input count-percent))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percentage))
      (common-lisp:list
       (common-lisp:cons "Percentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input count-percent))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dataset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dataset-request-"))
   (dataset-name (common-lisp:error ":dataset-name is required") :type
    (common-lisp:or dataset-name common-lisp:null))
   (dataset-schema common-lisp:nil :type
    (common-lisp:or dataset-schema common-lisp:null))
   (server-side-kms-key-id common-lisp:nil :type
    (common-lisp:or name-or-arn common-lisp:null))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or idempotence-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dataset-request 'make-create-dataset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-name))
      (common-lisp:list
       (common-lisp:cons "DatasetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-schema))
      (common-lisp:list
       (common-lisp:cons "DatasetSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "ServerSideKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dataset-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dataset-response-"))
   (dataset-name common-lisp:nil :type
    (common-lisp:or dataset-name common-lisp:null))
   (dataset-arn common-lisp:nil :type
    (common-lisp:or dataset-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or dataset-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dataset-response 'make-create-dataset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-name))
      (common-lisp:list
       (common-lisp:cons "DatasetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dataset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-inference-scheduler-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-inference-scheduler-request-"))
   (model-name (common-lisp:error ":model-name is required") :type
    (common-lisp:or model-name common-lisp:null))
   (inference-scheduler-name
    (common-lisp:error ":inference-scheduler-name is required") :type
    (common-lisp:or inference-scheduler-name common-lisp:null))
   (data-delay-offset-in-minutes common-lisp:nil :type
    (common-lisp:or data-delay-offset-in-minutes common-lisp:null))
   (data-upload-frequency
    (common-lisp:error ":data-upload-frequency is required") :type
    (common-lisp:or data-upload-frequency common-lisp:null))
   (data-input-configuration
    (common-lisp:error ":data-input-configuration is required") :type
    (common-lisp:or inference-input-configuration common-lisp:null))
   (data-output-configuration
    (common-lisp:error ":data-output-configuration is required") :type
    (common-lisp:or inference-output-configuration common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or iam-role-arn common-lisp:null))
   (server-side-kms-key-id common-lisp:nil :type
    (common-lisp:or name-or-arn common-lisp:null))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or idempotence-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-inference-scheduler-request
                    'make-create-inference-scheduler-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-inference-scheduler-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-inference-scheduler-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-scheduler-name))
      (common-lisp:list
       (common-lisp:cons "InferenceSchedulerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-delay-offset-in-minutes))
      (common-lisp:list
       (common-lisp:cons "DataDelayOffsetInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-upload-frequency))
      (common-lisp:list
       (common-lisp:cons "DataUploadFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-input-configuration))
      (common-lisp:list
       (common-lisp:cons "DataInputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-output-configuration))
      (common-lisp:list
       (common-lisp:cons "DataOutputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "ServerSideKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-inference-scheduler-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-inference-scheduler-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-inference-scheduler-response-"))
   (inference-scheduler-arn common-lisp:nil :type
    (common-lisp:or inference-scheduler-arn common-lisp:null))
   (inference-scheduler-name common-lisp:nil :type
    (common-lisp:or inference-scheduler-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or inference-scheduler-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-inference-scheduler-response
                    'make-create-inference-scheduler-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-inference-scheduler-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-inference-scheduler-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-scheduler-arn))
      (common-lisp:list
       (common-lisp:cons "InferenceSchedulerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-scheduler-name))
      (common-lisp:list
       (common-lisp:cons "InferenceSchedulerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-inference-scheduler-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-label-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-label-group-request-"))
   (label-group-name (common-lisp:error ":label-group-name is required") :type
    (common-lisp:or label-group-name common-lisp:null))
   (fault-codes common-lisp:nil :type
    (common-lisp:or fault-codes common-lisp:null))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or idempotence-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-label-group-request
                    'make-create-label-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-label-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-label-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-group-name))
      (common-lisp:list
       (common-lisp:cons "LabelGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fault-codes))
      (common-lisp:list
       (common-lisp:cons "FaultCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-label-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-label-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-label-group-response-"))
   (label-group-name common-lisp:nil :type
    (common-lisp:or label-group-name common-lisp:null))
   (label-group-arn common-lisp:nil :type
    (common-lisp:or label-group-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-label-group-response
                    'make-create-label-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-label-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-label-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-group-name))
      (common-lisp:list
       (common-lisp:cons "LabelGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-group-arn))
      (common-lisp:list
       (common-lisp:cons "LabelGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-label-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-label-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-label-request-"))
   (label-group-name (common-lisp:error ":label-group-name is required") :type
    (common-lisp:or label-group-name common-lisp:null))
   (start-time (common-lisp:error ":start-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time (common-lisp:error ":end-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (rating (common-lisp:error ":rating is required") :type
    (common-lisp:or label-rating common-lisp:null))
   (fault-code common-lisp:nil :type
    (common-lisp:or fault-code common-lisp:null))
   (notes common-lisp:nil :type (common-lisp:or comments common-lisp:null))
   (equipment common-lisp:nil :type
    (common-lisp:or equipment common-lisp:null))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or idempotence-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-label-request 'make-create-label-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-label-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-label-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-group-name))
      (common-lisp:list
       (common-lisp:cons "LabelGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rating))
      (common-lisp:list
       (common-lisp:cons "Rating"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fault-code))
      (common-lisp:list
       (common-lisp:cons "FaultCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'equipment))
      (common-lisp:list
       (common-lisp:cons "Equipment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-label-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-label-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-label-response-"))
   (label-id common-lisp:nil :type (common-lisp:or label-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-label-response 'make-create-label-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-label-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-label-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-id))
      (common-lisp:list
       (common-lisp:cons "LabelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-label-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-model-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-model-request-"))
   (model-name (common-lisp:error ":model-name is required") :type
    (common-lisp:or model-name common-lisp:null))
   (dataset-name (common-lisp:error ":dataset-name is required") :type
    (common-lisp:or dataset-identifier common-lisp:null))
   (dataset-schema common-lisp:nil :type
    (common-lisp:or dataset-schema common-lisp:null))
   (labels-input-configuration common-lisp:nil :type
    (common-lisp:or labels-input-configuration common-lisp:null))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or idempotence-token common-lisp:null))
   (training-data-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (training-data-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (evaluation-data-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (evaluation-data-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or iam-role-arn common-lisp:null))
   (data-pre-processing-configuration common-lisp:nil :type
    (common-lisp:or data-pre-processing-configuration common-lisp:null))
   (server-side-kms-key-id common-lisp:nil :type
    (common-lisp:or name-or-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (off-condition common-lisp:nil :type
    (common-lisp:or off-condition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-model-request 'make-create-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-name))
      (common-lisp:list
       (common-lisp:cons "DatasetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-schema))
      (common-lisp:list
       (common-lisp:cons "DatasetSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'labels-input-configuration))
      (common-lisp:list
       (common-lisp:cons "LabelsInputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-data-start-time))
      (common-lisp:list
       (common-lisp:cons "TrainingDataStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-data-end-time))
      (common-lisp:list
       (common-lisp:cons "TrainingDataEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-data-start-time))
      (common-lisp:list
       (common-lisp:cons "EvaluationDataStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-data-end-time))
      (common-lisp:list
       (common-lisp:cons "EvaluationDataEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-pre-processing-configuration))
      (common-lisp:list
       (common-lisp:cons "DataPreProcessingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "ServerSideKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'off-condition))
      (common-lisp:list
       (common-lisp:cons "OffCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-model-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-model-response-"))
   (model-arn common-lisp:nil :type
    (common-lisp:or model-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or model-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-model-response 'make-create-model-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-arn))
      (common-lisp:list
       (common-lisp:cons "ModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-model-response))
   common-lisp:nil))
(common-lisp:deftype data-delay-offset-in-minutes () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype data-ingestion-job-summaries ()
   '(trivial-types:proper-list data-ingestion-job-summary))
 (common-lisp:defun |make-data-ingestion-job-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-ingestion-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (data-ingestion-job-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-ingestion-job-summary-"))
   (job-id common-lisp:nil :type
    (common-lisp:or ingestion-job-id common-lisp:null))
   (dataset-name common-lisp:nil :type
    (common-lisp:or dataset-name common-lisp:null))
   (dataset-arn common-lisp:nil :type
    (common-lisp:or dataset-arn common-lisp:null))
   (ingestion-input-configuration common-lisp:nil :type
    (common-lisp:or ingestion-input-configuration common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or ingestion-job-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-ingestion-job-summary
                    'make-data-ingestion-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-ingestion-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-ingestion-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-name))
      (common-lisp:list
       (common-lisp:cons "DatasetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingestion-input-configuration))
      (common-lisp:list
       (common-lisp:cons "IngestionInputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-ingestion-job-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-pre-processing-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-pre-processing-configuration-"))
   (target-sampling-rate common-lisp:nil :type
    (common-lisp:or target-sampling-rate common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-pre-processing-configuration
                    'make-data-pre-processing-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-pre-processing-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-pre-processing-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-sampling-rate))
      (common-lisp:list
       (common-lisp:cons "TargetSamplingRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-pre-processing-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-quality-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-quality-summary-"))
   (insufficient-sensor-data
    (common-lisp:error ":insufficient-sensor-data is required") :type
    (common-lisp:or insufficient-sensor-data common-lisp:null))
   (missing-sensor-data (common-lisp:error ":missing-sensor-data is required")
    :type (common-lisp:or missing-sensor-data common-lisp:null))
   (invalid-sensor-data (common-lisp:error ":invalid-sensor-data is required")
    :type (common-lisp:or invalid-sensor-data common-lisp:null))
   (unsupported-timestamps
    (common-lisp:error ":unsupported-timestamps is required") :type
    (common-lisp:or unsupported-timestamps common-lisp:null))
   (duplicate-timestamps
    (common-lisp:error ":duplicate-timestamps is required") :type
    (common-lisp:or duplicate-timestamps common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-quality-summary 'make-data-quality-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-quality-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-quality-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'insufficient-sensor-data))
      (common-lisp:list
       (common-lisp:cons "InsufficientSensorData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'missing-sensor-data))
      (common-lisp:list
       (common-lisp:cons "MissingSensorData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invalid-sensor-data))
      (common-lisp:list
       (common-lisp:cons "InvalidSensorData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unsupported-timestamps))
      (common-lisp:list
       (common-lisp:cons "UnsupportedTimestamps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'duplicate-timestamps))
      (common-lisp:list
       (common-lisp:cons "DuplicateTimestamps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-quality-summary))
   common-lisp:nil))
(common-lisp:deftype data-size-in-bytes () 'common-lisp:integer)
(common-lisp:deftype data-upload-frequency () 'common-lisp:string)
(common-lisp:deftype dataset-arn () 'common-lisp:string)
(common-lisp:deftype dataset-identifier () 'common-lisp:string)
(common-lisp:deftype dataset-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dataset-schema (:copier common-lisp:nil)
      (:conc-name "struct-shape-dataset-schema-"))
   (inline-data-schema common-lisp:nil :type
    (common-lisp:or inline-data-schema common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dataset-schema 'make-dataset-schema))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset-schema))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset-schema))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inline-data-schema))
      (common-lisp:list
       (common-lisp:cons "InlineDataSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset-schema))
   common-lisp:nil))
(common-lisp:deftype dataset-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dataset-summaries ()
   '(trivial-types:proper-list dataset-summary))
 (common-lisp:defun |make-dataset-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dataset-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dataset-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-dataset-summary-"))
   (dataset-name common-lisp:nil :type
    (common-lisp:or dataset-name common-lisp:null))
   (dataset-arn common-lisp:nil :type
    (common-lisp:or dataset-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or dataset-status common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dataset-summary 'make-dataset-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-name))
      (common-lisp:list
       (common-lisp:cons "DatasetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dataset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dataset-request-"))
   (dataset-name (common-lisp:error ":dataset-name is required") :type
    (common-lisp:or dataset-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dataset-request 'make-delete-dataset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-name))
      (common-lisp:list
       (common-lisp:cons "DatasetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-inference-scheduler-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-inference-scheduler-request-"))
   (inference-scheduler-name
    (common-lisp:error ":inference-scheduler-name is required") :type
    (common-lisp:or inference-scheduler-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-inference-scheduler-request
                    'make-delete-inference-scheduler-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-inference-scheduler-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-inference-scheduler-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-scheduler-name))
      (common-lisp:list
       (common-lisp:cons "InferenceSchedulerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-inference-scheduler-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-label-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-label-group-request-"))
   (label-group-name (common-lisp:error ":label-group-name is required") :type
    (common-lisp:or label-group-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-label-group-request
                    'make-delete-label-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-label-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-label-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-group-name))
      (common-lisp:list
       (common-lisp:cons "LabelGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-label-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-label-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-label-request-"))
   (label-group-name (common-lisp:error ":label-group-name is required") :type
    (common-lisp:or label-group-name common-lisp:null))
   (label-id (common-lisp:error ":label-id is required") :type
    (common-lisp:or label-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-label-request 'make-delete-label-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-label-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-label-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-group-name))
      (common-lisp:list
       (common-lisp:cons "LabelGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-id))
      (common-lisp:list
       (common-lisp:cons "LabelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-label-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-model-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-model-request-"))
   (model-name (common-lisp:error ":model-name is required") :type
    (common-lisp:or model-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-model-request 'make-delete-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-data-ingestion-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-data-ingestion-job-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or ingestion-job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-data-ingestion-job-request
                    'make-describe-data-ingestion-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-ingestion-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-ingestion-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-ingestion-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-data-ingestion-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-data-ingestion-job-response-"))
   (job-id common-lisp:nil :type
    (common-lisp:or ingestion-job-id common-lisp:null))
   (dataset-arn common-lisp:nil :type
    (common-lisp:or dataset-arn common-lisp:null))
   (ingestion-input-configuration common-lisp:nil :type
    (common-lisp:or ingestion-input-configuration common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or iam-role-arn common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or ingestion-job-status common-lisp:null))
   (failed-reason common-lisp:nil :type
    (common-lisp:or bounded-length-string common-lisp:null))
   (data-quality-summary common-lisp:nil :type
    (common-lisp:or data-quality-summary common-lisp:null))
   (ingested-files-summary common-lisp:nil :type
    (common-lisp:or ingested-files-summary common-lisp:null))
   (status-detail common-lisp:nil :type
    (common-lisp:or bounded-length-string common-lisp:null))
   (ingested-data-size common-lisp:nil :type
    (common-lisp:or data-size-in-bytes common-lisp:null))
   (data-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (data-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-data-ingestion-job-response
                    'make-describe-data-ingestion-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-ingestion-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-ingestion-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingestion-input-configuration))
      (common-lisp:list
       (common-lisp:cons "IngestionInputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-reason))
      (common-lisp:list
       (common-lisp:cons "FailedReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-quality-summary))
      (common-lisp:list
       (common-lisp:cons "DataQualitySummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingested-files-summary))
      (common-lisp:list
       (common-lisp:cons "IngestedFilesSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-detail))
      (common-lisp:list
       (common-lisp:cons "StatusDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingested-data-size))
      (common-lisp:list
       (common-lisp:cons "IngestedDataSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-start-time))
      (common-lisp:list
       (common-lisp:cons "DataStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-end-time))
      (common-lisp:list
       (common-lisp:cons "DataEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-ingestion-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dataset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dataset-request-"))
   (dataset-name (common-lisp:error ":dataset-name is required") :type
    (common-lisp:or dataset-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dataset-request 'make-describe-dataset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-name))
      (common-lisp:list
       (common-lisp:cons "DatasetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dataset-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dataset-response-"))
   (dataset-name common-lisp:nil :type
    (common-lisp:or dataset-name common-lisp:null))
   (dataset-arn common-lisp:nil :type
    (common-lisp:or dataset-arn common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or dataset-status common-lisp:null))
   (schema common-lisp:nil :type
    (common-lisp:or inline-data-schema common-lisp:null))
   (server-side-kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-arn common-lisp:null))
   (ingestion-input-configuration common-lisp:nil :type
    (common-lisp:or ingestion-input-configuration common-lisp:null))
   (data-quality-summary common-lisp:nil :type
    (common-lisp:or data-quality-summary common-lisp:null))
   (ingested-files-summary common-lisp:nil :type
    (common-lisp:or ingested-files-summary common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or iam-role-arn common-lisp:null))
   (data-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (data-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dataset-response
                    'make-describe-dataset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-name))
      (common-lisp:list
       (common-lisp:cons "DatasetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "Schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "ServerSideKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingestion-input-configuration))
      (common-lisp:list
       (common-lisp:cons "IngestionInputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-quality-summary))
      (common-lisp:list
       (common-lisp:cons "DataQualitySummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingested-files-summary))
      (common-lisp:list
       (common-lisp:cons "IngestedFilesSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-start-time))
      (common-lisp:list
       (common-lisp:cons "DataStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-end-time))
      (common-lisp:list
       (common-lisp:cons "DataEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dataset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-inference-scheduler-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-inference-scheduler-request-"))
   (inference-scheduler-name
    (common-lisp:error ":inference-scheduler-name is required") :type
    (common-lisp:or inference-scheduler-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-inference-scheduler-request
                    'make-describe-inference-scheduler-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-inference-scheduler-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-inference-scheduler-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-scheduler-name))
      (common-lisp:list
       (common-lisp:cons "InferenceSchedulerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-inference-scheduler-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-inference-scheduler-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-inference-scheduler-response-"))
   (model-arn common-lisp:nil :type
    (common-lisp:or model-arn common-lisp:null))
   (model-name common-lisp:nil :type
    (common-lisp:or model-name common-lisp:null))
   (inference-scheduler-name common-lisp:nil :type
    (common-lisp:or inference-scheduler-name common-lisp:null))
   (inference-scheduler-arn common-lisp:nil :type
    (common-lisp:or inference-scheduler-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or inference-scheduler-status common-lisp:null))
   (data-delay-offset-in-minutes common-lisp:nil :type
    (common-lisp:or data-delay-offset-in-minutes common-lisp:null))
   (data-upload-frequency common-lisp:nil :type
    (common-lisp:or data-upload-frequency common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (data-input-configuration common-lisp:nil :type
    (common-lisp:or inference-input-configuration common-lisp:null))
   (data-output-configuration common-lisp:nil :type
    (common-lisp:or inference-output-configuration common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or iam-role-arn common-lisp:null))
   (server-side-kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-arn common-lisp:null))
   (latest-inference-result common-lisp:nil :type
    (common-lisp:or latest-inference-result common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-inference-scheduler-response
                    'make-describe-inference-scheduler-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-inference-scheduler-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-inference-scheduler-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-arn))
      (common-lisp:list
       (common-lisp:cons "ModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-scheduler-name))
      (common-lisp:list
       (common-lisp:cons "InferenceSchedulerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-scheduler-arn))
      (common-lisp:list
       (common-lisp:cons "InferenceSchedulerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-delay-offset-in-minutes))
      (common-lisp:list
       (common-lisp:cons "DataDelayOffsetInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-upload-frequency))
      (common-lisp:list
       (common-lisp:cons "DataUploadFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-input-configuration))
      (common-lisp:list
       (common-lisp:cons "DataInputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-output-configuration))
      (common-lisp:list
       (common-lisp:cons "DataOutputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "ServerSideKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-inference-result))
      (common-lisp:list
       (common-lisp:cons "LatestInferenceResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-inference-scheduler-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-label-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-label-group-request-"))
   (label-group-name (common-lisp:error ":label-group-name is required") :type
    (common-lisp:or label-group-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-label-group-request
                    'make-describe-label-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-label-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-label-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-group-name))
      (common-lisp:list
       (common-lisp:cons "LabelGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-label-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-label-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-label-group-response-"))
   (label-group-name common-lisp:nil :type
    (common-lisp:or label-group-name common-lisp:null))
   (label-group-arn common-lisp:nil :type
    (common-lisp:or label-group-arn common-lisp:null))
   (fault-codes common-lisp:nil :type
    (common-lisp:or fault-codes common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-label-group-response
                    'make-describe-label-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-label-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-label-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-group-name))
      (common-lisp:list
       (common-lisp:cons "LabelGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-group-arn))
      (common-lisp:list
       (common-lisp:cons "LabelGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fault-codes))
      (common-lisp:list
       (common-lisp:cons "FaultCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-label-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-label-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-label-request-"))
   (label-group-name (common-lisp:error ":label-group-name is required") :type
    (common-lisp:or label-group-name common-lisp:null))
   (label-id (common-lisp:error ":label-id is required") :type
    (common-lisp:or label-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-label-request 'make-describe-label-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-label-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-label-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-group-name))
      (common-lisp:list
       (common-lisp:cons "LabelGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-id))
      (common-lisp:list
       (common-lisp:cons "LabelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-label-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-label-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-label-response-"))
   (label-group-name common-lisp:nil :type
    (common-lisp:or label-group-name common-lisp:null))
   (label-group-arn common-lisp:nil :type
    (common-lisp:or label-group-arn common-lisp:null))
   (label-id common-lisp:nil :type (common-lisp:or label-id common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (rating common-lisp:nil :type
    (common-lisp:or label-rating common-lisp:null))
   (fault-code common-lisp:nil :type
    (common-lisp:or fault-code common-lisp:null))
   (notes common-lisp:nil :type (common-lisp:or comments common-lisp:null))
   (equipment common-lisp:nil :type
    (common-lisp:or equipment common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-label-response 'make-describe-label-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-label-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-label-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-group-name))
      (common-lisp:list
       (common-lisp:cons "LabelGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-group-arn))
      (common-lisp:list
       (common-lisp:cons "LabelGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-id))
      (common-lisp:list
       (common-lisp:cons "LabelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rating))
      (common-lisp:list
       (common-lisp:cons "Rating"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fault-code))
      (common-lisp:list
       (common-lisp:cons "FaultCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notes))
      (common-lisp:list
       (common-lisp:cons "Notes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'equipment))
      (common-lisp:list
       (common-lisp:cons "Equipment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-label-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-model-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-model-request-"))
   (model-name (common-lisp:error ":model-name is required") :type
    (common-lisp:or model-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-model-request 'make-describe-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-model-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-model-response-"))
   (model-name common-lisp:nil :type
    (common-lisp:or model-name common-lisp:null))
   (model-arn common-lisp:nil :type
    (common-lisp:or model-arn common-lisp:null))
   (dataset-name common-lisp:nil :type
    (common-lisp:or dataset-name common-lisp:null))
   (dataset-arn common-lisp:nil :type
    (common-lisp:or dataset-arn common-lisp:null))
   (schema common-lisp:nil :type
    (common-lisp:or inline-data-schema common-lisp:null))
   (labels-input-configuration common-lisp:nil :type
    (common-lisp:or labels-input-configuration common-lisp:null))
   (training-data-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (training-data-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (evaluation-data-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (evaluation-data-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or iam-role-arn common-lisp:null))
   (data-pre-processing-configuration common-lisp:nil :type
    (common-lisp:or data-pre-processing-configuration common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or model-status common-lisp:null))
   (training-execution-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (training-execution-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (failed-reason common-lisp:nil :type
    (common-lisp:or bounded-length-string common-lisp:null))
   (model-metrics common-lisp:nil :type
    (common-lisp:or model-metrics common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (server-side-kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-arn common-lisp:null))
   (off-condition common-lisp:nil :type
    (common-lisp:or off-condition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-model-response 'make-describe-model-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-arn))
      (common-lisp:list
       (common-lisp:cons "ModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-name))
      (common-lisp:list
       (common-lisp:cons "DatasetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "Schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'labels-input-configuration))
      (common-lisp:list
       (common-lisp:cons "LabelsInputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-data-start-time))
      (common-lisp:list
       (common-lisp:cons "TrainingDataStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-data-end-time))
      (common-lisp:list
       (common-lisp:cons "TrainingDataEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-data-start-time))
      (common-lisp:list
       (common-lisp:cons "EvaluationDataStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'evaluation-data-end-time))
      (common-lisp:list
       (common-lisp:cons "EvaluationDataEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-pre-processing-configuration))
      (common-lisp:list
       (common-lisp:cons "DataPreProcessingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-execution-start-time))
      (common-lisp:list
       (common-lisp:cons "TrainingExecutionStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-execution-end-time))
      (common-lisp:list
       (common-lisp:cons "TrainingExecutionEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-reason))
      (common-lisp:list
       (common-lisp:cons "FailedReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-metrics))
      (common-lisp:list
       (common-lisp:cons "ModelMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-side-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "ServerSideKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'off-condition))
      (common-lisp:list
       (common-lisp:cons "OffCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (duplicate-timestamps (:copier common-lisp:nil)
      (:conc-name "struct-shape-duplicate-timestamps-"))
   (total-number-of-duplicate-timestamps
    (common-lisp:error ":total-number-of-duplicate-timestamps is required")
    :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'duplicate-timestamps 'make-duplicate-timestamps))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input duplicate-timestamps))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input duplicate-timestamps))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-number-of-duplicate-timestamps))
      (common-lisp:list
       (common-lisp:cons "TotalNumberOfDuplicateTimestamps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input duplicate-timestamps))
   common-lisp:nil))
(common-lisp:deftype equipment () 'common-lisp:string)
(common-lisp:deftype event-duration-in-seconds () 'common-lisp:integer)
(common-lisp:deftype fault-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype fault-codes () '(trivial-types:proper-list fault-code))
 (common-lisp:defun |make-fault-codes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list fault-code))
   aws-sdk/generator/shape::members))
(common-lisp:deftype file-name-timestamp-format () 'common-lisp:string)
(common-lisp:deftype float () 'common-lisp:single-float)
(common-lisp:deftype iam-role-arn () 'common-lisp:string)
(common-lisp:deftype idempotence-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype inference-event-summaries ()
   '(trivial-types:proper-list inference-event-summary))
 (common-lisp:defun |make-inference-event-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list inference-event-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (inference-event-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-inference-event-summary-"))
   (inference-scheduler-arn common-lisp:nil :type
    (common-lisp:or inference-scheduler-arn common-lisp:null))
   (inference-scheduler-name common-lisp:nil :type
    (common-lisp:or inference-scheduler-name common-lisp:null))
   (event-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (event-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (diagnostics common-lisp:nil :type
    (common-lisp:or model-metrics common-lisp:null))
   (event-duration-in-seconds common-lisp:nil :type
    (common-lisp:or event-duration-in-seconds common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inference-event-summary 'make-inference-event-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inference-event-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inference-event-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-scheduler-arn))
      (common-lisp:list
       (common-lisp:cons "InferenceSchedulerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-scheduler-name))
      (common-lisp:list
       (common-lisp:cons "InferenceSchedulerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-start-time))
      (common-lisp:list
       (common-lisp:cons "EventStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-end-time))
      (common-lisp:list
       (common-lisp:cons "EventEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'diagnostics))
      (common-lisp:list
       (common-lisp:cons "Diagnostics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "EventDurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inference-event-summary))
   common-lisp:nil))
(common-lisp:deftype inference-execution-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype inference-execution-summaries ()
   '(trivial-types:proper-list inference-execution-summary))
 (common-lisp:defun |make-inference-execution-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            inference-execution-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (inference-execution-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-inference-execution-summary-"))
   (model-name common-lisp:nil :type
    (common-lisp:or model-name common-lisp:null))
   (model-arn common-lisp:nil :type
    (common-lisp:or model-arn common-lisp:null))
   (inference-scheduler-name common-lisp:nil :type
    (common-lisp:or inference-scheduler-name common-lisp:null))
   (inference-scheduler-arn common-lisp:nil :type
    (common-lisp:or inference-scheduler-arn common-lisp:null))
   (scheduled-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (data-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (data-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (data-input-configuration common-lisp:nil :type
    (common-lisp:or inference-input-configuration common-lisp:null))
   (data-output-configuration common-lisp:nil :type
    (common-lisp:or inference-output-configuration common-lisp:null))
   (customer-result-object common-lisp:nil :type
    (common-lisp:or s3object common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or inference-execution-status common-lisp:null))
   (failed-reason common-lisp:nil :type
    (common-lisp:or bounded-length-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inference-execution-summary
                    'make-inference-execution-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inference-execution-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inference-execution-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-arn))
      (common-lisp:list
       (common-lisp:cons "ModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-scheduler-name))
      (common-lisp:list
       (common-lisp:cons "InferenceSchedulerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-scheduler-arn))
      (common-lisp:list
       (common-lisp:cons "InferenceSchedulerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-start-time))
      (common-lisp:list
       (common-lisp:cons "ScheduledStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-start-time))
      (common-lisp:list
       (common-lisp:cons "DataStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-end-time))
      (common-lisp:list
       (common-lisp:cons "DataEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-input-configuration))
      (common-lisp:list
       (common-lisp:cons "DataInputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-output-configuration))
      (common-lisp:list
       (common-lisp:cons "DataOutputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-result-object))
      (common-lisp:list
       (common-lisp:cons "CustomerResultObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-reason))
      (common-lisp:list
       (common-lisp:cons "FailedReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inference-execution-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (inference-input-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-inference-input-configuration-"))
   (s3input-configuration common-lisp:nil :type
    (common-lisp:or inference-s3input-configuration common-lisp:null))
   (input-time-zone-offset common-lisp:nil :type
    (common-lisp:or time-zone-offset common-lisp:null))
   (inference-input-name-configuration common-lisp:nil :type
    (common-lisp:or inference-input-name-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inference-input-configuration
                    'make-inference-input-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inference-input-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inference-input-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3input-configuration))
      (common-lisp:list
       (common-lisp:cons "S3InputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-time-zone-offset))
      (common-lisp:list
       (common-lisp:cons "InputTimeZoneOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-input-name-configuration))
      (common-lisp:list
       (common-lisp:cons "InferenceInputNameConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inference-input-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (inference-input-name-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-inference-input-name-configuration-"))
   (timestamp-format common-lisp:nil :type
    (common-lisp:or file-name-timestamp-format common-lisp:null))
   (component-timestamp-delimiter common-lisp:nil :type
    (common-lisp:or component-timestamp-delimiter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inference-input-name-configuration
                    'make-inference-input-name-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inference-input-name-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inference-input-name-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp-format))
      (common-lisp:list
       (common-lisp:cons "TimestampFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-timestamp-delimiter))
      (common-lisp:list
       (common-lisp:cons "ComponentTimestampDelimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inference-input-name-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (inference-output-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-inference-output-configuration-"))
   (s3output-configuration
    (common-lisp:error ":s3output-configuration is required") :type
    (common-lisp:or inference-s3output-configuration common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or name-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inference-output-configuration
                    'make-inference-output-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inference-output-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inference-output-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3output-configuration))
      (common-lisp:list
       (common-lisp:cons "S3OutputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inference-output-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (inference-s3input-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-inference-s3input-configuration-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or s3bucket common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or s3prefix common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inference-s3input-configuration
                    'make-inference-s3input-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inference-s3input-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inference-s3input-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inference-s3input-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (inference-s3output-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-inference-s3output-configuration-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or s3bucket common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or s3prefix common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inference-s3output-configuration
                    'make-inference-s3output-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inference-s3output-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inference-s3output-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inference-s3output-configuration))
   common-lisp:nil))
(common-lisp:deftype inference-scheduler-arn () 'common-lisp:string)
(common-lisp:deftype inference-scheduler-identifier () 'common-lisp:string)
(common-lisp:deftype inference-scheduler-name () 'common-lisp:string)
(common-lisp:deftype inference-scheduler-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype inference-scheduler-summaries ()
   '(trivial-types:proper-list inference-scheduler-summary))
 (common-lisp:defun |make-inference-scheduler-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            inference-scheduler-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (inference-scheduler-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-inference-scheduler-summary-"))
   (model-name common-lisp:nil :type
    (common-lisp:or model-name common-lisp:null))
   (model-arn common-lisp:nil :type
    (common-lisp:or model-arn common-lisp:null))
   (inference-scheduler-name common-lisp:nil :type
    (common-lisp:or inference-scheduler-name common-lisp:null))
   (inference-scheduler-arn common-lisp:nil :type
    (common-lisp:or inference-scheduler-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or inference-scheduler-status common-lisp:null))
   (data-delay-offset-in-minutes common-lisp:nil :type
    (common-lisp:or data-delay-offset-in-minutes common-lisp:null))
   (data-upload-frequency common-lisp:nil :type
    (common-lisp:or data-upload-frequency common-lisp:null))
   (latest-inference-result common-lisp:nil :type
    (common-lisp:or latest-inference-result common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inference-scheduler-summary
                    'make-inference-scheduler-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inference-scheduler-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inference-scheduler-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-arn))
      (common-lisp:list
       (common-lisp:cons "ModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-scheduler-name))
      (common-lisp:list
       (common-lisp:cons "InferenceSchedulerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-scheduler-arn))
      (common-lisp:list
       (common-lisp:cons "InferenceSchedulerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-delay-offset-in-minutes))
      (common-lisp:list
       (common-lisp:cons "DataDelayOffsetInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-upload-frequency))
      (common-lisp:list
       (common-lisp:cons "DataUploadFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-inference-result))
      (common-lisp:list
       (common-lisp:cons "LatestInferenceResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inference-scheduler-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ingested-files-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-ingested-files-summary-"))
   (total-number-of-files
    (common-lisp:error ":total-number-of-files is required") :type
    (common-lisp:or integer common-lisp:null))
   (ingested-number-of-files
    (common-lisp:error ":ingested-number-of-files is required") :type
    (common-lisp:or integer common-lisp:null))
   (discarded-files common-lisp:nil :type
    (common-lisp:or list-of-discarded-files common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ingested-files-summary 'make-ingested-files-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ingested-files-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ingested-files-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-number-of-files))
      (common-lisp:list
       (common-lisp:cons "TotalNumberOfFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingested-number-of-files))
      (common-lisp:list
       (common-lisp:cons "IngestedNumberOfFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'discarded-files))
      (common-lisp:list
       (common-lisp:cons "DiscardedFiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ingested-files-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ingestion-input-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-ingestion-input-configuration-"))
   (s3input-configuration
    (common-lisp:error ":s3input-configuration is required") :type
    (common-lisp:or ingestion-s3input-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ingestion-input-configuration
                    'make-ingestion-input-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ingestion-input-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ingestion-input-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3input-configuration))
      (common-lisp:list
       (common-lisp:cons "S3InputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ingestion-input-configuration))
   common-lisp:nil))
(common-lisp:deftype ingestion-job-id () 'common-lisp:string)
(common-lisp:deftype ingestion-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ingestion-s3input-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-ingestion-s3input-configuration-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or s3bucket common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or s3prefix common-lisp:null))
   (key-pattern common-lisp:nil :type
    (common-lisp:or key-pattern common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ingestion-s3input-configuration
                    'make-ingestion-s3input-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ingestion-s3input-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ingestion-s3input-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pattern))
      (common-lisp:list
       (common-lisp:cons "KeyPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ingestion-s3input-configuration))
   common-lisp:nil))
(common-lisp:deftype inline-data-schema () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (insufficient-sensor-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-insufficient-sensor-data-"))
   (missing-complete-sensor-data
    (common-lisp:error ":missing-complete-sensor-data is required") :type
    (common-lisp:or missing-complete-sensor-data common-lisp:null))
   (sensors-with-short-date-range
    (common-lisp:error ":sensors-with-short-date-range is required") :type
    (common-lisp:or sensors-with-short-date-range common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'insufficient-sensor-data 'make-insufficient-sensor-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          insufficient-sensor-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          insufficient-sensor-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'missing-complete-sensor-data))
      (common-lisp:list
       (common-lisp:cons "MissingCompleteSensorData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sensors-with-short-date-range))
      (common-lisp:list
       (common-lisp:cons "SensorsWithShortDateRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          insufficient-sensor-data))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (lookoutequipment-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-sensor-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-invalid-sensor-data-"))
   (affected-sensor-count
    (common-lisp:error ":affected-sensor-count is required") :type
    (common-lisp:or integer common-lisp:null))
   (total-number-of-invalid-values
    (common-lisp:error ":total-number-of-invalid-values is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-sensor-data 'make-invalid-sensor-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invalid-sensor-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invalid-sensor-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'affected-sensor-count))
      (common-lisp:list
       (common-lisp:cons "AffectedSensorCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-number-of-invalid-values))
      (common-lisp:list
       (common-lisp:cons "TotalNumberOfInvalidValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invalid-sensor-data))
   common-lisp:nil))
(common-lisp:deftype key-pattern () 'common-lisp:string)
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:deftype label-group-arn () 'common-lisp:string)
(common-lisp:deftype label-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype label-group-summaries ()
   '(trivial-types:proper-list label-group-summary))
 (common-lisp:defun |make-label-group-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list label-group-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (label-group-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-label-group-summary-"))
   (label-group-name common-lisp:nil :type
    (common-lisp:or label-group-name common-lisp:null))
   (label-group-arn common-lisp:nil :type
    (common-lisp:or label-group-arn common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'label-group-summary 'make-label-group-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input label-group-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input label-group-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-group-name))
      (common-lisp:list
       (common-lisp:cons "LabelGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-group-arn))
      (common-lisp:list
       (common-lisp:cons "LabelGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input label-group-summary))
   common-lisp:nil))
(common-lisp:deftype label-id () 'common-lisp:string)
(common-lisp:deftype label-rating () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype label-summaries ()
   '(trivial-types:proper-list label-summary))
 (common-lisp:defun |make-label-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list label-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (label-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-label-summary-"))
   (label-group-name common-lisp:nil :type
    (common-lisp:or label-group-name common-lisp:null))
   (label-id common-lisp:nil :type (common-lisp:or label-id common-lisp:null))
   (label-group-arn common-lisp:nil :type
    (common-lisp:or label-group-arn common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (rating common-lisp:nil :type
    (common-lisp:or label-rating common-lisp:null))
   (fault-code common-lisp:nil :type
    (common-lisp:or fault-code common-lisp:null))
   (equipment common-lisp:nil :type
    (common-lisp:or equipment common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'label-summary 'make-label-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input label-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input label-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-group-name))
      (common-lisp:list
       (common-lisp:cons "LabelGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-id))
      (common-lisp:list
       (common-lisp:cons "LabelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-group-arn))
      (common-lisp:list
       (common-lisp:cons "LabelGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rating))
      (common-lisp:list
       (common-lisp:cons "Rating"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fault-code))
      (common-lisp:list
       (common-lisp:cons "FaultCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'equipment))
      (common-lisp:list
       (common-lisp:cons "Equipment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input label-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (labels-input-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-labels-input-configuration-"))
   (s3input-configuration common-lisp:nil :type
    (common-lisp:or labels-s3input-configuration common-lisp:null))
   (label-group-name common-lisp:nil :type
    (common-lisp:or label-group-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'labels-input-configuration
                    'make-labels-input-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          labels-input-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          labels-input-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3input-configuration))
      (common-lisp:list
       (common-lisp:cons "S3InputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-group-name))
      (common-lisp:list
       (common-lisp:cons "LabelGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          labels-input-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (labels-s3input-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-labels-s3input-configuration-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or s3bucket common-lisp:null))
   (prefix common-lisp:nil :type (common-lisp:or s3prefix common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'labels-s3input-configuration
                    'make-labels-s3input-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          labels-s3input-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          labels-s3input-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          labels-s3input-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (large-timestamp-gaps (:copier common-lisp:nil)
      (:conc-name "struct-shape-large-timestamp-gaps-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or statistical-issue-status common-lisp:null))
   (number-of-large-timestamp-gaps common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (max-timestamp-gap-in-days common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'large-timestamp-gaps 'make-large-timestamp-gaps))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input large-timestamp-gaps))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input large-timestamp-gaps))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-large-timestamp-gaps))
      (common-lisp:list
       (common-lisp:cons "NumberOfLargeTimestampGaps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-timestamp-gap-in-days))
      (common-lisp:list
       (common-lisp:cons "MaxTimestampGapInDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input large-timestamp-gaps))
   common-lisp:nil))
(common-lisp:deftype latest-inference-result () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-ingestion-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-ingestion-jobs-request-"))
   (dataset-name common-lisp:nil :type
    (common-lisp:or dataset-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or ingestion-job-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-ingestion-jobs-request
                    'make-list-data-ingestion-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-ingestion-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-ingestion-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-name))
      (common-lisp:list
       (common-lisp:cons "DatasetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-ingestion-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-ingestion-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-ingestion-jobs-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (data-ingestion-job-summaries common-lisp:nil :type
    (common-lisp:or data-ingestion-job-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-ingestion-jobs-response
                    'make-list-data-ingestion-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-ingestion-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-ingestion-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-ingestion-job-summaries))
      (common-lisp:list
       (common-lisp:cons "DataIngestionJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-ingestion-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-datasets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-datasets-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (dataset-name-begins-with common-lisp:nil :type
    (common-lisp:or dataset-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-datasets-request 'make-list-datasets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataset-name-begins-with))
      (common-lisp:list
       (common-lisp:cons "DatasetNameBeginsWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-datasets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-datasets-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (dataset-summaries common-lisp:nil :type
    (common-lisp:or dataset-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-datasets-response 'make-list-datasets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-summaries))
      (common-lisp:list
       (common-lisp:cons "DatasetSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-datasets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-inference-events-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-inference-events-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (inference-scheduler-name
    (common-lisp:error ":inference-scheduler-name is required") :type
    (common-lisp:or inference-scheduler-identifier common-lisp:null))
   (interval-start-time (common-lisp:error ":interval-start-time is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (interval-end-time (common-lisp:error ":interval-end-time is required")
    :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-inference-events-request
                    'make-list-inference-events-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-scheduler-name))
      (common-lisp:list
       (common-lisp:cons "InferenceSchedulerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-start-time))
      (common-lisp:list
       (common-lisp:cons "IntervalStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-end-time))
      (common-lisp:list
       (common-lisp:cons "IntervalEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-inference-events-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-inference-events-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (inference-event-summaries common-lisp:nil :type
    (common-lisp:or inference-event-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-inference-events-response
                    'make-list-inference-events-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-events-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-event-summaries))
      (common-lisp:list
       (common-lisp:cons "InferenceEventSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-events-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-inference-executions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-inference-executions-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (inference-scheduler-name
    (common-lisp:error ":inference-scheduler-name is required") :type
    (common-lisp:or inference-scheduler-identifier common-lisp:null))
   (data-start-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (data-end-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or inference-execution-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-inference-executions-request
                    'make-list-inference-executions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-executions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-scheduler-name))
      (common-lisp:list
       (common-lisp:cons "InferenceSchedulerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-start-time-after))
      (common-lisp:list
       (common-lisp:cons "DataStartTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-end-time-before))
      (common-lisp:list
       (common-lisp:cons "DataEndTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-executions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-inference-executions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-inference-executions-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (inference-execution-summaries common-lisp:nil :type
    (common-lisp:or inference-execution-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-inference-executions-response
                    'make-list-inference-executions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-executions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-executions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-execution-summaries))
      (common-lisp:list
       (common-lisp:cons "InferenceExecutionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-executions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-inference-schedulers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-inference-schedulers-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (inference-scheduler-name-begins-with common-lisp:nil :type
    (common-lisp:or inference-scheduler-identifier common-lisp:null))
   (model-name common-lisp:nil :type
    (common-lisp:or model-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or inference-scheduler-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-inference-schedulers-request
                    'make-list-inference-schedulers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-schedulers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-schedulers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-scheduler-name-begins-with))
      (common-lisp:list
       (common-lisp:cons "InferenceSchedulerNameBeginsWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-schedulers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-inference-schedulers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-inference-schedulers-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (inference-scheduler-summaries common-lisp:nil :type
    (common-lisp:or inference-scheduler-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-inference-schedulers-response
                    'make-list-inference-schedulers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-schedulers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-schedulers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-scheduler-summaries))
      (common-lisp:list
       (common-lisp:cons "InferenceSchedulerSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-schedulers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-label-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-label-groups-request-"))
   (label-group-name-begins-with common-lisp:nil :type
    (common-lisp:or label-group-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-label-groups-request
                    'make-list-label-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-label-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-label-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'label-group-name-begins-with))
      (common-lisp:list
       (common-lisp:cons "LabelGroupNameBeginsWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-label-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-label-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-label-groups-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (label-group-summaries common-lisp:nil :type
    (common-lisp:or label-group-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-label-groups-response
                    'make-list-label-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-label-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-label-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'label-group-summaries))
      (common-lisp:list
       (common-lisp:cons "LabelGroupSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-label-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-labels-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-labels-request-"))
   (label-group-name (common-lisp:error ":label-group-name is required") :type
    (common-lisp:or label-group-name common-lisp:null))
   (interval-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (interval-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (fault-code common-lisp:nil :type
    (common-lisp:or fault-code common-lisp:null))
   (equipment common-lisp:nil :type
    (common-lisp:or equipment common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-labels-request 'make-list-labels-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-labels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-labels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-group-name))
      (common-lisp:list
       (common-lisp:cons "LabelGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-start-time))
      (common-lisp:list
       (common-lisp:cons "IntervalStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-end-time))
      (common-lisp:list
       (common-lisp:cons "IntervalEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fault-code))
      (common-lisp:list
       (common-lisp:cons "FaultCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'equipment))
      (common-lisp:list
       (common-lisp:cons "Equipment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-labels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-labels-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-labels-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (label-summaries common-lisp:nil :type
    (common-lisp:or label-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-labels-response 'make-list-labels-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-labels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-labels-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-summaries))
      (common-lisp:list
       (common-lisp:cons "LabelSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-labels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-models-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-models-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or model-status common-lisp:null))
   (model-name-begins-with common-lisp:nil :type
    (common-lisp:or model-name common-lisp:null))
   (dataset-name-begins-with common-lisp:nil :type
    (common-lisp:or dataset-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-models-request 'make-list-models-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-models-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-models-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-name-begins-with))
      (common-lisp:list
       (common-lisp:cons "ModelNameBeginsWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dataset-name-begins-with))
      (common-lisp:list
       (common-lisp:cons "DatasetNameBeginsWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-models-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-models-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-models-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (model-summaries common-lisp:nil :type
    (common-lisp:or model-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-models-response 'make-list-models-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-models-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-models-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-summaries))
      (common-lisp:list
       (common-lisp:cons "ModelSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-models-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-of-discarded-files ()
   '(trivial-types:proper-list s3object))
 (common-lisp:defun |make-list-of-discarded-files|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3object))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sensor-statistics-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sensor-statistics-request-"))
   (dataset-name (common-lisp:error ":dataset-name is required") :type
    (common-lisp:or dataset-name common-lisp:null))
   (ingestion-job-id common-lisp:nil :type
    (common-lisp:or ingestion-job-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sensor-statistics-request
                    'make-list-sensor-statistics-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sensor-statistics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sensor-statistics-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-name))
      (common-lisp:list
       (common-lisp:cons "DatasetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ingestion-job-id))
      (common-lisp:list
       (common-lisp:cons "IngestionJobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sensor-statistics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sensor-statistics-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sensor-statistics-response-"))
   (sensor-statistics-summaries common-lisp:nil :type
    (common-lisp:or sensor-statistics-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sensor-statistics-response
                    'make-list-sensor-statistics-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sensor-statistics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sensor-statistics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sensor-statistics-summaries))
      (common-lisp:list
       (common-lisp:cons "SensorStatisticsSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sensor-statistics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (missing-complete-sensor-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-missing-complete-sensor-data-"))
   (affected-sensor-count
    (common-lisp:error ":affected-sensor-count is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'missing-complete-sensor-data
                    'make-missing-complete-sensor-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          missing-complete-sensor-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          missing-complete-sensor-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'affected-sensor-count))
      (common-lisp:list
       (common-lisp:cons "AffectedSensorCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          missing-complete-sensor-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (missing-sensor-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-missing-sensor-data-"))
   (affected-sensor-count
    (common-lisp:error ":affected-sensor-count is required") :type
    (common-lisp:or integer common-lisp:null))
   (total-number-of-missing-values
    (common-lisp:error ":total-number-of-missing-values is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'missing-sensor-data 'make-missing-sensor-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input missing-sensor-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input missing-sensor-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'affected-sensor-count))
      (common-lisp:list
       (common-lisp:cons "AffectedSensorCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-number-of-missing-values))
      (common-lisp:list
       (common-lisp:cons "TotalNumberOfMissingValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input missing-sensor-data))
   common-lisp:nil))
(common-lisp:deftype model-arn () 'common-lisp:string)
(common-lisp:deftype model-metrics () 'common-lisp:string)
(common-lisp:deftype model-name () 'common-lisp:string)
(common-lisp:deftype model-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype model-summaries ()
   '(trivial-types:proper-list model-summary))
 (common-lisp:defun |make-model-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list model-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (model-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-summary-"))
   (model-name common-lisp:nil :type
    (common-lisp:or model-name common-lisp:null))
   (model-arn common-lisp:nil :type
    (common-lisp:or model-arn common-lisp:null))
   (dataset-name common-lisp:nil :type
    (common-lisp:or dataset-name common-lisp:null))
   (dataset-arn common-lisp:nil :type
    (common-lisp:or dataset-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or model-status common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'model-summary 'make-model-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-arn))
      (common-lisp:list
       (common-lisp:cons "ModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-name))
      (common-lisp:list
       (common-lisp:cons "DatasetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-arn))
      (common-lisp:list
       (common-lisp:cons "DatasetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (monotonic-values (:copier common-lisp:nil)
      (:conc-name "struct-shape-monotonic-values-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or statistical-issue-status common-lisp:null))
   (monotonicity common-lisp:nil :type
    (common-lisp:or monotonicity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monotonic-values 'make-monotonic-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input monotonic-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input monotonic-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monotonicity))
      (common-lisp:list
       (common-lisp:cons "Monotonicity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input monotonic-values))
   common-lisp:nil))
(common-lisp:deftype monotonicity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (multiple-operating-modes (:copier common-lisp:nil)
      (:conc-name "struct-shape-multiple-operating-modes-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or statistical-issue-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multiple-operating-modes 'make-multiple-operating-modes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiple-operating-modes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiple-operating-modes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiple-operating-modes))
   common-lisp:nil))
(common-lisp:deftype name-or-arn () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype off-condition () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (lookoutequipment-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3object (:copier common-lisp:nil) (:conc-name "struct-shape-s3object-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or s3bucket common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or s3key common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3object 'make-s3object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3object))
   common-lisp:nil))
(common-lisp:deftype s3prefix () 'common-lisp:string)
(common-lisp:deftype sensor-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sensor-statistics-summaries ()
   '(trivial-types:proper-list sensor-statistics-summary))
 (common-lisp:defun |make-sensor-statistics-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            sensor-statistics-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (sensor-statistics-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-sensor-statistics-summary-"))
   (component-name common-lisp:nil :type
    (common-lisp:or component-name common-lisp:null))
   (sensor-name common-lisp:nil :type
    (common-lisp:or sensor-name common-lisp:null))
   (data-exists common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (missing-values common-lisp:nil :type
    (common-lisp:or count-percent common-lisp:null))
   (invalid-values common-lisp:nil :type
    (common-lisp:or count-percent common-lisp:null))
   (invalid-date-entries common-lisp:nil :type
    (common-lisp:or count-percent common-lisp:null))
   (duplicate-timestamps common-lisp:nil :type
    (common-lisp:or count-percent common-lisp:null))
   (categorical-values common-lisp:nil :type
    (common-lisp:or categorical-values common-lisp:null))
   (multiple-operating-modes common-lisp:nil :type
    (common-lisp:or multiple-operating-modes common-lisp:null))
   (large-timestamp-gaps common-lisp:nil :type
    (common-lisp:or large-timestamp-gaps common-lisp:null))
   (monotonic-values common-lisp:nil :type
    (common-lisp:or monotonic-values common-lisp:null))
   (data-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (data-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sensor-statistics-summary
                    'make-sensor-statistics-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sensor-statistics-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sensor-statistics-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sensor-name))
      (common-lisp:list
       (common-lisp:cons "SensorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-exists))
      (common-lisp:list
       (common-lisp:cons "DataExists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'missing-values))
      (common-lisp:list
       (common-lisp:cons "MissingValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invalid-values))
      (common-lisp:list
       (common-lisp:cons "InvalidValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invalid-date-entries))
      (common-lisp:list
       (common-lisp:cons "InvalidDateEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'duplicate-timestamps))
      (common-lisp:list
       (common-lisp:cons "DuplicateTimestamps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'categorical-values))
      (common-lisp:list
       (common-lisp:cons "CategoricalValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiple-operating-modes))
      (common-lisp:list
       (common-lisp:cons "MultipleOperatingModes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'large-timestamp-gaps))
      (common-lisp:list
       (common-lisp:cons "LargeTimestampGaps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monotonic-values))
      (common-lisp:list
       (common-lisp:cons "MonotonicValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-start-time))
      (common-lisp:list
       (common-lisp:cons "DataStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-end-time))
      (common-lisp:list
       (common-lisp:cons "DataEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sensor-statistics-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sensors-with-short-date-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-sensors-with-short-date-range-"))
   (affected-sensor-count
    (common-lisp:error ":affected-sensor-count is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sensors-with-short-date-range
                    'make-sensors-with-short-date-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sensors-with-short-date-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sensors-with-short-date-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'affected-sensor-count))
      (common-lisp:list
       (common-lisp:cons "AffectedSensorCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sensors-with-short-date-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (lookoutequipment-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (start-data-ingestion-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-data-ingestion-job-request-"))
   (dataset-name (common-lisp:error ":dataset-name is required") :type
    (common-lisp:or dataset-identifier common-lisp:null))
   (ingestion-input-configuration
    (common-lisp:error ":ingestion-input-configuration is required") :type
    (common-lisp:or ingestion-input-configuration common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or iam-role-arn common-lisp:null))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or idempotence-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-data-ingestion-job-request
                    'make-start-data-ingestion-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-data-ingestion-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-data-ingestion-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-name))
      (common-lisp:list
       (common-lisp:cons "DatasetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingestion-input-configuration))
      (common-lisp:list
       (common-lisp:cons "IngestionInputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-data-ingestion-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-data-ingestion-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-data-ingestion-job-response-"))
   (job-id common-lisp:nil :type
    (common-lisp:or ingestion-job-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or ingestion-job-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-data-ingestion-job-response
                    'make-start-data-ingestion-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-data-ingestion-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-data-ingestion-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-data-ingestion-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-inference-scheduler-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-inference-scheduler-request-"))
   (inference-scheduler-name
    (common-lisp:error ":inference-scheduler-name is required") :type
    (common-lisp:or inference-scheduler-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-inference-scheduler-request
                    'make-start-inference-scheduler-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-inference-scheduler-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-inference-scheduler-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-scheduler-name))
      (common-lisp:list
       (common-lisp:cons "InferenceSchedulerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-inference-scheduler-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-inference-scheduler-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-inference-scheduler-response-"))
   (model-arn common-lisp:nil :type
    (common-lisp:or model-arn common-lisp:null))
   (model-name common-lisp:nil :type
    (common-lisp:or model-name common-lisp:null))
   (inference-scheduler-name common-lisp:nil :type
    (common-lisp:or inference-scheduler-name common-lisp:null))
   (inference-scheduler-arn common-lisp:nil :type
    (common-lisp:or inference-scheduler-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or inference-scheduler-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-inference-scheduler-response
                    'make-start-inference-scheduler-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-inference-scheduler-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-inference-scheduler-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-arn))
      (common-lisp:list
       (common-lisp:cons "ModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-scheduler-name))
      (common-lisp:list
       (common-lisp:cons "InferenceSchedulerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-scheduler-arn))
      (common-lisp:list
       (common-lisp:cons "InferenceSchedulerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-inference-scheduler-response))
   common-lisp:nil))
(common-lisp:deftype statistical-issue-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stop-inference-scheduler-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-inference-scheduler-request-"))
   (inference-scheduler-name
    (common-lisp:error ":inference-scheduler-name is required") :type
    (common-lisp:or inference-scheduler-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-inference-scheduler-request
                    'make-stop-inference-scheduler-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-inference-scheduler-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-inference-scheduler-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-scheduler-name))
      (common-lisp:list
       (common-lisp:cons "InferenceSchedulerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-inference-scheduler-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-inference-scheduler-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-inference-scheduler-response-"))
   (model-arn common-lisp:nil :type
    (common-lisp:or model-arn common-lisp:null))
   (model-name common-lisp:nil :type
    (common-lisp:or model-name common-lisp:null))
   (inference-scheduler-name common-lisp:nil :type
    (common-lisp:or inference-scheduler-name common-lisp:null))
   (inference-scheduler-arn common-lisp:nil :type
    (common-lisp:or inference-scheduler-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or inference-scheduler-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-inference-scheduler-response
                    'make-stop-inference-scheduler-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-inference-scheduler-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-inference-scheduler-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-arn))
      (common-lisp:list
       (common-lisp:cons "ModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-scheduler-name))
      (common-lisp:list
       (common-lisp:cons "InferenceSchedulerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-scheduler-arn))
      (common-lisp:list
       (common-lisp:cons "InferenceSchedulerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-inference-scheduler-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype target-sampling-rate () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (lookoutequipment-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype time-zone-offset () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (unsupported-timestamps (:copier common-lisp:nil)
      (:conc-name "struct-shape-unsupported-timestamps-"))
   (total-number-of-unsupported-timestamps
    (common-lisp:error ":total-number-of-unsupported-timestamps is required")
    :type (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unsupported-timestamps 'make-unsupported-timestamps))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unsupported-timestamps))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unsupported-timestamps))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-number-of-unsupported-timestamps))
      (common-lisp:list
       (common-lisp:cons "TotalNumberOfUnsupportedTimestamps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unsupported-timestamps))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-inference-scheduler-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-inference-scheduler-request-"))
   (inference-scheduler-name
    (common-lisp:error ":inference-scheduler-name is required") :type
    (common-lisp:or inference-scheduler-identifier common-lisp:null))
   (data-delay-offset-in-minutes common-lisp:nil :type
    (common-lisp:or data-delay-offset-in-minutes common-lisp:null))
   (data-upload-frequency common-lisp:nil :type
    (common-lisp:or data-upload-frequency common-lisp:null))
   (data-input-configuration common-lisp:nil :type
    (common-lisp:or inference-input-configuration common-lisp:null))
   (data-output-configuration common-lisp:nil :type
    (common-lisp:or inference-output-configuration common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or iam-role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-inference-scheduler-request
                    'make-update-inference-scheduler-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-inference-scheduler-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-inference-scheduler-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-scheduler-name))
      (common-lisp:list
       (common-lisp:cons "InferenceSchedulerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-delay-offset-in-minutes))
      (common-lisp:list
       (common-lisp:cons "DataDelayOffsetInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-upload-frequency))
      (common-lisp:list
       (common-lisp:cons "DataUploadFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-input-configuration))
      (common-lisp:list
       (common-lisp:cons "DataInputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-output-configuration))
      (common-lisp:list
       (common-lisp:cons "DataOutputConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-inference-scheduler-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-label-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-label-group-request-"))
   (label-group-name (common-lisp:error ":label-group-name is required") :type
    (common-lisp:or label-group-name common-lisp:null))
   (fault-codes common-lisp:nil :type
    (common-lisp:or fault-codes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-label-group-request
                    'make-update-label-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-label-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-label-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-group-name))
      (common-lisp:list
       (common-lisp:cons "LabelGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fault-codes))
      (common-lisp:list
       (common-lisp:cons "FaultCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-label-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (lookoutequipment-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun create-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-name dataset-schema
                     server-side-kms-key-id client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable dataset-name dataset-schema server-side-kms-key-id
     client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "CreateDataset" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-dataset))
(common-lisp:progn
 (common-lisp:defun create-inference-scheduler
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-name inference-scheduler-name
                     data-delay-offset-in-minutes data-upload-frequency
                     data-input-configuration data-output-configuration
                     role-arn server-side-kms-key-id client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable model-name inference-scheduler-name
     data-delay-offset-in-minutes data-upload-frequency
     data-input-configuration data-output-configuration role-arn
     server-side-kms-key-id client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-inference-scheduler-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "CreateInferenceScheduler" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-inference-scheduler))
(common-lisp:progn
 (common-lisp:defun create-label
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key label-group-name start-time end-time
                     rating fault-code notes equipment client-token)
   (common-lisp:declare
    (common-lisp:ignorable label-group-name start-time end-time rating
     fault-code notes equipment client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-label-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "CreateLabel" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-label))
(common-lisp:progn
 (common-lisp:defun create-label-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key label-group-name fault-codes client-token
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable label-group-name fault-codes client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-label-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "CreateLabelGroup" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-label-group))
(common-lisp:progn
 (common-lisp:defun create-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-name dataset-name dataset-schema
                     labels-input-configuration client-token
                     training-data-start-time training-data-end-time
                     evaluation-data-start-time evaluation-data-end-time
                     role-arn data-pre-processing-configuration
                     server-side-kms-key-id tags off-condition)
   (common-lisp:declare
    (common-lisp:ignorable model-name dataset-name dataset-schema
     labels-input-configuration client-token training-data-start-time
     training-data-end-time evaluation-data-start-time evaluation-data-end-time
     role-arn data-pre-processing-configuration server-side-kms-key-id tags
     off-condition))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "CreateModel" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-model))
(common-lisp:progn
 (common-lisp:defun delete-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-name)
   (common-lisp:declare (common-lisp:ignorable dataset-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteDataset" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-dataset))
(common-lisp:progn
 (common-lisp:defun delete-inference-scheduler
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key inference-scheduler-name)
   (common-lisp:declare (common-lisp:ignorable inference-scheduler-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-inference-scheduler-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteInferenceScheduler" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-inference-scheduler))
(common-lisp:progn
 (common-lisp:defun delete-label
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key label-group-name label-id)
   (common-lisp:declare (common-lisp:ignorable label-group-name label-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-label-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteLabel" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-label))
(common-lisp:progn
 (common-lisp:defun delete-label-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key label-group-name)
   (common-lisp:declare (common-lisp:ignorable label-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-label-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteLabelGroup" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-label-group))
(common-lisp:progn
 (common-lisp:defun delete-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-name)
   (common-lisp:declare (common-lisp:ignorable model-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteModel" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-model))
(common-lisp:progn
 (common-lisp:defun describe-data-ingestion-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-data-ingestion-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeDataIngestionJob" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-data-ingestion-job))
(common-lisp:progn
 (common-lisp:defun describe-dataset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-name)
   (common-lisp:declare (common-lisp:ignorable dataset-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dataset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeDataset" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-dataset))
(common-lisp:progn
 (common-lisp:defun describe-inference-scheduler
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key inference-scheduler-name)
   (common-lisp:declare (common-lisp:ignorable inference-scheduler-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-inference-scheduler-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeInferenceScheduler" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-inference-scheduler))
(common-lisp:progn
 (common-lisp:defun describe-label
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key label-group-name label-id)
   (common-lisp:declare (common-lisp:ignorable label-group-name label-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-label-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeLabel" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-label))
(common-lisp:progn
 (common-lisp:defun describe-label-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key label-group-name)
   (common-lisp:declare (common-lisp:ignorable label-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-label-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeLabelGroup" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-label-group))
(common-lisp:progn
 (common-lisp:defun describe-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-name)
   (common-lisp:declare (common-lisp:ignorable model-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "DescribeModel" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-model))
(common-lisp:progn
 (common-lisp:defun list-data-ingestion-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-name next-token max-results
                     status)
   (common-lisp:declare
    (common-lisp:ignorable dataset-name next-token max-results status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-data-ingestion-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "ListDataIngestionJobs" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-ingestion-jobs))
(common-lisp:progn
 (common-lisp:defun list-datasets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results
                     dataset-name-begins-with)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results dataset-name-begins-with))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-datasets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "ListDatasets" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-datasets))
(common-lisp:progn
 (common-lisp:defun list-inference-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results
                     inference-scheduler-name interval-start-time
                     interval-end-time)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results inference-scheduler-name
     interval-start-time interval-end-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-inference-events-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "ListInferenceEvents" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-inference-events))
(common-lisp:progn
 (common-lisp:defun list-inference-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results
                     inference-scheduler-name data-start-time-after
                     data-end-time-before status)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results inference-scheduler-name
     data-start-time-after data-end-time-before status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-inference-executions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "ListInferenceExecutions" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-inference-executions))
(common-lisp:progn
 (common-lisp:defun list-inference-schedulers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results
                     inference-scheduler-name-begins-with model-name status)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results
     inference-scheduler-name-begins-with model-name status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-inference-schedulers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "ListInferenceSchedulers" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-inference-schedulers))
(common-lisp:progn
 (common-lisp:defun list-label-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key label-group-name-begins-with next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable label-group-name-begins-with next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-label-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "ListLabelGroups" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-label-groups))
(common-lisp:progn
 (common-lisp:defun list-labels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key label-group-name interval-start-time
                     interval-end-time fault-code equipment next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable label-group-name interval-start-time
     interval-end-time fault-code equipment next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-labels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "ListLabels" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-labels))
(common-lisp:progn
 (common-lisp:defun list-models
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results status
                     model-name-begins-with dataset-name-begins-with)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results status model-name-begins-with
     dataset-name-begins-with))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-models-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "ListModels" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-models))
(common-lisp:progn
 (common-lisp:defun list-sensor-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-name ingestion-job-id max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable dataset-name ingestion-job-id max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-sensor-statistics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "ListSensorStatistics" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-sensor-statistics))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "ListTagsForResource" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun start-data-ingestion-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dataset-name
                     ingestion-input-configuration role-arn client-token)
   (common-lisp:declare
    (common-lisp:ignorable dataset-name ingestion-input-configuration role-arn
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-data-ingestion-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "StartDataIngestionJob" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-data-ingestion-job))
(common-lisp:progn
 (common-lisp:defun start-inference-scheduler
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key inference-scheduler-name)
   (common-lisp:declare (common-lisp:ignorable inference-scheduler-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-inference-scheduler-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "StartInferenceScheduler" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-inference-scheduler))
(common-lisp:progn
 (common-lisp:defun stop-inference-scheduler
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key inference-scheduler-name)
   (common-lisp:declare (common-lisp:ignorable inference-scheduler-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-inference-scheduler-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "StopInferenceScheduler" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-inference-scheduler))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "TagResource" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "UntagResource" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-inference-scheduler
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key inference-scheduler-name
                     data-delay-offset-in-minutes data-upload-frequency
                     data-input-configuration data-output-configuration
                     role-arn)
   (common-lisp:declare
    (common-lisp:ignorable inference-scheduler-name
     data-delay-offset-in-minutes data-upload-frequency
     data-input-configuration data-output-configuration role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-inference-scheduler-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateInferenceScheduler" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-inference-scheduler))
(common-lisp:progn
 (common-lisp:defun update-label-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key label-group-name fault-codes)
   (common-lisp:declare (common-lisp:ignorable label-group-name fault-codes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-label-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'lookoutequipment-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateLabelGroup" "2020-12-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-label-group))
