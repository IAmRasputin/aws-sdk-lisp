;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/cloudformation/api
  (:use)
  (:nicknames #:aws/cloudformation)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/cloudformation/api)
(common-lisp:progn
 (common-lisp:defclass cloudformation-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "cloudformation" :protocol
                        :query))
 (common-lisp:export 'cloudformation-request))
(common-lisp:progn
 (common-lisp:define-condition cloudformation-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'cloudformation-error))
(common-lisp:defvar *error-map*
  '(("AlreadyExistsException" . already-exists-exception)
    ("CFNRegistryException" . cfnregistry-exception)
    ("ChangeSetNotFoundException" . change-set-not-found-exception)
    ("CreatedButModifiedException" . created-but-modified-exception)
    ("InsufficientCapabilitiesException" . insufficient-capabilities-exception)
    ("InvalidChangeSetStatusException" . invalid-change-set-status-exception)
    ("InvalidOperationException" . invalid-operation-exception)
    ("InvalidStateTransitionException" . invalid-state-transition-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("NameAlreadyExistsException" . name-already-exists-exception)
    ("OperationIdAlreadyExistsException"
     . operation-id-already-exists-exception)
    ("OperationInProgressException" . operation-in-progress-exception)
    ("OperationNotFoundException" . operation-not-found-exception)
    ("OperationStatusCheckFailedException"
     . operation-status-check-failed-exception)
    ("StackInstanceNotFoundException" . stack-instance-not-found-exception)
    ("StackNotFoundException" . stack-not-found-exception)
    ("StackSetNotEmptyException" . stack-set-not-empty-exception)
    ("StackSetNotFoundException" . stack-set-not-found-exception)
    ("StaleRequestException" . stale-request-exception)
    ("TokenAlreadyExistsException" . token-already-exists-exception)
    ("TypeConfigurationNotFoundException"
     . type-configuration-not-found-exception)
    ("TypeNotFoundException" . type-not-found-exception)))
(common-lisp:deftype accept-terms-and-conditions () 'common-lisp:boolean)
(common-lisp:deftype account () 'common-lisp:string)
(common-lisp:deftype account-filter-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass account-gate-result common-lisp:nil
                       ((status-reason :initarg :status-reason :type
                         (common-lisp:or account-gate-status-reason
                                         common-lisp:null)
                         :accessor %account-gate-result-status-reason :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or account-gate-status common-lisp:null)
                         :accessor %account-gate-result-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'account-gate-result 'make-account-gate-result))
 (common-lisp:defun make-account-gate-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-reason status)
   (common-lisp:apply #'common-lisp:make-instance 'account-gate-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-gate-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-gate-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-gate-result))
   common-lisp:nil))
(common-lisp:deftype account-gate-status () 'common-lisp:string)
(common-lisp:deftype account-gate-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass account-limit common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or limit-value common-lisp:null)
                         :accessor %account-limit-value :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or limit-name common-lisp:null) :accessor
                         %account-limit-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'account-limit 'make-account-limit))
 (common-lisp:defun make-account-limit
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance 'account-limit
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input account-limit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input account-limit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input account-limit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype account-limit-list ()
   '(trivial-types:proper-list account-limit))
 (common-lisp:defun |make-account-limit-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account-limit))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype account-list () '(trivial-types:proper-list account))
 (common-lisp:defun |make-account-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list account))
   aws-sdk/generator/shape::members))
(common-lisp:deftype accounts-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass activate-type-input common-lisp:nil
                       ((major-version :initarg :major-version :type
                         (common-lisp:or major-version common-lisp:null)
                         :accessor %activate-type-input-major-version :initform
                         common-lisp:nil)
                        (version-bump :initarg :version-bump :type
                         (common-lisp:or version-bump common-lisp:null)
                         :accessor %activate-type-input-version-bump :initform
                         common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %activate-type-input-execution-role-arn :initform
                         common-lisp:nil)
                        (logging-config :initarg :logging-config :type
                         (common-lisp:or logging-config common-lisp:null)
                         :accessor %activate-type-input-logging-config
                         :initform common-lisp:nil)
                        (auto-update :initarg :auto-update :type
                         (common-lisp:or auto-update common-lisp:null)
                         :accessor %activate-type-input-auto-update :initform
                         common-lisp:nil)
                        (type-name-alias :initarg :type-name-alias :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         %activate-type-input-type-name-alias :initform
                         common-lisp:nil)
                        (type-name :initarg :type-name :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         %activate-type-input-type-name :initform
                         common-lisp:nil)
                        (publisher-id :initarg :publisher-id :type
                         (common-lisp:or publisher-id common-lisp:null)
                         :accessor %activate-type-input-publisher-id :initform
                         common-lisp:nil)
                        (public-type-arn :initarg :public-type-arn :type
                         (common-lisp:or third-party-type-arn common-lisp:null)
                         :accessor %activate-type-input-public-type-arn
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or third-party-type common-lisp:null)
                         :accessor %activate-type-input-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'activate-type-input 'make-activate-type-input))
 (common-lisp:defun make-activate-type-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key major-version version-bump
                     execution-role-arn logging-config auto-update
                     type-name-alias type-name publisher-id public-type-arn
                     type)
   (common-lisp:apply #'common-lisp:make-instance 'activate-type-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input activate-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input activate-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-type-arn))
      (common-lisp:list
       (common-lisp:cons "PublicTypeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publisher-id))
      (common-lisp:list
       (common-lisp:cons "PublisherId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name-alias))
      (common-lisp:list
       (common-lisp:cons "TypeNameAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-update))
      (common-lisp:list
       (common-lisp:cons "AutoUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-config))
      (common-lisp:list
       (common-lisp:cons "LoggingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-bump))
      (common-lisp:list
       (common-lisp:cons "VersionBump"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'major-version))
      (common-lisp:list
       (common-lisp:cons "MajorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input activate-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass activate-type-output common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or private-type-arn common-lisp:null)
                         :accessor %activate-type-output-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'activate-type-output 'make-activate-type-output))
 (common-lisp:defun make-activate-type-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance 'activate-type-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input activate-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input activate-type-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input activate-type-output))
   common-lisp:nil))
(common-lisp:deftype allowed-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype allowed-values ()
   '(trivial-types:proper-list allowed-value))
 (common-lisp:defun |make-allowed-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list allowed-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition already-exists-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'already-exists-exception)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass auto-deployment common-lisp:nil
                       ((retain-stacks-on-account-removal :initarg
                         :retain-stacks-on-account-removal :type
                         (common-lisp:or
                          retain-stacks-on-account-removal-nullable
                          common-lisp:null)
                         :accessor
                         %auto-deployment-retain-stacks-on-account-removal
                         :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or auto-deployment-nullable
                                         common-lisp:null)
                         :accessor %auto-deployment-enabled :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'auto-deployment 'make-auto-deployment))
 (common-lisp:defun make-auto-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key retain-stacks-on-account-removal enabled)
   (common-lisp:apply #'common-lisp:make-instance 'auto-deployment
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-deployment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-deployment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retain-stacks-on-account-removal))
      (common-lisp:list
       (common-lisp:cons "RetainStacksOnAccountRemoval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-deployment))
   common-lisp:nil))
(common-lisp:deftype auto-deployment-nullable () 'common-lisp:boolean)
(common-lisp:deftype auto-update () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass batch-describe-type-configurations-error common-lisp:nil
                       ((type-configuration-identifier :initarg
                         :type-configuration-identifier :type
                         (common-lisp:or type-configuration-identifier
                                         common-lisp:null)
                         :accessor
                         %batch-describe-type-configurations-error-type-configuration-identifier
                         :initform common-lisp:nil)
                        (error-message :initarg :error-message :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor
                         %batch-describe-type-configurations-error-error-message
                         :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or error-code common-lisp:null) :accessor
                         %batch-describe-type-configurations-error-error-code
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-describe-type-configurations-error
                    'make-batch-describe-type-configurations-error))
 (common-lisp:defun make-batch-describe-type-configurations-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type-configuration-identifier
                     error-message error-code)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-describe-type-configurations-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-type-configurations-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-type-configurations-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'type-configuration-identifier))
      (common-lisp:list
       (common-lisp:cons "TypeConfigurationIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-type-configurations-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-describe-type-configurations-errors ()
   '(trivial-types:proper-list batch-describe-type-configurations-error))
 (common-lisp:defun |make-batch-describe-type-configurations-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-describe-type-configurations-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-describe-type-configurations-input common-lisp:nil
                       ((type-configuration-identifiers :initarg
                         :type-configuration-identifiers :type
                         (common-lisp:or type-configuration-identifiers
                                         common-lisp:null)
                         :accessor
                         %batch-describe-type-configurations-input-type-configuration-identifiers
                         :initform
                         (common-lisp:error
                          ":type-configuration-identifiers is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-describe-type-configurations-input
                    'make-batch-describe-type-configurations-input))
 (common-lisp:defun make-batch-describe-type-configurations-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type-configuration-identifiers)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-describe-type-configurations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-type-configurations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-type-configurations-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'type-configuration-identifiers))
      (common-lisp:list
       (common-lisp:cons "TypeConfigurationIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-type-configurations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-describe-type-configurations-output
                       common-lisp:nil
                       ((type-configurations :initarg :type-configurations
                         :type
                         (common-lisp:or type-configuration-details-list
                                         common-lisp:null)
                         :accessor
                         %batch-describe-type-configurations-output-type-configurations
                         :initform common-lisp:nil)
                        (unprocessed-type-configurations :initarg
                         :unprocessed-type-configurations :type
                         (common-lisp:or unprocessed-type-configurations
                                         common-lisp:null)
                         :accessor
                         %batch-describe-type-configurations-output-unprocessed-type-configurations
                         :initform common-lisp:nil)
                        (errors :initarg :errors :type
                         (common-lisp:or
                          batch-describe-type-configurations-errors
                          common-lisp:null)
                         :accessor
                         %batch-describe-type-configurations-output-errors
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-describe-type-configurations-output
                    'make-batch-describe-type-configurations-output))
 (common-lisp:defun make-batch-describe-type-configurations-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type-configurations
                     unprocessed-type-configurations errors)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-describe-type-configurations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-type-configurations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-type-configurations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-type-configurations))
      (common-lisp:list
       (common-lisp:cons "UnprocessedTypeConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-configurations))
      (common-lisp:list
       (common-lisp:cons "TypeConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-type-configurations-output))
   common-lisp:nil))
(common-lisp:deftype boxed-integer () 'common-lisp:integer)
(common-lisp:deftype boxed-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition cfnregistry-exception
     (cloudformation-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       cfnregistry-exception-message)))
 (common-lisp:export
  (common-lisp:list 'cfnregistry-exception 'cfnregistry-exception-message)))
(common-lisp:deftype call-as () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cancel-update-stack-input common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %cancel-update-stack-input-client-request-token
                         :initform common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name common-lisp:null) :accessor
                         %cancel-update-stack-input-stack-name :initform
                         (common-lisp:error ":stack-name is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-update-stack-input
                    'make-cancel-update-stack-input))
 (common-lisp:defun make-cancel-update-stack-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token stack-name)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-update-stack-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-update-stack-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-update-stack-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-update-stack-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype capabilities () '(trivial-types:proper-list capability))
 (common-lisp:defun |make-capabilities|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list capability))
   aws-sdk/generator/shape::members))
(common-lisp:deftype capabilities-reason () 'common-lisp:string)
(common-lisp:deftype capability () 'common-lisp:string)
(common-lisp:deftype category () 'common-lisp:string)
(common-lisp:deftype causing-entity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass change common-lisp:nil
                       ((resource-change :initarg :resource-change :type
                         (common-lisp:or resource-change common-lisp:null)
                         :accessor %change-resource-change :initform
                         common-lisp:nil)
                        (hook-invocation-count :initarg :hook-invocation-count
                         :type
                         (common-lisp:or hook-invocation-count
                                         common-lisp:null)
                         :accessor %change-hook-invocation-count :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or change-type common-lisp:null)
                         :accessor %change-type :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'change 'make-change))
 (common-lisp:defun make-change
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-change hook-invocation-count
                     type)
   (common-lisp:apply #'common-lisp:make-instance 'change
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hook-invocation-count))
      (common-lisp:list
       (common-lisp:cons "HookInvocationCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-change))
      (common-lisp:list
       (common-lisp:cons "ResourceChange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input change))
   common-lisp:nil))
(common-lisp:deftype change-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass change-set-hook common-lisp:nil
                       ((target-details :initarg :target-details :type
                         (common-lisp:or change-set-hook-target-details
                                         common-lisp:null)
                         :accessor %change-set-hook-target-details :initform
                         common-lisp:nil)
                        (type-configuration-version-id :initarg
                         :type-configuration-version-id :type
                         (common-lisp:or hook-type-configuration-version-id
                                         common-lisp:null)
                         :accessor
                         %change-set-hook-type-configuration-version-id
                         :initform common-lisp:nil)
                        (type-version-id :initarg :type-version-id :type
                         (common-lisp:or hook-type-version-id common-lisp:null)
                         :accessor %change-set-hook-type-version-id :initform
                         common-lisp:nil)
                        (type-name :initarg :type-name :type
                         (common-lisp:or hook-type-name common-lisp:null)
                         :accessor %change-set-hook-type-name :initform
                         common-lisp:nil)
                        (failure-mode :initarg :failure-mode :type
                         (common-lisp:or hook-failure-mode common-lisp:null)
                         :accessor %change-set-hook-failure-mode :initform
                         common-lisp:nil)
                        (invocation-point :initarg :invocation-point :type
                         (common-lisp:or hook-invocation-point
                                         common-lisp:null)
                         :accessor %change-set-hook-invocation-point :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'change-set-hook 'make-change-set-hook))
 (common-lisp:defun make-change-set-hook
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-details
                     type-configuration-version-id type-version-id type-name
                     failure-mode invocation-point)
   (common-lisp:apply #'common-lisp:make-instance 'change-set-hook
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input change-set-hook))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input change-set-hook))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-point))
      (common-lisp:list
       (common-lisp:cons "InvocationPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-mode))
      (common-lisp:list
       (common-lisp:cons "FailureMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-version-id))
      (common-lisp:list
       (common-lisp:cons "TypeVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'type-configuration-version-id))
      (common-lisp:list
       (common-lisp:cons "TypeConfigurationVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-details))
      (common-lisp:list
       (common-lisp:cons "TargetDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input change-set-hook))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass change-set-hook-resource-target-details common-lisp:nil
                       ((resource-action :initarg :resource-action :type
                         (common-lisp:or change-action common-lisp:null)
                         :accessor
                         %change-set-hook-resource-target-details-resource-action
                         :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or hook-target-type-name
                                         common-lisp:null)
                         :accessor
                         %change-set-hook-resource-target-details-resource-type
                         :initform common-lisp:nil)
                        (logical-resource-id :initarg :logical-resource-id
                         :type
                         (common-lisp:or logical-resource-id common-lisp:null)
                         :accessor
                         %change-set-hook-resource-target-details-logical-resource-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'change-set-hook-resource-target-details
                    'make-change-set-hook-resource-target-details))
 (common-lisp:defun make-change-set-hook-resource-target-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-action resource-type
                     logical-resource-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'change-set-hook-resource-target-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          change-set-hook-resource-target-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          change-set-hook-resource-target-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "LogicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-action))
      (common-lisp:list
       (common-lisp:cons "ResourceAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          change-set-hook-resource-target-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass change-set-hook-target-details common-lisp:nil
                       ((resource-target-details :initarg
                         :resource-target-details :type
                         (common-lisp:or
                          change-set-hook-resource-target-details
                          common-lisp:null)
                         :accessor
                         %change-set-hook-target-details-resource-target-details
                         :initform common-lisp:nil)
                        (target-type :initarg :target-type :type
                         (common-lisp:or hook-target-type common-lisp:null)
                         :accessor %change-set-hook-target-details-target-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'change-set-hook-target-details
                    'make-change-set-hook-target-details))
 (common-lisp:defun make-change-set-hook-target-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-target-details target-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'change-set-hook-target-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          change-set-hook-target-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          change-set-hook-target-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-type))
      (common-lisp:list
       (common-lisp:cons "TargetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-target-details))
      (common-lisp:list
       (common-lisp:cons "ResourceTargetDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          change-set-hook-target-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype change-set-hooks ()
   '(trivial-types:proper-list change-set-hook))
 (common-lisp:defun |make-change-set-hooks|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list change-set-hook))
   aws-sdk/generator/shape::members))
(common-lisp:deftype change-set-hooks-status () 'common-lisp:string)
(common-lisp:deftype change-set-id () 'common-lisp:string)
(common-lisp:deftype change-set-name () 'common-lisp:string)
(common-lisp:deftype change-set-name-or-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition change-set-not-found-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'change-set-not-found-exception)))
(common-lisp:deftype change-set-status () 'common-lisp:string)
(common-lisp:deftype change-set-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype change-set-summaries ()
   '(trivial-types:proper-list change-set-summary))
 (common-lisp:defun |make-change-set-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list change-set-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass change-set-summary common-lisp:nil
                       ((root-change-set-id :initarg :root-change-set-id :type
                         (common-lisp:or change-set-id common-lisp:null)
                         :accessor %change-set-summary-root-change-set-id
                         :initform common-lisp:nil)
                        (parent-change-set-id :initarg :parent-change-set-id
                         :type (common-lisp:or change-set-id common-lisp:null)
                         :accessor %change-set-summary-parent-change-set-id
                         :initform common-lisp:nil)
                        (include-nested-stacks :initarg :include-nested-stacks
                         :type
                         (common-lisp:or include-nested-stacks
                                         common-lisp:null)
                         :accessor %change-set-summary-include-nested-stacks
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %change-set-summary-description :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %change-set-summary-creation-time :initform
                         common-lisp:nil)
                        (status-reason :initarg :status-reason :type
                         (common-lisp:or change-set-status-reason
                                         common-lisp:null)
                         :accessor %change-set-summary-status-reason :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or change-set-status common-lisp:null)
                         :accessor %change-set-summary-status :initform
                         common-lisp:nil)
                        (execution-status :initarg :execution-status :type
                         (common-lisp:or execution-status common-lisp:null)
                         :accessor %change-set-summary-execution-status
                         :initform common-lisp:nil)
                        (change-set-name :initarg :change-set-name :type
                         (common-lisp:or change-set-name common-lisp:null)
                         :accessor %change-set-summary-change-set-name
                         :initform common-lisp:nil)
                        (change-set-id :initarg :change-set-id :type
                         (common-lisp:or change-set-id common-lisp:null)
                         :accessor %change-set-summary-change-set-id :initform
                         common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name common-lisp:null) :accessor
                         %change-set-summary-stack-name :initform
                         common-lisp:nil)
                        (stack-id :initarg :stack-id :type
                         (common-lisp:or stack-id common-lisp:null) :accessor
                         %change-set-summary-stack-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'change-set-summary 'make-change-set-summary))
 (common-lisp:defun make-change-set-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key root-change-set-id parent-change-set-id
                     include-nested-stacks description creation-time
                     status-reason status execution-status change-set-name
                     change-set-id stack-name stack-id)
   (common-lisp:apply #'common-lisp:make-instance 'change-set-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input change-set-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input change-set-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-id))
      (common-lisp:list
       (common-lisp:cons "ChangeSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-status))
      (common-lisp:list
       (common-lisp:cons "ExecutionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-nested-stacks))
      (common-lisp:list
       (common-lisp:cons "IncludeNestedStacks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-change-set-id))
      (common-lisp:list
       (common-lisp:cons "ParentChangeSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-change-set-id))
      (common-lisp:list
       (common-lisp:cons "RootChangeSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input change-set-summary))
   common-lisp:nil))
(common-lisp:deftype change-set-type () 'common-lisp:string)
(common-lisp:deftype change-source () 'common-lisp:string)
(common-lisp:deftype change-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype changes () '(trivial-types:proper-list change))
 (common-lisp:defun |make-changes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list change))
   aws-sdk/generator/shape::members))
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:deftype configuration-schema () 'common-lisp:string)
(common-lisp:deftype connection-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass continue-update-rollback-input common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %continue-update-rollback-input-client-request-token
                         :initform common-lisp:nil)
                        (resources-to-skip :initarg :resources-to-skip :type
                         (common-lisp:or resources-to-skip common-lisp:null)
                         :accessor
                         %continue-update-rollback-input-resources-to-skip
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %continue-update-rollback-input-role-arn :initform
                         common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name-or-id common-lisp:null)
                         :accessor %continue-update-rollback-input-stack-name
                         :initform
                         (common-lisp:error ":stack-name is required"))))
 (common-lisp:export
  (common-lisp:list 'continue-update-rollback-input
                    'make-continue-update-rollback-input))
 (common-lisp:defun make-continue-update-rollback-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token resources-to-skip
                     role-arn stack-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'continue-update-rollback-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          continue-update-rollback-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          continue-update-rollback-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources-to-skip))
      (common-lisp:list
       (common-lisp:cons "ResourcesToSkip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          continue-update-rollback-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass continue-update-rollback-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'continue-update-rollback-output
                    'make-continue-update-rollback-output))
 (common-lisp:defun make-continue-update-rollback-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'continue-update-rollback-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          continue-update-rollback-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          continue-update-rollback-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          continue-update-rollback-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-change-set-input common-lisp:nil
                       ((include-nested-stacks :initarg :include-nested-stacks
                         :type
                         (common-lisp:or include-nested-stacks
                                         common-lisp:null)
                         :accessor
                         %create-change-set-input-include-nested-stacks
                         :initform common-lisp:nil)
                        (resources-to-import :initarg :resources-to-import
                         :type
                         (common-lisp:or resources-to-import common-lisp:null)
                         :accessor %create-change-set-input-resources-to-import
                         :initform common-lisp:nil)
                        (change-set-type :initarg :change-set-type :type
                         (common-lisp:or change-set-type common-lisp:null)
                         :accessor %create-change-set-input-change-set-type
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-change-set-input-description
                         :initform common-lisp:nil)
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-change-set-input-client-token
                         :initform common-lisp:nil)
                        (change-set-name :initarg :change-set-name :type
                         (common-lisp:or change-set-name common-lisp:null)
                         :accessor %create-change-set-input-change-set-name
                         :initform
                         (common-lisp:error ":change-set-name is required"))
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-change-set-input-tags :initform
                         common-lisp:nil)
                        (notification-arns :initarg :notification-arns :type
                         (common-lisp:or notification-arns common-lisp:null)
                         :accessor %create-change-set-input-notification-arns
                         :initform common-lisp:nil)
                        (rollback-configuration :initarg
                         :rollback-configuration :type
                         (common-lisp:or rollback-configuration
                                         common-lisp:null)
                         :accessor
                         %create-change-set-input-rollback-configuration
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %create-change-set-input-role-arn :initform
                         common-lisp:nil)
                        (resource-types :initarg :resource-types :type
                         (common-lisp:or resource-types common-lisp:null)
                         :accessor %create-change-set-input-resource-types
                         :initform common-lisp:nil)
                        (capabilities :initarg :capabilities :type
                         (common-lisp:or capabilities common-lisp:null)
                         :accessor %create-change-set-input-capabilities
                         :initform common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameters common-lisp:null) :accessor
                         %create-change-set-input-parameters :initform
                         common-lisp:nil)
                        (use-previous-template :initarg :use-previous-template
                         :type
                         (common-lisp:or use-previous-template
                                         common-lisp:null)
                         :accessor
                         %create-change-set-input-use-previous-template
                         :initform common-lisp:nil)
                        (template-url :initarg :template-url :type
                         (common-lisp:or template-url common-lisp:null)
                         :accessor %create-change-set-input-template-url
                         :initform common-lisp:nil)
                        (template-body :initarg :template-body :type
                         (common-lisp:or template-body common-lisp:null)
                         :accessor %create-change-set-input-template-body
                         :initform common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name-or-id common-lisp:null)
                         :accessor %create-change-set-input-stack-name
                         :initform
                         (common-lisp:error ":stack-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-change-set-input 'make-create-change-set-input))
 (common-lisp:defun make-create-change-set-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key include-nested-stacks resources-to-import
                     change-set-type description client-token change-set-name
                     tags notification-arns rollback-configuration role-arn
                     resource-types capabilities parameters
                     use-previous-template template-url template-body
                     stack-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-change-set-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-change-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-change-set-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "TemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "TemplateURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-previous-template))
      (common-lisp:list
       (common-lisp:cons "UsePreviousTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-types))
      (common-lisp:list
       (common-lisp:cons "ResourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rollback-configuration))
      (common-lisp:list
       (common-lisp:cons "RollbackConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-arns))
      (common-lisp:list
       (common-lisp:cons "NotificationARNs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-type))
      (common-lisp:list
       (common-lisp:cons "ChangeSetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources-to-import))
      (common-lisp:list
       (common-lisp:cons "ResourcesToImport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-nested-stacks))
      (common-lisp:list
       (common-lisp:cons "IncludeNestedStacks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-change-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-change-set-output common-lisp:nil
                       ((stack-id :initarg :stack-id :type
                         (common-lisp:or stack-id common-lisp:null) :accessor
                         %create-change-set-output-stack-id :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or change-set-id common-lisp:null)
                         :accessor %create-change-set-output-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-change-set-output 'make-create-change-set-output))
 (common-lisp:defun make-create-change-set-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-id id)
   (common-lisp:apply #'common-lisp:make-instance 'create-change-set-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-change-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-change-set-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-change-set-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-stack-input common-lisp:nil
                       ((enable-termination-protection :initarg
                         :enable-termination-protection :type
                         (common-lisp:or enable-termination-protection
                                         common-lisp:null)
                         :accessor
                         %create-stack-input-enable-termination-protection
                         :initform common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %create-stack-input-client-request-token
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-stack-input-tags :initform common-lisp:nil)
                        (stack-policy-url :initarg :stack-policy-url :type
                         (common-lisp:or stack-policy-url common-lisp:null)
                         :accessor %create-stack-input-stack-policy-url
                         :initform common-lisp:nil)
                        (stack-policy-body :initarg :stack-policy-body :type
                         (common-lisp:or stack-policy-body common-lisp:null)
                         :accessor %create-stack-input-stack-policy-body
                         :initform common-lisp:nil)
                        (on-failure :initarg :on-failure :type
                         (common-lisp:or on-failure common-lisp:null) :accessor
                         %create-stack-input-on-failure :initform
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %create-stack-input-role-arn :initform
                         common-lisp:nil)
                        (resource-types :initarg :resource-types :type
                         (common-lisp:or resource-types common-lisp:null)
                         :accessor %create-stack-input-resource-types :initform
                         common-lisp:nil)
                        (capabilities :initarg :capabilities :type
                         (common-lisp:or capabilities common-lisp:null)
                         :accessor %create-stack-input-capabilities :initform
                         common-lisp:nil)
                        (notification-arns :initarg :notification-arns :type
                         (common-lisp:or notification-arns common-lisp:null)
                         :accessor %create-stack-input-notification-arns
                         :initform common-lisp:nil)
                        (timeout-in-minutes :initarg :timeout-in-minutes :type
                         (common-lisp:or timeout-minutes common-lisp:null)
                         :accessor %create-stack-input-timeout-in-minutes
                         :initform common-lisp:nil)
                        (rollback-configuration :initarg
                         :rollback-configuration :type
                         (common-lisp:or rollback-configuration
                                         common-lisp:null)
                         :accessor %create-stack-input-rollback-configuration
                         :initform common-lisp:nil)
                        (disable-rollback :initarg :disable-rollback :type
                         (common-lisp:or disable-rollback common-lisp:null)
                         :accessor %create-stack-input-disable-rollback
                         :initform common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameters common-lisp:null) :accessor
                         %create-stack-input-parameters :initform
                         common-lisp:nil)
                        (template-url :initarg :template-url :type
                         (common-lisp:or template-url common-lisp:null)
                         :accessor %create-stack-input-template-url :initform
                         common-lisp:nil)
                        (template-body :initarg :template-body :type
                         (common-lisp:or template-body common-lisp:null)
                         :accessor %create-stack-input-template-body :initform
                         common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name common-lisp:null) :accessor
                         %create-stack-input-stack-name :initform
                         (common-lisp:error ":stack-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-stack-input 'make-create-stack-input))
 (common-lisp:defun make-create-stack-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enable-termination-protection
                     client-request-token tags stack-policy-url
                     stack-policy-body on-failure role-arn resource-types
                     capabilities notification-arns timeout-in-minutes
                     rollback-configuration disable-rollback parameters
                     template-url template-body stack-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-stack-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-stack-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-stack-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "TemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "TemplateURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-rollback))
      (common-lisp:list
       (common-lisp:cons "DisableRollback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rollback-configuration))
      (common-lisp:list
       (common-lisp:cons "RollbackConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "TimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-arns))
      (common-lisp:list
       (common-lisp:cons "NotificationARNs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-types))
      (common-lisp:list
       (common-lisp:cons "ResourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-failure))
      (common-lisp:list
       (common-lisp:cons "OnFailure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-policy-body))
      (common-lisp:list
       (common-lisp:cons "StackPolicyBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-policy-url))
      (common-lisp:list
       (common-lisp:cons "StackPolicyURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-termination-protection))
      (common-lisp:list
       (common-lisp:cons "EnableTerminationProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-stack-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-stack-instances-input common-lisp:nil
                       ((call-as :initarg :call-as :type
                         (common-lisp:or call-as common-lisp:null) :accessor
                         %create-stack-instances-input-call-as :initform
                         common-lisp:nil)
                        (operation-id :initarg :operation-id :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %create-stack-instances-input-operation-id
                         :initform common-lisp:nil)
                        (operation-preferences :initarg :operation-preferences
                         :type
                         (common-lisp:or stack-set-operation-preferences
                                         common-lisp:null)
                         :accessor
                         %create-stack-instances-input-operation-preferences
                         :initform common-lisp:nil)
                        (parameter-overrides :initarg :parameter-overrides
                         :type (common-lisp:or parameters common-lisp:null)
                         :accessor
                         %create-stack-instances-input-parameter-overrides
                         :initform common-lisp:nil)
                        (regions :initarg :regions :type
                         (common-lisp:or region-list common-lisp:null)
                         :accessor %create-stack-instances-input-regions
                         :initform (common-lisp:error ":regions is required"))
                        (deployment-targets :initarg :deployment-targets :type
                         (common-lisp:or deployment-targets common-lisp:null)
                         :accessor
                         %create-stack-instances-input-deployment-targets
                         :initform common-lisp:nil)
                        (accounts :initarg :accounts :type
                         (common-lisp:or account-list common-lisp:null)
                         :accessor %create-stack-instances-input-accounts
                         :initform common-lisp:nil)
                        (stack-set-name :initarg :stack-set-name :type
                         (common-lisp:or stack-set-name common-lisp:null)
                         :accessor %create-stack-instances-input-stack-set-name
                         :initform
                         (common-lisp:error ":stack-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-stack-instances-input
                    'make-create-stack-instances-input))
 (common-lisp:defun make-create-stack-instances-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key call-as operation-id
                     operation-preferences parameter-overrides regions
                     deployment-targets accounts stack-set-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-stack-instances-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-stack-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-stack-instances-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts))
      (common-lisp:list
       (common-lisp:cons "Accounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-targets))
      (common-lisp:list
       (common-lisp:cons "DeploymentTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-overrides))
      (common-lisp:list
       (common-lisp:cons "ParameterOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-preferences))
      (common-lisp:list
       (common-lisp:cons "OperationPreferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'call-as))
      (common-lisp:list
       (common-lisp:cons "CallAs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-stack-instances-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-stack-instances-output common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %create-stack-instances-output-operation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-stack-instances-output
                    'make-create-stack-instances-output))
 (common-lisp:defun make-create-stack-instances-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-stack-instances-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-stack-instances-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-stack-instances-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-stack-instances-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-stack-output common-lisp:nil
                       ((stack-id :initarg :stack-id :type
                         (common-lisp:or stack-id common-lisp:null) :accessor
                         %create-stack-output-stack-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-stack-output 'make-create-stack-output))
 (common-lisp:defun make-create-stack-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-stack-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-stack-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-stack-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-stack-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-stack-set-input common-lisp:nil
                       ((managed-execution :initarg :managed-execution :type
                         (common-lisp:or managed-execution common-lisp:null)
                         :accessor %create-stack-set-input-managed-execution
                         :initform common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %create-stack-set-input-client-request-token
                         :initform common-lisp:nil)
                        (call-as :initarg :call-as :type
                         (common-lisp:or call-as common-lisp:null) :accessor
                         %create-stack-set-input-call-as :initform
                         common-lisp:nil)
                        (auto-deployment :initarg :auto-deployment :type
                         (common-lisp:or auto-deployment common-lisp:null)
                         :accessor %create-stack-set-input-auto-deployment
                         :initform common-lisp:nil)
                        (permission-model :initarg :permission-model :type
                         (common-lisp:or permission-models common-lisp:null)
                         :accessor %create-stack-set-input-permission-model
                         :initform common-lisp:nil)
                        (execution-role-name :initarg :execution-role-name
                         :type
                         (common-lisp:or execution-role-name common-lisp:null)
                         :accessor %create-stack-set-input-execution-role-name
                         :initform common-lisp:nil)
                        (administration-role-arn :initarg
                         :administration-role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %create-stack-set-input-administration-role-arn
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-stack-set-input-tags :initform
                         common-lisp:nil)
                        (capabilities :initarg :capabilities :type
                         (common-lisp:or capabilities common-lisp:null)
                         :accessor %create-stack-set-input-capabilities
                         :initform common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameters common-lisp:null) :accessor
                         %create-stack-set-input-parameters :initform
                         common-lisp:nil)
                        (stack-id :initarg :stack-id :type
                         (common-lisp:or stack-id common-lisp:null) :accessor
                         %create-stack-set-input-stack-id :initform
                         common-lisp:nil)
                        (template-url :initarg :template-url :type
                         (common-lisp:or template-url common-lisp:null)
                         :accessor %create-stack-set-input-template-url
                         :initform common-lisp:nil)
                        (template-body :initarg :template-body :type
                         (common-lisp:or template-body common-lisp:null)
                         :accessor %create-stack-set-input-template-body
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-stack-set-input-description
                         :initform common-lisp:nil)
                        (stack-set-name :initarg :stack-set-name :type
                         (common-lisp:or stack-set-name common-lisp:null)
                         :accessor %create-stack-set-input-stack-set-name
                         :initform
                         (common-lisp:error ":stack-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-stack-set-input 'make-create-stack-set-input))
 (common-lisp:defun make-create-stack-set-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key managed-execution client-request-token
                     call-as auto-deployment permission-model
                     execution-role-name administration-role-arn tags
                     capabilities parameters stack-id template-url
                     template-body description stack-set-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-stack-set-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-stack-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-stack-set-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "TemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "TemplateURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'administration-role-arn))
      (common-lisp:list
       (common-lisp:cons "AdministrationRoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-name))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-model))
      (common-lisp:list
       (common-lisp:cons "PermissionModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-deployment))
      (common-lisp:list
       (common-lisp:cons "AutoDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'call-as))
      (common-lisp:list
       (common-lisp:cons "CallAs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-execution))
      (common-lisp:list
       (common-lisp:cons "ManagedExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-stack-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-stack-set-output common-lisp:nil
                       ((stack-set-id :initarg :stack-set-id :type
                         (common-lisp:or stack-set-id common-lisp:null)
                         :accessor %create-stack-set-output-stack-set-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-stack-set-output 'make-create-stack-set-output))
 (common-lisp:defun make-create-stack-set-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-set-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-stack-set-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-stack-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-stack-set-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-id))
      (common-lisp:list
       (common-lisp:cons "StackSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-stack-set-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition created-but-modified-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'created-but-modified-exception)))
(common-lisp:deftype creation-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass deactivate-type-input common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or private-type-arn common-lisp:null)
                         :accessor %deactivate-type-input-arn :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or third-party-type common-lisp:null)
                         :accessor %deactivate-type-input-type :initform
                         common-lisp:nil)
                        (type-name :initarg :type-name :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         %deactivate-type-input-type-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deactivate-type-input 'make-deactivate-type-input))
 (common-lisp:defun make-deactivate-type-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn type type-name)
   (common-lisp:apply #'common-lisp:make-instance 'deactivate-type-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deactivate-type-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deactivate-type-output 'make-deactivate-type-output))
 (common-lisp:defun make-deactivate-type-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'deactivate-type-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-type-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-change-set-input common-lisp:nil
                       ((stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name-or-id common-lisp:null)
                         :accessor %delete-change-set-input-stack-name
                         :initform common-lisp:nil)
                        (change-set-name :initarg :change-set-name :type
                         (common-lisp:or change-set-name-or-id
                                         common-lisp:null)
                         :accessor %delete-change-set-input-change-set-name
                         :initform
                         (common-lisp:error ":change-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-change-set-input 'make-delete-change-set-input))
 (common-lisp:defun make-delete-change-set-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-name change-set-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-change-set-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-change-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-change-set-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-change-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-change-set-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-change-set-output 'make-delete-change-set-output))
 (common-lisp:defun make-delete-change-set-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-change-set-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-change-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-change-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-change-set-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-stack-input common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %delete-stack-input-client-request-token
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %delete-stack-input-role-arn :initform
                         common-lisp:nil)
                        (retain-resources :initarg :retain-resources :type
                         (common-lisp:or retain-resources common-lisp:null)
                         :accessor %delete-stack-input-retain-resources
                         :initform common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name common-lisp:null) :accessor
                         %delete-stack-input-stack-name :initform
                         (common-lisp:error ":stack-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-stack-input 'make-delete-stack-input))
 (common-lisp:defun make-delete-stack-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token role-arn
                     retain-resources stack-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-stack-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-stack-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-stack-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-resources))
      (common-lisp:list
       (common-lisp:cons "RetainResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-stack-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-stack-instances-input common-lisp:nil
                       ((call-as :initarg :call-as :type
                         (common-lisp:or call-as common-lisp:null) :accessor
                         %delete-stack-instances-input-call-as :initform
                         common-lisp:nil)
                        (operation-id :initarg :operation-id :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %delete-stack-instances-input-operation-id
                         :initform common-lisp:nil)
                        (retain-stacks :initarg :retain-stacks :type
                         (common-lisp:or retain-stacks common-lisp:null)
                         :accessor %delete-stack-instances-input-retain-stacks
                         :initform
                         (common-lisp:error ":retain-stacks is required"))
                        (operation-preferences :initarg :operation-preferences
                         :type
                         (common-lisp:or stack-set-operation-preferences
                                         common-lisp:null)
                         :accessor
                         %delete-stack-instances-input-operation-preferences
                         :initform common-lisp:nil)
                        (regions :initarg :regions :type
                         (common-lisp:or region-list common-lisp:null)
                         :accessor %delete-stack-instances-input-regions
                         :initform (common-lisp:error ":regions is required"))
                        (deployment-targets :initarg :deployment-targets :type
                         (common-lisp:or deployment-targets common-lisp:null)
                         :accessor
                         %delete-stack-instances-input-deployment-targets
                         :initform common-lisp:nil)
                        (accounts :initarg :accounts :type
                         (common-lisp:or account-list common-lisp:null)
                         :accessor %delete-stack-instances-input-accounts
                         :initform common-lisp:nil)
                        (stack-set-name :initarg :stack-set-name :type
                         (common-lisp:or stack-set-name common-lisp:null)
                         :accessor %delete-stack-instances-input-stack-set-name
                         :initform
                         (common-lisp:error ":stack-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-stack-instances-input
                    'make-delete-stack-instances-input))
 (common-lisp:defun make-delete-stack-instances-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key call-as operation-id retain-stacks
                     operation-preferences regions deployment-targets accounts
                     stack-set-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-stack-instances-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-stack-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-stack-instances-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts))
      (common-lisp:list
       (common-lisp:cons "Accounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-targets))
      (common-lisp:list
       (common-lisp:cons "DeploymentTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-preferences))
      (common-lisp:list
       (common-lisp:cons "OperationPreferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-stacks))
      (common-lisp:list
       (common-lisp:cons "RetainStacks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'call-as))
      (common-lisp:list
       (common-lisp:cons "CallAs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-stack-instances-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-stack-instances-output common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %delete-stack-instances-output-operation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-stack-instances-output
                    'make-delete-stack-instances-output))
 (common-lisp:defun make-delete-stack-instances-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-stack-instances-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-stack-instances-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-stack-instances-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-stack-instances-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-stack-set-input common-lisp:nil
                       ((call-as :initarg :call-as :type
                         (common-lisp:or call-as common-lisp:null) :accessor
                         %delete-stack-set-input-call-as :initform
                         common-lisp:nil)
                        (stack-set-name :initarg :stack-set-name :type
                         (common-lisp:or stack-set-name common-lisp:null)
                         :accessor %delete-stack-set-input-stack-set-name
                         :initform
                         (common-lisp:error ":stack-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-stack-set-input 'make-delete-stack-set-input))
 (common-lisp:defun make-delete-stack-set-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key call-as stack-set-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-stack-set-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-stack-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-stack-set-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'call-as))
      (common-lisp:list
       (common-lisp:cons "CallAs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-stack-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-stack-set-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-stack-set-output 'make-delete-stack-set-output))
 (common-lisp:defun make-delete-stack-set-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-stack-set-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-stack-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-stack-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-stack-set-output))
   common-lisp:nil))
(common-lisp:deftype deletion-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass deployment-targets common-lisp:nil
                       ((account-filter-type :initarg :account-filter-type
                         :type
                         (common-lisp:or account-filter-type common-lisp:null)
                         :accessor %deployment-targets-account-filter-type
                         :initform common-lisp:nil)
                        (organizational-unit-ids :initarg
                         :organizational-unit-ids :type
                         (common-lisp:or organizational-unit-id-list
                                         common-lisp:null)
                         :accessor %deployment-targets-organizational-unit-ids
                         :initform common-lisp:nil)
                        (accounts-url :initarg :accounts-url :type
                         (common-lisp:or accounts-url common-lisp:null)
                         :accessor %deployment-targets-accounts-url :initform
                         common-lisp:nil)
                        (accounts :initarg :accounts :type
                         (common-lisp:or account-list common-lisp:null)
                         :accessor %deployment-targets-accounts :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deployment-targets 'make-deployment-targets))
 (common-lisp:defun make-deployment-targets
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-filter-type
                     organizational-unit-ids accounts-url accounts)
   (common-lisp:apply #'common-lisp:make-instance 'deployment-targets
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment-targets))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment-targets))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts))
      (common-lisp:list
       (common-lisp:cons "Accounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts-url))
      (common-lisp:list
       (common-lisp:cons "AccountsUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-ids))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnitIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-filter-type))
      (common-lisp:list
       (common-lisp:cons "AccountFilterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment-targets))
   common-lisp:nil))
(common-lisp:deftype deprecated-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass deregister-type-input common-lisp:nil
                       ((version-id :initarg :version-id :type
                         (common-lisp:or type-version-id common-lisp:null)
                         :accessor %deregister-type-input-version-id :initform
                         common-lisp:nil)
                        (type-name :initarg :type-name :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         %deregister-type-input-type-name :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or registry-type common-lisp:null)
                         :accessor %deregister-type-input-type :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or private-type-arn common-lisp:null)
                         :accessor %deregister-type-input-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deregister-type-input 'make-deregister-type-input))
 (common-lisp:defun make-deregister-type-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-id type-name type arn)
   (common-lisp:apply #'common-lisp:make-instance 'deregister-type-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-type-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deregister-type-output 'make-deregister-type-output))
 (common-lisp:defun make-deregister-type-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'deregister-type-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-type-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-limits-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-account-limits-input-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-account-limits-input
                    'make-describe-account-limits-input))
 (common-lisp:defun make-describe-account-limits-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-limits-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-account-limits-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-account-limits-output-next-token :initform
                         common-lisp:nil)
                        (account-limits :initarg :account-limits :type
                         (common-lisp:or account-limit-list common-lisp:null)
                         :accessor
                         %describe-account-limits-output-account-limits
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-account-limits-output
                    'make-describe-account-limits-output))
 (common-lisp:defun make-describe-account-limits-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token account-limits)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-account-limits-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-limits))
      (common-lisp:list
       (common-lisp:cons "AccountLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-account-limits-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-change-set-hooks-input common-lisp:nil
                       ((logical-resource-id :initarg :logical-resource-id
                         :type
                         (common-lisp:or logical-resource-id common-lisp:null)
                         :accessor
                         %describe-change-set-hooks-input-logical-resource-id
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-change-set-hooks-input-next-token :initform
                         common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name-or-id common-lisp:null)
                         :accessor %describe-change-set-hooks-input-stack-name
                         :initform common-lisp:nil)
                        (change-set-name :initarg :change-set-name :type
                         (common-lisp:or change-set-name-or-id
                                         common-lisp:null)
                         :accessor
                         %describe-change-set-hooks-input-change-set-name
                         :initform
                         (common-lisp:error ":change-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-change-set-hooks-input
                    'make-describe-change-set-hooks-input))
 (common-lisp:defun make-describe-change-set-hooks-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key logical-resource-id next-token stack-name
                     change-set-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-change-set-hooks-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-hooks-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-hooks-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "LogicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-hooks-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-change-set-hooks-output common-lisp:nil
                       ((stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name common-lisp:null) :accessor
                         %describe-change-set-hooks-output-stack-name :initform
                         common-lisp:nil)
                        (stack-id :initarg :stack-id :type
                         (common-lisp:or stack-id common-lisp:null) :accessor
                         %describe-change-set-hooks-output-stack-id :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-change-set-hooks-output-next-token :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or change-set-hooks-status
                                         common-lisp:null)
                         :accessor %describe-change-set-hooks-output-status
                         :initform common-lisp:nil)
                        (hooks :initarg :hooks :type
                         (common-lisp:or change-set-hooks common-lisp:null)
                         :accessor %describe-change-set-hooks-output-hooks
                         :initform common-lisp:nil)
                        (change-set-name :initarg :change-set-name :type
                         (common-lisp:or change-set-name common-lisp:null)
                         :accessor
                         %describe-change-set-hooks-output-change-set-name
                         :initform common-lisp:nil)
                        (change-set-id :initarg :change-set-id :type
                         (common-lisp:or change-set-id common-lisp:null)
                         :accessor
                         %describe-change-set-hooks-output-change-set-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-change-set-hooks-output
                    'make-describe-change-set-hooks-output))
 (common-lisp:defun make-describe-change-set-hooks-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-name stack-id next-token status
                     hooks change-set-name change-set-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-change-set-hooks-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-hooks-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-hooks-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-id))
      (common-lisp:list
       (common-lisp:cons "ChangeSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hooks))
      (common-lisp:list
       (common-lisp:cons "Hooks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-hooks-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-change-set-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-change-set-input-next-token :initform
                         common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name-or-id common-lisp:null)
                         :accessor %describe-change-set-input-stack-name
                         :initform common-lisp:nil)
                        (change-set-name :initarg :change-set-name :type
                         (common-lisp:or change-set-name-or-id
                                         common-lisp:null)
                         :accessor %describe-change-set-input-change-set-name
                         :initform
                         (common-lisp:error ":change-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-change-set-input
                    'make-describe-change-set-input))
 (common-lisp:defun make-describe-change-set-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token stack-name change-set-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-change-set-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-change-set-output common-lisp:nil
                       ((root-change-set-id :initarg :root-change-set-id :type
                         (common-lisp:or change-set-id common-lisp:null)
                         :accessor
                         %describe-change-set-output-root-change-set-id
                         :initform common-lisp:nil)
                        (parent-change-set-id :initarg :parent-change-set-id
                         :type (common-lisp:or change-set-id common-lisp:null)
                         :accessor
                         %describe-change-set-output-parent-change-set-id
                         :initform common-lisp:nil)
                        (include-nested-stacks :initarg :include-nested-stacks
                         :type
                         (common-lisp:or include-nested-stacks
                                         common-lisp:null)
                         :accessor
                         %describe-change-set-output-include-nested-stacks
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-change-set-output-next-token :initform
                         common-lisp:nil)
                        (changes :initarg :changes :type
                         (common-lisp:or changes common-lisp:null) :accessor
                         %describe-change-set-output-changes :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %describe-change-set-output-tags :initform
                         common-lisp:nil)
                        (capabilities :initarg :capabilities :type
                         (common-lisp:or capabilities common-lisp:null)
                         :accessor %describe-change-set-output-capabilities
                         :initform common-lisp:nil)
                        (rollback-configuration :initarg
                         :rollback-configuration :type
                         (common-lisp:or rollback-configuration
                                         common-lisp:null)
                         :accessor
                         %describe-change-set-output-rollback-configuration
                         :initform common-lisp:nil)
                        (notification-arns :initarg :notification-arns :type
                         (common-lisp:or notification-arns common-lisp:null)
                         :accessor
                         %describe-change-set-output-notification-arns
                         :initform common-lisp:nil)
                        (status-reason :initarg :status-reason :type
                         (common-lisp:or change-set-status-reason
                                         common-lisp:null)
                         :accessor %describe-change-set-output-status-reason
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or change-set-status common-lisp:null)
                         :accessor %describe-change-set-output-status :initform
                         common-lisp:nil)
                        (execution-status :initarg :execution-status :type
                         (common-lisp:or execution-status common-lisp:null)
                         :accessor %describe-change-set-output-execution-status
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %describe-change-set-output-creation-time
                         :initform common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameters common-lisp:null) :accessor
                         %describe-change-set-output-parameters :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %describe-change-set-output-description
                         :initform common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name common-lisp:null) :accessor
                         %describe-change-set-output-stack-name :initform
                         common-lisp:nil)
                        (stack-id :initarg :stack-id :type
                         (common-lisp:or stack-id common-lisp:null) :accessor
                         %describe-change-set-output-stack-id :initform
                         common-lisp:nil)
                        (change-set-id :initarg :change-set-id :type
                         (common-lisp:or change-set-id common-lisp:null)
                         :accessor %describe-change-set-output-change-set-id
                         :initform common-lisp:nil)
                        (change-set-name :initarg :change-set-name :type
                         (common-lisp:or change-set-name common-lisp:null)
                         :accessor %describe-change-set-output-change-set-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-change-set-output
                    'make-describe-change-set-output))
 (common-lisp:defun make-describe-change-set-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key root-change-set-id parent-change-set-id
                     include-nested-stacks next-token changes tags capabilities
                     rollback-configuration notification-arns status-reason
                     status execution-status creation-time parameters
                     description stack-name stack-id change-set-id
                     change-set-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-change-set-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-id))
      (common-lisp:list
       (common-lisp:cons "ChangeSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-status))
      (common-lisp:list
       (common-lisp:cons "ExecutionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-arns))
      (common-lisp:list
       (common-lisp:cons "NotificationARNs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rollback-configuration))
      (common-lisp:list
       (common-lisp:cons "RollbackConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'changes))
      (common-lisp:list
       (common-lisp:cons "Changes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-nested-stacks))
      (common-lisp:list
       (common-lisp:cons "IncludeNestedStacks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-change-set-id))
      (common-lisp:list
       (common-lisp:cons "ParentChangeSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-change-set-id))
      (common-lisp:list
       (common-lisp:cons "RootChangeSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-publisher-input common-lisp:nil
                       ((publisher-id :initarg :publisher-id :type
                         (common-lisp:or publisher-id common-lisp:null)
                         :accessor %describe-publisher-input-publisher-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-publisher-input 'make-describe-publisher-input))
 (common-lisp:defun make-describe-publisher-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key publisher-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-publisher-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-publisher-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-publisher-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publisher-id))
      (common-lisp:list
       (common-lisp:cons "PublisherId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-publisher-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-publisher-output common-lisp:nil
                       ((publisher-profile :initarg :publisher-profile :type
                         (common-lisp:or publisher-profile common-lisp:null)
                         :accessor %describe-publisher-output-publisher-profile
                         :initform common-lisp:nil)
                        (identity-provider :initarg :identity-provider :type
                         (common-lisp:or identity-provider common-lisp:null)
                         :accessor %describe-publisher-output-identity-provider
                         :initform common-lisp:nil)
                        (publisher-status :initarg :publisher-status :type
                         (common-lisp:or publisher-status common-lisp:null)
                         :accessor %describe-publisher-output-publisher-status
                         :initform common-lisp:nil)
                        (publisher-id :initarg :publisher-id :type
                         (common-lisp:or publisher-id common-lisp:null)
                         :accessor %describe-publisher-output-publisher-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-publisher-output
                    'make-describe-publisher-output))
 (common-lisp:defun make-describe-publisher-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key publisher-profile identity-provider
                     publisher-status publisher-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-publisher-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-publisher-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-publisher-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publisher-id))
      (common-lisp:list
       (common-lisp:cons "PublisherId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publisher-status))
      (common-lisp:list
       (common-lisp:cons "PublisherStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-provider))
      (common-lisp:list
       (common-lisp:cons "IdentityProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publisher-profile))
      (common-lisp:list
       (common-lisp:cons "PublisherProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-publisher-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stack-drift-detection-status-input
                       common-lisp:nil
                       ((stack-drift-detection-id :initarg
                         :stack-drift-detection-id :type
                         (common-lisp:or stack-drift-detection-id
                                         common-lisp:null)
                         :accessor
                         %describe-stack-drift-detection-status-input-stack-drift-detection-id
                         :initform
                         (common-lisp:error
                          ":stack-drift-detection-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-stack-drift-detection-status-input
                    'make-describe-stack-drift-detection-status-input))
 (common-lisp:defun make-describe-stack-drift-detection-status-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-drift-detection-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-stack-drift-detection-status-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-drift-detection-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-drift-detection-status-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-drift-detection-id))
      (common-lisp:list
       (common-lisp:cons "StackDriftDetectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-drift-detection-status-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stack-drift-detection-status-output
                       common-lisp:nil
                       ((timestamp :initarg :timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-stack-drift-detection-status-output-timestamp
                         :initform
                         (common-lisp:error ":timestamp is required"))
                        (drifted-stack-resource-count :initarg
                         :drifted-stack-resource-count :type
                         (common-lisp:or boxed-integer common-lisp:null)
                         :accessor
                         %describe-stack-drift-detection-status-output-drifted-stack-resource-count
                         :initform common-lisp:nil)
                        (detection-status-reason :initarg
                         :detection-status-reason :type
                         (common-lisp:or stack-drift-detection-status-reason
                                         common-lisp:null)
                         :accessor
                         %describe-stack-drift-detection-status-output-detection-status-reason
                         :initform common-lisp:nil)
                        (detection-status :initarg :detection-status :type
                         (common-lisp:or stack-drift-detection-status
                                         common-lisp:null)
                         :accessor
                         %describe-stack-drift-detection-status-output-detection-status
                         :initform
                         (common-lisp:error ":detection-status is required"))
                        (stack-drift-status :initarg :stack-drift-status :type
                         (common-lisp:or stack-drift-status common-lisp:null)
                         :accessor
                         %describe-stack-drift-detection-status-output-stack-drift-status
                         :initform common-lisp:nil)
                        (stack-drift-detection-id :initarg
                         :stack-drift-detection-id :type
                         (common-lisp:or stack-drift-detection-id
                                         common-lisp:null)
                         :accessor
                         %describe-stack-drift-detection-status-output-stack-drift-detection-id
                         :initform
                         (common-lisp:error
                          ":stack-drift-detection-id is required"))
                        (stack-id :initarg :stack-id :type
                         (common-lisp:or stack-id common-lisp:null) :accessor
                         %describe-stack-drift-detection-status-output-stack-id
                         :initform
                         (common-lisp:error ":stack-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-stack-drift-detection-status-output
                    'make-describe-stack-drift-detection-status-output))
 (common-lisp:defun make-describe-stack-drift-detection-status-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timestamp drifted-stack-resource-count
                     detection-status-reason detection-status
                     stack-drift-status stack-drift-detection-id stack-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-stack-drift-detection-status-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-drift-detection-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-drift-detection-status-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-drift-detection-id))
      (common-lisp:list
       (common-lisp:cons "StackDriftDetectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-drift-status))
      (common-lisp:list
       (common-lisp:cons "StackDriftStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detection-status))
      (common-lisp:list
       (common-lisp:cons "DetectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detection-status-reason))
      (common-lisp:list
       (common-lisp:cons "DetectionStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'drifted-stack-resource-count))
      (common-lisp:list
       (common-lisp:cons "DriftedStackResourceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-drift-detection-status-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stack-events-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-stack-events-input-next-token :initform
                         common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name common-lisp:null) :accessor
                         %describe-stack-events-input-stack-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-stack-events-input
                    'make-describe-stack-events-input))
 (common-lisp:defun make-describe-stack-events-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token stack-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-stack-events-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-events-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-events-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-events-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stack-events-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-stack-events-output-next-token :initform
                         common-lisp:nil)
                        (stack-events :initarg :stack-events :type
                         (common-lisp:or stack-events common-lisp:null)
                         :accessor %describe-stack-events-output-stack-events
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-stack-events-output
                    'make-describe-stack-events-output))
 (common-lisp:defun make-describe-stack-events-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token stack-events)
   (common-lisp:apply #'common-lisp:make-instance 'describe-stack-events-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-events-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-events-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-events))
      (common-lisp:list
       (common-lisp:cons "StackEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-events-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stack-instance-input common-lisp:nil
                       ((call-as :initarg :call-as :type
                         (common-lisp:or call-as common-lisp:null) :accessor
                         %describe-stack-instance-input-call-as :initform
                         common-lisp:nil)
                        (stack-instance-region :initarg :stack-instance-region
                         :type (common-lisp:or region common-lisp:null)
                         :accessor
                         %describe-stack-instance-input-stack-instance-region
                         :initform
                         (common-lisp:error
                          ":stack-instance-region is required"))
                        (stack-instance-account :initarg
                         :stack-instance-account :type
                         (common-lisp:or account common-lisp:null) :accessor
                         %describe-stack-instance-input-stack-instance-account
                         :initform
                         (common-lisp:error
                          ":stack-instance-account is required"))
                        (stack-set-name :initarg :stack-set-name :type
                         (common-lisp:or stack-set-name common-lisp:null)
                         :accessor
                         %describe-stack-instance-input-stack-set-name
                         :initform
                         (common-lisp:error ":stack-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-stack-instance-input
                    'make-describe-stack-instance-input))
 (common-lisp:defun make-describe-stack-instance-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key call-as stack-instance-region
                     stack-instance-account stack-set-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-stack-instance-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-instance-account))
      (common-lisp:list
       (common-lisp:cons "StackInstanceAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-instance-region))
      (common-lisp:list
       (common-lisp:cons "StackInstanceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'call-as))
      (common-lisp:list
       (common-lisp:cons "CallAs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stack-instance-output common-lisp:nil
                       ((stack-instance :initarg :stack-instance :type
                         (common-lisp:or stack-instance common-lisp:null)
                         :accessor
                         %describe-stack-instance-output-stack-instance
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-stack-instance-output
                    'make-describe-stack-instance-output))
 (common-lisp:defun make-describe-stack-instance-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-instance)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-stack-instance-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-instance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-instance))
      (common-lisp:list
       (common-lisp:cons "StackInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stack-resource-drifts-input common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or boxed-max-results common-lisp:null)
                         :accessor
                         %describe-stack-resource-drifts-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-stack-resource-drifts-input-next-token
                         :initform common-lisp:nil)
                        (stack-resource-drift-status-filters :initarg
                         :stack-resource-drift-status-filters :type
                         (common-lisp:or stack-resource-drift-status-filters
                                         common-lisp:null)
                         :accessor
                         %describe-stack-resource-drifts-input-stack-resource-drift-status-filters
                         :initform common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name-or-id common-lisp:null)
                         :accessor
                         %describe-stack-resource-drifts-input-stack-name
                         :initform
                         (common-lisp:error ":stack-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-stack-resource-drifts-input
                    'make-describe-stack-resource-drifts-input))
 (common-lisp:defun make-describe-stack-resource-drifts-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token
                     stack-resource-drift-status-filters stack-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-stack-resource-drifts-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resource-drifts-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resource-drifts-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-resource-drift-status-filters))
      (common-lisp:list
       (common-lisp:cons "StackResourceDriftStatusFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resource-drifts-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stack-resource-drifts-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-stack-resource-drifts-output-next-token
                         :initform common-lisp:nil)
                        (stack-resource-drifts :initarg :stack-resource-drifts
                         :type
                         (common-lisp:or stack-resource-drifts
                                         common-lisp:null)
                         :accessor
                         %describe-stack-resource-drifts-output-stack-resource-drifts
                         :initform
                         (common-lisp:error
                          ":stack-resource-drifts is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-stack-resource-drifts-output
                    'make-describe-stack-resource-drifts-output))
 (common-lisp:defun make-describe-stack-resource-drifts-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token stack-resource-drifts)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-stack-resource-drifts-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resource-drifts-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resource-drifts-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-resource-drifts))
      (common-lisp:list
       (common-lisp:cons "StackResourceDrifts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resource-drifts-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stack-resource-input common-lisp:nil
                       ((logical-resource-id :initarg :logical-resource-id
                         :type
                         (common-lisp:or logical-resource-id common-lisp:null)
                         :accessor
                         %describe-stack-resource-input-logical-resource-id
                         :initform
                         (common-lisp:error
                          ":logical-resource-id is required"))
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name common-lisp:null) :accessor
                         %describe-stack-resource-input-stack-name :initform
                         (common-lisp:error ":stack-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-stack-resource-input
                    'make-describe-stack-resource-input))
 (common-lisp:defun make-describe-stack-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key logical-resource-id stack-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-stack-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "LogicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stack-resource-output common-lisp:nil
                       ((stack-resource-detail :initarg :stack-resource-detail
                         :type
                         (common-lisp:or stack-resource-detail
                                         common-lisp:null)
                         :accessor
                         %describe-stack-resource-output-stack-resource-detail
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-stack-resource-output
                    'make-describe-stack-resource-output))
 (common-lisp:defun make-describe-stack-resource-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-resource-detail)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-stack-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-resource-detail))
      (common-lisp:list
       (common-lisp:cons "StackResourceDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stack-resources-input common-lisp:nil
                       ((physical-resource-id :initarg :physical-resource-id
                         :type
                         (common-lisp:or physical-resource-id common-lisp:null)
                         :accessor
                         %describe-stack-resources-input-physical-resource-id
                         :initform common-lisp:nil)
                        (logical-resource-id :initarg :logical-resource-id
                         :type
                         (common-lisp:or logical-resource-id common-lisp:null)
                         :accessor
                         %describe-stack-resources-input-logical-resource-id
                         :initform common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name common-lisp:null) :accessor
                         %describe-stack-resources-input-stack-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-stack-resources-input
                    'make-describe-stack-resources-input))
 (common-lisp:defun make-describe-stack-resources-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key physical-resource-id logical-resource-id
                     stack-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-stack-resources-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resources-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resources-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "LogicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-resource-id))
      (common-lisp:list
       (common-lisp:cons "PhysicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resources-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stack-resources-output common-lisp:nil
                       ((stack-resources :initarg :stack-resources :type
                         (common-lisp:or stack-resources common-lisp:null)
                         :accessor
                         %describe-stack-resources-output-stack-resources
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-stack-resources-output
                    'make-describe-stack-resources-output))
 (common-lisp:defun make-describe-stack-resources-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-resources)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-stack-resources-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resources-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resources-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-resources))
      (common-lisp:list
       (common-lisp:cons "StackResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-resources-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stack-set-input common-lisp:nil
                       ((call-as :initarg :call-as :type
                         (common-lisp:or call-as common-lisp:null) :accessor
                         %describe-stack-set-input-call-as :initform
                         common-lisp:nil)
                        (stack-set-name :initarg :stack-set-name :type
                         (common-lisp:or stack-set-name common-lisp:null)
                         :accessor %describe-stack-set-input-stack-set-name
                         :initform
                         (common-lisp:error ":stack-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-stack-set-input 'make-describe-stack-set-input))
 (common-lisp:defun make-describe-stack-set-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key call-as stack-set-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-stack-set-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-set-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'call-as))
      (common-lisp:list
       (common-lisp:cons "CallAs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stack-set-operation-input common-lisp:nil
                       ((call-as :initarg :call-as :type
                         (common-lisp:or call-as common-lisp:null) :accessor
                         %describe-stack-set-operation-input-call-as :initform
                         common-lisp:nil)
                        (operation-id :initarg :operation-id :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %describe-stack-set-operation-input-operation-id
                         :initform
                         (common-lisp:error ":operation-id is required"))
                        (stack-set-name :initarg :stack-set-name :type
                         (common-lisp:or stack-set-name common-lisp:null)
                         :accessor
                         %describe-stack-set-operation-input-stack-set-name
                         :initform
                         (common-lisp:error ":stack-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-stack-set-operation-input
                    'make-describe-stack-set-operation-input))
 (common-lisp:defun make-describe-stack-set-operation-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key call-as operation-id stack-set-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-stack-set-operation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-set-operation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-set-operation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'call-as))
      (common-lisp:list
       (common-lisp:cons "CallAs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-set-operation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stack-set-operation-output common-lisp:nil
                       ((stack-set-operation :initarg :stack-set-operation
                         :type
                         (common-lisp:or stack-set-operation common-lisp:null)
                         :accessor
                         %describe-stack-set-operation-output-stack-set-operation
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-stack-set-operation-output
                    'make-describe-stack-set-operation-output))
 (common-lisp:defun make-describe-stack-set-operation-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-set-operation)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-stack-set-operation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-set-operation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-set-operation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-operation))
      (common-lisp:list
       (common-lisp:cons "StackSetOperation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-set-operation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stack-set-output common-lisp:nil
                       ((stack-set :initarg :stack-set :type
                         (common-lisp:or stack-set common-lisp:null) :accessor
                         %describe-stack-set-output-stack-set :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-stack-set-output
                    'make-describe-stack-set-output))
 (common-lisp:defun make-describe-stack-set-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-set)
   (common-lisp:apply #'common-lisp:make-instance 'describe-stack-set-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-set-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set))
      (common-lisp:list
       (common-lisp:cons "StackSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stack-set-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stacks-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-stacks-input-next-token :initform
                         common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name common-lisp:null) :accessor
                         %describe-stacks-input-stack-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-stacks-input 'make-describe-stacks-input))
 (common-lisp:defun make-describe-stacks-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token stack-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-stacks-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stacks-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stacks-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stacks-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-stacks-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-stacks-output-next-token :initform
                         common-lisp:nil)
                        (stacks :initarg :stacks :type
                         (common-lisp:or stacks common-lisp:null) :accessor
                         %describe-stacks-output-stacks :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-stacks-output 'make-describe-stacks-output))
 (common-lisp:defun make-describe-stacks-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token stacks)
   (common-lisp:apply #'common-lisp:make-instance 'describe-stacks-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-stacks-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-stacks-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stacks))
      (common-lisp:list
       (common-lisp:cons "Stacks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-stacks-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-type-input common-lisp:nil
                       ((public-version-number :initarg :public-version-number
                         :type
                         (common-lisp:or public-version-number
                                         common-lisp:null)
                         :accessor %describe-type-input-public-version-number
                         :initform common-lisp:nil)
                        (publisher-id :initarg :publisher-id :type
                         (common-lisp:or publisher-id common-lisp:null)
                         :accessor %describe-type-input-publisher-id :initform
                         common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or type-version-id common-lisp:null)
                         :accessor %describe-type-input-version-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or type-arn common-lisp:null) :accessor
                         %describe-type-input-arn :initform common-lisp:nil)
                        (type-name :initarg :type-name :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         %describe-type-input-type-name :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or registry-type common-lisp:null)
                         :accessor %describe-type-input-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-type-input 'make-describe-type-input))
 (common-lisp:defun make-describe-type-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key public-version-number publisher-id
                     version-id arn type-name type)
   (common-lisp:apply #'common-lisp:make-instance 'describe-type-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publisher-id))
      (common-lisp:list
       (common-lisp:cons "PublisherId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-version-number))
      (common-lisp:list
       (common-lisp:cons "PublicVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-type-output common-lisp:nil
                       ((auto-update :initarg :auto-update :type
                         (common-lisp:or auto-update common-lisp:null)
                         :accessor %describe-type-output-auto-update :initform
                         common-lisp:nil)
                        (is-activated :initarg :is-activated :type
                         (common-lisp:or is-activated common-lisp:null)
                         :accessor %describe-type-output-is-activated :initform
                         common-lisp:nil)
                        (latest-public-version :initarg :latest-public-version
                         :type
                         (common-lisp:or public-version-number
                                         common-lisp:null)
                         :accessor %describe-type-output-latest-public-version
                         :initform common-lisp:nil)
                        (public-version-number :initarg :public-version-number
                         :type
                         (common-lisp:or public-version-number
                                         common-lisp:null)
                         :accessor %describe-type-output-public-version-number
                         :initform common-lisp:nil)
                        (original-type-arn :initarg :original-type-arn :type
                         (common-lisp:or type-arn common-lisp:null) :accessor
                         %describe-type-output-original-type-arn :initform
                         common-lisp:nil)
                        (original-type-name :initarg :original-type-name :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         %describe-type-output-original-type-name :initform
                         common-lisp:nil)
                        (publisher-id :initarg :publisher-id :type
                         (common-lisp:or publisher-id common-lisp:null)
                         :accessor %describe-type-output-publisher-id :initform
                         common-lisp:nil)
                        (configuration-schema :initarg :configuration-schema
                         :type
                         (common-lisp:or configuration-schema common-lisp:null)
                         :accessor %describe-type-output-configuration-schema
                         :initform common-lisp:nil)
                        (time-created :initarg :time-created :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-type-output-time-created :initform
                         common-lisp:nil)
                        (last-updated :initarg :last-updated :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-type-output-last-updated :initform
                         common-lisp:nil)
                        (documentation-url :initarg :documentation-url :type
                         (common-lisp:or optional-secure-url common-lisp:null)
                         :accessor %describe-type-output-documentation-url
                         :initform common-lisp:nil)
                        (source-url :initarg :source-url :type
                         (common-lisp:or optional-secure-url common-lisp:null)
                         :accessor %describe-type-output-source-url :initform
                         common-lisp:nil)
                        (visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %describe-type-output-visibility :initform
                         common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %describe-type-output-execution-role-arn :initform
                         common-lisp:nil)
                        (required-activated-types :initarg
                         :required-activated-types :type
                         (common-lisp:or required-activated-types
                                         common-lisp:null)
                         :accessor
                         %describe-type-output-required-activated-types
                         :initform common-lisp:nil)
                        (logging-config :initarg :logging-config :type
                         (common-lisp:or logging-config common-lisp:null)
                         :accessor %describe-type-output-logging-config
                         :initform common-lisp:nil)
                        (deprecated-status :initarg :deprecated-status :type
                         (common-lisp:or deprecated-status common-lisp:null)
                         :accessor %describe-type-output-deprecated-status
                         :initform common-lisp:nil)
                        (provisioning-type :initarg :provisioning-type :type
                         (common-lisp:or provisioning-type common-lisp:null)
                         :accessor %describe-type-output-provisioning-type
                         :initform common-lisp:nil)
                        (schema :initarg :schema :type
                         (common-lisp:or type-schema common-lisp:null)
                         :accessor %describe-type-output-schema :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %describe-type-output-description :initform
                         common-lisp:nil)
                        (type-tests-status-description :initarg
                         :type-tests-status-description :type
                         (common-lisp:or type-tests-status-description
                                         common-lisp:null)
                         :accessor
                         %describe-type-output-type-tests-status-description
                         :initform common-lisp:nil)
                        (type-tests-status :initarg :type-tests-status :type
                         (common-lisp:or type-tests-status common-lisp:null)
                         :accessor %describe-type-output-type-tests-status
                         :initform common-lisp:nil)
                        (is-default-version :initarg :is-default-version :type
                         (common-lisp:or is-default-version common-lisp:null)
                         :accessor %describe-type-output-is-default-version
                         :initform common-lisp:nil)
                        (default-version-id :initarg :default-version-id :type
                         (common-lisp:or type-version-id common-lisp:null)
                         :accessor %describe-type-output-default-version-id
                         :initform common-lisp:nil)
                        (type-name :initarg :type-name :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         %describe-type-output-type-name :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or registry-type common-lisp:null)
                         :accessor %describe-type-output-type :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or type-arn common-lisp:null) :accessor
                         %describe-type-output-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-type-output 'make-describe-type-output))
 (common-lisp:defun make-describe-type-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-update is-activated
                     latest-public-version public-version-number
                     original-type-arn original-type-name publisher-id
                     configuration-schema time-created last-updated
                     documentation-url source-url visibility execution-role-arn
                     required-activated-types logging-config deprecated-status
                     provisioning-type schema description
                     type-tests-status-description type-tests-status
                     is-default-version default-version-id type-name type arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-type-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-type-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-version-id))
      (common-lisp:list
       (common-lisp:cons "DefaultVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default-version))
      (common-lisp:list
       (common-lisp:cons "IsDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-tests-status))
      (common-lisp:list
       (common-lisp:cons "TypeTestsStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'type-tests-status-description))
      (common-lisp:list
       (common-lisp:cons "TypeTestsStatusDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema))
      (common-lisp:list
       (common-lisp:cons "Schema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioning-type))
      (common-lisp:list
       (common-lisp:cons "ProvisioningType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deprecated-status))
      (common-lisp:list
       (common-lisp:cons "DeprecatedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-config))
      (common-lisp:list
       (common-lisp:cons "LoggingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'required-activated-types))
      (common-lisp:list
       (common-lisp:cons "RequiredActivatedTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-url))
      (common-lisp:list
       (common-lisp:cons "SourceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'documentation-url))
      (common-lisp:list
       (common-lisp:cons "DocumentationUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "LastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-created))
      (common-lisp:list
       (common-lisp:cons "TimeCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-schema))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publisher-id))
      (common-lisp:list
       (common-lisp:cons "PublisherId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'original-type-name))
      (common-lisp:list
       (common-lisp:cons "OriginalTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'original-type-arn))
      (common-lisp:list
       (common-lisp:cons "OriginalTypeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-version-number))
      (common-lisp:list
       (common-lisp:cons "PublicVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-public-version))
      (common-lisp:list
       (common-lisp:cons "LatestPublicVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-activated))
      (common-lisp:list
       (common-lisp:cons "IsActivated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-update))
      (common-lisp:list
       (common-lisp:cons "AutoUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-type-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-type-registration-input common-lisp:nil
                       ((registration-token :initarg :registration-token :type
                         (common-lisp:or registration-token common-lisp:null)
                         :accessor
                         %describe-type-registration-input-registration-token
                         :initform
                         (common-lisp:error
                          ":registration-token is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-type-registration-input
                    'make-describe-type-registration-input))
 (common-lisp:defun make-describe-type-registration-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key registration-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-type-registration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-type-registration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-type-registration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-token))
      (common-lisp:list
       (common-lisp:cons "RegistrationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-type-registration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-type-registration-output common-lisp:nil
                       ((type-version-arn :initarg :type-version-arn :type
                         (common-lisp:or type-arn common-lisp:null) :accessor
                         %describe-type-registration-output-type-version-arn
                         :initform common-lisp:nil)
                        (type-arn :initarg :type-arn :type
                         (common-lisp:or type-arn common-lisp:null) :accessor
                         %describe-type-registration-output-type-arn :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         %describe-type-registration-output-description
                         :initform common-lisp:nil)
                        (progress-status :initarg :progress-status :type
                         (common-lisp:or registration-status common-lisp:null)
                         :accessor
                         %describe-type-registration-output-progress-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-type-registration-output
                    'make-describe-type-registration-output))
 (common-lisp:defun make-describe-type-registration-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type-version-arn type-arn description
                     progress-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-type-registration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-type-registration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-type-registration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-status))
      (common-lisp:list
       (common-lisp:cons "ProgressStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-arn))
      (common-lisp:list
       (common-lisp:cons "TypeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-version-arn))
      (common-lisp:list
       (common-lisp:cons "TypeVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-type-registration-output))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass detect-stack-drift-input common-lisp:nil
                       ((logical-resource-ids :initarg :logical-resource-ids
                         :type
                         (common-lisp:or logical-resource-ids common-lisp:null)
                         :accessor
                         %detect-stack-drift-input-logical-resource-ids
                         :initform common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name-or-id common-lisp:null)
                         :accessor %detect-stack-drift-input-stack-name
                         :initform
                         (common-lisp:error ":stack-name is required"))))
 (common-lisp:export
  (common-lisp:list 'detect-stack-drift-input 'make-detect-stack-drift-input))
 (common-lisp:defun make-detect-stack-drift-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key logical-resource-ids stack-name)
   (common-lisp:apply #'common-lisp:make-instance 'detect-stack-drift-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-stack-drift-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-stack-drift-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logical-resource-ids))
      (common-lisp:list
       (common-lisp:cons "LogicalResourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-stack-drift-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-stack-drift-output common-lisp:nil
                       ((stack-drift-detection-id :initarg
                         :stack-drift-detection-id :type
                         (common-lisp:or stack-drift-detection-id
                                         common-lisp:null)
                         :accessor
                         %detect-stack-drift-output-stack-drift-detection-id
                         :initform
                         (common-lisp:error
                          ":stack-drift-detection-id is required"))))
 (common-lisp:export
  (common-lisp:list 'detect-stack-drift-output
                    'make-detect-stack-drift-output))
 (common-lisp:defun make-detect-stack-drift-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-drift-detection-id)
   (common-lisp:apply #'common-lisp:make-instance 'detect-stack-drift-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-stack-drift-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-stack-drift-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-drift-detection-id))
      (common-lisp:list
       (common-lisp:cons "StackDriftDetectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-stack-drift-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-stack-resource-drift-input common-lisp:nil
                       ((logical-resource-id :initarg :logical-resource-id
                         :type
                         (common-lisp:or logical-resource-id common-lisp:null)
                         :accessor
                         %detect-stack-resource-drift-input-logical-resource-id
                         :initform
                         (common-lisp:error
                          ":logical-resource-id is required"))
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name-or-id common-lisp:null)
                         :accessor
                         %detect-stack-resource-drift-input-stack-name
                         :initform
                         (common-lisp:error ":stack-name is required"))))
 (common-lisp:export
  (common-lisp:list 'detect-stack-resource-drift-input
                    'make-detect-stack-resource-drift-input))
 (common-lisp:defun make-detect-stack-resource-drift-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key logical-resource-id stack-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'detect-stack-resource-drift-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-stack-resource-drift-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-stack-resource-drift-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "LogicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-stack-resource-drift-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-stack-resource-drift-output common-lisp:nil
                       ((stack-resource-drift :initarg :stack-resource-drift
                         :type
                         (common-lisp:or stack-resource-drift common-lisp:null)
                         :accessor
                         %detect-stack-resource-drift-output-stack-resource-drift
                         :initform
                         (common-lisp:error
                          ":stack-resource-drift is required"))))
 (common-lisp:export
  (common-lisp:list 'detect-stack-resource-drift-output
                    'make-detect-stack-resource-drift-output))
 (common-lisp:defun make-detect-stack-resource-drift-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-resource-drift)
   (common-lisp:apply #'common-lisp:make-instance
                      'detect-stack-resource-drift-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-stack-resource-drift-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-stack-resource-drift-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-resource-drift))
      (common-lisp:list
       (common-lisp:cons "StackResourceDrift"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-stack-resource-drift-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-stack-set-drift-input common-lisp:nil
                       ((call-as :initarg :call-as :type
                         (common-lisp:or call-as common-lisp:null) :accessor
                         %detect-stack-set-drift-input-call-as :initform
                         common-lisp:nil)
                        (operation-id :initarg :operation-id :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %detect-stack-set-drift-input-operation-id
                         :initform common-lisp:nil)
                        (operation-preferences :initarg :operation-preferences
                         :type
                         (common-lisp:or stack-set-operation-preferences
                                         common-lisp:null)
                         :accessor
                         %detect-stack-set-drift-input-operation-preferences
                         :initform common-lisp:nil)
                        (stack-set-name :initarg :stack-set-name :type
                         (common-lisp:or stack-set-name-or-id common-lisp:null)
                         :accessor %detect-stack-set-drift-input-stack-set-name
                         :initform
                         (common-lisp:error ":stack-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'detect-stack-set-drift-input
                    'make-detect-stack-set-drift-input))
 (common-lisp:defun make-detect-stack-set-drift-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key call-as operation-id
                     operation-preferences stack-set-name)
   (common-lisp:apply #'common-lisp:make-instance 'detect-stack-set-drift-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-stack-set-drift-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-stack-set-drift-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-preferences))
      (common-lisp:list
       (common-lisp:cons "OperationPreferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'call-as))
      (common-lisp:list
       (common-lisp:cons "CallAs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-stack-set-drift-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass detect-stack-set-drift-output common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %detect-stack-set-drift-output-operation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'detect-stack-set-drift-output
                    'make-detect-stack-set-drift-output))
 (common-lisp:defun make-detect-stack-set-drift-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'detect-stack-set-drift-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detect-stack-set-drift-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detect-stack-set-drift-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detect-stack-set-drift-output))
   common-lisp:nil))
(common-lisp:deftype difference-type () 'common-lisp:string)
(common-lisp:deftype disable-rollback () 'common-lisp:boolean)
(common-lisp:deftype drifted-stack-instances-count () 'common-lisp:integer)
(common-lisp:deftype enable-termination-protection () 'common-lisp:boolean)
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass estimate-template-cost-input common-lisp:nil
                       ((parameters :initarg :parameters :type
                         (common-lisp:or parameters common-lisp:null) :accessor
                         %estimate-template-cost-input-parameters :initform
                         common-lisp:nil)
                        (template-url :initarg :template-url :type
                         (common-lisp:or template-url common-lisp:null)
                         :accessor %estimate-template-cost-input-template-url
                         :initform common-lisp:nil)
                        (template-body :initarg :template-body :type
                         (common-lisp:or template-body common-lisp:null)
                         :accessor %estimate-template-cost-input-template-body
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'estimate-template-cost-input
                    'make-estimate-template-cost-input))
 (common-lisp:defun make-estimate-template-cost-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameters template-url template-body)
   (common-lisp:apply #'common-lisp:make-instance 'estimate-template-cost-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          estimate-template-cost-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          estimate-template-cost-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "TemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "TemplateURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          estimate-template-cost-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass estimate-template-cost-output common-lisp:nil
                       ((url :initarg :url :type
                         (common-lisp:or url common-lisp:null) :accessor
                         %estimate-template-cost-output-url :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'estimate-template-cost-output
                    'make-estimate-template-cost-output))
 (common-lisp:defun make-estimate-template-cost-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key url)
   (common-lisp:apply #'common-lisp:make-instance
                      'estimate-template-cost-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          estimate-template-cost-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          estimate-template-cost-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          estimate-template-cost-output))
   common-lisp:nil))
(common-lisp:deftype evaluation-type () 'common-lisp:string)
(common-lisp:deftype event-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass execute-change-set-input common-lisp:nil
                       ((disable-rollback :initarg :disable-rollback :type
                         (common-lisp:or disable-rollback common-lisp:null)
                         :accessor %execute-change-set-input-disable-rollback
                         :initform common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %execute-change-set-input-client-request-token
                         :initform common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name-or-id common-lisp:null)
                         :accessor %execute-change-set-input-stack-name
                         :initform common-lisp:nil)
                        (change-set-name :initarg :change-set-name :type
                         (common-lisp:or change-set-name-or-id
                                         common-lisp:null)
                         :accessor %execute-change-set-input-change-set-name
                         :initform
                         (common-lisp:error ":change-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'execute-change-set-input 'make-execute-change-set-input))
 (common-lisp:defun make-execute-change-set-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key disable-rollback client-request-token
                     stack-name change-set-name)
   (common-lisp:apply #'common-lisp:make-instance 'execute-change-set-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-change-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-change-set-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-rollback))
      (common-lisp:list
       (common-lisp:cons "DisableRollback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-change-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass execute-change-set-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'execute-change-set-output
                    'make-execute-change-set-output))
 (common-lisp:defun make-execute-change-set-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'execute-change-set-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execute-change-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execute-change-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execute-change-set-output))
   common-lisp:nil))
(common-lisp:deftype execution-role-name () 'common-lisp:string)
(common-lisp:deftype execution-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass export common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or export-value common-lisp:null)
                         :accessor %export-value :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or export-name common-lisp:null)
                         :accessor %export-name :initform common-lisp:nil)
                        (exporting-stack-id :initarg :exporting-stack-id :type
                         (common-lisp:or stack-id common-lisp:null) :accessor
                         %export-exporting-stack-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'export 'make-export))
 (common-lisp:defun make-export
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name exporting-stack-id)
   (common-lisp:apply #'common-lisp:make-instance 'export
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exporting-stack-id))
      (common-lisp:list
       (common-lisp:cons "ExportingStackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export))
   common-lisp:nil))
(common-lisp:deftype export-name () 'common-lisp:string)
(common-lisp:deftype export-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype exports () '(trivial-types:proper-list export))
 (common-lisp:defun |make-exports|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list export))
   aws-sdk/generator/shape::members))
(common-lisp:deftype failed-stack-instances-count () 'common-lisp:integer)
(common-lisp:deftype failure-tolerance-count () 'common-lisp:integer)
(common-lisp:deftype failure-tolerance-percentage () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass get-stack-policy-input common-lisp:nil
                       ((stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name common-lisp:null) :accessor
                         %get-stack-policy-input-stack-name :initform
                         (common-lisp:error ":stack-name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-stack-policy-input 'make-get-stack-policy-input))
 (common-lisp:defun make-get-stack-policy-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-stack-policy-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-stack-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-stack-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-stack-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-stack-policy-output common-lisp:nil
                       ((stack-policy-body :initarg :stack-policy-body :type
                         (common-lisp:or stack-policy-body common-lisp:null)
                         :accessor %get-stack-policy-output-stack-policy-body
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-stack-policy-output 'make-get-stack-policy-output))
 (common-lisp:defun make-get-stack-policy-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-policy-body)
   (common-lisp:apply #'common-lisp:make-instance 'get-stack-policy-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-stack-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-stack-policy-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-policy-body))
      (common-lisp:list
       (common-lisp:cons "StackPolicyBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-stack-policy-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-template-input common-lisp:nil
                       ((template-stage :initarg :template-stage :type
                         (common-lisp:or template-stage common-lisp:null)
                         :accessor %get-template-input-template-stage :initform
                         common-lisp:nil)
                        (change-set-name :initarg :change-set-name :type
                         (common-lisp:or change-set-name-or-id
                                         common-lisp:null)
                         :accessor %get-template-input-change-set-name
                         :initform common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name common-lisp:null) :accessor
                         %get-template-input-stack-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-template-input 'make-get-template-input))
 (common-lisp:defun make-get-template-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key template-stage change-set-name
                     stack-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-stage))
      (common-lisp:list
       (common-lisp:cons "TemplateStage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-template-output common-lisp:nil
                       ((stages-available :initarg :stages-available :type
                         (common-lisp:or stage-list common-lisp:null) :accessor
                         %get-template-output-stages-available :initform
                         common-lisp:nil)
                        (template-body :initarg :template-body :type
                         (common-lisp:or template-body common-lisp:null)
                         :accessor %get-template-output-template-body :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-template-output 'make-get-template-output))
 (common-lisp:defun make-get-template-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stages-available template-body)
   (common-lisp:apply #'common-lisp:make-instance 'get-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "TemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stages-available))
      (common-lisp:list
       (common-lisp:cons "StagesAvailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-template-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-template-summary-input common-lisp:nil
                       ((call-as :initarg :call-as :type
                         (common-lisp:or call-as common-lisp:null) :accessor
                         %get-template-summary-input-call-as :initform
                         common-lisp:nil)
                        (stack-set-name :initarg :stack-set-name :type
                         (common-lisp:or stack-set-name-or-id common-lisp:null)
                         :accessor %get-template-summary-input-stack-set-name
                         :initform common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name-or-id common-lisp:null)
                         :accessor %get-template-summary-input-stack-name
                         :initform common-lisp:nil)
                        (template-url :initarg :template-url :type
                         (common-lisp:or template-url common-lisp:null)
                         :accessor %get-template-summary-input-template-url
                         :initform common-lisp:nil)
                        (template-body :initarg :template-body :type
                         (common-lisp:or template-body common-lisp:null)
                         :accessor %get-template-summary-input-template-body
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-template-summary-input
                    'make-get-template-summary-input))
 (common-lisp:defun make-get-template-summary-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key call-as stack-set-name stack-name
                     template-url template-body)
   (common-lisp:apply #'common-lisp:make-instance 'get-template-summary-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-template-summary-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-template-summary-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "TemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "TemplateURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'call-as))
      (common-lisp:list
       (common-lisp:cons "CallAs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-template-summary-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-template-summary-output common-lisp:nil
                       ((resource-identifier-summaries :initarg
                         :resource-identifier-summaries :type
                         (common-lisp:or resource-identifier-summaries
                                         common-lisp:null)
                         :accessor
                         %get-template-summary-output-resource-identifier-summaries
                         :initform common-lisp:nil)
                        (declared-transforms :initarg :declared-transforms
                         :type
                         (common-lisp:or transforms-list common-lisp:null)
                         :accessor
                         %get-template-summary-output-declared-transforms
                         :initform common-lisp:nil)
                        (metadata :initarg :metadata :type
                         (common-lisp:or metadata common-lisp:null) :accessor
                         %get-template-summary-output-metadata :initform
                         common-lisp:nil)
                        (version :initarg :version :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %get-template-summary-output-version :initform
                         common-lisp:nil)
                        (resource-types :initarg :resource-types :type
                         (common-lisp:or resource-types common-lisp:null)
                         :accessor %get-template-summary-output-resource-types
                         :initform common-lisp:nil)
                        (capabilities-reason :initarg :capabilities-reason
                         :type
                         (common-lisp:or capabilities-reason common-lisp:null)
                         :accessor
                         %get-template-summary-output-capabilities-reason
                         :initform common-lisp:nil)
                        (capabilities :initarg :capabilities :type
                         (common-lisp:or capabilities common-lisp:null)
                         :accessor %get-template-summary-output-capabilities
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %get-template-summary-output-description
                         :initform common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameter-declarations
                                         common-lisp:null)
                         :accessor %get-template-summary-output-parameters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-template-summary-output
                    'make-get-template-summary-output))
 (common-lisp:defun make-get-template-summary-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-identifier-summaries
                     declared-transforms metadata version resource-types
                     capabilities-reason capabilities description parameters)
   (common-lisp:apply #'common-lisp:make-instance 'get-template-summary-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-template-summary-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-template-summary-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities-reason))
      (common-lisp:list
       (common-lisp:cons "CapabilitiesReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-types))
      (common-lisp:list
       (common-lisp:cons "ResourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'declared-transforms))
      (common-lisp:list
       (common-lisp:cons "DeclaredTransforms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-identifier-summaries))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifierSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-template-summary-output))
   common-lisp:nil))
(common-lisp:deftype handler-error-code () 'common-lisp:string)
(common-lisp:deftype hook-failure-mode () 'common-lisp:string)
(common-lisp:deftype hook-invocation-count () 'common-lisp:integer)
(common-lisp:deftype hook-invocation-point () 'common-lisp:string)
(common-lisp:deftype hook-status () 'common-lisp:string)
(common-lisp:deftype hook-status-reason () 'common-lisp:string)
(common-lisp:deftype hook-target-type () 'common-lisp:string)
(common-lisp:deftype hook-target-type-name () 'common-lisp:string)
(common-lisp:deftype hook-type () 'common-lisp:string)
(common-lisp:deftype hook-type-configuration-version-id () 'common-lisp:string)
(common-lisp:deftype hook-type-name () 'common-lisp:string)
(common-lisp:deftype hook-type-version-id () 'common-lisp:string)
(common-lisp:deftype identity-provider () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass import-stacks-to-stack-set-input common-lisp:nil
                       ((call-as :initarg :call-as :type
                         (common-lisp:or call-as common-lisp:null) :accessor
                         %import-stacks-to-stack-set-input-call-as :initform
                         common-lisp:nil)
                        (operation-id :initarg :operation-id :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %import-stacks-to-stack-set-input-operation-id
                         :initform common-lisp:nil)
                        (operation-preferences :initarg :operation-preferences
                         :type
                         (common-lisp:or stack-set-operation-preferences
                                         common-lisp:null)
                         :accessor
                         %import-stacks-to-stack-set-input-operation-preferences
                         :initform common-lisp:nil)
                        (organizational-unit-ids :initarg
                         :organizational-unit-ids :type
                         (common-lisp:or organizational-unit-id-list
                                         common-lisp:null)
                         :accessor
                         %import-stacks-to-stack-set-input-organizational-unit-ids
                         :initform common-lisp:nil)
                        (stack-ids-url :initarg :stack-ids-url :type
                         (common-lisp:or stack-ids-url common-lisp:null)
                         :accessor
                         %import-stacks-to-stack-set-input-stack-ids-url
                         :initform common-lisp:nil)
                        (stack-ids :initarg :stack-ids :type
                         (common-lisp:or stack-id-list common-lisp:null)
                         :accessor %import-stacks-to-stack-set-input-stack-ids
                         :initform common-lisp:nil)
                        (stack-set-name :initarg :stack-set-name :type
                         (common-lisp:or stack-set-name-or-id common-lisp:null)
                         :accessor
                         %import-stacks-to-stack-set-input-stack-set-name
                         :initform
                         (common-lisp:error ":stack-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'import-stacks-to-stack-set-input
                    'make-import-stacks-to-stack-set-input))
 (common-lisp:defun make-import-stacks-to-stack-set-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key call-as operation-id
                     operation-preferences organizational-unit-ids
                     stack-ids-url stack-ids stack-set-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-stacks-to-stack-set-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-stacks-to-stack-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-stacks-to-stack-set-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-ids))
      (common-lisp:list
       (common-lisp:cons "StackIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-ids-url))
      (common-lisp:list
       (common-lisp:cons "StackIdsUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-ids))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnitIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-preferences))
      (common-lisp:list
       (common-lisp:cons "OperationPreferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'call-as))
      (common-lisp:list
       (common-lisp:cons "CallAs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-stacks-to-stack-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-stacks-to-stack-set-output common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %import-stacks-to-stack-set-output-operation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'import-stacks-to-stack-set-output
                    'make-import-stacks-to-stack-set-output))
 (common-lisp:defun make-import-stacks-to-stack-set-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-stacks-to-stack-set-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-stacks-to-stack-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-stacks-to-stack-set-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-stacks-to-stack-set-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype imports () '(trivial-types:proper-list stack-name))
 (common-lisp:defun |make-imports|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype in-progress-stack-instances-count () 'common-lisp:integer)
(common-lisp:deftype in-sync-stack-instances-count () 'common-lisp:integer)
(common-lisp:deftype include-nested-stacks () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition insufficient-capabilities-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'insufficient-capabilities-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-change-set-status-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-change-set-status-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-operation-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-operation-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-state-transition-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-state-transition-exception)))
(common-lisp:deftype is-activated () 'common-lisp:boolean)
(common-lisp:deftype is-default-configuration () 'common-lisp:boolean)
(common-lisp:deftype is-default-version () 'common-lisp:boolean)
(common-lisp:deftype key () 'common-lisp:string)
(common-lisp:deftype last-updated-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'limit-exceeded-exception)))
(common-lisp:deftype limit-name () 'common-lisp:string)
(common-lisp:deftype limit-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-change-sets-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-change-sets-input-next-token :initform
                         common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name-or-id common-lisp:null)
                         :accessor %list-change-sets-input-stack-name :initform
                         (common-lisp:error ":stack-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-change-sets-input 'make-list-change-sets-input))
 (common-lisp:defun make-list-change-sets-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token stack-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-change-sets-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-change-sets-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-change-sets-output-next-token :initform
                         common-lisp:nil)
                        (summaries :initarg :summaries :type
                         (common-lisp:or change-set-summaries common-lisp:null)
                         :accessor %list-change-sets-output-summaries :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-change-sets-output 'make-list-change-sets-output))
 (common-lisp:defun make-list-change-sets-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token summaries)
   (common-lisp:apply #'common-lisp:make-instance 'list-change-sets-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summaries))
      (common-lisp:list
       (common-lisp:cons "Summaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-exports-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-exports-input-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-exports-input 'make-list-exports-input))
 (common-lisp:defun make-list-exports-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-exports-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-exports-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-exports-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-exports-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-exports-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-exports-output-next-token :initform
                         common-lisp:nil)
                        (exports :initarg :exports :type
                         (common-lisp:or exports common-lisp:null) :accessor
                         %list-exports-output-exports :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-exports-output 'make-list-exports-output))
 (common-lisp:defun make-list-exports-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token exports)
   (common-lisp:apply #'common-lisp:make-instance 'list-exports-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-exports-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-exports-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exports))
      (common-lisp:list
       (common-lisp:cons "Exports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-exports-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-imports-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-imports-input-next-token :initform
                         common-lisp:nil)
                        (export-name :initarg :export-name :type
                         (common-lisp:or export-name common-lisp:null)
                         :accessor %list-imports-input-export-name :initform
                         (common-lisp:error ":export-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-imports-input 'make-list-imports-input))
 (common-lisp:defun make-list-imports-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token export-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-imports-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-imports-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-imports-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-name))
      (common-lisp:list
       (common-lisp:cons "ExportName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-imports-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-imports-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-imports-output-next-token :initform
                         common-lisp:nil)
                        (imports :initarg :imports :type
                         (common-lisp:or imports common-lisp:null) :accessor
                         %list-imports-output-imports :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-imports-output 'make-list-imports-output))
 (common-lisp:defun make-list-imports-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token imports)
   (common-lisp:apply #'common-lisp:make-instance 'list-imports-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-imports-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-imports-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'imports))
      (common-lisp:list
       (common-lisp:cons "Imports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-imports-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-stack-instances-input common-lisp:nil
                       ((call-as :initarg :call-as :type
                         (common-lisp:or call-as common-lisp:null) :accessor
                         %list-stack-instances-input-call-as :initform
                         common-lisp:nil)
                        (stack-instance-region :initarg :stack-instance-region
                         :type (common-lisp:or region common-lisp:null)
                         :accessor
                         %list-stack-instances-input-stack-instance-region
                         :initform common-lisp:nil)
                        (stack-instance-account :initarg
                         :stack-instance-account :type
                         (common-lisp:or account common-lisp:null) :accessor
                         %list-stack-instances-input-stack-instance-account
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or stack-instance-filters
                                         common-lisp:null)
                         :accessor %list-stack-instances-input-filters
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-stack-instances-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-stack-instances-input-next-token :initform
                         common-lisp:nil)
                        (stack-set-name :initarg :stack-set-name :type
                         (common-lisp:or stack-set-name common-lisp:null)
                         :accessor %list-stack-instances-input-stack-set-name
                         :initform
                         (common-lisp:error ":stack-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-stack-instances-input
                    'make-list-stack-instances-input))
 (common-lisp:defun make-list-stack-instances-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key call-as stack-instance-region
                     stack-instance-account filters max-results next-token
                     stack-set-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-stack-instances-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-instances-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-instance-account))
      (common-lisp:list
       (common-lisp:cons "StackInstanceAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-instance-region))
      (common-lisp:list
       (common-lisp:cons "StackInstanceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'call-as))
      (common-lisp:list
       (common-lisp:cons "CallAs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-instances-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-stack-instances-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-stack-instances-output-next-token :initform
                         common-lisp:nil)
                        (summaries :initarg :summaries :type
                         (common-lisp:or stack-instance-summaries
                                         common-lisp:null)
                         :accessor %list-stack-instances-output-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-stack-instances-output
                    'make-list-stack-instances-output))
 (common-lisp:defun make-list-stack-instances-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token summaries)
   (common-lisp:apply #'common-lisp:make-instance 'list-stack-instances-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-instances-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-instances-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summaries))
      (common-lisp:list
       (common-lisp:cons "Summaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-instances-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-stack-resources-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-stack-resources-input-next-token :initform
                         common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name common-lisp:null) :accessor
                         %list-stack-resources-input-stack-name :initform
                         (common-lisp:error ":stack-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-stack-resources-input
                    'make-list-stack-resources-input))
 (common-lisp:defun make-list-stack-resources-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token stack-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-stack-resources-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-resources-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-resources-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-resources-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-stack-resources-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-stack-resources-output-next-token :initform
                         common-lisp:nil)
                        (stack-resource-summaries :initarg
                         :stack-resource-summaries :type
                         (common-lisp:or stack-resource-summaries
                                         common-lisp:null)
                         :accessor
                         %list-stack-resources-output-stack-resource-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-stack-resources-output
                    'make-list-stack-resources-output))
 (common-lisp:defun make-list-stack-resources-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token stack-resource-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'list-stack-resources-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-resources-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-resources-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-resource-summaries))
      (common-lisp:list
       (common-lisp:cons "StackResourceSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-resources-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-stack-set-operation-results-input common-lisp:nil
                       ((filters :initarg :filters :type
                         (common-lisp:or operation-result-filters
                                         common-lisp:null)
                         :accessor
                         %list-stack-set-operation-results-input-filters
                         :initform common-lisp:nil)
                        (call-as :initarg :call-as :type
                         (common-lisp:or call-as common-lisp:null) :accessor
                         %list-stack-set-operation-results-input-call-as
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-stack-set-operation-results-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-stack-set-operation-results-input-next-token
                         :initform common-lisp:nil)
                        (operation-id :initarg :operation-id :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %list-stack-set-operation-results-input-operation-id
                         :initform
                         (common-lisp:error ":operation-id is required"))
                        (stack-set-name :initarg :stack-set-name :type
                         (common-lisp:or stack-set-name common-lisp:null)
                         :accessor
                         %list-stack-set-operation-results-input-stack-set-name
                         :initform
                         (common-lisp:error ":stack-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-stack-set-operation-results-input
                    'make-list-stack-set-operation-results-input))
 (common-lisp:defun make-list-stack-set-operation-results-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key filters call-as max-results next-token
                     operation-id stack-set-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-stack-set-operation-results-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-set-operation-results-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-set-operation-results-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'call-as))
      (common-lisp:list
       (common-lisp:cons "CallAs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-set-operation-results-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-stack-set-operation-results-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-stack-set-operation-results-output-next-token
                         :initform common-lisp:nil)
                        (summaries :initarg :summaries :type
                         (common-lisp:or stack-set-operation-result-summaries
                                         common-lisp:null)
                         :accessor
                         %list-stack-set-operation-results-output-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-stack-set-operation-results-output
                    'make-list-stack-set-operation-results-output))
 (common-lisp:defun make-list-stack-set-operation-results-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token summaries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-stack-set-operation-results-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-set-operation-results-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-set-operation-results-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summaries))
      (common-lisp:list
       (common-lisp:cons "Summaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-set-operation-results-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-stack-set-operations-input common-lisp:nil
                       ((call-as :initarg :call-as :type
                         (common-lisp:or call-as common-lisp:null) :accessor
                         %list-stack-set-operations-input-call-as :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-stack-set-operations-input-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-stack-set-operations-input-next-token :initform
                         common-lisp:nil)
                        (stack-set-name :initarg :stack-set-name :type
                         (common-lisp:or stack-set-name common-lisp:null)
                         :accessor
                         %list-stack-set-operations-input-stack-set-name
                         :initform
                         (common-lisp:error ":stack-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-stack-set-operations-input
                    'make-list-stack-set-operations-input))
 (common-lisp:defun make-list-stack-set-operations-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key call-as max-results next-token
                     stack-set-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-stack-set-operations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-set-operations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-set-operations-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'call-as))
      (common-lisp:list
       (common-lisp:cons "CallAs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-set-operations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-stack-set-operations-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-stack-set-operations-output-next-token :initform
                         common-lisp:nil)
                        (summaries :initarg :summaries :type
                         (common-lisp:or stack-set-operation-summaries
                                         common-lisp:null)
                         :accessor %list-stack-set-operations-output-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-stack-set-operations-output
                    'make-list-stack-set-operations-output))
 (common-lisp:defun make-list-stack-set-operations-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token summaries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-stack-set-operations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-set-operations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-set-operations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summaries))
      (common-lisp:list
       (common-lisp:cons "Summaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-set-operations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-stack-sets-input common-lisp:nil
                       ((call-as :initarg :call-as :type
                         (common-lisp:or call-as common-lisp:null) :accessor
                         %list-stack-sets-input-call-as :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or stack-set-status common-lisp:null)
                         :accessor %list-stack-sets-input-status :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-stack-sets-input-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-stack-sets-input-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-stack-sets-input 'make-list-stack-sets-input))
 (common-lisp:defun make-list-stack-sets-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key call-as status max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-stack-sets-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-sets-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-sets-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'call-as))
      (common-lisp:list
       (common-lisp:cons "CallAs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-sets-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-stack-sets-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-stack-sets-output-next-token :initform
                         common-lisp:nil)
                        (summaries :initarg :summaries :type
                         (common-lisp:or stack-set-summaries common-lisp:null)
                         :accessor %list-stack-sets-output-summaries :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-stack-sets-output 'make-list-stack-sets-output))
 (common-lisp:defun make-list-stack-sets-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token summaries)
   (common-lisp:apply #'common-lisp:make-instance 'list-stack-sets-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-sets-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-sets-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summaries))
      (common-lisp:list
       (common-lisp:cons "Summaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stack-sets-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-stacks-input common-lisp:nil
                       ((stack-status-filter :initarg :stack-status-filter
                         :type
                         (common-lisp:or stack-status-filter common-lisp:null)
                         :accessor %list-stacks-input-stack-status-filter
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-stacks-input-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-stacks-input 'make-list-stacks-input))
 (common-lisp:defun make-list-stacks-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-status-filter next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-stacks-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-stacks-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-stacks-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-status-filter))
      (common-lisp:list
       (common-lisp:cons "StackStatusFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-stacks-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-stacks-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-stacks-output-next-token :initform
                         common-lisp:nil)
                        (stack-summaries :initarg :stack-summaries :type
                         (common-lisp:or stack-summaries common-lisp:null)
                         :accessor %list-stacks-output-stack-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-stacks-output 'make-list-stacks-output))
 (common-lisp:defun make-list-stacks-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token stack-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'list-stacks-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-stacks-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-stacks-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-summaries))
      (common-lisp:list
       (common-lisp:cons "StackSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-stacks-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-type-registrations-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-type-registrations-input-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-type-registrations-input-max-results
                         :initform common-lisp:nil)
                        (registration-status-filter :initarg
                         :registration-status-filter :type
                         (common-lisp:or registration-status common-lisp:null)
                         :accessor
                         %list-type-registrations-input-registration-status-filter
                         :initform common-lisp:nil)
                        (type-arn :initarg :type-arn :type
                         (common-lisp:or type-arn common-lisp:null) :accessor
                         %list-type-registrations-input-type-arn :initform
                         common-lisp:nil)
                        (type-name :initarg :type-name :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         %list-type-registrations-input-type-name :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or registry-type common-lisp:null)
                         :accessor %list-type-registrations-input-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-type-registrations-input
                    'make-list-type-registrations-input))
 (common-lisp:defun make-list-type-registrations-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     registration-status-filter type-arn type-name type)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-type-registrations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-type-registrations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-type-registrations-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-arn))
      (common-lisp:list
       (common-lisp:cons "TypeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-status-filter))
      (common-lisp:list
       (common-lisp:cons "RegistrationStatusFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-type-registrations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-type-registrations-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-type-registrations-output-next-token :initform
                         common-lisp:nil)
                        (registration-token-list :initarg
                         :registration-token-list :type
                         (common-lisp:or registration-token-list
                                         common-lisp:null)
                         :accessor
                         %list-type-registrations-output-registration-token-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-type-registrations-output
                    'make-list-type-registrations-output))
 (common-lisp:defun make-list-type-registrations-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token registration-token-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-type-registrations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-type-registrations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-type-registrations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registration-token-list))
      (common-lisp:list
       (common-lisp:cons "RegistrationTokenList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-type-registrations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-type-versions-input common-lisp:nil
                       ((publisher-id :initarg :publisher-id :type
                         (common-lisp:or publisher-id common-lisp:null)
                         :accessor %list-type-versions-input-publisher-id
                         :initform common-lisp:nil)
                        (deprecated-status :initarg :deprecated-status :type
                         (common-lisp:or deprecated-status common-lisp:null)
                         :accessor %list-type-versions-input-deprecated-status
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-type-versions-input-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-type-versions-input-max-results
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or type-arn common-lisp:null) :accessor
                         %list-type-versions-input-arn :initform
                         common-lisp:nil)
                        (type-name :initarg :type-name :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         %list-type-versions-input-type-name :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or registry-type common-lisp:null)
                         :accessor %list-type-versions-input-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-type-versions-input 'make-list-type-versions-input))
 (common-lisp:defun make-list-type-versions-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key publisher-id deprecated-status next-token
                     max-results arn type-name type)
   (common-lisp:apply #'common-lisp:make-instance 'list-type-versions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-type-versions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-type-versions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deprecated-status))
      (common-lisp:list
       (common-lisp:cons "DeprecatedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publisher-id))
      (common-lisp:list
       (common-lisp:cons "PublisherId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-type-versions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-type-versions-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-type-versions-output-next-token :initform
                         common-lisp:nil)
                        (type-version-summaries :initarg
                         :type-version-summaries :type
                         (common-lisp:or type-version-summaries
                                         common-lisp:null)
                         :accessor
                         %list-type-versions-output-type-version-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-type-versions-output
                    'make-list-type-versions-output))
 (common-lisp:defun make-list-type-versions-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token type-version-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'list-type-versions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-type-versions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-type-versions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'type-version-summaries))
      (common-lisp:list
       (common-lisp:cons "TypeVersionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-type-versions-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-types-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-types-input-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-types-input-max-results :initform
                         common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or type-filters common-lisp:null)
                         :accessor %list-types-input-filters :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or registry-type common-lisp:null)
                         :accessor %list-types-input-type :initform
                         common-lisp:nil)
                        (deprecated-status :initarg :deprecated-status :type
                         (common-lisp:or deprecated-status common-lisp:null)
                         :accessor %list-types-input-deprecated-status
                         :initform common-lisp:nil)
                        (provisioning-type :initarg :provisioning-type :type
                         (common-lisp:or provisioning-type common-lisp:null)
                         :accessor %list-types-input-provisioning-type
                         :initform common-lisp:nil)
                        (visibility :initarg :visibility :type
                         (common-lisp:or visibility common-lisp:null) :accessor
                         %list-types-input-visibility :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-types-input 'make-list-types-input))
 (common-lisp:defun make-list-types-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters type
                     deprecated-status provisioning-type visibility)
   (common-lisp:apply #'common-lisp:make-instance 'list-types-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-types-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-types-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provisioning-type))
      (common-lisp:list
       (common-lisp:cons "ProvisioningType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deprecated-status))
      (common-lisp:list
       (common-lisp:cons "DeprecatedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-types-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-types-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-types-output-next-token :initform
                         common-lisp:nil)
                        (type-summaries :initarg :type-summaries :type
                         (common-lisp:or type-summaries common-lisp:null)
                         :accessor %list-types-output-type-summaries :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-types-output 'make-list-types-output))
 (common-lisp:defun make-list-types-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token type-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'list-types-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-types-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-types-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-summaries))
      (common-lisp:list
       (common-lisp:cons "TypeSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-types-output))
   common-lisp:nil))
(common-lisp:deftype log-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass logging-config common-lisp:nil
                       ((log-group-name :initarg :log-group-name :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor %logging-config-log-group-name :initform
                         (common-lisp:error ":log-group-name is required"))
                        (log-role-arn :initarg :log-role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %logging-config-log-role-arn :initform
                         (common-lisp:error ":log-role-arn is required"))))
 (common-lisp:export (common-lisp:list 'logging-config 'make-logging-config))
 (common-lisp:defun make-logging-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-group-name log-role-arn)
   (common-lisp:apply #'common-lisp:make-instance 'logging-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-role-arn))
      (common-lisp:list
       (common-lisp:cons "LogRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "LogGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging-config))
   common-lisp:nil))
(common-lisp:deftype logical-id-hierarchy () 'common-lisp:string)
(common-lisp:deftype logical-resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype logical-resource-ids ()
   '(trivial-types:proper-list logical-resource-id))
 (common-lisp:defun |make-logical-resource-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list logical-resource-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype major-version () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass managed-execution common-lisp:nil
                       ((active :initarg :active :type
                         (common-lisp:or managed-execution-nullable
                                         common-lisp:null)
                         :accessor %managed-execution-active :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'managed-execution 'make-managed-execution))
 (common-lisp:defun make-managed-execution
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key active)
   (common-lisp:apply #'common-lisp:make-instance 'managed-execution
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input managed-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input managed-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active))
      (common-lisp:list
       (common-lisp:cons "Active"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input managed-execution))
   common-lisp:nil))
(common-lisp:deftype managed-execution-nullable () 'common-lisp:boolean)
(common-lisp:deftype max-concurrent-count () 'common-lisp:integer)
(common-lisp:deftype max-concurrent-percentage () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype metadata () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass module-info common-lisp:nil
                       ((logical-id-hierarchy :initarg :logical-id-hierarchy
                         :type
                         (common-lisp:or logical-id-hierarchy common-lisp:null)
                         :accessor %module-info-logical-id-hierarchy :initform
                         common-lisp:nil)
                        (type-hierarchy :initarg :type-hierarchy :type
                         (common-lisp:or type-hierarchy common-lisp:null)
                         :accessor %module-info-type-hierarchy :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'module-info 'make-module-info))
 (common-lisp:defun make-module-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key logical-id-hierarchy type-hierarchy)
   (common-lisp:apply #'common-lisp:make-instance 'module-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input module-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input module-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-hierarchy))
      (common-lisp:list
       (common-lisp:cons "TypeHierarchy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logical-id-hierarchy))
      (common-lisp:list
       (common-lisp:cons "LogicalIdHierarchy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input module-info))
   common-lisp:nil))
(common-lisp:deftype monitoring-time-in-minutes () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition name-already-exists-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'name-already-exists-exception)))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype no-echo () 'common-lisp:boolean)
(common-lisp:deftype notification-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype notification-arns ()
   '(trivial-types:proper-list notification-arn))
 (common-lisp:defun |make-notification-arns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list notification-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype on-failure () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition operation-id-already-exists-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'operation-id-already-exists-exception)))
(common-lisp:progn
 (common-lisp:define-condition operation-in-progress-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'operation-in-progress-exception)))
(common-lisp:progn
 (common-lisp:define-condition operation-not-found-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'operation-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass operation-result-filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or operation-result-filter-values
                                         common-lisp:null)
                         :accessor %operation-result-filter-values :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or operation-result-filter-name
                                         common-lisp:null)
                         :accessor %operation-result-filter-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'operation-result-filter 'make-operation-result-filter))
 (common-lisp:defun make-operation-result-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'operation-result-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          operation-result-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          operation-result-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          operation-result-filter))
   common-lisp:nil))
(common-lisp:deftype operation-result-filter-name () 'common-lisp:string)
(common-lisp:deftype operation-result-filter-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype operation-result-filters ()
   '(trivial-types:proper-list operation-result-filter))
 (common-lisp:defun |make-operation-result-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list operation-result-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype operation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition operation-status-check-failed-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'operation-status-check-failed-exception)))
(common-lisp:deftype optional-secure-url () 'common-lisp:string)
(common-lisp:deftype organizational-unit-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype organizational-unit-id-list ()
   '(trivial-types:proper-list organizational-unit-id))
 (common-lisp:defun |make-organizational-unit-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list organizational-unit-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass output common-lisp:nil
                       ((export-name :initarg :export-name :type
                         (common-lisp:or export-name common-lisp:null)
                         :accessor %output-export-name :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %output-description :initform
                         common-lisp:nil)
                        (output-value :initarg :output-value :type
                         (common-lisp:or output-value common-lisp:null)
                         :accessor %output-output-value :initform
                         common-lisp:nil)
                        (output-key :initarg :output-key :type
                         (common-lisp:or output-key common-lisp:null) :accessor
                         %output-output-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'output 'make-output))
 (common-lisp:defun make-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key export-name description output-value
                     output-key)
   (common-lisp:apply #'common-lisp:make-instance 'output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-key))
      (common-lisp:list
       (common-lisp:cons "OutputKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-value))
      (common-lisp:list
       (common-lisp:cons "OutputValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-name))
      (common-lisp:list
       (common-lisp:cons "ExportName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output))
   common-lisp:nil))
(common-lisp:deftype output-key () 'common-lisp:string)
(common-lisp:deftype output-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype outputs () '(trivial-types:proper-list output))
 (common-lisp:defun |make-outputs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass parameter common-lisp:nil
                       ((resolved-value :initarg :resolved-value :type
                         (common-lisp:or parameter-value common-lisp:null)
                         :accessor %parameter-resolved-value :initform
                         common-lisp:nil)
                        (use-previous-value :initarg :use-previous-value :type
                         (common-lisp:or use-previous-value common-lisp:null)
                         :accessor %parameter-use-previous-value :initform
                         common-lisp:nil)
                        (parameter-value :initarg :parameter-value :type
                         (common-lisp:or parameter-value common-lisp:null)
                         :accessor %parameter-parameter-value :initform
                         common-lisp:nil)
                        (parameter-key :initarg :parameter-key :type
                         (common-lisp:or parameter-key common-lisp:null)
                         :accessor %parameter-parameter-key :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'parameter 'make-parameter))
 (common-lisp:defun make-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resolved-value use-previous-value
                     parameter-value parameter-key)
   (common-lisp:apply #'common-lisp:make-instance 'parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-key))
      (common-lisp:list
       (common-lisp:cons "ParameterKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-value))
      (common-lisp:list
       (common-lisp:cons "ParameterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-previous-value))
      (common-lisp:list
       (common-lisp:cons "UsePreviousValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolved-value))
      (common-lisp:list
       (common-lisp:cons "ResolvedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass parameter-constraints common-lisp:nil
                       ((allowed-values :initarg :allowed-values :type
                         (common-lisp:or allowed-values common-lisp:null)
                         :accessor %parameter-constraints-allowed-values
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'parameter-constraints 'make-parameter-constraints))
 (common-lisp:defun make-parameter-constraints
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key allowed-values)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-constraints
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parameter-constraints))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parameter-constraints))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "AllowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parameter-constraints))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass parameter-declaration common-lisp:nil
                       ((parameter-constraints :initarg :parameter-constraints
                         :type
                         (common-lisp:or parameter-constraints
                                         common-lisp:null)
                         :accessor %parameter-declaration-parameter-constraints
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %parameter-declaration-description :initform
                         common-lisp:nil)
                        (no-echo :initarg :no-echo :type
                         (common-lisp:or no-echo common-lisp:null) :accessor
                         %parameter-declaration-no-echo :initform
                         common-lisp:nil)
                        (parameter-type :initarg :parameter-type :type
                         (common-lisp:or parameter-type common-lisp:null)
                         :accessor %parameter-declaration-parameter-type
                         :initform common-lisp:nil)
                        (default-value :initarg :default-value :type
                         (common-lisp:or parameter-value common-lisp:null)
                         :accessor %parameter-declaration-default-value
                         :initform common-lisp:nil)
                        (parameter-key :initarg :parameter-key :type
                         (common-lisp:or parameter-key common-lisp:null)
                         :accessor %parameter-declaration-parameter-key
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'parameter-declaration 'make-parameter-declaration))
 (common-lisp:defun make-parameter-declaration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key parameter-constraints description no-echo
                     parameter-type default-value parameter-key)
   (common-lisp:apply #'common-lisp:make-instance 'parameter-declaration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parameter-declaration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parameter-declaration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-key))
      (common-lisp:list
       (common-lisp:cons "ParameterKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-type))
      (common-lisp:list
       (common-lisp:cons "ParameterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-echo))
      (common-lisp:list
       (common-lisp:cons "NoEcho"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-constraints))
      (common-lisp:list
       (common-lisp:cons "ParameterConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parameter-declaration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parameter-declarations ()
   '(trivial-types:proper-list parameter-declaration))
 (common-lisp:defun |make-parameter-declarations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-declaration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype parameter-key () 'common-lisp:string)
(common-lisp:deftype parameter-type () 'common-lisp:string)
(common-lisp:deftype parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameters () '(trivial-types:proper-list parameter))
 (common-lisp:defun |make-parameters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype permission-models () 'common-lisp:string)
(common-lisp:deftype physical-resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype physical-resource-id-context ()
   '(trivial-types:proper-list physical-resource-id-context-key-value-pair))
 (common-lisp:defun |make-physical-resource-id-context|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            physical-resource-id-context-key-value-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass physical-resource-id-context-key-value-pair
                       common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or value common-lisp:null) :accessor
                         %physical-resource-id-context-key-value-pair-value
                         :initform (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or key common-lisp:null) :accessor
                         %physical-resource-id-context-key-value-pair-key
                         :initform (common-lisp:error ":key is required"))))
 (common-lisp:export
  (common-lisp:list 'physical-resource-id-context-key-value-pair
                    'make-physical-resource-id-context-key-value-pair))
 (common-lisp:defun make-physical-resource-id-context-key-value-pair
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance
                      'physical-resource-id-context-key-value-pair
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          physical-resource-id-context-key-value-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          physical-resource-id-context-key-value-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          physical-resource-id-context-key-value-pair))
   common-lisp:nil))
(common-lisp:deftype private-type-arn () 'common-lisp:string)
(common-lisp:deftype properties () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass property-difference common-lisp:nil
                       ((difference-type :initarg :difference-type :type
                         (common-lisp:or difference-type common-lisp:null)
                         :accessor %property-difference-difference-type
                         :initform
                         (common-lisp:error ":difference-type is required"))
                        (actual-value :initarg :actual-value :type
                         (common-lisp:or property-value common-lisp:null)
                         :accessor %property-difference-actual-value :initform
                         (common-lisp:error ":actual-value is required"))
                        (expected-value :initarg :expected-value :type
                         (common-lisp:or property-value common-lisp:null)
                         :accessor %property-difference-expected-value
                         :initform
                         (common-lisp:error ":expected-value is required"))
                        (property-path :initarg :property-path :type
                         (common-lisp:or property-path common-lisp:null)
                         :accessor %property-difference-property-path :initform
                         (common-lisp:error ":property-path is required"))))
 (common-lisp:export
  (common-lisp:list 'property-difference 'make-property-difference))
 (common-lisp:defun make-property-difference
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key difference-type actual-value
                     expected-value property-path)
   (common-lisp:apply #'common-lisp:make-instance 'property-difference
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input property-difference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input property-difference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-path))
      (common-lisp:list
       (common-lisp:cons "PropertyPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected-value))
      (common-lisp:list
       (common-lisp:cons "ExpectedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actual-value))
      (common-lisp:list
       (common-lisp:cons "ActualValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'difference-type))
      (common-lisp:list
       (common-lisp:cons "DifferenceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input property-difference))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype property-differences ()
   '(trivial-types:proper-list property-difference))
 (common-lisp:defun |make-property-differences|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list property-difference))
   aws-sdk/generator/shape::members))
(common-lisp:deftype property-name () 'common-lisp:string)
(common-lisp:deftype property-path () 'common-lisp:string)
(common-lisp:deftype property-value () 'common-lisp:string)
(common-lisp:deftype provisioning-type () 'common-lisp:string)
(common-lisp:deftype public-version-number () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass publish-type-input common-lisp:nil
                       ((public-version-number :initarg :public-version-number
                         :type
                         (common-lisp:or public-version-number
                                         common-lisp:null)
                         :accessor %publish-type-input-public-version-number
                         :initform common-lisp:nil)
                        (type-name :initarg :type-name :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         %publish-type-input-type-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or private-type-arn common-lisp:null)
                         :accessor %publish-type-input-arn :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or third-party-type common-lisp:null)
                         :accessor %publish-type-input-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'publish-type-input 'make-publish-type-input))
 (common-lisp:defun make-publish-type-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key public-version-number type-name arn type)
   (common-lisp:apply #'common-lisp:make-instance 'publish-type-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input publish-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input publish-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-version-number))
      (common-lisp:list
       (common-lisp:cons "PublicVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input publish-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass publish-type-output common-lisp:nil
                       ((public-type-arn :initarg :public-type-arn :type
                         (common-lisp:or type-arn common-lisp:null) :accessor
                         %publish-type-output-public-type-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'publish-type-output 'make-publish-type-output))
 (common-lisp:defun make-publish-type-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key public-type-arn)
   (common-lisp:apply #'common-lisp:make-instance 'publish-type-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input publish-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input publish-type-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-type-arn))
      (common-lisp:list
       (common-lisp:cons "PublicTypeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input publish-type-output))
   common-lisp:nil))
(common-lisp:deftype publisher-id () 'common-lisp:string)
(common-lisp:deftype publisher-name () 'common-lisp:string)
(common-lisp:deftype publisher-profile () 'common-lisp:string)
(common-lisp:deftype publisher-status () 'common-lisp:string)
(common-lisp:deftype reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass record-handler-progress-input common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %record-handler-progress-input-client-request-token
                         :initform common-lisp:nil)
                        (resource-model :initarg :resource-model :type
                         (common-lisp:or resource-model common-lisp:null)
                         :accessor
                         %record-handler-progress-input-resource-model
                         :initform common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or handler-error-code common-lisp:null)
                         :accessor %record-handler-progress-input-error-code
                         :initform common-lisp:nil)
                        (status-message :initarg :status-message :type
                         (common-lisp:or status-message common-lisp:null)
                         :accessor
                         %record-handler-progress-input-status-message
                         :initform common-lisp:nil)
                        (current-operation-status :initarg
                         :current-operation-status :type
                         (common-lisp:or operation-status common-lisp:null)
                         :accessor
                         %record-handler-progress-input-current-operation-status
                         :initform common-lisp:nil)
                        (operation-status :initarg :operation-status :type
                         (common-lisp:or operation-status common-lisp:null)
                         :accessor
                         %record-handler-progress-input-operation-status
                         :initform
                         (common-lisp:error ":operation-status is required"))
                        (bearer-token :initarg :bearer-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %record-handler-progress-input-bearer-token
                         :initform
                         (common-lisp:error ":bearer-token is required"))))
 (common-lisp:export
  (common-lisp:list 'record-handler-progress-input
                    'make-record-handler-progress-input))
 (common-lisp:defun make-record-handler-progress-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token resource-model
                     error-code status-message current-operation-status
                     operation-status bearer-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'record-handler-progress-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          record-handler-progress-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          record-handler-progress-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bearer-token))
      (common-lisp:list
       (common-lisp:cons "BearerToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-status))
      (common-lisp:list
       (common-lisp:cons "OperationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-operation-status))
      (common-lisp:list
       (common-lisp:cons "CurrentOperationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-model))
      (common-lisp:list
       (common-lisp:cons "ResourceModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          record-handler-progress-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass record-handler-progress-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'record-handler-progress-output
                    'make-record-handler-progress-output))
 (common-lisp:defun make-record-handler-progress-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'record-handler-progress-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          record-handler-progress-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          record-handler-progress-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          record-handler-progress-output))
   common-lisp:nil))
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:deftype region-concurrency-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype region-list () '(trivial-types:proper-list region))
 (common-lisp:defun |make-region-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list region))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass register-publisher-input common-lisp:nil
                       ((connection-arn :initarg :connection-arn :type
                         (common-lisp:or connection-arn common-lisp:null)
                         :accessor %register-publisher-input-connection-arn
                         :initform common-lisp:nil)
                        (accept-terms-and-conditions :initarg
                         :accept-terms-and-conditions :type
                         (common-lisp:or accept-terms-and-conditions
                                         common-lisp:null)
                         :accessor
                         %register-publisher-input-accept-terms-and-conditions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'register-publisher-input 'make-register-publisher-input))
 (common-lisp:defun make-register-publisher-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-arn
                     accept-terms-and-conditions)
   (common-lisp:apply #'common-lisp:make-instance 'register-publisher-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-publisher-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-publisher-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'accept-terms-and-conditions))
      (common-lisp:list
       (common-lisp:cons "AcceptTermsAndConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-publisher-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-publisher-output common-lisp:nil
                       ((publisher-id :initarg :publisher-id :type
                         (common-lisp:or publisher-id common-lisp:null)
                         :accessor %register-publisher-output-publisher-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'register-publisher-output
                    'make-register-publisher-output))
 (common-lisp:defun make-register-publisher-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key publisher-id)
   (common-lisp:apply #'common-lisp:make-instance 'register-publisher-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-publisher-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-publisher-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publisher-id))
      (common-lisp:list
       (common-lisp:cons "PublisherId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-publisher-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-type-input common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :type (common-lisp:or request-token common-lisp:null)
                         :accessor %register-type-input-client-request-token
                         :initform common-lisp:nil)
                        (execution-role-arn :initarg :execution-role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %register-type-input-execution-role-arn :initform
                         common-lisp:nil)
                        (logging-config :initarg :logging-config :type
                         (common-lisp:or logging-config common-lisp:null)
                         :accessor %register-type-input-logging-config
                         :initform common-lisp:nil)
                        (schema-handler-package :initarg
                         :schema-handler-package :type
                         (common-lisp:or s3url common-lisp:null) :accessor
                         %register-type-input-schema-handler-package :initform
                         (common-lisp:error
                          ":schema-handler-package is required"))
                        (type-name :initarg :type-name :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         %register-type-input-type-name :initform
                         (common-lisp:error ":type-name is required"))
                        (type :initarg :type :type
                         (common-lisp:or registry-type common-lisp:null)
                         :accessor %register-type-input-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'register-type-input 'make-register-type-input))
 (common-lisp:defun make-register-type-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token execution-role-arn
                     logging-config schema-handler-package type-name type)
   (common-lisp:apply #'common-lisp:make-instance 'register-type-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input register-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input register-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schema-handler-package))
      (common-lisp:list
       (common-lisp:cons "SchemaHandlerPackage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-config))
      (common-lisp:list
       (common-lisp:cons "LoggingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input register-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass register-type-output common-lisp:nil
                       ((registration-token :initarg :registration-token :type
                         (common-lisp:or registration-token common-lisp:null)
                         :accessor %register-type-output-registration-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'register-type-output 'make-register-type-output))
 (common-lisp:defun make-register-type-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key registration-token)
   (common-lisp:apply #'common-lisp:make-instance 'register-type-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input register-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input register-type-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-token))
      (common-lisp:list
       (common-lisp:cons "RegistrationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input register-type-output))
   common-lisp:nil))
(common-lisp:deftype registration-status () 'common-lisp:string)
(common-lisp:deftype registration-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype registration-token-list ()
   '(trivial-types:proper-list registration-token))
 (common-lisp:defun |make-registration-token-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list registration-token))
   aws-sdk/generator/shape::members))
(common-lisp:deftype registry-type () 'common-lisp:string)
(common-lisp:deftype replacement () 'common-lisp:string)
(common-lisp:deftype request-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass required-activated-type common-lisp:nil
                       ((supported-major-versions :initarg
                         :supported-major-versions :type
                         (common-lisp:or supported-major-versions
                                         common-lisp:null)
                         :accessor
                         %required-activated-type-supported-major-versions
                         :initform common-lisp:nil)
                        (publisher-id :initarg :publisher-id :type
                         (common-lisp:or publisher-id common-lisp:null)
                         :accessor %required-activated-type-publisher-id
                         :initform common-lisp:nil)
                        (original-type-name :initarg :original-type-name :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         %required-activated-type-original-type-name :initform
                         common-lisp:nil)
                        (type-name-alias :initarg :type-name-alias :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         %required-activated-type-type-name-alias :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'required-activated-type 'make-required-activated-type))
 (common-lisp:defun make-required-activated-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key supported-major-versions publisher-id
                     original-type-name type-name-alias)
   (common-lisp:apply #'common-lisp:make-instance 'required-activated-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          required-activated-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          required-activated-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name-alias))
      (common-lisp:list
       (common-lisp:cons "TypeNameAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'original-type-name))
      (common-lisp:list
       (common-lisp:cons "OriginalTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publisher-id))
      (common-lisp:list
       (common-lisp:cons "PublisherId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-major-versions))
      (common-lisp:list
       (common-lisp:cons "SupportedMajorVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          required-activated-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype required-activated-types ()
   '(trivial-types:proper-list required-activated-type))
 (common-lisp:defun |make-required-activated-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list required-activated-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype requires-recreation () 'common-lisp:string)
(common-lisp:deftype resource-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-change common-lisp:nil
                       ((module-info :initarg :module-info :type
                         (common-lisp:or module-info common-lisp:null)
                         :accessor %resource-change-module-info :initform
                         common-lisp:nil)
                        (change-set-id :initarg :change-set-id :type
                         (common-lisp:or change-set-id common-lisp:null)
                         :accessor %resource-change-change-set-id :initform
                         common-lisp:nil)
                        (details :initarg :details :type
                         (common-lisp:or resource-change-details
                                         common-lisp:null)
                         :accessor %resource-change-details :initform
                         common-lisp:nil)
                        (scope :initarg :scope :type
                         (common-lisp:or scope common-lisp:null) :accessor
                         %resource-change-scope :initform common-lisp:nil)
                        (replacement :initarg :replacement :type
                         (common-lisp:or replacement common-lisp:null)
                         :accessor %resource-change-replacement :initform
                         common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %resource-change-resource-type :initform
                         common-lisp:nil)
                        (physical-resource-id :initarg :physical-resource-id
                         :type
                         (common-lisp:or physical-resource-id common-lisp:null)
                         :accessor %resource-change-physical-resource-id
                         :initform common-lisp:nil)
                        (logical-resource-id :initarg :logical-resource-id
                         :type
                         (common-lisp:or logical-resource-id common-lisp:null)
                         :accessor %resource-change-logical-resource-id
                         :initform common-lisp:nil)
                        (action :initarg :action :type
                         (common-lisp:or change-action common-lisp:null)
                         :accessor %resource-change-action :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'resource-change 'make-resource-change))
 (common-lisp:defun make-resource-change
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key module-info change-set-id details scope
                     replacement resource-type physical-resource-id
                     logical-resource-id action)
   (common-lisp:apply #'common-lisp:make-instance 'resource-change
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "LogicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-resource-id))
      (common-lisp:list
       (common-lisp:cons "PhysicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'replacement))
      (common-lisp:list
       (common-lisp:cons "Replacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-id))
      (common-lisp:list
       (common-lisp:cons "ChangeSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'module-info))
      (common-lisp:list
       (common-lisp:cons "ModuleInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-change))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource-change-detail common-lisp:nil
                       ((causing-entity :initarg :causing-entity :type
                         (common-lisp:or causing-entity common-lisp:null)
                         :accessor %resource-change-detail-causing-entity
                         :initform common-lisp:nil)
                        (change-source :initarg :change-source :type
                         (common-lisp:or change-source common-lisp:null)
                         :accessor %resource-change-detail-change-source
                         :initform common-lisp:nil)
                        (evaluation :initarg :evaluation :type
                         (common-lisp:or evaluation-type common-lisp:null)
                         :accessor %resource-change-detail-evaluation :initform
                         common-lisp:nil)
                        (target :initarg :target :type
                         (common-lisp:or resource-target-definition
                                         common-lisp:null)
                         :accessor %resource-change-detail-target :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-change-detail 'make-resource-change-detail))
 (common-lisp:defun make-resource-change-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key causing-entity change-source evaluation
                     target)
   (common-lisp:apply #'common-lisp:make-instance 'resource-change-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-change-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-change-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation))
      (common-lisp:list
       (common-lisp:cons "Evaluation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-source))
      (common-lisp:list
       (common-lisp:cons "ChangeSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'causing-entity))
      (common-lisp:list
       (common-lisp:cons "CausingEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-change-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-change-details ()
   '(trivial-types:proper-list resource-change-detail))
 (common-lisp:defun |make-resource-change-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-change-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype resource-identifier-properties ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-resource-identifier-properties|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype resource-identifier-property-key () 'common-lisp:string)
(common-lisp:deftype resource-identifier-property-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-identifier-summaries ()
   '(trivial-types:proper-list resource-identifier-summary))
 (common-lisp:defun |make-resource-identifier-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resource-identifier-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass resource-identifier-summary common-lisp:nil
                       ((resource-identifiers :initarg :resource-identifiers
                         :type
                         (common-lisp:or resource-identifiers common-lisp:null)
                         :accessor
                         %resource-identifier-summary-resource-identifiers
                         :initform common-lisp:nil)
                        (logical-resource-ids :initarg :logical-resource-ids
                         :type
                         (common-lisp:or logical-resource-ids common-lisp:null)
                         :accessor
                         %resource-identifier-summary-logical-resource-ids
                         :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %resource-identifier-summary-resource-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-identifier-summary
                    'make-resource-identifier-summary))
 (common-lisp:defun make-resource-identifier-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-identifiers logical-resource-ids
                     resource-type)
   (common-lisp:apply #'common-lisp:make-instance 'resource-identifier-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-identifier-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-identifier-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logical-resource-ids))
      (common-lisp:list
       (common-lisp:cons "LogicalResourceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-identifiers))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-identifier-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-identifiers ()
   '(trivial-types:proper-list resource-identifier-property-key))
 (common-lisp:defun |make-resource-identifiers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resource-identifier-property-key))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-model () 'common-lisp:string)
(common-lisp:deftype resource-properties () 'common-lisp:string)
(common-lisp:deftype resource-signal-status () 'common-lisp:string)
(common-lisp:deftype resource-signal-unique-id () 'common-lisp:string)
(common-lisp:deftype resource-status () 'common-lisp:string)
(common-lisp:deftype resource-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-target-definition common-lisp:nil
                       ((requires-recreation :initarg :requires-recreation
                         :type
                         (common-lisp:or requires-recreation common-lisp:null)
                         :accessor
                         %resource-target-definition-requires-recreation
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or property-name common-lisp:null)
                         :accessor %resource-target-definition-name :initform
                         common-lisp:nil)
                        (attribute :initarg :attribute :type
                         (common-lisp:or resource-attribute common-lisp:null)
                         :accessor %resource-target-definition-attribute
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-target-definition
                    'make-resource-target-definition))
 (common-lisp:defun make-resource-target-definition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key requires-recreation name attribute)
   (common-lisp:apply #'common-lisp:make-instance 'resource-target-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-target-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-target-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "Attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'requires-recreation))
      (common-lisp:list
       (common-lisp:cons "RequiresRecreation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-target-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource-to-import common-lisp:nil
                       ((resource-identifier :initarg :resource-identifier
                         :type
                         (common-lisp:or resource-identifier-properties
                                         common-lisp:null)
                         :accessor %resource-to-import-resource-identifier
                         :initform
                         (common-lisp:error
                          ":resource-identifier is required"))
                        (logical-resource-id :initarg :logical-resource-id
                         :type
                         (common-lisp:or logical-resource-id common-lisp:null)
                         :accessor %resource-to-import-logical-resource-id
                         :initform
                         (common-lisp:error
                          ":logical-resource-id is required"))
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %resource-to-import-resource-type :initform
                         (common-lisp:error ":resource-type is required"))))
 (common-lisp:export
  (common-lisp:list 'resource-to-import 'make-resource-to-import))
 (common-lisp:defun make-resource-to-import
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-identifier logical-resource-id
                     resource-type)
   (common-lisp:apply #'common-lisp:make-instance 'resource-to-import
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-to-import))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-to-import))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "LogicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-to-import))
   common-lisp:nil))
(common-lisp:deftype resource-to-skip () 'common-lisp:string)
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-types ()
   '(trivial-types:proper-list resource-type))
 (common-lisp:defun |make-resource-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype resources-to-import ()
   '(trivial-types:proper-list resource-to-import))
 (common-lisp:defun |make-resources-to-import|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-to-import))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype resources-to-skip ()
   '(trivial-types:proper-list resource-to-skip))
 (common-lisp:defun |make-resources-to-skip|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-to-skip))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype retain-resources ()
   '(trivial-types:proper-list logical-resource-id))
 (common-lisp:defun |make-retain-resources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list logical-resource-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype retain-stacks () 'common-lisp:boolean)
(common-lisp:deftype retain-stacks-nullable () 'common-lisp:boolean)
(common-lisp:deftype retain-stacks-on-account-removal-nullable ()
  'common-lisp:boolean)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass rollback-configuration common-lisp:nil
                       ((monitoring-time-in-minutes :initarg
                         :monitoring-time-in-minutes :type
                         (common-lisp:or monitoring-time-in-minutes
                                         common-lisp:null)
                         :accessor
                         %rollback-configuration-monitoring-time-in-minutes
                         :initform common-lisp:nil)
                        (rollback-triggers :initarg :rollback-triggers :type
                         (common-lisp:or rollback-triggers common-lisp:null)
                         :accessor %rollback-configuration-rollback-triggers
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rollback-configuration 'make-rollback-configuration))
 (common-lisp:defun make-rollback-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key monitoring-time-in-minutes
                     rollback-triggers)
   (common-lisp:apply #'common-lisp:make-instance 'rollback-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rollback-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rollback-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback-triggers))
      (common-lisp:list
       (common-lisp:cons "RollbackTriggers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-time-in-minutes))
      (common-lisp:list
       (common-lisp:cons "MonitoringTimeInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rollback-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rollback-stack-input common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %rollback-stack-input-client-request-token
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %rollback-stack-input-role-arn :initform
                         common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name-or-id common-lisp:null)
                         :accessor %rollback-stack-input-stack-name :initform
                         (common-lisp:error ":stack-name is required"))))
 (common-lisp:export
  (common-lisp:list 'rollback-stack-input 'make-rollback-stack-input))
 (common-lisp:defun make-rollback-stack-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token role-arn stack-name)
   (common-lisp:apply #'common-lisp:make-instance 'rollback-stack-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rollback-stack-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rollback-stack-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rollback-stack-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rollback-stack-output common-lisp:nil
                       ((stack-id :initarg :stack-id :type
                         (common-lisp:or stack-id common-lisp:null) :accessor
                         %rollback-stack-output-stack-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'rollback-stack-output 'make-rollback-stack-output))
 (common-lisp:defun make-rollback-stack-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-id)
   (common-lisp:apply #'common-lisp:make-instance 'rollback-stack-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rollback-stack-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rollback-stack-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rollback-stack-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass rollback-trigger common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or type common-lisp:null) :accessor
                         %rollback-trigger-type :initform
                         (common-lisp:error ":type is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %rollback-trigger-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'rollback-trigger 'make-rollback-trigger))
 (common-lisp:defun make-rollback-trigger
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type arn)
   (common-lisp:apply #'common-lisp:make-instance 'rollback-trigger
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rollback-trigger))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rollback-trigger))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rollback-trigger))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rollback-triggers ()
   '(trivial-types:proper-list rollback-trigger))
 (common-lisp:defun |make-rollback-triggers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rollback-trigger))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype scope () '(trivial-types:proper-list resource-attribute))
 (common-lisp:defun |make-scope|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass set-stack-policy-input common-lisp:nil
                       ((stack-policy-url :initarg :stack-policy-url :type
                         (common-lisp:or stack-policy-url common-lisp:null)
                         :accessor %set-stack-policy-input-stack-policy-url
                         :initform common-lisp:nil)
                        (stack-policy-body :initarg :stack-policy-body :type
                         (common-lisp:or stack-policy-body common-lisp:null)
                         :accessor %set-stack-policy-input-stack-policy-body
                         :initform common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name common-lisp:null) :accessor
                         %set-stack-policy-input-stack-name :initform
                         (common-lisp:error ":stack-name is required"))))
 (common-lisp:export
  (common-lisp:list 'set-stack-policy-input 'make-set-stack-policy-input))
 (common-lisp:defun make-set-stack-policy-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-policy-url stack-policy-body
                     stack-name)
   (common-lisp:apply #'common-lisp:make-instance 'set-stack-policy-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-stack-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-stack-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-policy-body))
      (common-lisp:list
       (common-lisp:cons "StackPolicyBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-policy-url))
      (common-lisp:list
       (common-lisp:cons "StackPolicyURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-stack-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-type-configuration-input common-lisp:nil
                       ((type :initarg :type :type
                         (common-lisp:or third-party-type common-lisp:null)
                         :accessor %set-type-configuration-input-type :initform
                         common-lisp:nil)
                        (type-name :initarg :type-name :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         %set-type-configuration-input-type-name :initform
                         common-lisp:nil)
                        (configuration-alias :initarg :configuration-alias
                         :type
                         (common-lisp:or type-configuration-alias
                                         common-lisp:null)
                         :accessor
                         %set-type-configuration-input-configuration-alias
                         :initform common-lisp:nil)
                        (configuration :initarg :configuration :type
                         (common-lisp:or type-configuration common-lisp:null)
                         :accessor %set-type-configuration-input-configuration
                         :initform
                         (common-lisp:error ":configuration is required"))
                        (type-arn :initarg :type-arn :type
                         (common-lisp:or type-arn common-lisp:null) :accessor
                         %set-type-configuration-input-type-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'set-type-configuration-input
                    'make-set-type-configuration-input))
 (common-lisp:defun make-set-type-configuration-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type type-name configuration-alias
                     configuration type-arn)
   (common-lisp:apply #'common-lisp:make-instance 'set-type-configuration-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-type-configuration-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-type-configuration-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-arn))
      (common-lisp:list
       (common-lisp:cons "TypeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-alias))
      (common-lisp:list
       (common-lisp:cons "ConfigurationAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-type-configuration-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-type-configuration-output common-lisp:nil
                       ((configuration-arn :initarg :configuration-arn :type
                         (common-lisp:or type-configuration-arn
                                         common-lisp:null)
                         :accessor
                         %set-type-configuration-output-configuration-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'set-type-configuration-output
                    'make-set-type-configuration-output))
 (common-lisp:defun make-set-type-configuration-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-type-configuration-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-type-configuration-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-type-configuration-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-arn))
      (common-lisp:list
       (common-lisp:cons "ConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-type-configuration-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-type-default-version-input common-lisp:nil
                       ((version-id :initarg :version-id :type
                         (common-lisp:or type-version-id common-lisp:null)
                         :accessor %set-type-default-version-input-version-id
                         :initform common-lisp:nil)
                        (type-name :initarg :type-name :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         %set-type-default-version-input-type-name :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or registry-type common-lisp:null)
                         :accessor %set-type-default-version-input-type
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or private-type-arn common-lisp:null)
                         :accessor %set-type-default-version-input-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'set-type-default-version-input
                    'make-set-type-default-version-input))
 (common-lisp:defun make-set-type-default-version-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-id type-name type arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-type-default-version-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-type-default-version-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-type-default-version-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-type-default-version-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass set-type-default-version-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'set-type-default-version-output
                    'make-set-type-default-version-output))
 (common-lisp:defun make-set-type-default-version-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-type-default-version-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-type-default-version-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-type-default-version-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-type-default-version-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass signal-resource-input common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or resource-signal-status
                                         common-lisp:null)
                         :accessor %signal-resource-input-status :initform
                         (common-lisp:error ":status is required"))
                        (unique-id :initarg :unique-id :type
                         (common-lisp:or resource-signal-unique-id
                                         common-lisp:null)
                         :accessor %signal-resource-input-unique-id :initform
                         (common-lisp:error ":unique-id is required"))
                        (logical-resource-id :initarg :logical-resource-id
                         :type
                         (common-lisp:or logical-resource-id common-lisp:null)
                         :accessor %signal-resource-input-logical-resource-id
                         :initform
                         (common-lisp:error
                          ":logical-resource-id is required"))
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name-or-id common-lisp:null)
                         :accessor %signal-resource-input-stack-name :initform
                         (common-lisp:error ":stack-name is required"))))
 (common-lisp:export
  (common-lisp:list 'signal-resource-input 'make-signal-resource-input))
 (common-lisp:defun make-signal-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status unique-id logical-resource-id
                     stack-name)
   (common-lisp:apply #'common-lisp:make-instance 'signal-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          signal-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          signal-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "LogicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unique-id))
      (common-lisp:list
       (common-lisp:cons "UniqueId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          signal-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stack common-lisp:nil
                       ((drift-information :initarg :drift-information :type
                         (common-lisp:or stack-drift-information
                                         common-lisp:null)
                         :accessor %stack-drift-information :initform
                         common-lisp:nil)
                        (root-id :initarg :root-id :type
                         (common-lisp:or stack-id common-lisp:null) :accessor
                         %stack-root-id :initform common-lisp:nil)
                        (parent-id :initarg :parent-id :type
                         (common-lisp:or stack-id common-lisp:null) :accessor
                         %stack-parent-id :initform common-lisp:nil)
                        (enable-termination-protection :initarg
                         :enable-termination-protection :type
                         (common-lisp:or enable-termination-protection
                                         common-lisp:null)
                         :accessor %stack-enable-termination-protection
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %stack-tags :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %stack-role-arn :initform common-lisp:nil)
                        (outputs :initarg :outputs :type
                         (common-lisp:or outputs common-lisp:null) :accessor
                         %stack-outputs :initform common-lisp:nil)
                        (capabilities :initarg :capabilities :type
                         (common-lisp:or capabilities common-lisp:null)
                         :accessor %stack-capabilities :initform
                         common-lisp:nil)
                        (timeout-in-minutes :initarg :timeout-in-minutes :type
                         (common-lisp:or timeout-minutes common-lisp:null)
                         :accessor %stack-timeout-in-minutes :initform
                         common-lisp:nil)
                        (notification-arns :initarg :notification-arns :type
                         (common-lisp:or notification-arns common-lisp:null)
                         :accessor %stack-notification-arns :initform
                         common-lisp:nil)
                        (disable-rollback :initarg :disable-rollback :type
                         (common-lisp:or disable-rollback common-lisp:null)
                         :accessor %stack-disable-rollback :initform
                         common-lisp:nil)
                        (stack-status-reason :initarg :stack-status-reason
                         :type
                         (common-lisp:or stack-status-reason common-lisp:null)
                         :accessor %stack-stack-status-reason :initform
                         common-lisp:nil)
                        (stack-status :initarg :stack-status :type
                         (common-lisp:or stack-status common-lisp:null)
                         :accessor %stack-stack-status :initform
                         (common-lisp:error ":stack-status is required"))
                        (rollback-configuration :initarg
                         :rollback-configuration :type
                         (common-lisp:or rollback-configuration
                                         common-lisp:null)
                         :accessor %stack-rollback-configuration :initform
                         common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or last-updated-time common-lisp:null)
                         :accessor %stack-last-updated-time :initform
                         common-lisp:nil)
                        (deletion-time :initarg :deletion-time :type
                         (common-lisp:or deletion-time common-lisp:null)
                         :accessor %stack-deletion-time :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %stack-creation-time :initform
                         (common-lisp:error ":creation-time is required"))
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameters common-lisp:null) :accessor
                         %stack-parameters :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %stack-description :initform
                         common-lisp:nil)
                        (change-set-id :initarg :change-set-id :type
                         (common-lisp:or change-set-id common-lisp:null)
                         :accessor %stack-change-set-id :initform
                         common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name common-lisp:null) :accessor
                         %stack-stack-name :initform
                         (common-lisp:error ":stack-name is required"))
                        (stack-id :initarg :stack-id :type
                         (common-lisp:or stack-id common-lisp:null) :accessor
                         %stack-stack-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'stack 'make-stack))
 (common-lisp:defun make-stack
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key drift-information root-id parent-id
                     enable-termination-protection tags role-arn outputs
                     capabilities timeout-in-minutes notification-arns
                     disable-rollback stack-status-reason stack-status
                     rollback-configuration last-updated-time deletion-time
                     creation-time parameters description change-set-id
                     stack-name stack-id)
   (common-lisp:apply #'common-lisp:make-instance 'stack
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stack))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stack))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-id))
      (common-lisp:list
       (common-lisp:cons "ChangeSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-time))
      (common-lisp:list
       (common-lisp:cons "DeletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rollback-configuration))
      (common-lisp:list
       (common-lisp:cons "RollbackConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-status))
      (common-lisp:list
       (common-lisp:cons "StackStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-status-reason))
      (common-lisp:list
       (common-lisp:cons "StackStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-rollback))
      (common-lisp:list
       (common-lisp:cons "DisableRollback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-arns))
      (common-lisp:list
       (common-lisp:cons "NotificationARNs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-in-minutes))
      (common-lisp:list
       (common-lisp:cons "TimeoutInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-termination-protection))
      (common-lisp:list
       (common-lisp:cons "EnableTerminationProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-id))
      (common-lisp:list
       (common-lisp:cons "ParentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-id))
      (common-lisp:list
       (common-lisp:cons "RootId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drift-information))
      (common-lisp:list
       (common-lisp:cons "DriftInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stack))
   common-lisp:nil))
(common-lisp:deftype stack-drift-detection-id () 'common-lisp:string)
(common-lisp:deftype stack-drift-detection-status () 'common-lisp:string)
(common-lisp:deftype stack-drift-detection-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stack-drift-information common-lisp:nil
                       ((last-check-timestamp :initarg :last-check-timestamp
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %stack-drift-information-last-check-timestamp
                         :initform common-lisp:nil)
                        (stack-drift-status :initarg :stack-drift-status :type
                         (common-lisp:or stack-drift-status common-lisp:null)
                         :accessor %stack-drift-information-stack-drift-status
                         :initform
                         (common-lisp:error
                          ":stack-drift-status is required"))))
 (common-lisp:export
  (common-lisp:list 'stack-drift-information 'make-stack-drift-information))
 (common-lisp:defun make-stack-drift-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-check-timestamp stack-drift-status)
   (common-lisp:apply #'common-lisp:make-instance 'stack-drift-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stack-drift-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stack-drift-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-drift-status))
      (common-lisp:list
       (common-lisp:cons "StackDriftStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-check-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastCheckTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stack-drift-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stack-drift-information-summary common-lisp:nil
                       ((last-check-timestamp :initarg :last-check-timestamp
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %stack-drift-information-summary-last-check-timestamp
                         :initform common-lisp:nil)
                        (stack-drift-status :initarg :stack-drift-status :type
                         (common-lisp:or stack-drift-status common-lisp:null)
                         :accessor
                         %stack-drift-information-summary-stack-drift-status
                         :initform
                         (common-lisp:error
                          ":stack-drift-status is required"))))
 (common-lisp:export
  (common-lisp:list 'stack-drift-information-summary
                    'make-stack-drift-information-summary))
 (common-lisp:defun make-stack-drift-information-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-check-timestamp stack-drift-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'stack-drift-information-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stack-drift-information-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stack-drift-information-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-drift-status))
      (common-lisp:list
       (common-lisp:cons "StackDriftStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-check-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastCheckTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stack-drift-information-summary))
   common-lisp:nil))
(common-lisp:deftype stack-drift-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stack-event common-lisp:nil
                       ((hook-failure-mode :initarg :hook-failure-mode :type
                         (common-lisp:or hook-failure-mode common-lisp:null)
                         :accessor %stack-event-hook-failure-mode :initform
                         common-lisp:nil)
                        (hook-invocation-point :initarg :hook-invocation-point
                         :type
                         (common-lisp:or hook-invocation-point
                                         common-lisp:null)
                         :accessor %stack-event-hook-invocation-point :initform
                         common-lisp:nil)
                        (hook-status-reason :initarg :hook-status-reason :type
                         (common-lisp:or hook-status-reason common-lisp:null)
                         :accessor %stack-event-hook-status-reason :initform
                         common-lisp:nil)
                        (hook-status :initarg :hook-status :type
                         (common-lisp:or hook-status common-lisp:null)
                         :accessor %stack-event-hook-status :initform
                         common-lisp:nil)
                        (hook-type :initarg :hook-type :type
                         (common-lisp:or hook-type common-lisp:null) :accessor
                         %stack-event-hook-type :initform common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %stack-event-client-request-token :initform
                         common-lisp:nil)
                        (resource-properties :initarg :resource-properties
                         :type
                         (common-lisp:or resource-properties common-lisp:null)
                         :accessor %stack-event-resource-properties :initform
                         common-lisp:nil)
                        (resource-status-reason :initarg
                         :resource-status-reason :type
                         (common-lisp:or resource-status-reason
                                         common-lisp:null)
                         :accessor %stack-event-resource-status-reason
                         :initform common-lisp:nil)
                        (resource-status :initarg :resource-status :type
                         (common-lisp:or resource-status common-lisp:null)
                         :accessor %stack-event-resource-status :initform
                         common-lisp:nil)
                        (timestamp :initarg :timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %stack-event-timestamp :initform
                         (common-lisp:error ":timestamp is required"))
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %stack-event-resource-type :initform
                         common-lisp:nil)
                        (physical-resource-id :initarg :physical-resource-id
                         :type
                         (common-lisp:or physical-resource-id common-lisp:null)
                         :accessor %stack-event-physical-resource-id :initform
                         common-lisp:nil)
                        (logical-resource-id :initarg :logical-resource-id
                         :type
                         (common-lisp:or logical-resource-id common-lisp:null)
                         :accessor %stack-event-logical-resource-id :initform
                         common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name common-lisp:null) :accessor
                         %stack-event-stack-name :initform
                         (common-lisp:error ":stack-name is required"))
                        (event-id :initarg :event-id :type
                         (common-lisp:or event-id common-lisp:null) :accessor
                         %stack-event-event-id :initform
                         (common-lisp:error ":event-id is required"))
                        (stack-id :initarg :stack-id :type
                         (common-lisp:or stack-id common-lisp:null) :accessor
                         %stack-event-stack-id :initform
                         (common-lisp:error ":stack-id is required"))))
 (common-lisp:export (common-lisp:list 'stack-event 'make-stack-event))
 (common-lisp:defun make-stack-event
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key hook-failure-mode hook-invocation-point
                     hook-status-reason hook-status hook-type
                     client-request-token resource-properties
                     resource-status-reason resource-status timestamp
                     resource-type physical-resource-id logical-resource-id
                     stack-name event-id stack-id)
   (common-lisp:apply #'common-lisp:make-instance 'stack-event
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stack-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stack-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "EventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "LogicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-resource-id))
      (common-lisp:list
       (common-lisp:cons "PhysicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-status))
      (common-lisp:list
       (common-lisp:cons "ResourceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-status-reason))
      (common-lisp:list
       (common-lisp:cons "ResourceStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-properties))
      (common-lisp:list
       (common-lisp:cons "ResourceProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hook-type))
      (common-lisp:list
       (common-lisp:cons "HookType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hook-status))
      (common-lisp:list
       (common-lisp:cons "HookStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hook-status-reason))
      (common-lisp:list
       (common-lisp:cons "HookStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hook-invocation-point))
      (common-lisp:list
       (common-lisp:cons "HookInvocationPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hook-failure-mode))
      (common-lisp:list
       (common-lisp:cons "HookFailureMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stack-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stack-events () '(trivial-types:proper-list stack-event))
 (common-lisp:defun |make-stack-events|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype stack-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stack-id-list () '(trivial-types:proper-list stack-id))
 (common-lisp:defun |make-stack-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype stack-ids-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stack-instance common-lisp:nil
                       ((last-operation-id :initarg :last-operation-id :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %stack-instance-last-operation-id :initform
                         common-lisp:nil)
                        (last-drift-check-timestamp :initarg
                         :last-drift-check-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %stack-instance-last-drift-check-timestamp :initform
                         common-lisp:nil)
                        (drift-status :initarg :drift-status :type
                         (common-lisp:or stack-drift-status common-lisp:null)
                         :accessor %stack-instance-drift-status :initform
                         common-lisp:nil)
                        (organizational-unit-id :initarg
                         :organizational-unit-id :type
                         (common-lisp:or organizational-unit-id
                                         common-lisp:null)
                         :accessor %stack-instance-organizational-unit-id
                         :initform common-lisp:nil)
                        (status-reason :initarg :status-reason :type
                         (common-lisp:or reason common-lisp:null) :accessor
                         %stack-instance-status-reason :initform
                         common-lisp:nil)
                        (stack-instance-status :initarg :stack-instance-status
                         :type
                         (common-lisp:or stack-instance-comprehensive-status
                                         common-lisp:null)
                         :accessor %stack-instance-stack-instance-status
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or stack-instance-status
                                         common-lisp:null)
                         :accessor %stack-instance-status :initform
                         common-lisp:nil)
                        (parameter-overrides :initarg :parameter-overrides
                         :type (common-lisp:or parameters common-lisp:null)
                         :accessor %stack-instance-parameter-overrides
                         :initform common-lisp:nil)
                        (stack-id :initarg :stack-id :type
                         (common-lisp:or stack-id common-lisp:null) :accessor
                         %stack-instance-stack-id :initform common-lisp:nil)
                        (account :initarg :account :type
                         (common-lisp:or account common-lisp:null) :accessor
                         %stack-instance-account :initform common-lisp:nil)
                        (region :initarg :region :type
                         (common-lisp:or region common-lisp:null) :accessor
                         %stack-instance-region :initform common-lisp:nil)
                        (stack-set-id :initarg :stack-set-id :type
                         (common-lisp:or stack-set-id common-lisp:null)
                         :accessor %stack-instance-stack-set-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'stack-instance 'make-stack-instance))
 (common-lisp:defun make-stack-instance
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-operation-id
                     last-drift-check-timestamp drift-status
                     organizational-unit-id status-reason stack-instance-status
                     status parameter-overrides stack-id account region
                     stack-set-id)
   (common-lisp:apply #'common-lisp:make-instance 'stack-instance
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stack-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stack-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-id))
      (common-lisp:list
       (common-lisp:cons "StackSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-overrides))
      (common-lisp:list
       (common-lisp:cons "ParameterOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-instance-status))
      (common-lisp:list
       (common-lisp:cons "StackInstanceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drift-status))
      (common-lisp:list
       (common-lisp:cons "DriftStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-drift-check-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastDriftCheckTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-operation-id))
      (common-lisp:list
       (common-lisp:cons "LastOperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stack-instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stack-instance-comprehensive-status common-lisp:nil
                       ((detailed-status :initarg :detailed-status :type
                         (common-lisp:or stack-instance-detailed-status
                                         common-lisp:null)
                         :accessor
                         %stack-instance-comprehensive-status-detailed-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stack-instance-comprehensive-status
                    'make-stack-instance-comprehensive-status))
 (common-lisp:defun make-stack-instance-comprehensive-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key detailed-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'stack-instance-comprehensive-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stack-instance-comprehensive-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stack-instance-comprehensive-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detailed-status))
      (common-lisp:list
       (common-lisp:cons "DetailedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stack-instance-comprehensive-status))
   common-lisp:nil))
(common-lisp:deftype stack-instance-detailed-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stack-instance-filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or stack-instance-filter-values
                                         common-lisp:null)
                         :accessor %stack-instance-filter-values :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or stack-instance-filter-name
                                         common-lisp:null)
                         :accessor %stack-instance-filter-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stack-instance-filter 'make-stack-instance-filter))
 (common-lisp:defun make-stack-instance-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'stack-instance-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stack-instance-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stack-instance-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stack-instance-filter))
   common-lisp:nil))
(common-lisp:deftype stack-instance-filter-name () 'common-lisp:string)
(common-lisp:deftype stack-instance-filter-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stack-instance-filters ()
   '(trivial-types:proper-list stack-instance-filter))
 (common-lisp:defun |make-stack-instance-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack-instance-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition stack-instance-not-found-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'stack-instance-not-found-exception)))
(common-lisp:deftype stack-instance-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stack-instance-summaries ()
   '(trivial-types:proper-list stack-instance-summary))
 (common-lisp:defun |make-stack-instance-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack-instance-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass stack-instance-summary common-lisp:nil
                       ((last-operation-id :initarg :last-operation-id :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %stack-instance-summary-last-operation-id
                         :initform common-lisp:nil)
                        (last-drift-check-timestamp :initarg
                         :last-drift-check-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %stack-instance-summary-last-drift-check-timestamp
                         :initform common-lisp:nil)
                        (drift-status :initarg :drift-status :type
                         (common-lisp:or stack-drift-status common-lisp:null)
                         :accessor %stack-instance-summary-drift-status
                         :initform common-lisp:nil)
                        (organizational-unit-id :initarg
                         :organizational-unit-id :type
                         (common-lisp:or organizational-unit-id
                                         common-lisp:null)
                         :accessor
                         %stack-instance-summary-organizational-unit-id
                         :initform common-lisp:nil)
                        (stack-instance-status :initarg :stack-instance-status
                         :type
                         (common-lisp:or stack-instance-comprehensive-status
                                         common-lisp:null)
                         :accessor
                         %stack-instance-summary-stack-instance-status
                         :initform common-lisp:nil)
                        (status-reason :initarg :status-reason :type
                         (common-lisp:or reason common-lisp:null) :accessor
                         %stack-instance-summary-status-reason :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or stack-instance-status
                                         common-lisp:null)
                         :accessor %stack-instance-summary-status :initform
                         common-lisp:nil)
                        (stack-id :initarg :stack-id :type
                         (common-lisp:or stack-id common-lisp:null) :accessor
                         %stack-instance-summary-stack-id :initform
                         common-lisp:nil)
                        (account :initarg :account :type
                         (common-lisp:or account common-lisp:null) :accessor
                         %stack-instance-summary-account :initform
                         common-lisp:nil)
                        (region :initarg :region :type
                         (common-lisp:or region common-lisp:null) :accessor
                         %stack-instance-summary-region :initform
                         common-lisp:nil)
                        (stack-set-id :initarg :stack-set-id :type
                         (common-lisp:or stack-set-id common-lisp:null)
                         :accessor %stack-instance-summary-stack-set-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stack-instance-summary 'make-stack-instance-summary))
 (common-lisp:defun make-stack-instance-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-operation-id
                     last-drift-check-timestamp drift-status
                     organizational-unit-id stack-instance-status status-reason
                     status stack-id account region stack-set-id)
   (common-lisp:apply #'common-lisp:make-instance 'stack-instance-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stack-instance-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stack-instance-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-id))
      (common-lisp:list
       (common-lisp:cons "StackSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-instance-status))
      (common-lisp:list
       (common-lisp:cons "StackInstanceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drift-status))
      (common-lisp:list
       (common-lisp:cons "DriftStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-drift-check-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastDriftCheckTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-operation-id))
      (common-lisp:list
       (common-lisp:cons "LastOperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stack-instance-summary))
   common-lisp:nil))
(common-lisp:deftype stack-name () 'common-lisp:string)
(common-lisp:deftype stack-name-or-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition stack-not-found-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'stack-not-found-exception)))
(common-lisp:deftype stack-policy-body () 'common-lisp:string)
(common-lisp:deftype stack-policy-during-update-body () 'common-lisp:string)
(common-lisp:deftype stack-policy-during-update-url () 'common-lisp:string)
(common-lisp:deftype stack-policy-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stack-resource common-lisp:nil
                       ((module-info :initarg :module-info :type
                         (common-lisp:or module-info common-lisp:null)
                         :accessor %stack-resource-module-info :initform
                         common-lisp:nil)
                        (drift-information :initarg :drift-information :type
                         (common-lisp:or stack-resource-drift-information
                                         common-lisp:null)
                         :accessor %stack-resource-drift-information :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %stack-resource-description :initform
                         common-lisp:nil)
                        (resource-status-reason :initarg
                         :resource-status-reason :type
                         (common-lisp:or resource-status-reason
                                         common-lisp:null)
                         :accessor %stack-resource-resource-status-reason
                         :initform common-lisp:nil)
                        (resource-status :initarg :resource-status :type
                         (common-lisp:or resource-status common-lisp:null)
                         :accessor %stack-resource-resource-status :initform
                         (common-lisp:error ":resource-status is required"))
                        (timestamp :initarg :timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %stack-resource-timestamp :initform
                         (common-lisp:error ":timestamp is required"))
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %stack-resource-resource-type :initform
                         (common-lisp:error ":resource-type is required"))
                        (physical-resource-id :initarg :physical-resource-id
                         :type
                         (common-lisp:or physical-resource-id common-lisp:null)
                         :accessor %stack-resource-physical-resource-id
                         :initform common-lisp:nil)
                        (logical-resource-id :initarg :logical-resource-id
                         :type
                         (common-lisp:or logical-resource-id common-lisp:null)
                         :accessor %stack-resource-logical-resource-id
                         :initform
                         (common-lisp:error
                          ":logical-resource-id is required"))
                        (stack-id :initarg :stack-id :type
                         (common-lisp:or stack-id common-lisp:null) :accessor
                         %stack-resource-stack-id :initform common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name common-lisp:null) :accessor
                         %stack-resource-stack-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'stack-resource 'make-stack-resource))
 (common-lisp:defun make-stack-resource
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key module-info drift-information description
                     resource-status-reason resource-status timestamp
                     resource-type physical-resource-id logical-resource-id
                     stack-id stack-name)
   (common-lisp:apply #'common-lisp:make-instance 'stack-resource
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stack-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stack-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "LogicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-resource-id))
      (common-lisp:list
       (common-lisp:cons "PhysicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-status))
      (common-lisp:list
       (common-lisp:cons "ResourceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-status-reason))
      (common-lisp:list
       (common-lisp:cons "ResourceStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drift-information))
      (common-lisp:list
       (common-lisp:cons "DriftInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'module-info))
      (common-lisp:list
       (common-lisp:cons "ModuleInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stack-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stack-resource-detail common-lisp:nil
                       ((module-info :initarg :module-info :type
                         (common-lisp:or module-info common-lisp:null)
                         :accessor %stack-resource-detail-module-info :initform
                         common-lisp:nil)
                        (drift-information :initarg :drift-information :type
                         (common-lisp:or stack-resource-drift-information
                                         common-lisp:null)
                         :accessor %stack-resource-detail-drift-information
                         :initform common-lisp:nil)
                        (metadata :initarg :metadata :type
                         (common-lisp:or metadata common-lisp:null) :accessor
                         %stack-resource-detail-metadata :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %stack-resource-detail-description :initform
                         common-lisp:nil)
                        (resource-status-reason :initarg
                         :resource-status-reason :type
                         (common-lisp:or resource-status-reason
                                         common-lisp:null)
                         :accessor
                         %stack-resource-detail-resource-status-reason
                         :initform common-lisp:nil)
                        (resource-status :initarg :resource-status :type
                         (common-lisp:or resource-status common-lisp:null)
                         :accessor %stack-resource-detail-resource-status
                         :initform
                         (common-lisp:error ":resource-status is required"))
                        (last-updated-timestamp :initarg
                         :last-updated-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %stack-resource-detail-last-updated-timestamp
                         :initform
                         (common-lisp:error
                          ":last-updated-timestamp is required"))
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %stack-resource-detail-resource-type
                         :initform
                         (common-lisp:error ":resource-type is required"))
                        (physical-resource-id :initarg :physical-resource-id
                         :type
                         (common-lisp:or physical-resource-id common-lisp:null)
                         :accessor %stack-resource-detail-physical-resource-id
                         :initform common-lisp:nil)
                        (logical-resource-id :initarg :logical-resource-id
                         :type
                         (common-lisp:or logical-resource-id common-lisp:null)
                         :accessor %stack-resource-detail-logical-resource-id
                         :initform
                         (common-lisp:error
                          ":logical-resource-id is required"))
                        (stack-id :initarg :stack-id :type
                         (common-lisp:or stack-id common-lisp:null) :accessor
                         %stack-resource-detail-stack-id :initform
                         common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name common-lisp:null) :accessor
                         %stack-resource-detail-stack-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stack-resource-detail 'make-stack-resource-detail))
 (common-lisp:defun make-stack-resource-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key module-info drift-information metadata
                     description resource-status-reason resource-status
                     last-updated-timestamp resource-type physical-resource-id
                     logical-resource-id stack-id stack-name)
   (common-lisp:apply #'common-lisp:make-instance 'stack-resource-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stack-resource-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stack-resource-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "LogicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-resource-id))
      (common-lisp:list
       (common-lisp:cons "PhysicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-status))
      (common-lisp:list
       (common-lisp:cons "ResourceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-status-reason))
      (common-lisp:list
       (common-lisp:cons "ResourceStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drift-information))
      (common-lisp:list
       (common-lisp:cons "DriftInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'module-info))
      (common-lisp:list
       (common-lisp:cons "ModuleInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stack-resource-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stack-resource-drift common-lisp:nil
                       ((module-info :initarg :module-info :type
                         (common-lisp:or module-info common-lisp:null)
                         :accessor %stack-resource-drift-module-info :initform
                         common-lisp:nil)
                        (timestamp :initarg :timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %stack-resource-drift-timestamp :initform
                         (common-lisp:error ":timestamp is required"))
                        (stack-resource-drift-status :initarg
                         :stack-resource-drift-status :type
                         (common-lisp:or stack-resource-drift-status
                                         common-lisp:null)
                         :accessor
                         %stack-resource-drift-stack-resource-drift-status
                         :initform
                         (common-lisp:error
                          ":stack-resource-drift-status is required"))
                        (property-differences :initarg :property-differences
                         :type
                         (common-lisp:or property-differences common-lisp:null)
                         :accessor %stack-resource-drift-property-differences
                         :initform common-lisp:nil)
                        (actual-properties :initarg :actual-properties :type
                         (common-lisp:or properties common-lisp:null) :accessor
                         %stack-resource-drift-actual-properties :initform
                         common-lisp:nil)
                        (expected-properties :initarg :expected-properties
                         :type (common-lisp:or properties common-lisp:null)
                         :accessor %stack-resource-drift-expected-properties
                         :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %stack-resource-drift-resource-type
                         :initform
                         (common-lisp:error ":resource-type is required"))
                        (physical-resource-id-context :initarg
                         :physical-resource-id-context :type
                         (common-lisp:or physical-resource-id-context
                                         common-lisp:null)
                         :accessor
                         %stack-resource-drift-physical-resource-id-context
                         :initform common-lisp:nil)
                        (physical-resource-id :initarg :physical-resource-id
                         :type
                         (common-lisp:or physical-resource-id common-lisp:null)
                         :accessor %stack-resource-drift-physical-resource-id
                         :initform common-lisp:nil)
                        (logical-resource-id :initarg :logical-resource-id
                         :type
                         (common-lisp:or logical-resource-id common-lisp:null)
                         :accessor %stack-resource-drift-logical-resource-id
                         :initform
                         (common-lisp:error
                          ":logical-resource-id is required"))
                        (stack-id :initarg :stack-id :type
                         (common-lisp:or stack-id common-lisp:null) :accessor
                         %stack-resource-drift-stack-id :initform
                         (common-lisp:error ":stack-id is required"))))
 (common-lisp:export
  (common-lisp:list 'stack-resource-drift 'make-stack-resource-drift))
 (common-lisp:defun make-stack-resource-drift
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key module-info timestamp
                     stack-resource-drift-status property-differences
                     actual-properties expected-properties resource-type
                     physical-resource-id-context physical-resource-id
                     logical-resource-id stack-id)
   (common-lisp:apply #'common-lisp:make-instance 'stack-resource-drift
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stack-resource-drift))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stack-resource-drift))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "LogicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-resource-id))
      (common-lisp:list
       (common-lisp:cons "PhysicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-resource-id-context))
      (common-lisp:list
       (common-lisp:cons "PhysicalResourceIdContext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected-properties))
      (common-lisp:list
       (common-lisp:cons "ExpectedProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actual-properties))
      (common-lisp:list
       (common-lisp:cons "ActualProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'property-differences))
      (common-lisp:list
       (common-lisp:cons "PropertyDifferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-resource-drift-status))
      (common-lisp:list
       (common-lisp:cons "StackResourceDriftStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'module-info))
      (common-lisp:list
       (common-lisp:cons "ModuleInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stack-resource-drift))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stack-resource-drift-information common-lisp:nil
                       ((last-check-timestamp :initarg :last-check-timestamp
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %stack-resource-drift-information-last-check-timestamp
                         :initform common-lisp:nil)
                        (stack-resource-drift-status :initarg
                         :stack-resource-drift-status :type
                         (common-lisp:or stack-resource-drift-status
                                         common-lisp:null)
                         :accessor
                         %stack-resource-drift-information-stack-resource-drift-status
                         :initform
                         (common-lisp:error
                          ":stack-resource-drift-status is required"))))
 (common-lisp:export
  (common-lisp:list 'stack-resource-drift-information
                    'make-stack-resource-drift-information))
 (common-lisp:defun make-stack-resource-drift-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-check-timestamp
                     stack-resource-drift-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'stack-resource-drift-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stack-resource-drift-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stack-resource-drift-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-resource-drift-status))
      (common-lisp:list
       (common-lisp:cons "StackResourceDriftStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-check-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastCheckTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stack-resource-drift-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stack-resource-drift-information-summary common-lisp:nil
                       ((last-check-timestamp :initarg :last-check-timestamp
                         :type (common-lisp:or timestamp common-lisp:null)
                         :accessor
                         %stack-resource-drift-information-summary-last-check-timestamp
                         :initform common-lisp:nil)
                        (stack-resource-drift-status :initarg
                         :stack-resource-drift-status :type
                         (common-lisp:or stack-resource-drift-status
                                         common-lisp:null)
                         :accessor
                         %stack-resource-drift-information-summary-stack-resource-drift-status
                         :initform
                         (common-lisp:error
                          ":stack-resource-drift-status is required"))))
 (common-lisp:export
  (common-lisp:list 'stack-resource-drift-information-summary
                    'make-stack-resource-drift-information-summary))
 (common-lisp:defun make-stack-resource-drift-information-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-check-timestamp
                     stack-resource-drift-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'stack-resource-drift-information-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stack-resource-drift-information-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stack-resource-drift-information-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-resource-drift-status))
      (common-lisp:list
       (common-lisp:cons "StackResourceDriftStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-check-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastCheckTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stack-resource-drift-information-summary))
   common-lisp:nil))
(common-lisp:deftype stack-resource-drift-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stack-resource-drift-status-filters ()
   '(trivial-types:proper-list stack-resource-drift-status))
 (common-lisp:defun |make-stack-resource-drift-status-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            stack-resource-drift-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype stack-resource-drifts ()
   '(trivial-types:proper-list stack-resource-drift))
 (common-lisp:defun |make-stack-resource-drifts|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack-resource-drift))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype stack-resource-summaries ()
   '(trivial-types:proper-list stack-resource-summary))
 (common-lisp:defun |make-stack-resource-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack-resource-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass stack-resource-summary common-lisp:nil
                       ((module-info :initarg :module-info :type
                         (common-lisp:or module-info common-lisp:null)
                         :accessor %stack-resource-summary-module-info
                         :initform common-lisp:nil)
                        (drift-information :initarg :drift-information :type
                         (common-lisp:or
                          stack-resource-drift-information-summary
                          common-lisp:null)
                         :accessor %stack-resource-summary-drift-information
                         :initform common-lisp:nil)
                        (resource-status-reason :initarg
                         :resource-status-reason :type
                         (common-lisp:or resource-status-reason
                                         common-lisp:null)
                         :accessor
                         %stack-resource-summary-resource-status-reason
                         :initform common-lisp:nil)
                        (resource-status :initarg :resource-status :type
                         (common-lisp:or resource-status common-lisp:null)
                         :accessor %stack-resource-summary-resource-status
                         :initform
                         (common-lisp:error ":resource-status is required"))
                        (last-updated-timestamp :initarg
                         :last-updated-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %stack-resource-summary-last-updated-timestamp
                         :initform
                         (common-lisp:error
                          ":last-updated-timestamp is required"))
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %stack-resource-summary-resource-type
                         :initform
                         (common-lisp:error ":resource-type is required"))
                        (physical-resource-id :initarg :physical-resource-id
                         :type
                         (common-lisp:or physical-resource-id common-lisp:null)
                         :accessor %stack-resource-summary-physical-resource-id
                         :initform common-lisp:nil)
                        (logical-resource-id :initarg :logical-resource-id
                         :type
                         (common-lisp:or logical-resource-id common-lisp:null)
                         :accessor %stack-resource-summary-logical-resource-id
                         :initform
                         (common-lisp:error
                          ":logical-resource-id is required"))))
 (common-lisp:export
  (common-lisp:list 'stack-resource-summary 'make-stack-resource-summary))
 (common-lisp:defun make-stack-resource-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key module-info drift-information
                     resource-status-reason resource-status
                     last-updated-timestamp resource-type physical-resource-id
                     logical-resource-id)
   (common-lisp:apply #'common-lisp:make-instance 'stack-resource-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stack-resource-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stack-resource-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logical-resource-id))
      (common-lisp:list
       (common-lisp:cons "LogicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'physical-resource-id))
      (common-lisp:list
       (common-lisp:cons "PhysicalResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-updated-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-status))
      (common-lisp:list
       (common-lisp:cons "ResourceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-status-reason))
      (common-lisp:list
       (common-lisp:cons "ResourceStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drift-information))
      (common-lisp:list
       (common-lisp:cons "DriftInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'module-info))
      (common-lisp:list
       (common-lisp:cons "ModuleInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stack-resource-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stack-resources ()
   '(trivial-types:proper-list stack-resource))
 (common-lisp:defun |make-stack-resources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass stack-set common-lisp:nil
                       ((regions :initarg :regions :type
                         (common-lisp:or region-list common-lisp:null)
                         :accessor %stack-set-regions :initform
                         common-lisp:nil)
                        (managed-execution :initarg :managed-execution :type
                         (common-lisp:or managed-execution common-lisp:null)
                         :accessor %stack-set-managed-execution :initform
                         common-lisp:nil)
                        (organizational-unit-ids :initarg
                         :organizational-unit-ids :type
                         (common-lisp:or organizational-unit-id-list
                                         common-lisp:null)
                         :accessor %stack-set-organizational-unit-ids :initform
                         common-lisp:nil)
                        (permission-model :initarg :permission-model :type
                         (common-lisp:or permission-models common-lisp:null)
                         :accessor %stack-set-permission-model :initform
                         common-lisp:nil)
                        (auto-deployment :initarg :auto-deployment :type
                         (common-lisp:or auto-deployment common-lisp:null)
                         :accessor %stack-set-auto-deployment :initform
                         common-lisp:nil)
                        (stack-set-drift-detection-details :initarg
                         :stack-set-drift-detection-details :type
                         (common-lisp:or stack-set-drift-detection-details
                                         common-lisp:null)
                         :accessor %stack-set-stack-set-drift-detection-details
                         :initform common-lisp:nil)
                        (execution-role-name :initarg :execution-role-name
                         :type
                         (common-lisp:or execution-role-name common-lisp:null)
                         :accessor %stack-set-execution-role-name :initform
                         common-lisp:nil)
                        (administration-role-arn :initarg
                         :administration-role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %stack-set-administration-role-arn :initform
                         common-lisp:nil)
                        (stack-set-arn :initarg :stack-set-arn :type
                         (common-lisp:or stack-set-arn common-lisp:null)
                         :accessor %stack-set-stack-set-arn :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %stack-set-tags :initform common-lisp:nil)
                        (capabilities :initarg :capabilities :type
                         (common-lisp:or capabilities common-lisp:null)
                         :accessor %stack-set-capabilities :initform
                         common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameters common-lisp:null) :accessor
                         %stack-set-parameters :initform common-lisp:nil)
                        (template-body :initarg :template-body :type
                         (common-lisp:or template-body common-lisp:null)
                         :accessor %stack-set-template-body :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or stack-set-status common-lisp:null)
                         :accessor %stack-set-status :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %stack-set-description :initform
                         common-lisp:nil)
                        (stack-set-id :initarg :stack-set-id :type
                         (common-lisp:or stack-set-id common-lisp:null)
                         :accessor %stack-set-stack-set-id :initform
                         common-lisp:nil)
                        (stack-set-name :initarg :stack-set-name :type
                         (common-lisp:or stack-set-name common-lisp:null)
                         :accessor %stack-set-stack-set-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'stack-set 'make-stack-set))
 (common-lisp:defun make-stack-set
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key regions managed-execution
                     organizational-unit-ids permission-model auto-deployment
                     stack-set-drift-detection-details execution-role-name
                     administration-role-arn stack-set-arn tags capabilities
                     parameters template-body status description stack-set-id
                     stack-set-name)
   (common-lisp:apply #'common-lisp:make-instance 'stack-set
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stack-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stack-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-id))
      (common-lisp:list
       (common-lisp:cons "StackSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "TemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-arn))
      (common-lisp:list
       (common-lisp:cons "StackSetARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'administration-role-arn))
      (common-lisp:list
       (common-lisp:cons "AdministrationRoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-name))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-set-drift-detection-details))
      (common-lisp:list
       (common-lisp:cons "StackSetDriftDetectionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-deployment))
      (common-lisp:list
       (common-lisp:cons "AutoDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-model))
      (common-lisp:list
       (common-lisp:cons "PermissionModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-ids))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnitIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-execution))
      (common-lisp:list
       (common-lisp:cons "ManagedExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stack-set))
   common-lisp:nil))
(common-lisp:deftype stack-set-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stack-set-drift-detection-details common-lisp:nil
                       ((failed-stack-instances-count :initarg
                         :failed-stack-instances-count :type
                         (common-lisp:or failed-stack-instances-count
                                         common-lisp:null)
                         :accessor
                         %stack-set-drift-detection-details-failed-stack-instances-count
                         :initform common-lisp:nil)
                        (in-progress-stack-instances-count :initarg
                         :in-progress-stack-instances-count :type
                         (common-lisp:or in-progress-stack-instances-count
                                         common-lisp:null)
                         :accessor
                         %stack-set-drift-detection-details-in-progress-stack-instances-count
                         :initform common-lisp:nil)
                        (in-sync-stack-instances-count :initarg
                         :in-sync-stack-instances-count :type
                         (common-lisp:or in-sync-stack-instances-count
                                         common-lisp:null)
                         :accessor
                         %stack-set-drift-detection-details-in-sync-stack-instances-count
                         :initform common-lisp:nil)
                        (drifted-stack-instances-count :initarg
                         :drifted-stack-instances-count :type
                         (common-lisp:or drifted-stack-instances-count
                                         common-lisp:null)
                         :accessor
                         %stack-set-drift-detection-details-drifted-stack-instances-count
                         :initform common-lisp:nil)
                        (total-stack-instances-count :initarg
                         :total-stack-instances-count :type
                         (common-lisp:or total-stack-instances-count
                                         common-lisp:null)
                         :accessor
                         %stack-set-drift-detection-details-total-stack-instances-count
                         :initform common-lisp:nil)
                        (last-drift-check-timestamp :initarg
                         :last-drift-check-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %stack-set-drift-detection-details-last-drift-check-timestamp
                         :initform common-lisp:nil)
                        (drift-detection-status :initarg
                         :drift-detection-status :type
                         (common-lisp:or stack-set-drift-detection-status
                                         common-lisp:null)
                         :accessor
                         %stack-set-drift-detection-details-drift-detection-status
                         :initform common-lisp:nil)
                        (drift-status :initarg :drift-status :type
                         (common-lisp:or stack-set-drift-status
                                         common-lisp:null)
                         :accessor
                         %stack-set-drift-detection-details-drift-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stack-set-drift-detection-details
                    'make-stack-set-drift-detection-details))
 (common-lisp:defun make-stack-set-drift-detection-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-stack-instances-count
                     in-progress-stack-instances-count
                     in-sync-stack-instances-count
                     drifted-stack-instances-count total-stack-instances-count
                     last-drift-check-timestamp drift-detection-status
                     drift-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'stack-set-drift-detection-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stack-set-drift-detection-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stack-set-drift-detection-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drift-status))
      (common-lisp:list
       (common-lisp:cons "DriftStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'drift-detection-status))
      (common-lisp:list
       (common-lisp:cons "DriftDetectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-drift-check-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastDriftCheckTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-stack-instances-count))
      (common-lisp:list
       (common-lisp:cons "TotalStackInstancesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'drifted-stack-instances-count))
      (common-lisp:list
       (common-lisp:cons "DriftedStackInstancesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'in-sync-stack-instances-count))
      (common-lisp:list
       (common-lisp:cons "InSyncStackInstancesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'in-progress-stack-instances-count))
      (common-lisp:list
       (common-lisp:cons "InProgressStackInstancesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failed-stack-instances-count))
      (common-lisp:list
       (common-lisp:cons "FailedStackInstancesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stack-set-drift-detection-details))
   common-lisp:nil))
(common-lisp:deftype stack-set-drift-detection-status () 'common-lisp:string)
(common-lisp:deftype stack-set-drift-status () 'common-lisp:string)
(common-lisp:deftype stack-set-id () 'common-lisp:string)
(common-lisp:deftype stack-set-name () 'common-lisp:string)
(common-lisp:deftype stack-set-name-or-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition stack-set-not-empty-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'stack-set-not-empty-exception)))
(common-lisp:progn
 (common-lisp:define-condition stack-set-not-found-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'stack-set-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass stack-set-operation common-lisp:nil
                       ((status-details :initarg :status-details :type
                         (common-lisp:or stack-set-operation-status-details
                                         common-lisp:null)
                         :accessor %stack-set-operation-status-details
                         :initform common-lisp:nil)
                        (status-reason :initarg :status-reason :type
                         (common-lisp:or stack-set-operation-status-reason
                                         common-lisp:null)
                         :accessor %stack-set-operation-status-reason :initform
                         common-lisp:nil)
                        (stack-set-drift-detection-details :initarg
                         :stack-set-drift-detection-details :type
                         (common-lisp:or stack-set-drift-detection-details
                                         common-lisp:null)
                         :accessor
                         %stack-set-operation-stack-set-drift-detection-details
                         :initform common-lisp:nil)
                        (deployment-targets :initarg :deployment-targets :type
                         (common-lisp:or deployment-targets common-lisp:null)
                         :accessor %stack-set-operation-deployment-targets
                         :initform common-lisp:nil)
                        (end-timestamp :initarg :end-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %stack-set-operation-end-timestamp :initform
                         common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %stack-set-operation-creation-timestamp :initform
                         common-lisp:nil)
                        (execution-role-name :initarg :execution-role-name
                         :type
                         (common-lisp:or execution-role-name common-lisp:null)
                         :accessor %stack-set-operation-execution-role-name
                         :initform common-lisp:nil)
                        (administration-role-arn :initarg
                         :administration-role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %stack-set-operation-administration-role-arn :initform
                         common-lisp:nil)
                        (retain-stacks :initarg :retain-stacks :type
                         (common-lisp:or retain-stacks-nullable
                                         common-lisp:null)
                         :accessor %stack-set-operation-retain-stacks :initform
                         common-lisp:nil)
                        (operation-preferences :initarg :operation-preferences
                         :type
                         (common-lisp:or stack-set-operation-preferences
                                         common-lisp:null)
                         :accessor %stack-set-operation-operation-preferences
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or stack-set-operation-status
                                         common-lisp:null)
                         :accessor %stack-set-operation-status :initform
                         common-lisp:nil)
                        (action :initarg :action :type
                         (common-lisp:or stack-set-operation-action
                                         common-lisp:null)
                         :accessor %stack-set-operation-action :initform
                         common-lisp:nil)
                        (stack-set-id :initarg :stack-set-id :type
                         (common-lisp:or stack-set-id common-lisp:null)
                         :accessor %stack-set-operation-stack-set-id :initform
                         common-lisp:nil)
                        (operation-id :initarg :operation-id :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %stack-set-operation-operation-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stack-set-operation 'make-stack-set-operation))
 (common-lisp:defun make-stack-set-operation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status-details status-reason
                     stack-set-drift-detection-details deployment-targets
                     end-timestamp creation-timestamp execution-role-name
                     administration-role-arn retain-stacks
                     operation-preferences status action stack-set-id
                     operation-id)
   (common-lisp:apply #'common-lisp:make-instance 'stack-set-operation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stack-set-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stack-set-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-id))
      (common-lisp:list
       (common-lisp:cons "StackSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-preferences))
      (common-lisp:list
       (common-lisp:cons "OperationPreferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retain-stacks))
      (common-lisp:list
       (common-lisp:cons "RetainStacks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'administration-role-arn))
      (common-lisp:list
       (common-lisp:cons "AdministrationRoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-name))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-timestamp))
      (common-lisp:list
       (common-lisp:cons "EndTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-targets))
      (common-lisp:list
       (common-lisp:cons "DeploymentTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-set-drift-detection-details))
      (common-lisp:list
       (common-lisp:cons "StackSetDriftDetectionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-details))
      (common-lisp:list
       (common-lisp:cons "StatusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stack-set-operation))
   common-lisp:nil))
(common-lisp:deftype stack-set-operation-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stack-set-operation-preferences common-lisp:nil
                       ((max-concurrent-percentage :initarg
                         :max-concurrent-percentage :type
                         (common-lisp:or max-concurrent-percentage
                                         common-lisp:null)
                         :accessor
                         %stack-set-operation-preferences-max-concurrent-percentage
                         :initform common-lisp:nil)
                        (max-concurrent-count :initarg :max-concurrent-count
                         :type
                         (common-lisp:or max-concurrent-count common-lisp:null)
                         :accessor
                         %stack-set-operation-preferences-max-concurrent-count
                         :initform common-lisp:nil)
                        (failure-tolerance-percentage :initarg
                         :failure-tolerance-percentage :type
                         (common-lisp:or failure-tolerance-percentage
                                         common-lisp:null)
                         :accessor
                         %stack-set-operation-preferences-failure-tolerance-percentage
                         :initform common-lisp:nil)
                        (failure-tolerance-count :initarg
                         :failure-tolerance-count :type
                         (common-lisp:or failure-tolerance-count
                                         common-lisp:null)
                         :accessor
                         %stack-set-operation-preferences-failure-tolerance-count
                         :initform common-lisp:nil)
                        (region-order :initarg :region-order :type
                         (common-lisp:or region-list common-lisp:null)
                         :accessor
                         %stack-set-operation-preferences-region-order
                         :initform common-lisp:nil)
                        (region-concurrency-type :initarg
                         :region-concurrency-type :type
                         (common-lisp:or region-concurrency-type
                                         common-lisp:null)
                         :accessor
                         %stack-set-operation-preferences-region-concurrency-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stack-set-operation-preferences
                    'make-stack-set-operation-preferences))
 (common-lisp:defun make-stack-set-operation-preferences
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-concurrent-percentage
                     max-concurrent-count failure-tolerance-percentage
                     failure-tolerance-count region-order
                     region-concurrency-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'stack-set-operation-preferences
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stack-set-operation-preferences))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stack-set-operation-preferences))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'region-concurrency-type))
      (common-lisp:list
       (common-lisp:cons "RegionConcurrencyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-order))
      (common-lisp:list
       (common-lisp:cons "RegionOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failure-tolerance-count))
      (common-lisp:list
       (common-lisp:cons "FailureToleranceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failure-tolerance-percentage))
      (common-lisp:list
       (common-lisp:cons "FailureTolerancePercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-concurrent-count))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-concurrent-percentage))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrentPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stack-set-operation-preferences))
   common-lisp:nil))
(common-lisp:deftype stack-set-operation-result-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stack-set-operation-result-summaries ()
   '(trivial-types:proper-list stack-set-operation-result-summary))
 (common-lisp:defun |make-stack-set-operation-result-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            stack-set-operation-result-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass stack-set-operation-result-summary common-lisp:nil
                       ((organizational-unit-id :initarg
                         :organizational-unit-id :type
                         (common-lisp:or organizational-unit-id
                                         common-lisp:null)
                         :accessor
                         %stack-set-operation-result-summary-organizational-unit-id
                         :initform common-lisp:nil)
                        (account-gate-result :initarg :account-gate-result
                         :type
                         (common-lisp:or account-gate-result common-lisp:null)
                         :accessor
                         %stack-set-operation-result-summary-account-gate-result
                         :initform common-lisp:nil)
                        (status-reason :initarg :status-reason :type
                         (common-lisp:or reason common-lisp:null) :accessor
                         %stack-set-operation-result-summary-status-reason
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or stack-set-operation-result-status
                                         common-lisp:null)
                         :accessor %stack-set-operation-result-summary-status
                         :initform common-lisp:nil)
                        (region :initarg :region :type
                         (common-lisp:or region common-lisp:null) :accessor
                         %stack-set-operation-result-summary-region :initform
                         common-lisp:nil)
                        (account :initarg :account :type
                         (common-lisp:or account common-lisp:null) :accessor
                         %stack-set-operation-result-summary-account :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stack-set-operation-result-summary
                    'make-stack-set-operation-result-summary))
 (common-lisp:defun make-stack-set-operation-result-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key organizational-unit-id
                     account-gate-result status-reason status region account)
   (common-lisp:apply #'common-lisp:make-instance
                      'stack-set-operation-result-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stack-set-operation-result-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stack-set-operation-result-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-gate-result))
      (common-lisp:list
       (common-lisp:cons "AccountGateResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizational-unit-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationalUnitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stack-set-operation-result-summary))
   common-lisp:nil))
(common-lisp:deftype stack-set-operation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stack-set-operation-status-details common-lisp:nil
                       ((failed-stack-instances-count :initarg
                         :failed-stack-instances-count :type
                         (common-lisp:or failed-stack-instances-count
                                         common-lisp:null)
                         :accessor
                         %stack-set-operation-status-details-failed-stack-instances-count
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stack-set-operation-status-details
                    'make-stack-set-operation-status-details))
 (common-lisp:defun make-stack-set-operation-status-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-stack-instances-count)
   (common-lisp:apply #'common-lisp:make-instance
                      'stack-set-operation-status-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stack-set-operation-status-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stack-set-operation-status-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failed-stack-instances-count))
      (common-lisp:list
       (common-lisp:cons "FailedStackInstancesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stack-set-operation-status-details))
   common-lisp:nil))
(common-lisp:deftype stack-set-operation-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stack-set-operation-summaries ()
   '(trivial-types:proper-list stack-set-operation-summary))
 (common-lisp:defun |make-stack-set-operation-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            stack-set-operation-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass stack-set-operation-summary common-lisp:nil
                       ((operation-preferences :initarg :operation-preferences
                         :type
                         (common-lisp:or stack-set-operation-preferences
                                         common-lisp:null)
                         :accessor
                         %stack-set-operation-summary-operation-preferences
                         :initform common-lisp:nil)
                        (status-details :initarg :status-details :type
                         (common-lisp:or stack-set-operation-status-details
                                         common-lisp:null)
                         :accessor %stack-set-operation-summary-status-details
                         :initform common-lisp:nil)
                        (status-reason :initarg :status-reason :type
                         (common-lisp:or stack-set-operation-status-reason
                                         common-lisp:null)
                         :accessor %stack-set-operation-summary-status-reason
                         :initform common-lisp:nil)
                        (end-timestamp :initarg :end-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %stack-set-operation-summary-end-timestamp :initform
                         common-lisp:nil)
                        (creation-timestamp :initarg :creation-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %stack-set-operation-summary-creation-timestamp
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or stack-set-operation-status
                                         common-lisp:null)
                         :accessor %stack-set-operation-summary-status
                         :initform common-lisp:nil)
                        (action :initarg :action :type
                         (common-lisp:or stack-set-operation-action
                                         common-lisp:null)
                         :accessor %stack-set-operation-summary-action
                         :initform common-lisp:nil)
                        (operation-id :initarg :operation-id :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %stack-set-operation-summary-operation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stack-set-operation-summary
                    'make-stack-set-operation-summary))
 (common-lisp:defun make-stack-set-operation-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-preferences status-details
                     status-reason end-timestamp creation-timestamp status
                     action operation-id)
   (common-lisp:apply #'common-lisp:make-instance 'stack-set-operation-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stack-set-operation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stack-set-operation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-timestamp))
      (common-lisp:list
       (common-lisp:cons "CreationTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-timestamp))
      (common-lisp:list
       (common-lisp:cons "EndTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-details))
      (common-lisp:list
       (common-lisp:cons "StatusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-preferences))
      (common-lisp:list
       (common-lisp:cons "OperationPreferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stack-set-operation-summary))
   common-lisp:nil))
(common-lisp:deftype stack-set-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stack-set-summaries ()
   '(trivial-types:proper-list stack-set-summary))
 (common-lisp:defun |make-stack-set-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack-set-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass stack-set-summary common-lisp:nil
                       ((managed-execution :initarg :managed-execution :type
                         (common-lisp:or managed-execution common-lisp:null)
                         :accessor %stack-set-summary-managed-execution
                         :initform common-lisp:nil)
                        (last-drift-check-timestamp :initarg
                         :last-drift-check-timestamp :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %stack-set-summary-last-drift-check-timestamp
                         :initform common-lisp:nil)
                        (drift-status :initarg :drift-status :type
                         (common-lisp:or stack-drift-status common-lisp:null)
                         :accessor %stack-set-summary-drift-status :initform
                         common-lisp:nil)
                        (permission-model :initarg :permission-model :type
                         (common-lisp:or permission-models common-lisp:null)
                         :accessor %stack-set-summary-permission-model
                         :initform common-lisp:nil)
                        (auto-deployment :initarg :auto-deployment :type
                         (common-lisp:or auto-deployment common-lisp:null)
                         :accessor %stack-set-summary-auto-deployment :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or stack-set-status common-lisp:null)
                         :accessor %stack-set-summary-status :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %stack-set-summary-description :initform
                         common-lisp:nil)
                        (stack-set-id :initarg :stack-set-id :type
                         (common-lisp:or stack-set-id common-lisp:null)
                         :accessor %stack-set-summary-stack-set-id :initform
                         common-lisp:nil)
                        (stack-set-name :initarg :stack-set-name :type
                         (common-lisp:or stack-set-name common-lisp:null)
                         :accessor %stack-set-summary-stack-set-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stack-set-summary 'make-stack-set-summary))
 (common-lisp:defun make-stack-set-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key managed-execution
                     last-drift-check-timestamp drift-status permission-model
                     auto-deployment status description stack-set-id
                     stack-set-name)
   (common-lisp:apply #'common-lisp:make-instance 'stack-set-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stack-set-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stack-set-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-id))
      (common-lisp:list
       (common-lisp:cons "StackSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-deployment))
      (common-lisp:list
       (common-lisp:cons "AutoDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-model))
      (common-lisp:list
       (common-lisp:cons "PermissionModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drift-status))
      (common-lisp:list
       (common-lisp:cons "DriftStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-drift-check-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastDriftCheckTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-execution))
      (common-lisp:list
       (common-lisp:cons "ManagedExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stack-set-summary))
   common-lisp:nil))
(common-lisp:deftype stack-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stack-status-filter ()
   '(trivial-types:proper-list stack-status))
 (common-lisp:defun |make-stack-status-filter|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype stack-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stack-summaries ()
   '(trivial-types:proper-list stack-summary))
 (common-lisp:defun |make-stack-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass stack-summary common-lisp:nil
                       ((drift-information :initarg :drift-information :type
                         (common-lisp:or stack-drift-information-summary
                                         common-lisp:null)
                         :accessor %stack-summary-drift-information :initform
                         common-lisp:nil)
                        (root-id :initarg :root-id :type
                         (common-lisp:or stack-id common-lisp:null) :accessor
                         %stack-summary-root-id :initform common-lisp:nil)
                        (parent-id :initarg :parent-id :type
                         (common-lisp:or stack-id common-lisp:null) :accessor
                         %stack-summary-parent-id :initform common-lisp:nil)
                        (stack-status-reason :initarg :stack-status-reason
                         :type
                         (common-lisp:or stack-status-reason common-lisp:null)
                         :accessor %stack-summary-stack-status-reason :initform
                         common-lisp:nil)
                        (stack-status :initarg :stack-status :type
                         (common-lisp:or stack-status common-lisp:null)
                         :accessor %stack-summary-stack-status :initform
                         (common-lisp:error ":stack-status is required"))
                        (deletion-time :initarg :deletion-time :type
                         (common-lisp:or deletion-time common-lisp:null)
                         :accessor %stack-summary-deletion-time :initform
                         common-lisp:nil)
                        (last-updated-time :initarg :last-updated-time :type
                         (common-lisp:or last-updated-time common-lisp:null)
                         :accessor %stack-summary-last-updated-time :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %stack-summary-creation-time :initform
                         (common-lisp:error ":creation-time is required"))
                        (template-description :initarg :template-description
                         :type
                         (common-lisp:or template-description common-lisp:null)
                         :accessor %stack-summary-template-description
                         :initform common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name common-lisp:null) :accessor
                         %stack-summary-stack-name :initform
                         (common-lisp:error ":stack-name is required"))
                        (stack-id :initarg :stack-id :type
                         (common-lisp:or stack-id common-lisp:null) :accessor
                         %stack-summary-stack-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'stack-summary 'make-stack-summary))
 (common-lisp:defun make-stack-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key drift-information root-id parent-id
                     stack-status-reason stack-status deletion-time
                     last-updated-time creation-time template-description
                     stack-name stack-id)
   (common-lisp:apply #'common-lisp:make-instance 'stack-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stack-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stack-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'template-description))
      (common-lisp:list
       (common-lisp:cons "TemplateDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-time))
      (common-lisp:list
       (common-lisp:cons "DeletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-status))
      (common-lisp:list
       (common-lisp:cons "StackStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-status-reason))
      (common-lisp:list
       (common-lisp:cons "StackStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-id))
      (common-lisp:list
       (common-lisp:cons "ParentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-id))
      (common-lisp:list
       (common-lisp:cons "RootId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drift-information))
      (common-lisp:list
       (common-lisp:cons "DriftInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stack-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype stacks () '(trivial-types:proper-list stack))
 (common-lisp:defun |make-stacks|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stack))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype stage-list ()
   '(trivial-types:proper-list template-stage))
 (common-lisp:defun |make-stage-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list template-stage))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition stale-request-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'stale-request-exception)))
(common-lisp:deftype status-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stop-stack-set-operation-input common-lisp:nil
                       ((call-as :initarg :call-as :type
                         (common-lisp:or call-as common-lisp:null) :accessor
                         %stop-stack-set-operation-input-call-as :initform
                         common-lisp:nil)
                        (operation-id :initarg :operation-id :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %stop-stack-set-operation-input-operation-id
                         :initform
                         (common-lisp:error ":operation-id is required"))
                        (stack-set-name :initarg :stack-set-name :type
                         (common-lisp:or stack-set-name common-lisp:null)
                         :accessor
                         %stop-stack-set-operation-input-stack-set-name
                         :initform
                         (common-lisp:error ":stack-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-stack-set-operation-input
                    'make-stop-stack-set-operation-input))
 (common-lisp:defun make-stop-stack-set-operation-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key call-as operation-id stack-set-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-stack-set-operation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-stack-set-operation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-stack-set-operation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'call-as))
      (common-lisp:list
       (common-lisp:cons "CallAs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-stack-set-operation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-stack-set-operation-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'stop-stack-set-operation-output
                    'make-stop-stack-set-operation-output))
 (common-lisp:defun make-stop-stack-set-operation-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'stop-stack-set-operation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-stack-set-operation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-stack-set-operation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-stack-set-operation-output))
   common-lisp:nil))
(common-lisp:deftype supported-major-version () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype supported-major-versions ()
   '(trivial-types:proper-list supported-major-version))
 (common-lisp:defun |make-supported-major-versions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list supported-major-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype template-body () 'common-lisp:string)
(common-lisp:deftype template-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass template-parameter common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %template-parameter-description :initform
                         common-lisp:nil)
                        (no-echo :initarg :no-echo :type
                         (common-lisp:or no-echo common-lisp:null) :accessor
                         %template-parameter-no-echo :initform common-lisp:nil)
                        (default-value :initarg :default-value :type
                         (common-lisp:or parameter-value common-lisp:null)
                         :accessor %template-parameter-default-value :initform
                         common-lisp:nil)
                        (parameter-key :initarg :parameter-key :type
                         (common-lisp:or parameter-key common-lisp:null)
                         :accessor %template-parameter-parameter-key :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'template-parameter 'make-template-parameter))
 (common-lisp:defun make-template-parameter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description no-echo default-value
                     parameter-key)
   (common-lisp:apply #'common-lisp:make-instance 'template-parameter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input template-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input template-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-key))
      (common-lisp:list
       (common-lisp:cons "ParameterKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'no-echo))
      (common-lisp:list
       (common-lisp:cons "NoEcho"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input template-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype template-parameters ()
   '(trivial-types:proper-list template-parameter))
 (common-lisp:defun |make-template-parameters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list template-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype template-stage () 'common-lisp:string)
(common-lisp:deftype template-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass test-type-input common-lisp:nil
                       ((log-delivery-bucket :initarg :log-delivery-bucket
                         :type (common-lisp:or s3bucket common-lisp:null)
                         :accessor %test-type-input-log-delivery-bucket
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or type-version-id common-lisp:null)
                         :accessor %test-type-input-version-id :initform
                         common-lisp:nil)
                        (type-name :initarg :type-name :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         %test-type-input-type-name :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or third-party-type common-lisp:null)
                         :accessor %test-type-input-type :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or type-arn common-lisp:null) :accessor
                         %test-type-input-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'test-type-input 'make-test-type-input))
 (common-lisp:defun make-test-type-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-delivery-bucket version-id type-name
                     type arn)
   (common-lisp:apply #'common-lisp:make-instance 'test-type-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input test-type-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input test-type-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-delivery-bucket))
      (common-lisp:list
       (common-lisp:cons "LogDeliveryBucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input test-type-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-type-output common-lisp:nil
                       ((type-version-arn :initarg :type-version-arn :type
                         (common-lisp:or type-arn common-lisp:null) :accessor
                         %test-type-output-type-version-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'test-type-output 'make-test-type-output))
 (common-lisp:defun make-test-type-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type-version-arn)
   (common-lisp:apply #'common-lisp:make-instance 'test-type-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input test-type-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input test-type-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-version-arn))
      (common-lisp:list
       (common-lisp:cons "TypeVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input test-type-output))
   common-lisp:nil))
(common-lisp:deftype third-party-type () 'common-lisp:string)
(common-lisp:deftype third-party-type-arn () 'common-lisp:string)
(common-lisp:deftype timeout-minutes () 'common-lisp:integer)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition token-already-exists-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'token-already-exists-exception)))
(common-lisp:deftype total-stack-instances-count () 'common-lisp:integer)
(common-lisp:deftype transform-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype transforms-list ()
   '(trivial-types:proper-list transform-name))
 (common-lisp:defun |make-transforms-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list transform-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype type () 'common-lisp:string)
(common-lisp:deftype type-arn () 'common-lisp:string)
(common-lisp:deftype type-configuration () 'common-lisp:string)
(common-lisp:deftype type-configuration-alias () 'common-lisp:string)
(common-lisp:deftype type-configuration-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass type-configuration-details common-lisp:nil
                       ((is-default-configuration :initarg
                         :is-default-configuration :type
                         (common-lisp:or is-default-configuration
                                         common-lisp:null)
                         :accessor
                         %type-configuration-details-is-default-configuration
                         :initform common-lisp:nil)
                        (type-name :initarg :type-name :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         %type-configuration-details-type-name :initform
                         common-lisp:nil)
                        (type-arn :initarg :type-arn :type
                         (common-lisp:or type-arn common-lisp:null) :accessor
                         %type-configuration-details-type-arn :initform
                         common-lisp:nil)
                        (last-updated :initarg :last-updated :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %type-configuration-details-last-updated :initform
                         common-lisp:nil)
                        (configuration :initarg :configuration :type
                         (common-lisp:or type-configuration common-lisp:null)
                         :accessor %type-configuration-details-configuration
                         :initform common-lisp:nil)
                        (alias :initarg :alias :type
                         (common-lisp:or type-configuration-alias
                                         common-lisp:null)
                         :accessor %type-configuration-details-alias :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or type-configuration-arn
                                         common-lisp:null)
                         :accessor %type-configuration-details-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'type-configuration-details
                    'make-type-configuration-details))
 (common-lisp:defun make-type-configuration-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-default-configuration type-name
                     type-arn last-updated configuration alias arn)
   (common-lisp:apply #'common-lisp:make-instance 'type-configuration-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          type-configuration-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          type-configuration-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "LastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-arn))
      (common-lisp:list
       (common-lisp:cons "TypeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-default-configuration))
      (common-lisp:list
       (common-lisp:cons "IsDefaultConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          type-configuration-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype type-configuration-details-list ()
   '(trivial-types:proper-list type-configuration-details))
 (common-lisp:defun |make-type-configuration-details-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            type-configuration-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass type-configuration-identifier common-lisp:nil
                       ((type-name :initarg :type-name :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         %type-configuration-identifier-type-name :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or third-party-type common-lisp:null)
                         :accessor %type-configuration-identifier-type
                         :initform common-lisp:nil)
                        (type-configuration-arn :initarg
                         :type-configuration-arn :type
                         (common-lisp:or type-configuration-arn
                                         common-lisp:null)
                         :accessor
                         %type-configuration-identifier-type-configuration-arn
                         :initform common-lisp:nil)
                        (type-configuration-alias :initarg
                         :type-configuration-alias :type
                         (common-lisp:or type-configuration-alias
                                         common-lisp:null)
                         :accessor
                         %type-configuration-identifier-type-configuration-alias
                         :initform common-lisp:nil)
                        (type-arn :initarg :type-arn :type
                         (common-lisp:or type-arn common-lisp:null) :accessor
                         %type-configuration-identifier-type-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'type-configuration-identifier
                    'make-type-configuration-identifier))
 (common-lisp:defun make-type-configuration-identifier
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type-name type type-configuration-arn
                     type-configuration-alias type-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'type-configuration-identifier
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          type-configuration-identifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          type-configuration-identifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-arn))
      (common-lisp:list
       (common-lisp:cons "TypeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'type-configuration-alias))
      (common-lisp:list
       (common-lisp:cons "TypeConfigurationAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'type-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "TypeConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          type-configuration-identifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype type-configuration-identifiers ()
   '(trivial-types:proper-list type-configuration-identifier))
 (common-lisp:defun |make-type-configuration-identifiers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            type-configuration-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition type-configuration-not-found-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'type-configuration-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass type-filters common-lisp:nil
                       ((type-name-prefix :initarg :type-name-prefix :type
                         (common-lisp:or type-name-prefix common-lisp:null)
                         :accessor %type-filters-type-name-prefix :initform
                         common-lisp:nil)
                        (publisher-id :initarg :publisher-id :type
                         (common-lisp:or publisher-id common-lisp:null)
                         :accessor %type-filters-publisher-id :initform
                         common-lisp:nil)
                        (category :initarg :category :type
                         (common-lisp:or category common-lisp:null) :accessor
                         %type-filters-category :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'type-filters 'make-type-filters))
 (common-lisp:defun make-type-filters
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type-name-prefix publisher-id category)
   (common-lisp:apply #'common-lisp:make-instance 'type-filters
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input type-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input type-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "Category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publisher-id))
      (common-lisp:list
       (common-lisp:cons "PublisherId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name-prefix))
      (common-lisp:list
       (common-lisp:cons "TypeNamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input type-filters))
   common-lisp:nil))
(common-lisp:deftype type-hierarchy () 'common-lisp:string)
(common-lisp:deftype type-name () 'common-lisp:string)
(common-lisp:deftype type-name-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition type-not-found-exception
     (cloudformation-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'type-not-found-exception)))
(common-lisp:deftype type-schema () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype type-summaries ()
   '(trivial-types:proper-list type-summary))
 (common-lisp:defun |make-type-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list type-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass type-summary common-lisp:nil
                       ((is-activated :initarg :is-activated :type
                         (common-lisp:or is-activated common-lisp:null)
                         :accessor %type-summary-is-activated :initform
                         common-lisp:nil)
                        (publisher-name :initarg :publisher-name :type
                         (common-lisp:or publisher-name common-lisp:null)
                         :accessor %type-summary-publisher-name :initform
                         common-lisp:nil)
                        (publisher-identity :initarg :publisher-identity :type
                         (common-lisp:or identity-provider common-lisp:null)
                         :accessor %type-summary-publisher-identity :initform
                         common-lisp:nil)
                        (latest-public-version :initarg :latest-public-version
                         :type
                         (common-lisp:or public-version-number
                                         common-lisp:null)
                         :accessor %type-summary-latest-public-version
                         :initform common-lisp:nil)
                        (public-version-number :initarg :public-version-number
                         :type
                         (common-lisp:or public-version-number
                                         common-lisp:null)
                         :accessor %type-summary-public-version-number
                         :initform common-lisp:nil)
                        (original-type-name :initarg :original-type-name :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         %type-summary-original-type-name :initform
                         common-lisp:nil)
                        (publisher-id :initarg :publisher-id :type
                         (common-lisp:or publisher-id common-lisp:null)
                         :accessor %type-summary-publisher-id :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %type-summary-description :initform
                         common-lisp:nil)
                        (last-updated :initarg :last-updated :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %type-summary-last-updated :initform common-lisp:nil)
                        (type-arn :initarg :type-arn :type
                         (common-lisp:or type-arn common-lisp:null) :accessor
                         %type-summary-type-arn :initform common-lisp:nil)
                        (default-version-id :initarg :default-version-id :type
                         (common-lisp:or type-version-id common-lisp:null)
                         :accessor %type-summary-default-version-id :initform
                         common-lisp:nil)
                        (type-name :initarg :type-name :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         %type-summary-type-name :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or registry-type common-lisp:null)
                         :accessor %type-summary-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'type-summary 'make-type-summary))
 (common-lisp:defun make-type-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-activated publisher-name
                     publisher-identity latest-public-version
                     public-version-number original-type-name publisher-id
                     description last-updated type-arn default-version-id
                     type-name type)
   (common-lisp:apply #'common-lisp:make-instance 'type-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input type-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input type-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-version-id))
      (common-lisp:list
       (common-lisp:cons "DefaultVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-arn))
      (common-lisp:list
       (common-lisp:cons "TypeArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "LastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publisher-id))
      (common-lisp:list
       (common-lisp:cons "PublisherId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'original-type-name))
      (common-lisp:list
       (common-lisp:cons "OriginalTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-version-number))
      (common-lisp:list
       (common-lisp:cons "PublicVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-public-version))
      (common-lisp:list
       (common-lisp:cons "LatestPublicVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publisher-identity))
      (common-lisp:list
       (common-lisp:cons "PublisherIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publisher-name))
      (common-lisp:list
       (common-lisp:cons "PublisherName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-activated))
      (common-lisp:list
       (common-lisp:cons "IsActivated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input type-summary))
   common-lisp:nil))
(common-lisp:deftype type-tests-status () 'common-lisp:string)
(common-lisp:deftype type-tests-status-description () 'common-lisp:string)
(common-lisp:deftype type-version-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype type-version-summaries ()
   '(trivial-types:proper-list type-version-summary))
 (common-lisp:defun |make-type-version-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list type-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass type-version-summary common-lisp:nil
                       ((public-version-number :initarg :public-version-number
                         :type
                         (common-lisp:or public-version-number
                                         common-lisp:null)
                         :accessor %type-version-summary-public-version-number
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %type-version-summary-description :initform
                         common-lisp:nil)
                        (time-created :initarg :time-created :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %type-version-summary-time-created :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or type-arn common-lisp:null) :accessor
                         %type-version-summary-arn :initform common-lisp:nil)
                        (is-default-version :initarg :is-default-version :type
                         (common-lisp:or is-default-version common-lisp:null)
                         :accessor %type-version-summary-is-default-version
                         :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or type-version-id common-lisp:null)
                         :accessor %type-version-summary-version-id :initform
                         common-lisp:nil)
                        (type-name :initarg :type-name :type
                         (common-lisp:or type-name common-lisp:null) :accessor
                         %type-version-summary-type-name :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or registry-type common-lisp:null)
                         :accessor %type-version-summary-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'type-version-summary 'make-type-version-summary))
 (common-lisp:defun make-type-version-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key public-version-number description
                     time-created arn is-default-version version-id type-name
                     type)
   (common-lisp:apply #'common-lisp:make-instance 'type-version-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input type-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input type-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type-name))
      (common-lisp:list
       (common-lisp:cons "TypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default-version))
      (common-lisp:list
       (common-lisp:cons "IsDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-created))
      (common-lisp:list
       (common-lisp:cons "TimeCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-version-number))
      (common-lisp:list
       (common-lisp:cons "PublicVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input type-version-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unprocessed-type-configurations ()
   '(trivial-types:proper-list type-configuration-identifier))
 (common-lisp:defun |make-unprocessed-type-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            type-configuration-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass update-stack-input common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %update-stack-input-client-request-token
                         :initform common-lisp:nil)
                        (disable-rollback :initarg :disable-rollback :type
                         (common-lisp:or disable-rollback common-lisp:null)
                         :accessor %update-stack-input-disable-rollback
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %update-stack-input-tags :initform common-lisp:nil)
                        (notification-arns :initarg :notification-arns :type
                         (common-lisp:or notification-arns common-lisp:null)
                         :accessor %update-stack-input-notification-arns
                         :initform common-lisp:nil)
                        (stack-policy-url :initarg :stack-policy-url :type
                         (common-lisp:or stack-policy-url common-lisp:null)
                         :accessor %update-stack-input-stack-policy-url
                         :initform common-lisp:nil)
                        (stack-policy-body :initarg :stack-policy-body :type
                         (common-lisp:or stack-policy-body common-lisp:null)
                         :accessor %update-stack-input-stack-policy-body
                         :initform common-lisp:nil)
                        (rollback-configuration :initarg
                         :rollback-configuration :type
                         (common-lisp:or rollback-configuration
                                         common-lisp:null)
                         :accessor %update-stack-input-rollback-configuration
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %update-stack-input-role-arn :initform
                         common-lisp:nil)
                        (resource-types :initarg :resource-types :type
                         (common-lisp:or resource-types common-lisp:null)
                         :accessor %update-stack-input-resource-types :initform
                         common-lisp:nil)
                        (capabilities :initarg :capabilities :type
                         (common-lisp:or capabilities common-lisp:null)
                         :accessor %update-stack-input-capabilities :initform
                         common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameters common-lisp:null) :accessor
                         %update-stack-input-parameters :initform
                         common-lisp:nil)
                        (stack-policy-during-update-url :initarg
                         :stack-policy-during-update-url :type
                         (common-lisp:or stack-policy-during-update-url
                                         common-lisp:null)
                         :accessor
                         %update-stack-input-stack-policy-during-update-url
                         :initform common-lisp:nil)
                        (stack-policy-during-update-body :initarg
                         :stack-policy-during-update-body :type
                         (common-lisp:or stack-policy-during-update-body
                                         common-lisp:null)
                         :accessor
                         %update-stack-input-stack-policy-during-update-body
                         :initform common-lisp:nil)
                        (use-previous-template :initarg :use-previous-template
                         :type
                         (common-lisp:or use-previous-template
                                         common-lisp:null)
                         :accessor %update-stack-input-use-previous-template
                         :initform common-lisp:nil)
                        (template-url :initarg :template-url :type
                         (common-lisp:or template-url common-lisp:null)
                         :accessor %update-stack-input-template-url :initform
                         common-lisp:nil)
                        (template-body :initarg :template-body :type
                         (common-lisp:or template-body common-lisp:null)
                         :accessor %update-stack-input-template-body :initform
                         common-lisp:nil)
                        (stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name common-lisp:null) :accessor
                         %update-stack-input-stack-name :initform
                         (common-lisp:error ":stack-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-stack-input 'make-update-stack-input))
 (common-lisp:defun make-update-stack-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token disable-rollback
                     tags notification-arns stack-policy-url stack-policy-body
                     rollback-configuration role-arn resource-types
                     capabilities parameters stack-policy-during-update-url
                     stack-policy-during-update-body use-previous-template
                     template-url template-body stack-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-stack-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-stack-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-stack-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "TemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "TemplateURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-previous-template))
      (common-lisp:list
       (common-lisp:cons "UsePreviousTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-policy-during-update-body))
      (common-lisp:list
       (common-lisp:cons "StackPolicyDuringUpdateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stack-policy-during-update-url))
      (common-lisp:list
       (common-lisp:cons "StackPolicyDuringUpdateURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-types))
      (common-lisp:list
       (common-lisp:cons "ResourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rollback-configuration))
      (common-lisp:list
       (common-lisp:cons "RollbackConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-policy-body))
      (common-lisp:list
       (common-lisp:cons "StackPolicyBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-policy-url))
      (common-lisp:list
       (common-lisp:cons "StackPolicyURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-arns))
      (common-lisp:list
       (common-lisp:cons "NotificationARNs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-rollback))
      (common-lisp:list
       (common-lisp:cons "DisableRollback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-stack-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-stack-instances-input common-lisp:nil
                       ((call-as :initarg :call-as :type
                         (common-lisp:or call-as common-lisp:null) :accessor
                         %update-stack-instances-input-call-as :initform
                         common-lisp:nil)
                        (operation-id :initarg :operation-id :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %update-stack-instances-input-operation-id
                         :initform common-lisp:nil)
                        (operation-preferences :initarg :operation-preferences
                         :type
                         (common-lisp:or stack-set-operation-preferences
                                         common-lisp:null)
                         :accessor
                         %update-stack-instances-input-operation-preferences
                         :initform common-lisp:nil)
                        (parameter-overrides :initarg :parameter-overrides
                         :type (common-lisp:or parameters common-lisp:null)
                         :accessor
                         %update-stack-instances-input-parameter-overrides
                         :initform common-lisp:nil)
                        (regions :initarg :regions :type
                         (common-lisp:or region-list common-lisp:null)
                         :accessor %update-stack-instances-input-regions
                         :initform (common-lisp:error ":regions is required"))
                        (deployment-targets :initarg :deployment-targets :type
                         (common-lisp:or deployment-targets common-lisp:null)
                         :accessor
                         %update-stack-instances-input-deployment-targets
                         :initform common-lisp:nil)
                        (accounts :initarg :accounts :type
                         (common-lisp:or account-list common-lisp:null)
                         :accessor %update-stack-instances-input-accounts
                         :initform common-lisp:nil)
                        (stack-set-name :initarg :stack-set-name :type
                         (common-lisp:or stack-set-name-or-id common-lisp:null)
                         :accessor %update-stack-instances-input-stack-set-name
                         :initform
                         (common-lisp:error ":stack-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-stack-instances-input
                    'make-update-stack-instances-input))
 (common-lisp:defun make-update-stack-instances-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key call-as operation-id
                     operation-preferences parameter-overrides regions
                     deployment-targets accounts stack-set-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-stack-instances-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-stack-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-stack-instances-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts))
      (common-lisp:list
       (common-lisp:cons "Accounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-targets))
      (common-lisp:list
       (common-lisp:cons "DeploymentTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-overrides))
      (common-lisp:list
       (common-lisp:cons "ParameterOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-preferences))
      (common-lisp:list
       (common-lisp:cons "OperationPreferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'call-as))
      (common-lisp:list
       (common-lisp:cons "CallAs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-stack-instances-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-stack-instances-output common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %update-stack-instances-output-operation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-stack-instances-output
                    'make-update-stack-instances-output))
 (common-lisp:defun make-update-stack-instances-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-stack-instances-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-stack-instances-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-stack-instances-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-stack-instances-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-stack-output common-lisp:nil
                       ((stack-id :initarg :stack-id :type
                         (common-lisp:or stack-id common-lisp:null) :accessor
                         %update-stack-output-stack-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-stack-output 'make-update-stack-output))
 (common-lisp:defun make-update-stack-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-stack-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-stack-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-stack-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-stack-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-stack-set-input common-lisp:nil
                       ((managed-execution :initarg :managed-execution :type
                         (common-lisp:or managed-execution common-lisp:null)
                         :accessor %update-stack-set-input-managed-execution
                         :initform common-lisp:nil)
                        (call-as :initarg :call-as :type
                         (common-lisp:or call-as common-lisp:null) :accessor
                         %update-stack-set-input-call-as :initform
                         common-lisp:nil)
                        (regions :initarg :regions :type
                         (common-lisp:or region-list common-lisp:null)
                         :accessor %update-stack-set-input-regions :initform
                         common-lisp:nil)
                        (accounts :initarg :accounts :type
                         (common-lisp:or account-list common-lisp:null)
                         :accessor %update-stack-set-input-accounts :initform
                         common-lisp:nil)
                        (operation-id :initarg :operation-id :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %update-stack-set-input-operation-id
                         :initform common-lisp:nil)
                        (auto-deployment :initarg :auto-deployment :type
                         (common-lisp:or auto-deployment common-lisp:null)
                         :accessor %update-stack-set-input-auto-deployment
                         :initform common-lisp:nil)
                        (permission-model :initarg :permission-model :type
                         (common-lisp:or permission-models common-lisp:null)
                         :accessor %update-stack-set-input-permission-model
                         :initform common-lisp:nil)
                        (deployment-targets :initarg :deployment-targets :type
                         (common-lisp:or deployment-targets common-lisp:null)
                         :accessor %update-stack-set-input-deployment-targets
                         :initform common-lisp:nil)
                        (execution-role-name :initarg :execution-role-name
                         :type
                         (common-lisp:or execution-role-name common-lisp:null)
                         :accessor %update-stack-set-input-execution-role-name
                         :initform common-lisp:nil)
                        (administration-role-arn :initarg
                         :administration-role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %update-stack-set-input-administration-role-arn
                         :initform common-lisp:nil)
                        (operation-preferences :initarg :operation-preferences
                         :type
                         (common-lisp:or stack-set-operation-preferences
                                         common-lisp:null)
                         :accessor
                         %update-stack-set-input-operation-preferences
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %update-stack-set-input-tags :initform
                         common-lisp:nil)
                        (capabilities :initarg :capabilities :type
                         (common-lisp:or capabilities common-lisp:null)
                         :accessor %update-stack-set-input-capabilities
                         :initform common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or parameters common-lisp:null) :accessor
                         %update-stack-set-input-parameters :initform
                         common-lisp:nil)
                        (use-previous-template :initarg :use-previous-template
                         :type
                         (common-lisp:or use-previous-template
                                         common-lisp:null)
                         :accessor
                         %update-stack-set-input-use-previous-template
                         :initform common-lisp:nil)
                        (template-url :initarg :template-url :type
                         (common-lisp:or template-url common-lisp:null)
                         :accessor %update-stack-set-input-template-url
                         :initform common-lisp:nil)
                        (template-body :initarg :template-body :type
                         (common-lisp:or template-body common-lisp:null)
                         :accessor %update-stack-set-input-template-body
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-stack-set-input-description
                         :initform common-lisp:nil)
                        (stack-set-name :initarg :stack-set-name :type
                         (common-lisp:or stack-set-name common-lisp:null)
                         :accessor %update-stack-set-input-stack-set-name
                         :initform
                         (common-lisp:error ":stack-set-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-stack-set-input 'make-update-stack-set-input))
 (common-lisp:defun make-update-stack-set-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key managed-execution call-as regions
                     accounts operation-id auto-deployment permission-model
                     deployment-targets execution-role-name
                     administration-role-arn operation-preferences tags
                     capabilities parameters use-previous-template template-url
                     template-body description stack-set-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-stack-set-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-stack-set-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-stack-set-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-set-name))
      (common-lisp:list
       (common-lisp:cons "StackSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "TemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "TemplateURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-previous-template))
      (common-lisp:list
       (common-lisp:cons "UsePreviousTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-preferences))
      (common-lisp:list
       (common-lisp:cons "OperationPreferences"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'administration-role-arn))
      (common-lisp:list
       (common-lisp:cons "AdministrationRoleARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-name))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-targets))
      (common-lisp:list
       (common-lisp:cons "DeploymentTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission-model))
      (common-lisp:list
       (common-lisp:cons "PermissionModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-deployment))
      (common-lisp:list
       (common-lisp:cons "AutoDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accounts))
      (common-lisp:list
       (common-lisp:cons "Accounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "Regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'call-as))
      (common-lisp:list
       (common-lisp:cons "CallAs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-execution))
      (common-lisp:list
       (common-lisp:cons "ManagedExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-stack-set-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-stack-set-output common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor %update-stack-set-output-operation-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-stack-set-output 'make-update-stack-set-output))
 (common-lisp:defun make-update-stack-set-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-stack-set-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-stack-set-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-stack-set-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-stack-set-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-termination-protection-input common-lisp:nil
                       ((stack-name :initarg :stack-name :type
                         (common-lisp:or stack-name-or-id common-lisp:null)
                         :accessor
                         %update-termination-protection-input-stack-name
                         :initform
                         (common-lisp:error ":stack-name is required"))
                        (enable-termination-protection :initarg
                         :enable-termination-protection :type
                         (common-lisp:or enable-termination-protection
                                         common-lisp:null)
                         :accessor
                         %update-termination-protection-input-enable-termination-protection
                         :initform
                         (common-lisp:error
                          ":enable-termination-protection is required"))))
 (common-lisp:export
  (common-lisp:list 'update-termination-protection-input
                    'make-update-termination-protection-input))
 (common-lisp:defun make-update-termination-protection-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-name enable-termination-protection)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-termination-protection-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-termination-protection-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-termination-protection-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-termination-protection))
      (common-lisp:list
       (common-lisp:cons "EnableTerminationProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-name))
      (common-lisp:list
       (common-lisp:cons "StackName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-termination-protection-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-termination-protection-output common-lisp:nil
                       ((stack-id :initarg :stack-id :type
                         (common-lisp:or stack-id common-lisp:null) :accessor
                         %update-termination-protection-output-stack-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-termination-protection-output
                    'make-update-termination-protection-output))
 (common-lisp:defun make-update-termination-protection-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stack-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-termination-protection-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-termination-protection-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-termination-protection-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stack-id))
      (common-lisp:list
       (common-lisp:cons "StackId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-termination-protection-output))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:deftype use-previous-template () 'common-lisp:boolean)
(common-lisp:deftype use-previous-value () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass validate-template-input common-lisp:nil
                       ((template-url :initarg :template-url :type
                         (common-lisp:or template-url common-lisp:null)
                         :accessor %validate-template-input-template-url
                         :initform common-lisp:nil)
                        (template-body :initarg :template-body :type
                         (common-lisp:or template-body common-lisp:null)
                         :accessor %validate-template-input-template-body
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'validate-template-input 'make-validate-template-input))
 (common-lisp:defun make-validate-template-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key template-url template-body)
   (common-lisp:apply #'common-lisp:make-instance 'validate-template-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-template-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-template-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-body))
      (common-lisp:list
       (common-lisp:cons "TemplateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'template-url))
      (common-lisp:list
       (common-lisp:cons "TemplateURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-template-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass validate-template-output common-lisp:nil
                       ((declared-transforms :initarg :declared-transforms
                         :type
                         (common-lisp:or transforms-list common-lisp:null)
                         :accessor
                         %validate-template-output-declared-transforms
                         :initform common-lisp:nil)
                        (capabilities-reason :initarg :capabilities-reason
                         :type
                         (common-lisp:or capabilities-reason common-lisp:null)
                         :accessor
                         %validate-template-output-capabilities-reason
                         :initform common-lisp:nil)
                        (capabilities :initarg :capabilities :type
                         (common-lisp:or capabilities common-lisp:null)
                         :accessor %validate-template-output-capabilities
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %validate-template-output-description
                         :initform common-lisp:nil)
                        (parameters :initarg :parameters :type
                         (common-lisp:or template-parameters common-lisp:null)
                         :accessor %validate-template-output-parameters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'validate-template-output 'make-validate-template-output))
 (common-lisp:defun make-validate-template-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key declared-transforms capabilities-reason
                     capabilities description parameters)
   (common-lisp:apply #'common-lisp:make-instance 'validate-template-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validate-template-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validate-template-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities))
      (common-lisp:list
       (common-lisp:cons "Capabilities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capabilities-reason))
      (common-lisp:list
       (common-lisp:cons "CapabilitiesReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'declared-transforms))
      (common-lisp:list
       (common-lisp:cons "DeclaredTransforms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validate-template-output))
   common-lisp:nil))
(common-lisp:deftype value () 'common-lisp:string)
(common-lisp:deftype version () 'common-lisp:string)
(common-lisp:deftype version-bump () 'common-lisp:string)
(common-lisp:deftype visibility () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun activate-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key type public-type-arn publisher-id
                     type-name type-name-alias auto-update logging-config
                     execution-role-arn version-bump major-version)
   (common-lisp:declare
    (common-lisp:ignorable type public-type-arn publisher-id type-name
     type-name-alias auto-update logging-config execution-role-arn version-bump
     major-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-activate-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ActivateType"
                                                        "2010-05-15"))
      common-lisp:nil "ActivateTypeResult" *error-map*)))
 (common-lisp:export 'activate-type))
(common-lisp:progn
 (common-lisp:defun batch-describe-type-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key type-configuration-identifiers)
   (common-lisp:declare (common-lisp:ignorable type-configuration-identifiers))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-describe-type-configurations-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "BatchDescribeTypeConfigurations"
                                                        "2010-05-15"))
      common-lisp:nil "BatchDescribeTypeConfigurationsResult" *error-map*)))
 (common-lisp:export 'batch-describe-type-configurations))
(common-lisp:progn
 (common-lisp:defun cancel-update-stack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable stack-name client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-update-stack-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CancelUpdateStack"
                                                        "2010-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-update-stack))
(common-lisp:progn
 (common-lisp:defun continue-update-rollback
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name role-arn resources-to-skip
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable stack-name role-arn resources-to-skip
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-continue-update-rollback-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ContinueUpdateRollback"
                                                        "2010-05-15"))
      common-lisp:nil "ContinueUpdateRollbackResult" *error-map*)))
 (common-lisp:export 'continue-update-rollback))
(common-lisp:progn
 (common-lisp:defun create-change-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name template-body template-url
                     use-previous-template parameters capabilities
                     resource-types role-arn rollback-configuration
                     notification-arns tags change-set-name client-token
                     description change-set-type resources-to-import
                     include-nested-stacks)
   (common-lisp:declare
    (common-lisp:ignorable stack-name template-body template-url
     use-previous-template parameters capabilities resource-types role-arn
     rollback-configuration notification-arns tags change-set-name client-token
     description change-set-type resources-to-import include-nested-stacks))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-change-set-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateChangeSet"
                                                        "2010-05-15"))
      common-lisp:nil "CreateChangeSetResult" *error-map*)))
 (common-lisp:export 'create-change-set))
(common-lisp:progn
 (common-lisp:defun create-stack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name template-body template-url
                     parameters disable-rollback rollback-configuration
                     timeout-in-minutes notification-arns capabilities
                     resource-types role-arn on-failure stack-policy-body
                     stack-policy-url tags client-request-token
                     enable-termination-protection)
   (common-lisp:declare
    (common-lisp:ignorable stack-name template-body template-url parameters
     disable-rollback rollback-configuration timeout-in-minutes
     notification-arns capabilities resource-types role-arn on-failure
     stack-policy-body stack-policy-url tags client-request-token
     enable-termination-protection))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-stack-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateStack"
                                                        "2010-05-15"))
      common-lisp:nil "CreateStackResult" *error-map*)))
 (common-lisp:export 'create-stack))
(common-lisp:progn
 (common-lisp:defun create-stack-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name accounts
                     deployment-targets regions parameter-overrides
                     operation-preferences operation-id call-as)
   (common-lisp:declare
    (common-lisp:ignorable stack-set-name accounts deployment-targets regions
     parameter-overrides operation-preferences operation-id call-as))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-stack-instances-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateStackInstances"
                                                        "2010-05-15"))
      common-lisp:nil "CreateStackInstancesResult" *error-map*)))
 (common-lisp:export 'create-stack-instances))
(common-lisp:progn
 (common-lisp:defun create-stack-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name description template-body
                     template-url stack-id parameters capabilities tags
                     administration-role-arn execution-role-name
                     permission-model auto-deployment call-as
                     client-request-token managed-execution)
   (common-lisp:declare
    (common-lisp:ignorable stack-set-name description template-body
     template-url stack-id parameters capabilities tags administration-role-arn
     execution-role-name permission-model auto-deployment call-as
     client-request-token managed-execution))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-stack-set-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "CreateStackSet"
                                                        "2010-05-15"))
      common-lisp:nil "CreateStackSetResult" *error-map*)))
 (common-lisp:export 'create-stack-set))
(common-lisp:progn
 (common-lisp:defun deactivate-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key type-name type arn)
   (common-lisp:declare (common-lisp:ignorable type-name type arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deactivate-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeactivateType"
                                                        "2010-05-15"))
      common-lisp:nil "DeactivateTypeResult" *error-map*)))
 (common-lisp:export 'deactivate-type))
(common-lisp:progn
 (common-lisp:defun delete-change-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key change-set-name stack-name)
   (common-lisp:declare (common-lisp:ignorable change-set-name stack-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-change-set-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteChangeSet"
                                                        "2010-05-15"))
      common-lisp:nil "DeleteChangeSetResult" *error-map*)))
 (common-lisp:export 'delete-change-set))
(common-lisp:progn
 (common-lisp:defun delete-stack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name retain-resources role-arn
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable stack-name retain-resources role-arn
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-stack-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteStack"
                                                        "2010-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-stack))
(common-lisp:progn
 (common-lisp:defun delete-stack-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name accounts
                     deployment-targets regions operation-preferences
                     retain-stacks operation-id call-as)
   (common-lisp:declare
    (common-lisp:ignorable stack-set-name accounts deployment-targets regions
     operation-preferences retain-stacks operation-id call-as))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-stack-instances-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteStackInstances"
                                                        "2010-05-15"))
      common-lisp:nil "DeleteStackInstancesResult" *error-map*)))
 (common-lisp:export 'delete-stack-instances))
(common-lisp:progn
 (common-lisp:defun delete-stack-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name call-as)
   (common-lisp:declare (common-lisp:ignorable stack-set-name call-as))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-stack-set-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeleteStackSet"
                                                        "2010-05-15"))
      common-lisp:nil "DeleteStackSetResult" *error-map*)))
 (common-lisp:export 'delete-stack-set))
(common-lisp:progn
 (common-lisp:defun deregister-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn type type-name version-id)
   (common-lisp:declare (common-lisp:ignorable arn type type-name version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deregister-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DeregisterType"
                                                        "2010-05-15"))
      common-lisp:nil "DeregisterTypeResult" *error-map*)))
 (common-lisp:export 'deregister-type))
(common-lisp:progn
 (common-lisp:defun describe-account-limits
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-account-limits-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeAccountLimits"
                                                        "2010-05-15"))
      common-lisp:nil "DescribeAccountLimitsResult" *error-map*)))
 (common-lisp:export 'describe-account-limits))
(common-lisp:progn
 (common-lisp:defun describe-change-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key change-set-name stack-name next-token)
   (common-lisp:declare
    (common-lisp:ignorable change-set-name stack-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-change-set-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeChangeSet"
                                                        "2010-05-15"))
      common-lisp:nil "DescribeChangeSetResult" *error-map*)))
 (common-lisp:export 'describe-change-set))
(common-lisp:progn
 (common-lisp:defun describe-change-set-hooks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key change-set-name stack-name next-token
                     logical-resource-id)
   (common-lisp:declare
    (common-lisp:ignorable change-set-name stack-name next-token
     logical-resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-change-set-hooks-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeChangeSetHooks"
                                                        "2010-05-15"))
      common-lisp:nil "DescribeChangeSetHooksResult" *error-map*)))
 (common-lisp:export 'describe-change-set-hooks))
(common-lisp:progn
 (common-lisp:defun describe-publisher
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key publisher-id)
   (common-lisp:declare (common-lisp:ignorable publisher-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-publisher-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribePublisher"
                                                        "2010-05-15"))
      common-lisp:nil "DescribePublisherResult" *error-map*)))
 (common-lisp:export 'describe-publisher))
(common-lisp:progn
 (common-lisp:defun describe-stack-drift-detection-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-drift-detection-id)
   (common-lisp:declare (common-lisp:ignorable stack-drift-detection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-stack-drift-detection-status-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeStackDriftDetectionStatus"
                                                        "2010-05-15"))
      common-lisp:nil "DescribeStackDriftDetectionStatusResult" *error-map*)))
 (common-lisp:export 'describe-stack-drift-detection-status))
(common-lisp:progn
 (common-lisp:defun describe-stack-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name next-token)
   (common-lisp:declare (common-lisp:ignorable stack-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-stack-events-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeStackEvents"
                                                        "2010-05-15"))
      common-lisp:nil "DescribeStackEventsResult" *error-map*)))
 (common-lisp:export 'describe-stack-events))
(common-lisp:progn
 (common-lisp:defun describe-stack-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name stack-instance-account
                     stack-instance-region call-as)
   (common-lisp:declare
    (common-lisp:ignorable stack-set-name stack-instance-account
     stack-instance-region call-as))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-stack-instance-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeStackInstance"
                                                        "2010-05-15"))
      common-lisp:nil "DescribeStackInstanceResult" *error-map*)))
 (common-lisp:export 'describe-stack-instance))
(common-lisp:progn
 (common-lisp:defun describe-stack-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name logical-resource-id)
   (common-lisp:declare (common-lisp:ignorable stack-name logical-resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-stack-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeStackResource"
                                                        "2010-05-15"))
      common-lisp:nil "DescribeStackResourceResult" *error-map*)))
 (common-lisp:export 'describe-stack-resource))
(common-lisp:progn
 (common-lisp:defun describe-stack-resource-drifts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name
                     stack-resource-drift-status-filters next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable stack-name stack-resource-drift-status-filters
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-stack-resource-drifts-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeStackResourceDrifts"
                                                        "2010-05-15"))
      common-lisp:nil "DescribeStackResourceDriftsResult" *error-map*)))
 (common-lisp:export 'describe-stack-resource-drifts))
(common-lisp:progn
 (common-lisp:defun describe-stack-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name logical-resource-id
                     physical-resource-id)
   (common-lisp:declare
    (common-lisp:ignorable stack-name logical-resource-id
     physical-resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-stack-resources-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeStackResources"
                                                        "2010-05-15"))
      common-lisp:nil "DescribeStackResourcesResult" *error-map*)))
 (common-lisp:export 'describe-stack-resources))
(common-lisp:progn
 (common-lisp:defun describe-stack-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name call-as)
   (common-lisp:declare (common-lisp:ignorable stack-set-name call-as))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-stack-set-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeStackSet"
                                                        "2010-05-15"))
      common-lisp:nil "DescribeStackSetResult" *error-map*)))
 (common-lisp:export 'describe-stack-set))
(common-lisp:progn
 (common-lisp:defun describe-stack-set-operation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name operation-id call-as)
   (common-lisp:declare
    (common-lisp:ignorable stack-set-name operation-id call-as))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-stack-set-operation-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeStackSetOperation"
                                                        "2010-05-15"))
      common-lisp:nil "DescribeStackSetOperationResult" *error-map*)))
 (common-lisp:export 'describe-stack-set-operation))
(common-lisp:progn
 (common-lisp:defun describe-stacks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name next-token)
   (common-lisp:declare (common-lisp:ignorable stack-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-stacks-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeStacks"
                                                        "2010-05-15"))
      common-lisp:nil "DescribeStacksResult" *error-map*)))
 (common-lisp:export 'describe-stacks))
(common-lisp:progn
 (common-lisp:defun describe-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key type type-name arn version-id
                     publisher-id public-version-number)
   (common-lisp:declare
    (common-lisp:ignorable type type-name arn version-id publisher-id
     public-version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeType"
                                                        "2010-05-15"))
      common-lisp:nil "DescribeTypeResult" *error-map*)))
 (common-lisp:export 'describe-type))
(common-lisp:progn
 (common-lisp:defun describe-type-registration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key registration-token)
   (common-lisp:declare (common-lisp:ignorable registration-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-type-registration-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DescribeTypeRegistration"
                                                        "2010-05-15"))
      common-lisp:nil "DescribeTypeRegistrationResult" *error-map*)))
 (common-lisp:export 'describe-type-registration))
(common-lisp:progn
 (common-lisp:defun detect-stack-drift
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name logical-resource-ids)
   (common-lisp:declare
    (common-lisp:ignorable stack-name logical-resource-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detect-stack-drift-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DetectStackDrift"
                                                        "2010-05-15"))
      common-lisp:nil "DetectStackDriftResult" *error-map*)))
 (common-lisp:export 'detect-stack-drift))
(common-lisp:progn
 (common-lisp:defun detect-stack-resource-drift
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name logical-resource-id)
   (common-lisp:declare (common-lisp:ignorable stack-name logical-resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-detect-stack-resource-drift-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DetectStackResourceDrift"
                                                        "2010-05-15"))
      common-lisp:nil "DetectStackResourceDriftResult" *error-map*)))
 (common-lisp:export 'detect-stack-resource-drift))
(common-lisp:progn
 (common-lisp:defun detect-stack-set-drift
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name operation-preferences
                     operation-id call-as)
   (common-lisp:declare
    (common-lisp:ignorable stack-set-name operation-preferences operation-id
     call-as))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detect-stack-set-drift-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "DetectStackSetDrift"
                                                        "2010-05-15"))
      common-lisp:nil "DetectStackSetDriftResult" *error-map*)))
 (common-lisp:export 'detect-stack-set-drift))
(common-lisp:progn
 (common-lisp:defun estimate-template-cost
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-body template-url parameters)
   (common-lisp:declare
    (common-lisp:ignorable template-body template-url parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-estimate-template-cost-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "EstimateTemplateCost"
                                                        "2010-05-15"))
      common-lisp:nil "EstimateTemplateCostResult" *error-map*)))
 (common-lisp:export 'estimate-template-cost))
(common-lisp:progn
 (common-lisp:defun execute-change-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key change-set-name stack-name
                     client-request-token disable-rollback)
   (common-lisp:declare
    (common-lisp:ignorable change-set-name stack-name client-request-token
     disable-rollback))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-execute-change-set-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ExecuteChangeSet"
                                                        "2010-05-15"))
      common-lisp:nil "ExecuteChangeSetResult" *error-map*)))
 (common-lisp:export 'execute-change-set))
(common-lisp:progn
 (common-lisp:defun get-stack-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name)
   (common-lisp:declare (common-lisp:ignorable stack-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-stack-policy-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "GetStackPolicy"
                                                        "2010-05-15"))
      common-lisp:nil "GetStackPolicyResult" *error-map*)))
 (common-lisp:export 'get-stack-policy))
(common-lisp:progn
 (common-lisp:defun get-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name change-set-name
                     template-stage)
   (common-lisp:declare
    (common-lisp:ignorable stack-name change-set-name template-stage))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "GetTemplate"
                                                        "2010-05-15"))
      common-lisp:nil "GetTemplateResult" *error-map*)))
 (common-lisp:export 'get-template))
(common-lisp:progn
 (common-lisp:defun get-template-summary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-body template-url stack-name
                     stack-set-name call-as)
   (common-lisp:declare
    (common-lisp:ignorable template-body template-url stack-name stack-set-name
     call-as))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-template-summary-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "GetTemplateSummary"
                                                        "2010-05-15"))
      common-lisp:nil "GetTemplateSummaryResult" *error-map*)))
 (common-lisp:export 'get-template-summary))
(common-lisp:progn
 (common-lisp:defun import-stacks-to-stack-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name stack-ids stack-ids-url
                     organizational-unit-ids operation-preferences operation-id
                     call-as)
   (common-lisp:declare
    (common-lisp:ignorable stack-set-name stack-ids stack-ids-url
     organizational-unit-ids operation-preferences operation-id call-as))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-stacks-to-stack-set-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ImportStacksToStackSet"
                                                        "2010-05-15"))
      common-lisp:nil "ImportStacksToStackSetResult" *error-map*)))
 (common-lisp:export 'import-stacks-to-stack-set))
(common-lisp:progn
 (common-lisp:defun list-change-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name next-token)
   (common-lisp:declare (common-lisp:ignorable stack-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-change-sets-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ListChangeSets"
                                                        "2010-05-15"))
      common-lisp:nil "ListChangeSetsResult" *error-map*)))
 (common-lisp:export 'list-change-sets))
(common-lisp:progn
 (common-lisp:defun list-exports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-exports-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ListExports"
                                                        "2010-05-15"))
      common-lisp:nil "ListExportsResult" *error-map*)))
 (common-lisp:export 'list-exports))
(common-lisp:progn
 (common-lisp:defun list-imports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key export-name next-token)
   (common-lisp:declare (common-lisp:ignorable export-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-imports-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ListImports"
                                                        "2010-05-15"))
      common-lisp:nil "ListImportsResult" *error-map*)))
 (common-lisp:export 'list-imports))
(common-lisp:progn
 (common-lisp:defun list-stack-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name next-token max-results
                     filters stack-instance-account stack-instance-region
                     call-as)
   (common-lisp:declare
    (common-lisp:ignorable stack-set-name next-token max-results filters
     stack-instance-account stack-instance-region call-as))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-stack-instances-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ListStackInstances"
                                                        "2010-05-15"))
      common-lisp:nil "ListStackInstancesResult" *error-map*)))
 (common-lisp:export 'list-stack-instances))
(common-lisp:progn
 (common-lisp:defun list-stack-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name next-token)
   (common-lisp:declare (common-lisp:ignorable stack-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-stack-resources-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ListStackResources"
                                                        "2010-05-15"))
      common-lisp:nil "ListStackResourcesResult" *error-map*)))
 (common-lisp:export 'list-stack-resources))
(common-lisp:progn
 (common-lisp:defun list-stack-set-operation-results
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name operation-id next-token
                     max-results call-as filters)
   (common-lisp:declare
    (common-lisp:ignorable stack-set-name operation-id next-token max-results
     call-as filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-stack-set-operation-results-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ListStackSetOperationResults"
                                                        "2010-05-15"))
      common-lisp:nil "ListStackSetOperationResultsResult" *error-map*)))
 (common-lisp:export 'list-stack-set-operation-results))
(common-lisp:progn
 (common-lisp:defun list-stack-set-operations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name next-token max-results
                     call-as)
   (common-lisp:declare
    (common-lisp:ignorable stack-set-name next-token max-results call-as))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-stack-set-operations-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ListStackSetOperations"
                                                        "2010-05-15"))
      common-lisp:nil "ListStackSetOperationsResult" *error-map*)))
 (common-lisp:export 'list-stack-set-operations))
(common-lisp:progn
 (common-lisp:defun list-stack-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results status call-as)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results status call-as))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-stack-sets-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ListStackSets"
                                                        "2010-05-15"))
      common-lisp:nil "ListStackSetsResult" *error-map*)))
 (common-lisp:export 'list-stack-sets))
(common-lisp:progn
 (common-lisp:defun list-stacks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token stack-status-filter)
   (common-lisp:declare (common-lisp:ignorable next-token stack-status-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-stacks-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ListStacks"
                                                        "2010-05-15"))
      common-lisp:nil "ListStacksResult" *error-map*)))
 (common-lisp:export 'list-stacks))
(common-lisp:progn
 (common-lisp:defun list-type-registrations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key type type-name type-arn
                     registration-status-filter max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable type type-name type-arn registration-status-filter
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-type-registrations-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ListTypeRegistrations"
                                                        "2010-05-15"))
      common-lisp:nil "ListTypeRegistrationsResult" *error-map*)))
 (common-lisp:export 'list-type-registrations))
(common-lisp:progn
 (common-lisp:defun list-type-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key type type-name arn max-results next-token
                     deprecated-status publisher-id)
   (common-lisp:declare
    (common-lisp:ignorable type type-name arn max-results next-token
     deprecated-status publisher-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-type-versions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ListTypeVersions"
                                                        "2010-05-15"))
      common-lisp:nil "ListTypeVersionsResult" *error-map*)))
 (common-lisp:export 'list-type-versions))
(common-lisp:progn
 (common-lisp:defun list-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key visibility provisioning-type
                     deprecated-status type filters max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable visibility provisioning-type deprecated-status type
     filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-types-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ListTypes"
                                                        "2010-05-15"))
      common-lisp:nil "ListTypesResult" *error-map*)))
 (common-lisp:export 'list-types))
(common-lisp:progn
 (common-lisp:defun publish-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key type arn type-name public-version-number)
   (common-lisp:declare
    (common-lisp:ignorable type arn type-name public-version-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-publish-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "PublishType"
                                                        "2010-05-15"))
      common-lisp:nil "PublishTypeResult" *error-map*)))
 (common-lisp:export 'publish-type))
(common-lisp:progn
 (common-lisp:defun record-handler-progress
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bearer-token operation-status
                     current-operation-status status-message error-code
                     resource-model client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable bearer-token operation-status
     current-operation-status status-message error-code resource-model
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-record-handler-progress-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "RecordHandlerProgress"
                                                        "2010-05-15"))
      common-lisp:nil "RecordHandlerProgressResult" *error-map*)))
 (common-lisp:export 'record-handler-progress))
(common-lisp:progn
 (common-lisp:defun register-publisher
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept-terms-and-conditions
                     connection-arn)
   (common-lisp:declare
    (common-lisp:ignorable accept-terms-and-conditions connection-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-publisher-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "RegisterPublisher"
                                                        "2010-05-15"))
      common-lisp:nil "RegisterPublisherResult" *error-map*)))
 (common-lisp:export 'register-publisher))
(common-lisp:progn
 (common-lisp:defun register-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key type type-name schema-handler-package
                     logging-config execution-role-arn client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable type type-name schema-handler-package logging-config
     execution-role-arn client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "RegisterType"
                                                        "2010-05-15"))
      common-lisp:nil "RegisterTypeResult" *error-map*)))
 (common-lisp:export 'register-type))
(common-lisp:progn
 (common-lisp:defun rollback-stack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name role-arn client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable stack-name role-arn client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-rollback-stack-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "RollbackStack"
                                                        "2010-05-15"))
      common-lisp:nil "RollbackStackResult" *error-map*)))
 (common-lisp:export 'rollback-stack))
(common-lisp:progn
 (common-lisp:defun set-stack-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name stack-policy-body
                     stack-policy-url)
   (common-lisp:declare
    (common-lisp:ignorable stack-name stack-policy-body stack-policy-url))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-stack-policy-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "SetStackPolicy"
                                                        "2010-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-stack-policy))
(common-lisp:progn
 (common-lisp:defun set-type-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key type-arn configuration
                     configuration-alias type-name type)
   (common-lisp:declare
    (common-lisp:ignorable type-arn configuration configuration-alias type-name
     type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-type-configuration-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "SetTypeConfiguration"
                                                        "2010-05-15"))
      common-lisp:nil "SetTypeConfigurationResult" *error-map*)))
 (common-lisp:export 'set-type-configuration))
(common-lisp:progn
 (common-lisp:defun set-type-default-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn type type-name version-id)
   (common-lisp:declare (common-lisp:ignorable arn type type-name version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-type-default-version-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "SetTypeDefaultVersion"
                                                        "2010-05-15"))
      common-lisp:nil "SetTypeDefaultVersionResult" *error-map*)))
 (common-lisp:export 'set-type-default-version))
(common-lisp:progn
 (common-lisp:defun signal-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name logical-resource-id unique-id
                     status)
   (common-lisp:declare
    (common-lisp:ignorable stack-name logical-resource-id unique-id status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-signal-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "SignalResource"
                                                        "2010-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'signal-resource))
(common-lisp:progn
 (common-lisp:defun stop-stack-set-operation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name operation-id call-as)
   (common-lisp:declare
    (common-lisp:ignorable stack-set-name operation-id call-as))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-stack-set-operation-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "StopStackSetOperation"
                                                        "2010-05-15"))
      common-lisp:nil "StopStackSetOperationResult" *error-map*)))
 (common-lisp:export 'stop-stack-set-operation))
(common-lisp:progn
 (common-lisp:defun test-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn type type-name version-id
                     log-delivery-bucket)
   (common-lisp:declare
    (common-lisp:ignorable arn type type-name version-id log-delivery-bucket))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "TestType"
                                                        "2010-05-15"))
      common-lisp:nil "TestTypeResult" *error-map*)))
 (common-lisp:export 'test-type))
(common-lisp:progn
 (common-lisp:defun update-stack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-name template-body template-url
                     use-previous-template stack-policy-during-update-body
                     stack-policy-during-update-url parameters capabilities
                     resource-types role-arn rollback-configuration
                     stack-policy-body stack-policy-url notification-arns tags
                     disable-rollback client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable stack-name template-body template-url
     use-previous-template stack-policy-during-update-body
     stack-policy-during-update-url parameters capabilities resource-types
     role-arn rollback-configuration stack-policy-body stack-policy-url
     notification-arns tags disable-rollback client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-stack-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "UpdateStack"
                                                        "2010-05-15"))
      common-lisp:nil "UpdateStackResult" *error-map*)))
 (common-lisp:export 'update-stack))
(common-lisp:progn
 (common-lisp:defun update-stack-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name accounts
                     deployment-targets regions parameter-overrides
                     operation-preferences operation-id call-as)
   (common-lisp:declare
    (common-lisp:ignorable stack-set-name accounts deployment-targets regions
     parameter-overrides operation-preferences operation-id call-as))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-stack-instances-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "UpdateStackInstances"
                                                        "2010-05-15"))
      common-lisp:nil "UpdateStackInstancesResult" *error-map*)))
 (common-lisp:export 'update-stack-instances))
(common-lisp:progn
 (common-lisp:defun update-stack-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stack-set-name description template-body
                     template-url use-previous-template parameters capabilities
                     tags operation-preferences administration-role-arn
                     execution-role-name deployment-targets permission-model
                     auto-deployment operation-id accounts regions call-as
                     managed-execution)
   (common-lisp:declare
    (common-lisp:ignorable stack-set-name description template-body
     template-url use-previous-template parameters capabilities tags
     operation-preferences administration-role-arn execution-role-name
     deployment-targets permission-model auto-deployment operation-id accounts
     regions call-as managed-execution))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-stack-set-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "UpdateStackSet"
                                                        "2010-05-15"))
      common-lisp:nil "UpdateStackSetResult" *error-map*)))
 (common-lisp:export 'update-stack-set))
(common-lisp:progn
 (common-lisp:defun update-termination-protection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key enable-termination-protection stack-name)
   (common-lisp:declare
    (common-lisp:ignorable enable-termination-protection stack-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-termination-protection-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "UpdateTerminationProtection"
                                                        "2010-05-15"))
      common-lisp:nil "UpdateTerminationProtectionResult" *error-map*)))
 (common-lisp:export 'update-termination-protection))
(common-lisp:progn
 (common-lisp:defun validate-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key template-body template-url)
   (common-lisp:declare (common-lisp:ignorable template-body template-url))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-validate-template-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'cloudformation-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :query "/"
                                                        "ValidateTemplate"
                                                        "2010-05-15"))
      common-lisp:nil "ValidateTemplateResult" *error-map*)))
 (common-lisp:export 'validate-template))
