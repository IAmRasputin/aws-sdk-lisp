;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/simspaceweaver/api
  (:use)
  (:nicknames #:aws/simspaceweaver)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/simspaceweaver/api)
(common-lisp:progn
 (common-lisp:defclass simspaceweaver-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "simspaceweaver" :protocol
                        :rest-json))
 (common-lisp:export 'simspaceweaver-request))
(common-lisp:progn
 (common-lisp:define-condition simspaceweaver-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'simspaceweaver-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (simspaceweaver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:deftype app-port-mappings ()
   '(trivial-types:proper-list simulation-app-port-mapping))
 (common-lisp:defun |make-app-port-mappings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            simulation-app-port-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bucket-name () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:deftype clock-status () 'common-lisp:string)
(common-lisp:deftype clock-target-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cloud-watch-logs-log-group common-lisp:nil
                       ((log-group-arn :initarg :log-group-arn :type
                         (common-lisp:or log-group-arn common-lisp:null)
                         :accessor %cloud-watch-logs-log-group-log-group-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-logs-log-group
                    'make-cloud-watch-logs-log-group))
 (common-lisp:defun make-cloud-watch-logs-log-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-group-arn)
   (common-lisp:apply #'common-lisp:make-instance 'cloud-watch-logs-log-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-log-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-log-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-arn))
      (common-lisp:list
       (common-lisp:cons "LogGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-watch-logs-log-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (simspaceweaver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass delete-app-input common-lisp:nil
                       ((simulation :initarg :simulation :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %delete-app-input-simulation :initform
                         (common-lisp:error ":simulation is required"))
                        (domain :initarg :domain :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %delete-app-input-domain :initform
                         (common-lisp:error ":domain is required"))
                        (app :initarg :app :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %delete-app-input-app :initform
                         (common-lisp:error ":app is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-app-input 'make-delete-app-input))
 (common-lisp:defun make-delete-app-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key simulation domain app)
   (common-lisp:apply #'common-lisp:make-instance 'delete-app-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-app-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-app-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-app-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-app-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-app-output 'make-delete-app-output))
 (common-lisp:defun make-delete-app-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-app-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-app-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-app-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-app-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-simulation-input common-lisp:nil
                       ((simulation :initarg :simulation :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %delete-simulation-input-simulation
                         :initform
                         (common-lisp:error ":simulation is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-simulation-input 'make-delete-simulation-input))
 (common-lisp:defun make-delete-simulation-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key simulation)
   (common-lisp:apply #'common-lisp:make-instance 'delete-simulation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-simulation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-simulation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-simulation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-simulation-output common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-simulation-output 'make-delete-simulation-output))
 (common-lisp:defun make-delete-simulation-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-simulation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-simulation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-simulation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-simulation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-app-input common-lisp:nil
                       ((simulation :initarg :simulation :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %describe-app-input-simulation :initform
                         (common-lisp:error ":simulation is required"))
                        (domain :initarg :domain :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %describe-app-input-domain :initform
                         (common-lisp:error ":domain is required"))
                        (app :initarg :app :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %describe-app-input-app :initform
                         (common-lisp:error ":app is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-app-input 'make-describe-app-input))
 (common-lisp:defun make-describe-app-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key simulation domain app)
   (common-lisp:apply #'common-lisp:make-instance 'describe-app-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-app-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-app-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-app-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-app-output common-lisp:nil
                       ((target-status :initarg :target-status :type
                         (common-lisp:or simulation-app-target-status
                                         common-lisp:null)
                         :accessor %describe-app-output-target-status :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or simulation-app-status
                                         common-lisp:null)
                         :accessor %describe-app-output-status :initform
                         common-lisp:nil)
                        (simulation :initarg :simulation :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %describe-app-output-simulation :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %describe-app-output-name :initform
                         common-lisp:nil)
                        (launch-overrides :initarg :launch-overrides :type
                         (common-lisp:or launch-overrides common-lisp:null)
                         :accessor %describe-app-output-launch-overrides
                         :initform common-lisp:nil)
                        (endpoint-info :initarg :endpoint-info :type
                         (common-lisp:or simulation-app-endpoint-info
                                         common-lisp:null)
                         :accessor %describe-app-output-endpoint-info :initform
                         common-lisp:nil)
                        (domain :initarg :domain :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %describe-app-output-domain :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %describe-app-output-description :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-app-output 'make-describe-app-output))
 (common-lisp:defun make-describe-app-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-status status simulation name
                     launch-overrides endpoint-info domain description)
   (common-lisp:apply #'common-lisp:make-instance 'describe-app-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-app-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-app-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-info))
      (common-lisp:list
       (common-lisp:cons "EndpointInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-overrides))
      (common-lisp:list
       (common-lisp:cons "LaunchOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'simulation))
      (common-lisp:list
       (common-lisp:cons "Simulation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-status))
      (common-lisp:list
       (common-lisp:cons "TargetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-app-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-simulation-input common-lisp:nil
                       ((simulation :initarg :simulation :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %describe-simulation-input-simulation
                         :initform
                         (common-lisp:error ":simulation is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-simulation-input
                    'make-describe-simulation-input))
 (common-lisp:defun make-describe-simulation-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key simulation)
   (common-lisp:apply #'common-lisp:make-instance 'describe-simulation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-simulation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-simulation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-simulation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-simulation-output common-lisp:nil
                       ((target-status :initarg :target-status :type
                         (common-lisp:or simulation-target-status
                                         common-lisp:null)
                         :accessor %describe-simulation-output-target-status
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or simulation-status common-lisp:null)
                         :accessor %describe-simulation-output-status :initform
                         common-lisp:nil)
                        (schema-s3location :initarg :schema-s3location :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %describe-simulation-output-schema-s3location
                         :initform common-lisp:nil)
                        (schema-error :initarg :schema-error :type
                         (common-lisp:or optional-string common-lisp:null)
                         :accessor %describe-simulation-output-schema-error
                         :initform common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %describe-simulation-output-role-arn :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %describe-simulation-output-name :initform
                         common-lisp:nil)
                        (maximum-duration :initarg :maximum-duration :type
                         (common-lisp:or time-to-live-string common-lisp:null)
                         :accessor %describe-simulation-output-maximum-duration
                         :initform common-lisp:nil)
                        (logging-configuration :initarg :logging-configuration
                         :type
                         (common-lisp:or logging-configuration
                                         common-lisp:null)
                         :accessor
                         %describe-simulation-output-logging-configuration
                         :initform common-lisp:nil)
                        (live-simulation-state :initarg :live-simulation-state
                         :type
                         (common-lisp:or live-simulation-state
                                         common-lisp:null)
                         :accessor
                         %describe-simulation-output-live-simulation-state
                         :initform common-lisp:nil)
                        (execution-id :initarg :execution-id :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %describe-simulation-output-execution-id :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %describe-simulation-output-description
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-simulation-output-creation-time :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or sim-space-weaver-arn common-lisp:null)
                         :accessor %describe-simulation-output-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-simulation-output
                    'make-describe-simulation-output))
 (common-lisp:defun make-describe-simulation-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-status status schema-s3location
                     schema-error role-arn name maximum-duration
                     logging-configuration live-simulation-state execution-id
                     description creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-simulation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-simulation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-simulation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "ExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'live-simulation-state))
      (common-lisp:list
       (common-lisp:cons "LiveSimulationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logging-configuration))
      (common-lisp:list
       (common-lisp:cons "LoggingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-duration))
      (common-lisp:list
       (common-lisp:cons "MaximumDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-error))
      (common-lisp:list
       (common-lisp:cons "SchemaError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-s3location))
      (common-lisp:list
       (common-lisp:cons "SchemaS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-status))
      (common-lisp:list
       (common-lisp:cons "TargetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-simulation-output))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass domain common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %domain-name :initform common-lisp:nil)
                        (lifecycle :initarg :lifecycle :type
                         (common-lisp:or lifecycle-management-strategy
                                         common-lisp:null)
                         :accessor %domain-lifecycle :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'domain 'make-domain))
 (common-lisp:defun make-domain
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name lifecycle)
   (common-lisp:apply #'common-lisp:make-instance 'domain
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lifecycle))
      (common-lisp:list
       (common-lisp:cons "Lifecycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-list () '(trivial-types:proper-list domain))
 (common-lisp:defun |make-domain-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (simspaceweaver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:deftype launch-command-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-launch-command-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass launch-overrides common-lisp:nil
                       ((launch-commands :initarg :launch-commands :type
                         (common-lisp:or launch-command-list common-lisp:null)
                         :accessor %launch-overrides-launch-commands :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'launch-overrides 'make-launch-overrides))
 (common-lisp:defun make-launch-overrides
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key launch-commands)
   (common-lisp:apply #'common-lisp:make-instance 'launch-overrides
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input launch-overrides))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input launch-overrides))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-commands))
      (common-lisp:list
       (common-lisp:cons "LaunchCommands"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input launch-overrides))
   common-lisp:nil))
(common-lisp:deftype lifecycle-management-strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-apps-input common-lisp:nil
                       ((simulation :initarg :simulation :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %list-apps-input-simulation :initform
                         (common-lisp:error ":simulation is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or optional-string common-lisp:null)
                         :accessor %list-apps-input-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %list-apps-input-max-results :initform
                         common-lisp:nil)
                        (domain :initarg :domain :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %list-apps-input-domain :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'list-apps-input 'make-list-apps-input))
 (common-lisp:defun make-list-apps-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key simulation next-token max-results domain)
   (common-lisp:apply #'common-lisp:make-instance 'list-apps-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-apps-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-apps-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-apps-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-apps-output common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or optional-string common-lisp:null)
                         :accessor %list-apps-output-next-token :initform
                         common-lisp:nil)
                        (apps :initarg :apps :type
                         (common-lisp:or simulation-app-list common-lisp:null)
                         :accessor %list-apps-output-apps :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-apps-output 'make-list-apps-output))
 (common-lisp:defun make-list-apps-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token apps)
   (common-lisp:apply #'common-lisp:make-instance 'list-apps-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-apps-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-apps-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apps))
      (common-lisp:list
       (common-lisp:cons "Apps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-apps-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-simulations-input common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or optional-string common-lisp:null)
                         :accessor %list-simulations-input-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or positive-integer common-lisp:null)
                         :accessor %list-simulations-input-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-simulations-input 'make-list-simulations-input))
 (common-lisp:defun make-list-simulations-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-simulations-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-simulations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-simulations-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-simulations-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-simulations-output common-lisp:nil
                       ((simulations :initarg :simulations :type
                         (common-lisp:or simulation-list common-lisp:null)
                         :accessor %list-simulations-output-simulations
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or optional-string common-lisp:null)
                         :accessor %list-simulations-output-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-simulations-output 'make-list-simulations-output))
 (common-lisp:defun make-list-simulations-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key simulations next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-simulations-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-simulations-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-simulations-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'simulations))
      (common-lisp:list
       (common-lisp:cons "Simulations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-simulations-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-input common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or sim-space-weaver-arn common-lisp:null)
                         :accessor %list-tags-for-resource-input-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-input
                    'make-list-tags-for-resource-input))
 (common-lisp:defun make-list-tags-for-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-for-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-output common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %list-tags-for-resource-output-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-output
                    'make-list-tags-for-resource-output))
 (common-lisp:defun make-list-tags-for-resource-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass live-simulation-state common-lisp:nil
                       ((domains :initarg :domains :type
                         (common-lisp:or domain-list common-lisp:null)
                         :accessor %live-simulation-state-domains :initform
                         common-lisp:nil)
                        (clocks :initarg :clocks :type
                         (common-lisp:or simulation-clock-list
                                         common-lisp:null)
                         :accessor %live-simulation-state-clocks :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'live-simulation-state 'make-live-simulation-state))
 (common-lisp:defun make-live-simulation-state
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domains clocks)
   (common-lisp:apply #'common-lisp:make-instance 'live-simulation-state
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          live-simulation-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          live-simulation-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clocks))
      (common-lisp:list
       (common-lisp:cons "Clocks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domains))
      (common-lisp:list
       (common-lisp:cons "Domains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          live-simulation-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass log-destination common-lisp:nil
                       ((cloud-watch-logs-log-group :initarg
                         :cloud-watch-logs-log-group :type
                         (common-lisp:or cloud-watch-logs-log-group
                                         common-lisp:null)
                         :accessor %log-destination-cloud-watch-logs-log-group
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'log-destination 'make-log-destination))
 (common-lisp:defun make-log-destination
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cloud-watch-logs-log-group)
   (common-lisp:apply #'common-lisp:make-instance 'log-destination
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-log-group))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsLogGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-destinations ()
   '(trivial-types:proper-list log-destination))
 (common-lisp:defun |make-log-destinations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-destination))
   aws-sdk/generator/shape::members))
(common-lisp:deftype log-group-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass logging-configuration common-lisp:nil
                       ((destinations :initarg :destinations :type
                         (common-lisp:or log-destinations common-lisp:null)
                         :accessor %logging-configuration-destinations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'logging-configuration 'make-logging-configuration))
 (common-lisp:defun make-logging-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destinations)
   (common-lisp:apply #'common-lisp:make-instance 'logging-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration))
   common-lisp:nil))
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:deftype object-key () 'common-lisp:string)
(common-lisp:deftype optional-string () 'common-lisp:string)
(common-lisp:deftype port-number () 'common-lisp:integer)
(common-lisp:deftype positive-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (simspaceweaver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3location common-lisp:nil
                       ((object-key :initarg :object-key :type
                         (common-lisp:or object-key common-lisp:null) :accessor
                         %s3location-object-key :initform common-lisp:nil)
                        (bucket-name :initarg :bucket-name :type
                         (common-lisp:or bucket-name common-lisp:null)
                         :accessor %s3location-bucket-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 's3location 'make-s3location))
 (common-lisp:defun make-s3location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key object-key bucket-name)
   (common-lisp:apply #'common-lisp:make-instance 's3location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-key))
      (common-lisp:list
       (common-lisp:cons "ObjectKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (simspaceweaver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype sim-space-weaver-arn () 'common-lisp:string)
(common-lisp:deftype sim-space-weaver-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass simulation-app-endpoint-info common-lisp:nil
                       ((ingress-port-mappings :initarg :ingress-port-mappings
                         :type
                         (common-lisp:or app-port-mappings common-lisp:null)
                         :accessor
                         %simulation-app-endpoint-info-ingress-port-mappings
                         :initform common-lisp:nil)
                        (address :initarg :address :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %simulation-app-endpoint-info-address
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'simulation-app-endpoint-info
                    'make-simulation-app-endpoint-info))
 (common-lisp:defun make-simulation-app-endpoint-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ingress-port-mappings address)
   (common-lisp:apply #'common-lisp:make-instance 'simulation-app-endpoint-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          simulation-app-endpoint-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          simulation-app-endpoint-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingress-port-mappings))
      (common-lisp:list
       (common-lisp:cons "IngressPortMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          simulation-app-endpoint-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype simulation-app-list ()
   '(trivial-types:proper-list simulation-app-metadata))
 (common-lisp:defun |make-simulation-app-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list simulation-app-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass simulation-app-metadata common-lisp:nil
                       ((target-status :initarg :target-status :type
                         (common-lisp:or simulation-app-target-status
                                         common-lisp:null)
                         :accessor %simulation-app-metadata-target-status
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or simulation-app-status
                                         common-lisp:null)
                         :accessor %simulation-app-metadata-status :initform
                         common-lisp:nil)
                        (simulation :initarg :simulation :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %simulation-app-metadata-simulation
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %simulation-app-metadata-name :initform
                         common-lisp:nil)
                        (domain :initarg :domain :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %simulation-app-metadata-domain :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'simulation-app-metadata 'make-simulation-app-metadata))
 (common-lisp:defun make-simulation-app-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-status status simulation name
                     domain)
   (common-lisp:apply #'common-lisp:make-instance 'simulation-app-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          simulation-app-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          simulation-app-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'simulation))
      (common-lisp:list
       (common-lisp:cons "Simulation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-status))
      (common-lisp:list
       (common-lisp:cons "TargetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          simulation-app-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass simulation-app-port-mapping common-lisp:nil
                       ((declared :initarg :declared :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor %simulation-app-port-mapping-declared
                         :initform common-lisp:nil)
                        (actual :initarg :actual :type
                         (common-lisp:or port-number common-lisp:null)
                         :accessor %simulation-app-port-mapping-actual
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'simulation-app-port-mapping
                    'make-simulation-app-port-mapping))
 (common-lisp:defun make-simulation-app-port-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key declared actual)
   (common-lisp:apply #'common-lisp:make-instance 'simulation-app-port-mapping
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          simulation-app-port-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          simulation-app-port-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actual))
      (common-lisp:list
       (common-lisp:cons "Actual"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'declared))
      (common-lisp:list
       (common-lisp:cons "Declared"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          simulation-app-port-mapping))
   common-lisp:nil))
(common-lisp:deftype simulation-app-status () 'common-lisp:string)
(common-lisp:deftype simulation-app-target-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass simulation-clock common-lisp:nil
                       ((target-status :initarg :target-status :type
                         (common-lisp:or clock-target-status common-lisp:null)
                         :accessor %simulation-clock-target-status :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or clock-status common-lisp:null)
                         :accessor %simulation-clock-status :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'simulation-clock 'make-simulation-clock))
 (common-lisp:defun make-simulation-clock
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-status status)
   (common-lisp:apply #'common-lisp:make-instance 'simulation-clock
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input simulation-clock))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input simulation-clock))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-status))
      (common-lisp:list
       (common-lisp:cons "TargetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input simulation-clock))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype simulation-clock-list ()
   '(trivial-types:proper-list simulation-clock))
 (common-lisp:defun |make-simulation-clock-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list simulation-clock))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype simulation-list ()
   '(trivial-types:proper-list simulation-metadata))
 (common-lisp:defun |make-simulation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list simulation-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass simulation-metadata common-lisp:nil
                       ((target-status :initarg :target-status :type
                         (common-lisp:or simulation-target-status
                                         common-lisp:null)
                         :accessor %simulation-metadata-target-status :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or simulation-status common-lisp:null)
                         :accessor %simulation-metadata-status :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %simulation-metadata-name :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %simulation-metadata-creation-time :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or sim-space-weaver-arn common-lisp:null)
                         :accessor %simulation-metadata-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'simulation-metadata 'make-simulation-metadata))
 (common-lisp:defun make-simulation-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-status status name creation-time
                     arn)
   (common-lisp:apply #'common-lisp:make-instance 'simulation-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input simulation-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input simulation-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-status))
      (common-lisp:list
       (common-lisp:cons "TargetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input simulation-metadata))
   common-lisp:nil))
(common-lisp:deftype simulation-status () 'common-lisp:string)
(common-lisp:deftype simulation-target-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-app-input common-lisp:nil
                       ((simulation :initarg :simulation :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %start-app-input-simulation :initform
                         (common-lisp:error ":simulation is required"))
                        (name :initarg :name :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %start-app-input-name :initform
                         (common-lisp:error ":name is required"))
                        (launch-overrides :initarg :launch-overrides :type
                         (common-lisp:or launch-overrides common-lisp:null)
                         :accessor %start-app-input-launch-overrides :initform
                         common-lisp:nil)
                        (domain :initarg :domain :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %start-app-input-domain :initform
                         (common-lisp:error ":domain is required"))
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %start-app-input-description :initform
                         common-lisp:nil)
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %start-app-input-client-token :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'start-app-input 'make-start-app-input))
 (common-lisp:defun make-start-app-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key simulation name launch-overrides domain
                     description client-token)
   (common-lisp:apply #'common-lisp:make-instance 'start-app-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-app-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-app-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'launch-overrides))
      (common-lisp:list
       (common-lisp:cons "LaunchOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'simulation))
      (common-lisp:list
       (common-lisp:cons "Simulation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-app-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-app-output common-lisp:nil
                       ((simulation :initarg :simulation :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %start-app-output-simulation :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %start-app-output-name :initform
                         common-lisp:nil)
                        (domain :initarg :domain :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %start-app-output-domain :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-app-output 'make-start-app-output))
 (common-lisp:defun make-start-app-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key simulation name domain)
   (common-lisp:apply #'common-lisp:make-instance 'start-app-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-app-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-app-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'simulation))
      (common-lisp:list
       (common-lisp:cons "Simulation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-app-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-clock-input common-lisp:nil
                       ((simulation :initarg :simulation :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %start-clock-input-simulation :initform
                         (common-lisp:error ":simulation is required"))))
 (common-lisp:export
  (common-lisp:list 'start-clock-input 'make-start-clock-input))
 (common-lisp:defun make-start-clock-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key simulation)
   (common-lisp:apply #'common-lisp:make-instance 'start-clock-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-clock-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-clock-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'simulation))
      (common-lisp:list
       (common-lisp:cons "Simulation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-clock-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-clock-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'start-clock-output 'make-start-clock-output))
 (common-lisp:defun make-start-clock-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'start-clock-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-clock-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-clock-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-clock-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-simulation-input common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %start-simulation-input-tags :initform
                         common-lisp:nil)
                        (schema-s3location :initarg :schema-s3location :type
                         (common-lisp:or s3location common-lisp:null) :accessor
                         %start-simulation-input-schema-s3location :initform
                         (common-lisp:error ":schema-s3location is required"))
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %start-simulation-input-role-arn :initform
                         (common-lisp:error ":role-arn is required"))
                        (name :initarg :name :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %start-simulation-input-name :initform
                         (common-lisp:error ":name is required"))
                        (maximum-duration :initarg :maximum-duration :type
                         (common-lisp:or time-to-live-string common-lisp:null)
                         :accessor %start-simulation-input-maximum-duration
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %start-simulation-input-description
                         :initform common-lisp:nil)
                        (client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %start-simulation-input-client-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-simulation-input 'make-start-simulation-input))
 (common-lisp:defun make-start-simulation-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags schema-s3location role-arn name
                     maximum-duration description client-token)
   (common-lisp:apply #'common-lisp:make-instance 'start-simulation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-simulation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-simulation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-duration))
      (common-lisp:list
       (common-lisp:cons "MaximumDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-s3location))
      (common-lisp:list
       (common-lisp:cons "SchemaS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-simulation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-simulation-output common-lisp:nil
                       ((execution-id :initarg :execution-id :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %start-simulation-output-execution-id :initform
                         common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %start-simulation-output-creation-time :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or sim-space-weaver-arn common-lisp:null)
                         :accessor %start-simulation-output-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-simulation-output 'make-start-simulation-output))
 (common-lisp:defun make-start-simulation-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key execution-id creation-time arn)
   (common-lisp:apply #'common-lisp:make-instance 'start-simulation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-simulation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-simulation-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "ExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-simulation-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-app-input common-lisp:nil
                       ((simulation :initarg :simulation :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %stop-app-input-simulation :initform
                         (common-lisp:error ":simulation is required"))
                        (domain :initarg :domain :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %stop-app-input-domain :initform
                         (common-lisp:error ":domain is required"))
                        (app :initarg :app :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %stop-app-input-app :initform
                         (common-lisp:error ":app is required"))))
 (common-lisp:export (common-lisp:list 'stop-app-input 'make-stop-app-input))
 (common-lisp:defun make-stop-app-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key simulation domain app)
   (common-lisp:apply #'common-lisp:make-instance 'stop-app-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-app-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-app-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app))
      (common-lisp:list
       (common-lisp:cons "App"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'simulation))
      (common-lisp:list
       (common-lisp:cons "Simulation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-app-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-app-output common-lisp:nil common-lisp:nil)
 (common-lisp:export (common-lisp:list 'stop-app-output 'make-stop-app-output))
 (common-lisp:defun make-stop-app-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'stop-app-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-app-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-app-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-app-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-clock-input common-lisp:nil
                       ((simulation :initarg :simulation :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %stop-clock-input-simulation :initform
                         (common-lisp:error ":simulation is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-clock-input 'make-stop-clock-input))
 (common-lisp:defun make-stop-clock-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key simulation)
   (common-lisp:apply #'common-lisp:make-instance 'stop-clock-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-clock-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-clock-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'simulation))
      (common-lisp:list
       (common-lisp:cons "Simulation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-clock-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-clock-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'stop-clock-output 'make-stop-clock-output))
 (common-lisp:defun make-stop-clock-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'stop-clock-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-clock-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-clock-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-clock-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-simulation-input common-lisp:nil
                       ((simulation :initarg :simulation :type
                         (common-lisp:or sim-space-weaver-resource-name
                                         common-lisp:null)
                         :accessor %stop-simulation-input-simulation :initform
                         (common-lisp:error ":simulation is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-simulation-input 'make-stop-simulation-input))
 (common-lisp:defun make-stop-simulation-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key simulation)
   (common-lisp:apply #'common-lisp:make-instance 'stop-simulation-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-simulation-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-simulation-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'simulation))
      (common-lisp:list
       (common-lisp:cons "Simulation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-simulation-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass stop-simulation-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'stop-simulation-output 'make-stop-simulation-output))
 (common-lisp:defun make-stop-simulation-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'stop-simulation-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-simulation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-simulation-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-simulation-output))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-input common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %tag-resource-input-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or sim-space-weaver-arn common-lisp:null)
                         :accessor %tag-resource-input-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-input 'make-tag-resource-input))
 (common-lisp:defun make-tag-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-output 'make-tag-resource-output))
 (common-lisp:defun make-tag-resource-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-output))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype time-to-live-string () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (simspaceweaver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message)))
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-input common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-input-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or sim-space-weaver-arn common-lisp:null)
                         :accessor %untag-resource-input-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-input 'make-untag-resource-input))
 (common-lisp:defun make-untag-resource-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-resource-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-resource-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-output common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-output 'make-untag-resource-output))
 (common-lisp:defun make-untag-resource-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (simspaceweaver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun delete-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app domain simulation)
   (common-lisp:declare (common-lisp:ignorable app domain simulation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-app-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'simspaceweaver-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        "/deleteapp"
                                                        "DeleteApp"
                                                        "2022-10-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-app))
(common-lisp:progn
 (common-lisp:defun delete-simulation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key simulation)
   (common-lisp:declare (common-lisp:ignorable simulation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-simulation-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'simspaceweaver-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        "/deletesimulation"
                                                        "DeleteSimulation"
                                                        "2022-10-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-simulation))
(common-lisp:progn
 (common-lisp:defun describe-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app domain simulation)
   (common-lisp:declare (common-lisp:ignorable app domain simulation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-app-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'simspaceweaver-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/describeapp"
                                                        "DescribeApp"
                                                        "2022-10-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-app))
(common-lisp:progn
 (common-lisp:defun describe-simulation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key simulation)
   (common-lisp:declare (common-lisp:ignorable simulation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-simulation-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'simspaceweaver-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/describesimulation"
                                                        "DescribeSimulation"
                                                        "2022-10-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-simulation))
(common-lisp:progn
 (common-lisp:defun list-apps
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain max-results next-token simulation)
   (common-lisp:declare
    (common-lisp:ignorable domain max-results next-token simulation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-apps-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'simspaceweaver-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/listapps" "ListApps"
                                                        "2022-10-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-apps))
(common-lisp:progn
 (common-lisp:defun list-simulations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-simulations-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'simspaceweaver-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/listsimulations"
                                                        "ListSimulations"
                                                        "2022-10-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-simulations))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'simspaceweaver-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2022-10-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun start-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description domain
                     launch-overrides name simulation)
   (common-lisp:declare
    (common-lisp:ignorable client-token description domain launch-overrides
     name simulation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-app-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'simspaceweaver-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/startapp" "StartApp"
                                                        "2022-10-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-app))
(common-lisp:progn
 (common-lisp:defun start-clock
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key simulation)
   (common-lisp:declare (common-lisp:ignorable simulation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-clock-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'simspaceweaver-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/startclock"
                                                        "StartClock"
                                                        "2022-10-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-clock))
(common-lisp:progn
 (common-lisp:defun start-simulation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key client-token description maximum-duration
                     name role-arn schema-s3location tags)
   (common-lisp:declare
    (common-lisp:ignorable client-token description maximum-duration name
     role-arn schema-s3location tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-simulation-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'simspaceweaver-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/startsimulation"
                                                        "StartSimulation"
                                                        "2022-10-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-simulation))
(common-lisp:progn
 (common-lisp:defun stop-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app domain simulation)
   (common-lisp:declare (common-lisp:ignorable app domain simulation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-app-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'simspaceweaver-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/stopapp" "StopApp"
                                                        "2022-10-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-app))
(common-lisp:progn
 (common-lisp:defun stop-clock
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key simulation)
   (common-lisp:declare (common-lisp:ignorable simulation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-clock-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'simspaceweaver-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/stopclock"
                                                        "StopClock"
                                                        "2022-10-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-clock))
(common-lisp:progn
 (common-lisp:defun stop-simulation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key simulation)
   (common-lisp:declare (common-lisp:ignorable simulation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-simulation-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'simspaceweaver-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/stopsimulation"
                                                        "StopSimulation"
                                                        "2022-10-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-simulation))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'simspaceweaver-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2022-10-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'simspaceweaver-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2022-10-28"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
