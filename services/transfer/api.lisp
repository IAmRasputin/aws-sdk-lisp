;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/transfer/api
  (:use)
  (:nicknames #:aws/transfer)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/transfer/api)
(common-lisp:progn
 (common-lisp:defclass transfer-request (aws-sdk/request:request)
                       common-lisp:nil (:default-initargs :service "transfer"))
 (common-lisp:export 'transfer-request))
(common-lisp:progn
 (common-lisp:define-condition transfer-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'transfer-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServiceError" . internal-service-error)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("ResourceExistsException" . resource-exists-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("ThrottlingException" . throttling-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (transfer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype address-allocation-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype address-allocation-ids ()
   '(trivial-types:proper-list address-allocation-id))
 (common-lisp:defun |make-address-allocation-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list address-allocation-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype agreement-id () 'common-lisp:string)
(common-lisp:deftype agreement-status-type () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (as2connector-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-as2connector-config-"))
   (local-profile-id common-lisp:nil :type
    (common-lisp:or profile-id common-lisp:null))
   (partner-profile-id common-lisp:nil :type
    (common-lisp:or profile-id common-lisp:null))
   (message-subject common-lisp:nil :type
    (common-lisp:or message-subject common-lisp:null))
   (compression common-lisp:nil :type
    (common-lisp:or compression-enum common-lisp:null))
   (encryption-algorithm common-lisp:nil :type
    (common-lisp:or encryption-alg common-lisp:null))
   (signing-algorithm common-lisp:nil :type
    (common-lisp:or signing-alg common-lisp:null))
   (mdn-signing-algorithm common-lisp:nil :type
    (common-lisp:or mdn-signing-alg common-lisp:null))
   (mdn-response common-lisp:nil :type
    (common-lisp:or mdn-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'as2connector-config 'make-as2connector-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input as2connector-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input as2connector-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-profile-id))
      (common-lisp:list
       (common-lisp:cons "LocalProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partner-profile-id))
      (common-lisp:list
       (common-lisp:cons "PartnerProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-subject))
      (common-lisp:list
       (common-lisp:cons "MessageSubject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression))
      (common-lisp:list
       (common-lisp:cons "Compression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-algorithm))
      (common-lisp:list
       (common-lisp:cons "EncryptionAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-algorithm))
      (common-lisp:list
       (common-lisp:cons "SigningAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mdn-signing-algorithm))
      (common-lisp:list
       (common-lisp:cons "MdnSigningAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mdn-response))
      (common-lisp:list
       (common-lisp:cons "MdnResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input as2connector-config))
   common-lisp:nil))
(common-lisp:deftype as2id () 'common-lisp:string)
(common-lisp:deftype as2transport () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype as2transports ()
   '(trivial-types:proper-list as2transport))
 (common-lisp:defun |make-as2transports|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list as2transport))
   aws-sdk/generator/shape::members))
(common-lisp:deftype callback-token () 'common-lisp:string)
(common-lisp:deftype cert-date () 'common-lisp:string)
(common-lisp:deftype cert-serial () 'common-lisp:string)
(common-lisp:deftype certificate () 'common-lisp:string)
(common-lisp:deftype certificate-body-type () 'common-lisp:string)
(common-lisp:deftype certificate-chain-type () 'common-lisp:string)
(common-lisp:deftype certificate-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype certificate-ids ()
   '(trivial-types:proper-list certificate-id))
 (common-lisp:defun |make-certificate-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype certificate-status-type () 'common-lisp:string)
(common-lisp:deftype certificate-type () 'common-lisp:string)
(common-lisp:deftype certificate-usage-type () 'common-lisp:string)
(common-lisp:deftype compression-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (transfer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype connector-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (copy-step-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-step-details-"))
   (name common-lisp:nil :type
    (common-lisp:or workflow-step-name common-lisp:null))
   (destination-file-location common-lisp:nil :type
    (common-lisp:or input-file-location common-lisp:null))
   (overwrite-existing common-lisp:nil :type
    (common-lisp:or overwrite-existing common-lisp:null))
   (source-file-location common-lisp:nil :type
    (common-lisp:or source-file-location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-step-details 'make-copy-step-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-step-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-step-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-file-location))
      (common-lisp:list
       (common-lisp:cons "DestinationFileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overwrite-existing))
      (common-lisp:list
       (common-lisp:cons "OverwriteExisting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-file-location))
      (common-lisp:list
       (common-lisp:cons "SourceFileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-step-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-access-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-access-request-"))
   (home-directory common-lisp:nil :type
    (common-lisp:or home-directory common-lisp:null))
   (home-directory-type common-lisp:nil :type
    (common-lisp:or home-directory-type common-lisp:null))
   (home-directory-mappings common-lisp:nil :type
    (common-lisp:or home-directory-mappings common-lisp:null))
   (policy common-lisp:nil :type (common-lisp:or policy common-lisp:null))
   (posix-profile common-lisp:nil :type
    (common-lisp:or posix-profile common-lisp:null))
   (role (common-lisp:error ":role is required") :type
    (common-lisp:or role common-lisp:null))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (external-id (common-lisp:error ":external-id is required") :type
    (common-lisp:or external-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-access-request 'make-create-access-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory))
      (common-lisp:list
       (common-lisp:cons "HomeDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory-type))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'home-directory-mappings))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'posix-profile))
      (common-lisp:list
       (common-lisp:cons "PosixProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-access-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-access-response-"))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (external-id (common-lisp:error ":external-id is required") :type
    (common-lisp:or external-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-access-response 'make-create-access-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-agreement-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-agreement-request-"))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (local-profile-id (common-lisp:error ":local-profile-id is required") :type
    (common-lisp:or profile-id common-lisp:null))
   (partner-profile-id (common-lisp:error ":partner-profile-id is required")
    :type (common-lisp:or profile-id common-lisp:null))
   (base-directory (common-lisp:error ":base-directory is required") :type
    (common-lisp:or home-directory common-lisp:null))
   (access-role (common-lisp:error ":access-role is required") :type
    (common-lisp:or role common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or agreement-status-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-agreement-request 'make-create-agreement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-agreement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-agreement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-profile-id))
      (common-lisp:list
       (common-lisp:cons "LocalProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partner-profile-id))
      (common-lisp:list
       (common-lisp:cons "PartnerProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-directory))
      (common-lisp:list
       (common-lisp:cons "BaseDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-role))
      (common-lisp:list
       (common-lisp:cons "AccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-agreement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-agreement-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-agreement-response-"))
   (agreement-id (common-lisp:error ":agreement-id is required") :type
    (common-lisp:or agreement-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-agreement-response
                    'make-create-agreement-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-agreement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-agreement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement-id))
      (common-lisp:list
       (common-lisp:cons "AgreementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-agreement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-connector-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-connector-request-"))
   (url (common-lisp:error ":url is required") :type
    (common-lisp:or url common-lisp:null))
   (as2config (common-lisp:error ":as2config is required") :type
    (common-lisp:or as2connector-config common-lisp:null))
   (access-role (common-lisp:error ":access-role is required") :type
    (common-lisp:or role common-lisp:null))
   (logging-role common-lisp:nil :type (common-lisp:or role common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-connector-request 'make-create-connector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'as2config))
      (common-lisp:list
       (common-lisp:cons "As2Config"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-role))
      (common-lisp:list
       (common-lisp:cons "AccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-role))
      (common-lisp:list
       (common-lisp:cons "LoggingRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-connector-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-connector-response-"))
   (connector-id (common-lisp:error ":connector-id is required") :type
    (common-lisp:or connector-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-connector-response
                    'make-create-connector-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-id))
      (common-lisp:list
       (common-lisp:cons "ConnectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-profile-request-"))
   (as2id (common-lisp:error ":as2id is required") :type
    (common-lisp:or as2id common-lisp:null))
   (profile-type (common-lisp:error ":profile-type is required") :type
    (common-lisp:or profile-type common-lisp:null))
   (certificate-ids common-lisp:nil :type
    (common-lisp:or certificate-ids common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-profile-request 'make-create-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'as2id))
      (common-lisp:list
       (common-lisp:cons "As2Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-type))
      (common-lisp:list
       (common-lisp:cons "ProfileType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-ids))
      (common-lisp:list
       (common-lisp:cons "CertificateIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-profile-response-"))
   (profile-id (common-lisp:error ":profile-id is required") :type
    (common-lisp:or profile-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-profile-response 'make-create-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-server-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-server-request-"))
   (certificate common-lisp:nil :type
    (common-lisp:or certificate common-lisp:null))
   (domain common-lisp:nil :type (common-lisp:or domain common-lisp:null))
   (endpoint-details common-lisp:nil :type
    (common-lisp:or endpoint-details common-lisp:null))
   (endpoint-type common-lisp:nil :type
    (common-lisp:or endpoint-type common-lisp:null))
   (host-key common-lisp:nil :type (common-lisp:or host-key common-lisp:null))
   (identity-provider-details common-lisp:nil :type
    (common-lisp:or identity-provider-details common-lisp:null))
   (identity-provider-type common-lisp:nil :type
    (common-lisp:or identity-provider-type common-lisp:null))
   (logging-role common-lisp:nil :type (common-lisp:or role common-lisp:null))
   (post-authentication-login-banner common-lisp:nil :type
    (common-lisp:or post-authentication-login-banner common-lisp:null))
   (pre-authentication-login-banner common-lisp:nil :type
    (common-lisp:or pre-authentication-login-banner common-lisp:null))
   (protocols common-lisp:nil :type
    (common-lisp:or protocols common-lisp:null))
   (protocol-details common-lisp:nil :type
    (common-lisp:or protocol-details common-lisp:null))
   (security-policy-name common-lisp:nil :type
    (common-lisp:or security-policy-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (workflow-details common-lisp:nil :type
    (common-lisp:or workflow-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-server-request 'make-create-server-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-server-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-server-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-details))
      (common-lisp:list
       (common-lisp:cons "EndpointDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-type))
      (common-lisp:list
       (common-lisp:cons "EndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-key))
      (common-lisp:list
       (common-lisp:cons "HostKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-details))
      (common-lisp:list
       (common-lisp:cons "IdentityProviderDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-type))
      (common-lisp:list
       (common-lisp:cons "IdentityProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-role))
      (common-lisp:list
       (common-lisp:cons "LoggingRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-authentication-login-banner))
      (common-lisp:list
       (common-lisp:cons "PostAuthenticationLoginBanner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pre-authentication-login-banner))
      (common-lisp:list
       (common-lisp:cons "PreAuthenticationLoginBanner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols))
      (common-lisp:list
       (common-lisp:cons "Protocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol-details))
      (common-lisp:list
       (common-lisp:cons "ProtocolDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-policy-name))
      (common-lisp:list
       (common-lisp:cons "SecurityPolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-details))
      (common-lisp:list
       (common-lisp:cons "WorkflowDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-server-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-server-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-server-response-"))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-server-response 'make-create-server-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-server-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-server-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-server-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-user-request-"))
   (home-directory common-lisp:nil :type
    (common-lisp:or home-directory common-lisp:null))
   (home-directory-type common-lisp:nil :type
    (common-lisp:or home-directory-type common-lisp:null))
   (home-directory-mappings common-lisp:nil :type
    (common-lisp:or home-directory-mappings common-lisp:null))
   (policy common-lisp:nil :type (common-lisp:or policy common-lisp:null))
   (posix-profile common-lisp:nil :type
    (common-lisp:or posix-profile common-lisp:null))
   (role (common-lisp:error ":role is required") :type
    (common-lisp:or role common-lisp:null))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (ssh-public-key-body common-lisp:nil :type
    (common-lisp:or ssh-public-key-body common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or user-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-request 'make-create-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory))
      (common-lisp:list
       (common-lisp:cons "HomeDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory-type))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'home-directory-mappings))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'posix-profile))
      (common-lisp:list
       (common-lisp:cons "PosixProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-public-key-body))
      (common-lisp:list
       (common-lisp:cons "SshPublicKeyBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-user-response-"))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or user-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-response 'make-create-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-workflow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-workflow-request-"))
   (description common-lisp:nil :type
    (common-lisp:or workflow-description common-lisp:null))
   (steps (common-lisp:error ":steps is required") :type
    (common-lisp:or workflow-steps common-lisp:null))
   (on-exception-steps common-lisp:nil :type
    (common-lisp:or workflow-steps common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-workflow-request 'make-create-workflow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'steps))
      (common-lisp:list
       (common-lisp:cons "Steps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-exception-steps))
      (common-lisp:list
       (common-lisp:cons "OnExceptionSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-workflow-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-workflow-response-"))
   (workflow-id (common-lisp:error ":workflow-id is required") :type
    (common-lisp:or workflow-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-workflow-response 'make-create-workflow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-step-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-step-details-"))
   (name common-lisp:nil :type
    (common-lisp:or workflow-step-name common-lisp:null))
   (target common-lisp:nil :type
    (common-lisp:or custom-step-target common-lisp:null))
   (timeout-seconds common-lisp:nil :type
    (common-lisp:or custom-step-timeout-seconds common-lisp:null))
   (source-file-location common-lisp:nil :type
    (common-lisp:or source-file-location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'custom-step-details 'make-custom-step-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-step-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-step-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "TimeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-file-location))
      (common-lisp:list
       (common-lisp:cons "SourceFileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-step-details))
   common-lisp:nil))
(common-lisp:deftype custom-step-status () 'common-lisp:string)
(common-lisp:deftype custom-step-target () 'common-lisp:string)
(common-lisp:deftype custom-step-timeout-seconds () 'common-lisp:integer)
(common-lisp:deftype date-imported () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (decrypt-step-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-decrypt-step-details-"))
   (name common-lisp:nil :type
    (common-lisp:or workflow-step-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or encryption-type common-lisp:null))
   (source-file-location common-lisp:nil :type
    (common-lisp:or source-file-location common-lisp:null))
   (overwrite-existing common-lisp:nil :type
    (common-lisp:or overwrite-existing common-lisp:null))
   (destination-file-location
    (common-lisp:error ":destination-file-location is required") :type
    (common-lisp:or input-file-location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decrypt-step-details 'make-decrypt-step-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input decrypt-step-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input decrypt-step-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-file-location))
      (common-lisp:list
       (common-lisp:cons "SourceFileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overwrite-existing))
      (common-lisp:list
       (common-lisp:cons "OverwriteExisting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-file-location))
      (common-lisp:list
       (common-lisp:cons "DestinationFileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input decrypt-step-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-access-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-access-request-"))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (external-id (common-lisp:error ":external-id is required") :type
    (common-lisp:or external-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-access-request 'make-delete-access-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-agreement-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-agreement-request-"))
   (agreement-id (common-lisp:error ":agreement-id is required") :type
    (common-lisp:or agreement-id common-lisp:null))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-agreement-request 'make-delete-agreement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-agreement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-agreement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement-id))
      (common-lisp:list
       (common-lisp:cons "AgreementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-agreement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-certificate-request-"))
   (certificate-id (common-lisp:error ":certificate-id is required") :type
    (common-lisp:or certificate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-certificate-request
                    'make-delete-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-connector-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-connector-request-"))
   (connector-id (common-lisp:error ":connector-id is required") :type
    (common-lisp:or connector-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-connector-request 'make-delete-connector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-id))
      (common-lisp:list
       (common-lisp:cons "ConnectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-host-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-host-key-request-"))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (host-key-id (common-lisp:error ":host-key-id is required") :type
    (common-lisp:or host-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-host-key-request 'make-delete-host-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-host-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-host-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-key-id))
      (common-lisp:list
       (common-lisp:cons "HostKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-host-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-profile-request-"))
   (profile-id (common-lisp:error ":profile-id is required") :type
    (common-lisp:or profile-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-profile-request 'make-delete-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-server-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-server-request-"))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-server-request 'make-delete-server-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-server-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-server-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-server-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-ssh-public-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-ssh-public-key-request-"))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (ssh-public-key-id (common-lisp:error ":ssh-public-key-id is required")
    :type (common-lisp:or ssh-public-key-id common-lisp:null))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or user-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-ssh-public-key-request
                    'make-delete-ssh-public-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-ssh-public-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-ssh-public-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-public-key-id))
      (common-lisp:list
       (common-lisp:cons "SshPublicKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-ssh-public-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-step-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-step-details-"))
   (name common-lisp:nil :type
    (common-lisp:or workflow-step-name common-lisp:null))
   (source-file-location common-lisp:nil :type
    (common-lisp:or source-file-location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-step-details 'make-delete-step-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-step-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-step-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-file-location))
      (common-lisp:list
       (common-lisp:cons "SourceFileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-step-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-user-request-"))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or user-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-user-request 'make-delete-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-workflow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-workflow-request-"))
   (workflow-id (common-lisp:error ":workflow-id is required") :type
    (common-lisp:or workflow-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-workflow-request 'make-delete-workflow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-access-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-access-request-"))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (external-id (common-lisp:error ":external-id is required") :type
    (common-lisp:or external-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-access-request 'make-describe-access-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-access-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-access-response-"))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (access (common-lisp:error ":access is required") :type
    (common-lisp:or described-access common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-access-response 'make-describe-access-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access))
      (common-lisp:list
       (common-lisp:cons "Access"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-agreement-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-agreement-request-"))
   (agreement-id (common-lisp:error ":agreement-id is required") :type
    (common-lisp:or agreement-id common-lisp:null))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-agreement-request
                    'make-describe-agreement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-agreement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-agreement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement-id))
      (common-lisp:list
       (common-lisp:cons "AgreementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-agreement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-agreement-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-agreement-response-"))
   (agreement (common-lisp:error ":agreement is required") :type
    (common-lisp:or described-agreement common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-agreement-response
                    'make-describe-agreement-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-agreement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-agreement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement))
      (common-lisp:list
       (common-lisp:cons "Agreement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-agreement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-certificate-request-"))
   (certificate-id (common-lisp:error ":certificate-id is required") :type
    (common-lisp:or certificate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-certificate-request
                    'make-describe-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-certificate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-certificate-response-"))
   (certificate (common-lisp:error ":certificate is required") :type
    (common-lisp:or described-certificate common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-certificate-response
                    'make-describe-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-connector-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-connector-request-"))
   (connector-id (common-lisp:error ":connector-id is required") :type
    (common-lisp:or connector-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-connector-request
                    'make-describe-connector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-id))
      (common-lisp:list
       (common-lisp:cons "ConnectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-connector-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-connector-response-"))
   (connector (common-lisp:error ":connector is required") :type
    (common-lisp:or described-connector common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-connector-response
                    'make-describe-connector-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector))
      (common-lisp:list
       (common-lisp:cons "Connector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-execution-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-execution-request-"))
   (execution-id (common-lisp:error ":execution-id is required") :type
    (common-lisp:or execution-id common-lisp:null))
   (workflow-id (common-lisp:error ":workflow-id is required") :type
    (common-lisp:or workflow-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-execution-request
                    'make-describe-execution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "ExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-execution-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-execution-response-"))
   (workflow-id (common-lisp:error ":workflow-id is required") :type
    (common-lisp:or workflow-id common-lisp:null))
   (execution (common-lisp:error ":execution is required") :type
    (common-lisp:or described-execution common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-execution-response
                    'make-describe-execution-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution))
      (common-lisp:list
       (common-lisp:cons "Execution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-host-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-host-key-request-"))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (host-key-id (common-lisp:error ":host-key-id is required") :type
    (common-lisp:or host-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-host-key-request
                    'make-describe-host-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-host-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-host-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-key-id))
      (common-lisp:list
       (common-lisp:cons "HostKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-host-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-host-key-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-host-key-response-"))
   (host-key (common-lisp:error ":host-key is required") :type
    (common-lisp:or described-host-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-host-key-response
                    'make-describe-host-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-host-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-host-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-key))
      (common-lisp:list
       (common-lisp:cons "HostKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-host-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-profile-request-"))
   (profile-id (common-lisp:error ":profile-id is required") :type
    (common-lisp:or profile-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-profile-request 'make-describe-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-profile-response-"))
   (profile (common-lisp:error ":profile is required") :type
    (common-lisp:or described-profile common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-profile-response
                    'make-describe-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile))
      (common-lisp:list
       (common-lisp:cons "Profile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-security-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-security-policy-request-"))
   (security-policy-name
    (common-lisp:error ":security-policy-name is required") :type
    (common-lisp:or security-policy-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-security-policy-request
                    'make-describe-security-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-policy-name))
      (common-lisp:list
       (common-lisp:cons "SecurityPolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-security-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-security-policy-response-"))
   (security-policy (common-lisp:error ":security-policy is required") :type
    (common-lisp:or described-security-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-security-policy-response
                    'make-describe-security-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-policy))
      (common-lisp:list
       (common-lisp:cons "SecurityPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-server-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-server-request-"))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-server-request 'make-describe-server-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-server-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-server-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-server-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-server-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-server-response-"))
   (server (common-lisp:error ":server is required") :type
    (common-lisp:or described-server common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-server-response 'make-describe-server-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-server-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-server-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server))
      (common-lisp:list
       (common-lisp:cons "Server"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-server-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-user-request-"))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or user-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-user-request 'make-describe-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-user-response-"))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (user (common-lisp:error ":user is required") :type
    (common-lisp:or described-user common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-user-response 'make-describe-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-workflow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-workflow-request-"))
   (workflow-id (common-lisp:error ":workflow-id is required") :type
    (common-lisp:or workflow-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-workflow-request
                    'make-describe-workflow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workflow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workflow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-workflow-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-workflow-response-"))
   (workflow (common-lisp:error ":workflow is required") :type
    (common-lisp:or described-workflow common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-workflow-response
                    'make-describe-workflow-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workflow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow))
      (common-lisp:list
       (common-lisp:cons "Workflow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workflow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (described-access (:copier common-lisp:nil)
      (:conc-name "struct-shape-described-access-"))
   (home-directory common-lisp:nil :type
    (common-lisp:or home-directory common-lisp:null))
   (home-directory-mappings common-lisp:nil :type
    (common-lisp:or home-directory-mappings common-lisp:null))
   (home-directory-type common-lisp:nil :type
    (common-lisp:or home-directory-type common-lisp:null))
   (policy common-lisp:nil :type (common-lisp:or policy common-lisp:null))
   (posix-profile common-lisp:nil :type
    (common-lisp:or posix-profile common-lisp:null))
   (role common-lisp:nil :type (common-lisp:or role common-lisp:null))
   (external-id common-lisp:nil :type
    (common-lisp:or external-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'described-access 'make-described-access))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input described-access))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input described-access))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory))
      (common-lisp:list
       (common-lisp:cons "HomeDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'home-directory-mappings))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory-type))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'posix-profile))
      (common-lisp:list
       (common-lisp:cons "PosixProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input described-access))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (described-agreement (:copier common-lisp:nil)
      (:conc-name "struct-shape-described-agreement-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (agreement-id common-lisp:nil :type
    (common-lisp:or agreement-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or agreement-status-type common-lisp:null))
   (server-id common-lisp:nil :type
    (common-lisp:or server-id common-lisp:null))
   (local-profile-id common-lisp:nil :type
    (common-lisp:or profile-id common-lisp:null))
   (partner-profile-id common-lisp:nil :type
    (common-lisp:or profile-id common-lisp:null))
   (base-directory common-lisp:nil :type
    (common-lisp:or home-directory common-lisp:null))
   (access-role common-lisp:nil :type (common-lisp:or role common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'described-agreement 'make-described-agreement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input described-agreement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input described-agreement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement-id))
      (common-lisp:list
       (common-lisp:cons "AgreementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-profile-id))
      (common-lisp:list
       (common-lisp:cons "LocalProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partner-profile-id))
      (common-lisp:list
       (common-lisp:cons "PartnerProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-directory))
      (common-lisp:list
       (common-lisp:cons "BaseDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-role))
      (common-lisp:list
       (common-lisp:cons "AccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input described-agreement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (described-certificate (:copier common-lisp:nil)
      (:conc-name "struct-shape-described-certificate-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (usage common-lisp:nil :type
    (common-lisp:or certificate-usage-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or certificate-status-type common-lisp:null))
   (certificate common-lisp:nil :type
    (common-lisp:or certificate-body-type common-lisp:null))
   (certificate-chain common-lisp:nil :type
    (common-lisp:or certificate-chain-type common-lisp:null))
   (active-date common-lisp:nil :type
    (common-lisp:or cert-date common-lisp:null))
   (inactive-date common-lisp:nil :type
    (common-lisp:or cert-date common-lisp:null))
   (serial common-lisp:nil :type (common-lisp:or cert-serial common-lisp:null))
   (not-before-date common-lisp:nil :type
    (common-lisp:or cert-date common-lisp:null))
   (not-after-date common-lisp:nil :type
    (common-lisp:or cert-date common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or certificate-type common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'described-certificate 'make-described-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          described-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          described-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage))
      (common-lisp:list
       (common-lisp:cons "Usage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "CertificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-date))
      (common-lisp:list
       (common-lisp:cons "ActiveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inactive-date))
      (common-lisp:list
       (common-lisp:cons "InactiveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial))
      (common-lisp:list
       (common-lisp:cons "Serial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-before-date))
      (common-lisp:list
       (common-lisp:cons "NotBeforeDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-after-date))
      (common-lisp:list
       (common-lisp:cons "NotAfterDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          described-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (described-connector (:copier common-lisp:nil)
      (:conc-name "struct-shape-described-connector-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (connector-id common-lisp:nil :type
    (common-lisp:or connector-id common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or url common-lisp:null))
   (as2config common-lisp:nil :type
    (common-lisp:or as2connector-config common-lisp:null))
   (access-role common-lisp:nil :type (common-lisp:or role common-lisp:null))
   (logging-role common-lisp:nil :type (common-lisp:or role common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'described-connector 'make-described-connector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input described-connector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input described-connector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-id))
      (common-lisp:list
       (common-lisp:cons "ConnectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'as2config))
      (common-lisp:list
       (common-lisp:cons "As2Config"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-role))
      (common-lisp:list
       (common-lisp:cons "AccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-role))
      (common-lisp:list
       (common-lisp:cons "LoggingRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input described-connector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (described-execution (:copier common-lisp:nil)
      (:conc-name "struct-shape-described-execution-"))
   (execution-id common-lisp:nil :type
    (common-lisp:or execution-id common-lisp:null))
   (initial-file-location common-lisp:nil :type
    (common-lisp:or file-location common-lisp:null))
   (service-metadata common-lisp:nil :type
    (common-lisp:or service-metadata common-lisp:null))
   (execution-role common-lisp:nil :type
    (common-lisp:or role common-lisp:null))
   (logging-configuration common-lisp:nil :type
    (common-lisp:or logging-configuration common-lisp:null))
   (posix-profile common-lisp:nil :type
    (common-lisp:or posix-profile common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or execution-status common-lisp:null))
   (results common-lisp:nil :type
    (common-lisp:or execution-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'described-execution 'make-described-execution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input described-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input described-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "ExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-file-location))
      (common-lisp:list
       (common-lisp:cons "InitialFileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-metadata))
      (common-lisp:list
       (common-lisp:cons "ServiceMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role))
      (common-lisp:list
       (common-lisp:cons "ExecutionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logging-configuration))
      (common-lisp:list
       (common-lisp:cons "LoggingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'posix-profile))
      (common-lisp:list
       (common-lisp:cons "PosixProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input described-execution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (described-host-key (:copier common-lisp:nil)
      (:conc-name "struct-shape-described-host-key-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (host-key-id common-lisp:nil :type
    (common-lisp:or host-key-id common-lisp:null))
   (host-key-fingerprint common-lisp:nil :type
    (common-lisp:or host-key-fingerprint common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or host-key-description common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or host-key-type common-lisp:null))
   (date-imported common-lisp:nil :type
    (common-lisp:or date-imported common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'described-host-key 'make-described-host-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input described-host-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input described-host-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-key-id))
      (common-lisp:list
       (common-lisp:cons "HostKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'host-key-fingerprint))
      (common-lisp:list
       (common-lisp:cons "HostKeyFingerprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-imported))
      (common-lisp:list
       (common-lisp:cons "DateImported"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input described-host-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (described-profile (:copier common-lisp:nil)
      (:conc-name "struct-shape-described-profile-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (profile-id common-lisp:nil :type
    (common-lisp:or profile-id common-lisp:null))
   (profile-type common-lisp:nil :type
    (common-lisp:or profile-type common-lisp:null))
   (as2id common-lisp:nil :type (common-lisp:or as2id common-lisp:null))
   (certificate-ids common-lisp:nil :type
    (common-lisp:or certificate-ids common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'described-profile 'make-described-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input described-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input described-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-type))
      (common-lisp:list
       (common-lisp:cons "ProfileType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'as2id))
      (common-lisp:list
       (common-lisp:cons "As2Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-ids))
      (common-lisp:list
       (common-lisp:cons "CertificateIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input described-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (described-security-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-described-security-policy-"))
   (fips common-lisp:nil :type (common-lisp:or fips common-lisp:null))
   (security-policy-name
    (common-lisp:error ":security-policy-name is required") :type
    (common-lisp:or security-policy-name common-lisp:null))
   (ssh-ciphers common-lisp:nil :type
    (common-lisp:or security-policy-options common-lisp:null))
   (ssh-kexs common-lisp:nil :type
    (common-lisp:or security-policy-options common-lisp:null))
   (ssh-macs common-lisp:nil :type
    (common-lisp:or security-policy-options common-lisp:null))
   (tls-ciphers common-lisp:nil :type
    (common-lisp:or security-policy-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'described-security-policy
                    'make-described-security-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          described-security-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          described-security-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fips))
      (common-lisp:list
       (common-lisp:cons "Fips"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-policy-name))
      (common-lisp:list
       (common-lisp:cons "SecurityPolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-ciphers))
      (common-lisp:list
       (common-lisp:cons "SshCiphers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-kexs))
      (common-lisp:list
       (common-lisp:cons "SshKexs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-macs))
      (common-lisp:list
       (common-lisp:cons "SshMacs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls-ciphers))
      (common-lisp:list
       (common-lisp:cons "TlsCiphers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          described-security-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (described-server (:copier common-lisp:nil)
      (:conc-name "struct-shape-described-server-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (certificate common-lisp:nil :type
    (common-lisp:or certificate common-lisp:null))
   (protocol-details common-lisp:nil :type
    (common-lisp:or protocol-details common-lisp:null))
   (domain common-lisp:nil :type (common-lisp:or domain common-lisp:null))
   (endpoint-details common-lisp:nil :type
    (common-lisp:or endpoint-details common-lisp:null))
   (endpoint-type common-lisp:nil :type
    (common-lisp:or endpoint-type common-lisp:null))
   (host-key-fingerprint common-lisp:nil :type
    (common-lisp:or host-key-fingerprint common-lisp:null))
   (identity-provider-details common-lisp:nil :type
    (common-lisp:or identity-provider-details common-lisp:null))
   (identity-provider-type common-lisp:nil :type
    (common-lisp:or identity-provider-type common-lisp:null))
   (logging-role common-lisp:nil :type (common-lisp:or role common-lisp:null))
   (post-authentication-login-banner common-lisp:nil :type
    (common-lisp:or post-authentication-login-banner common-lisp:null))
   (pre-authentication-login-banner common-lisp:nil :type
    (common-lisp:or pre-authentication-login-banner common-lisp:null))
   (protocols common-lisp:nil :type
    (common-lisp:or protocols common-lisp:null))
   (security-policy-name common-lisp:nil :type
    (common-lisp:or security-policy-name common-lisp:null))
   (server-id common-lisp:nil :type
    (common-lisp:or server-id common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (user-count common-lisp:nil :type
    (common-lisp:or user-count common-lisp:null))
   (workflow-details common-lisp:nil :type
    (common-lisp:or workflow-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'described-server 'make-described-server))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input described-server))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input described-server))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol-details))
      (common-lisp:list
       (common-lisp:cons "ProtocolDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-details))
      (common-lisp:list
       (common-lisp:cons "EndpointDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-type))
      (common-lisp:list
       (common-lisp:cons "EndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'host-key-fingerprint))
      (common-lisp:list
       (common-lisp:cons "HostKeyFingerprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-details))
      (common-lisp:list
       (common-lisp:cons "IdentityProviderDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-type))
      (common-lisp:list
       (common-lisp:cons "IdentityProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-role))
      (common-lisp:list
       (common-lisp:cons "LoggingRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-authentication-login-banner))
      (common-lisp:list
       (common-lisp:cons "PostAuthenticationLoginBanner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pre-authentication-login-banner))
      (common-lisp:list
       (common-lisp:cons "PreAuthenticationLoginBanner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols))
      (common-lisp:list
       (common-lisp:cons "Protocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-policy-name))
      (common-lisp:list
       (common-lisp:cons "SecurityPolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-count))
      (common-lisp:list
       (common-lisp:cons "UserCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-details))
      (common-lisp:list
       (common-lisp:cons "WorkflowDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input described-server))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (described-user (:copier common-lisp:nil)
      (:conc-name "struct-shape-described-user-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (home-directory common-lisp:nil :type
    (common-lisp:or home-directory common-lisp:null))
   (home-directory-mappings common-lisp:nil :type
    (common-lisp:or home-directory-mappings common-lisp:null))
   (home-directory-type common-lisp:nil :type
    (common-lisp:or home-directory-type common-lisp:null))
   (policy common-lisp:nil :type (common-lisp:or policy common-lisp:null))
   (posix-profile common-lisp:nil :type
    (common-lisp:or posix-profile common-lisp:null))
   (role common-lisp:nil :type (common-lisp:or role common-lisp:null))
   (ssh-public-keys common-lisp:nil :type
    (common-lisp:or ssh-public-keys common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (user-name common-lisp:nil :type
    (common-lisp:or user-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'described-user 'make-described-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input described-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input described-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory))
      (common-lisp:list
       (common-lisp:cons "HomeDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'home-directory-mappings))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory-type))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'posix-profile))
      (common-lisp:list
       (common-lisp:cons "PosixProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-public-keys))
      (common-lisp:list
       (common-lisp:cons "SshPublicKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input described-user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (described-workflow (:copier common-lisp:nil)
      (:conc-name "struct-shape-described-workflow-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or workflow-description common-lisp:null))
   (steps common-lisp:nil :type
    (common-lisp:or workflow-steps common-lisp:null))
   (on-exception-steps common-lisp:nil :type
    (common-lisp:or workflow-steps common-lisp:null))
   (workflow-id common-lisp:nil :type
    (common-lisp:or workflow-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'described-workflow 'make-described-workflow))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input described-workflow))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input described-workflow))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'steps))
      (common-lisp:list
       (common-lisp:cons "Steps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-exception-steps))
      (common-lisp:list
       (common-lisp:cons "OnExceptionSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input described-workflow))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype directory-id () 'common-lisp:string)
(common-lisp:deftype domain () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (efs-file-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-efs-file-location-"))
   (file-system-id common-lisp:nil :type
    (common-lisp:or efs-file-system-id common-lisp:null))
   (path common-lisp:nil :type (common-lisp:or efs-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'efs-file-location 'make-efs-file-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input efs-file-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input efs-file-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input efs-file-location))
   common-lisp:nil))
(common-lisp:deftype efs-file-system-id () 'common-lisp:string)
(common-lisp:deftype efs-path () 'common-lisp:string)
(common-lisp:deftype encryption-alg () 'common-lisp:string)
(common-lisp:deftype encryption-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoint-details-"))
   (address-allocation-ids common-lisp:nil :type
    (common-lisp:or address-allocation-ids common-lisp:null))
   (subnet-ids common-lisp:nil :type
    (common-lisp:or subnet-ids common-lisp:null))
   (vpc-endpoint-id common-lisp:nil :type
    (common-lisp:or vpc-endpoint-id common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or vpc-id common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or security-group-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'endpoint-details 'make-endpoint-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'address-allocation-ids))
      (common-lisp:list
       (common-lisp:cons "AddressAllocationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-details))
   common-lisp:nil))
(common-lisp:deftype endpoint-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (execution-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-execution-error-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or execution-error-type common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or execution-error-message common-lisp:null)))
 (common-lisp:export (common-lisp:list 'execution-error 'make-execution-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execution-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execution-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execution-error))
   common-lisp:nil))
(common-lisp:deftype execution-error-message () 'common-lisp:string)
(common-lisp:deftype execution-error-type () 'common-lisp:string)
(common-lisp:deftype execution-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (execution-results (:copier common-lisp:nil)
      (:conc-name "struct-shape-execution-results-"))
   (steps common-lisp:nil :type
    (common-lisp:or execution-step-results common-lisp:null))
   (on-exception-steps common-lisp:nil :type
    (common-lisp:or execution-step-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'execution-results 'make-execution-results))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execution-results))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execution-results))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'steps))
      (common-lisp:list
       (common-lisp:cons "Steps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-exception-steps))
      (common-lisp:list
       (common-lisp:cons "OnExceptionSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execution-results))
   common-lisp:nil))
(common-lisp:deftype execution-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (execution-step-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-execution-step-result-"))
   (step-type common-lisp:nil :type
    (common-lisp:or workflow-step-type common-lisp:null))
   (outputs common-lisp:nil :type
    (common-lisp:or step-result-outputs-json common-lisp:null))
   (error common-lisp:nil :type
    (common-lisp:or execution-error common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'execution-step-result 'make-execution-step-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execution-step-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execution-step-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-type))
      (common-lisp:list
       (common-lisp:cons "StepType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execution-step-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype execution-step-results ()
   '(trivial-types:proper-list execution-step-result))
 (common-lisp:defun |make-execution-step-results|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list execution-step-result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype external-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (file-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-file-location-"))
   (s3file-location common-lisp:nil :type
    (common-lisp:or s3file-location common-lisp:null))
   (efs-file-location common-lisp:nil :type
    (common-lisp:or efs-file-location common-lisp:null)))
 (common-lisp:export (common-lisp:list 'file-location 'make-file-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input file-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input file-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3file-location))
      (common-lisp:list
       (common-lisp:cons "S3FileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'efs-file-location))
      (common-lisp:list
       (common-lisp:cons "EfsFileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input file-location))
   common-lisp:nil))
(common-lisp:deftype file-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype file-paths () '(trivial-types:proper-list file-path))
 (common-lisp:defun |make-file-paths|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list file-path))
   aws-sdk/generator/shape::members))
(common-lisp:deftype fips () 'common-lisp:boolean)
(common-lisp:deftype function () 'common-lisp:string)
(common-lisp:deftype home-directory () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (home-directory-map-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-home-directory-map-entry-"))
   (entry (common-lisp:error ":entry is required") :type
    (common-lisp:or map-entry common-lisp:null))
   (target (common-lisp:error ":target is required") :type
    (common-lisp:or map-target common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'home-directory-map-entry 'make-home-directory-map-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          home-directory-map-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          home-directory-map-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry))
      (common-lisp:list
       (common-lisp:cons "Entry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          home-directory-map-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype home-directory-mappings ()
   '(trivial-types:proper-list home-directory-map-entry))
 (common-lisp:defun |make-home-directory-mappings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            home-directory-map-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype home-directory-type () 'common-lisp:string)
(common-lisp:deftype host-key () 'common-lisp:string)
(common-lisp:deftype host-key-description () 'common-lisp:string)
(common-lisp:deftype host-key-fingerprint () 'common-lisp:string)
(common-lisp:deftype host-key-id () 'common-lisp:string)
(common-lisp:deftype host-key-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (identity-provider-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-identity-provider-details-"))
   (url common-lisp:nil :type (common-lisp:or url common-lisp:null))
   (invocation-role common-lisp:nil :type
    (common-lisp:or role common-lisp:null))
   (directory-id common-lisp:nil :type
    (common-lisp:or directory-id common-lisp:null))
   (function common-lisp:nil :type (common-lisp:or function common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'identity-provider-details
                    'make-identity-provider-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-role))
      (common-lisp:list
       (common-lisp:cons "InvocationRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function))
      (common-lisp:list
       (common-lisp:cons "Function"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-details))
   common-lisp:nil))
(common-lisp:deftype identity-provider-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (import-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-certificate-request-"))
   (usage (common-lisp:error ":usage is required") :type
    (common-lisp:or certificate-usage-type common-lisp:null))
   (certificate (common-lisp:error ":certificate is required") :type
    (common-lisp:or certificate-body-type common-lisp:null))
   (certificate-chain common-lisp:nil :type
    (common-lisp:or certificate-chain-type common-lisp:null))
   (private-key common-lisp:nil :type
    (common-lisp:or private-key-type common-lisp:null))
   (active-date common-lisp:nil :type
    (common-lisp:or cert-date common-lisp:null))
   (inactive-date common-lisp:nil :type
    (common-lisp:or cert-date common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-certificate-request
                    'make-import-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage))
      (common-lisp:list
       (common-lisp:cons "Usage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "CertificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key))
      (common-lisp:list
       (common-lisp:cons "PrivateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-date))
      (common-lisp:list
       (common-lisp:cons "ActiveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inactive-date))
      (common-lisp:list
       (common-lisp:cons "InactiveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-certificate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-certificate-response-"))
   (certificate-id (common-lisp:error ":certificate-id is required") :type
    (common-lisp:or certificate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-certificate-response
                    'make-import-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-host-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-host-key-request-"))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (host-key-body (common-lisp:error ":host-key-body is required") :type
    (common-lisp:or host-key common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or host-key-description common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-host-key-request 'make-import-host-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-host-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-host-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-key-body))
      (common-lisp:list
       (common-lisp:cons "HostKeyBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-host-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-host-key-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-host-key-response-"))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (host-key-id (common-lisp:error ":host-key-id is required") :type
    (common-lisp:or host-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-host-key-response 'make-import-host-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-host-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-host-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-key-id))
      (common-lisp:list
       (common-lisp:cons "HostKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-host-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-ssh-public-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-ssh-public-key-request-"))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (ssh-public-key-body (common-lisp:error ":ssh-public-key-body is required")
    :type (common-lisp:or ssh-public-key-body common-lisp:null))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or user-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-ssh-public-key-request
                    'make-import-ssh-public-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-ssh-public-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-ssh-public-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-public-key-body))
      (common-lisp:list
       (common-lisp:cons "SshPublicKeyBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-ssh-public-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-ssh-public-key-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-ssh-public-key-response-"))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (ssh-public-key-id (common-lisp:error ":ssh-public-key-id is required")
    :type (common-lisp:or ssh-public-key-id common-lisp:null))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or user-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-ssh-public-key-response
                    'make-import-ssh-public-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-ssh-public-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-ssh-public-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-public-key-id))
      (common-lisp:list
       (common-lisp:cons "SshPublicKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-ssh-public-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-file-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-file-location-"))
   (s3file-location common-lisp:nil :type
    (common-lisp:or s3input-file-location common-lisp:null))
   (efs-file-location common-lisp:nil :type
    (common-lisp:or efs-file-location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-file-location 'make-input-file-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-file-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-file-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3file-location))
      (common-lisp:list
       (common-lisp:cons "S3FileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'efs-file-location))
      (common-lisp:list
       (common-lisp:cons "EfsFileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-file-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-service-error
     (transfer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-error-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-error 'internal-service-error-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (transfer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-next-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'invalid-next-token-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (transfer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-accesses-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-accesses-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-accesses-request 'make-list-accesses-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-accesses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-accesses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-accesses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-accesses-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-accesses-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (accesses (common-lisp:error ":accesses is required") :type
    (common-lisp:or listed-accesses common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-accesses-response 'make-list-accesses-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-accesses-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-accesses-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accesses))
      (common-lisp:list
       (common-lisp:cons "Accesses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-accesses-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-agreements-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-agreements-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-agreements-request 'make-list-agreements-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-agreements-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-agreements-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-agreements-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-agreements-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-agreements-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (agreements (common-lisp:error ":agreements is required") :type
    (common-lisp:or listed-agreements common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-agreements-response 'make-list-agreements-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-agreements-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-agreements-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreements))
      (common-lisp:list
       (common-lisp:cons "Agreements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-agreements-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-certificates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-certificates-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-certificates-request
                    'make-list-certificates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-certificates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-certificates-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (certificates (common-lisp:error ":certificates is required") :type
    (common-lisp:or listed-certificates common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-certificates-response
                    'make-list-certificates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "Certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-connectors-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-connectors-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-connectors-request 'make-list-connectors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-connectors-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-connectors-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (connectors (common-lisp:error ":connectors is required") :type
    (common-lisp:or listed-connectors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-connectors-response 'make-list-connectors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connectors))
      (common-lisp:list
       (common-lisp:cons "Connectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-executions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-executions-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (workflow-id (common-lisp:error ":workflow-id is required") :type
    (common-lisp:or workflow-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-executions-request 'make-list-executions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-executions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-executions-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (workflow-id (common-lisp:error ":workflow-id is required") :type
    (common-lisp:or workflow-id common-lisp:null))
   (executions (common-lisp:error ":executions is required") :type
    (common-lisp:or listed-executions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-executions-response 'make-list-executions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executions))
      (common-lisp:list
       (common-lisp:cons "Executions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-host-keys-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-host-keys-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-host-keys-request 'make-list-host-keys-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-host-keys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-host-keys-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-host-keys-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-host-keys-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-host-keys-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (host-keys (common-lisp:error ":host-keys is required") :type
    (common-lisp:or listed-host-keys common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-host-keys-response 'make-list-host-keys-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-host-keys-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-host-keys-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-keys))
      (common-lisp:list
       (common-lisp:cons "HostKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-host-keys-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-profiles-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-profiles-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (profile-type common-lisp:nil :type
    (common-lisp:or profile-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-profiles-request 'make-list-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profiles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-type))
      (common-lisp:list
       (common-lisp:cons "ProfileType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-profiles-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-profiles-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (profiles (common-lisp:error ":profiles is required") :type
    (common-lisp:or listed-profiles common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-profiles-response 'make-list-profiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiles))
      (common-lisp:list
       (common-lisp:cons "Profiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-security-policies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-security-policies-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-security-policies-request
                    'make-list-security-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-security-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-security-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-security-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-security-policies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-security-policies-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (security-policy-names
    (common-lisp:error ":security-policy-names is required") :type
    (common-lisp:or security-policy-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-security-policies-response
                    'make-list-security-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-security-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-security-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-policy-names))
      (common-lisp:list
       (common-lisp:cons "SecurityPolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-security-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-servers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-servers-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-servers-request 'make-list-servers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-servers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-servers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-servers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-servers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-servers-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (servers (common-lisp:error ":servers is required") :type
    (common-lisp:or listed-servers common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-servers-response 'make-list-servers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-servers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-servers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'servers))
      (common-lisp:list
       (common-lisp:cons "Servers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-servers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-users-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-users-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-users-request 'make-list-users-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-users-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-users-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (users (common-lisp:error ":users is required") :type
    (common-lisp:or listed-users common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-users-response 'make-list-users-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "Users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-workflows-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-workflows-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-workflows-request 'make-list-workflows-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-workflows-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-workflows-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (workflows (common-lisp:error ":workflows is required") :type
    (common-lisp:or listed-workflows common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-workflows-response 'make-list-workflows-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflows))
      (common-lisp:list
       (common-lisp:cons "Workflows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (listed-access (:copier common-lisp:nil)
      (:conc-name "struct-shape-listed-access-"))
   (home-directory common-lisp:nil :type
    (common-lisp:or home-directory common-lisp:null))
   (home-directory-type common-lisp:nil :type
    (common-lisp:or home-directory-type common-lisp:null))
   (role common-lisp:nil :type (common-lisp:or role common-lisp:null))
   (external-id common-lisp:nil :type
    (common-lisp:or external-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'listed-access 'make-listed-access))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-access))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-access))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory))
      (common-lisp:list
       (common-lisp:cons "HomeDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory-type))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-access))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype listed-accesses ()
   '(trivial-types:proper-list listed-access))
 (common-lisp:defun |make-listed-accesses|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-access))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (listed-agreement (:copier common-lisp:nil)
      (:conc-name "struct-shape-listed-agreement-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (agreement-id common-lisp:nil :type
    (common-lisp:or agreement-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or agreement-status-type common-lisp:null))
   (server-id common-lisp:nil :type
    (common-lisp:or server-id common-lisp:null))
   (local-profile-id common-lisp:nil :type
    (common-lisp:or profile-id common-lisp:null))
   (partner-profile-id common-lisp:nil :type
    (common-lisp:or profile-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'listed-agreement 'make-listed-agreement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-agreement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-agreement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement-id))
      (common-lisp:list
       (common-lisp:cons "AgreementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-profile-id))
      (common-lisp:list
       (common-lisp:cons "LocalProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partner-profile-id))
      (common-lisp:list
       (common-lisp:cons "PartnerProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-agreement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype listed-agreements ()
   '(trivial-types:proper-list listed-agreement))
 (common-lisp:defun |make-listed-agreements|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-agreement))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (listed-certificate (:copier common-lisp:nil)
      (:conc-name "struct-shape-listed-certificate-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (usage common-lisp:nil :type
    (common-lisp:or certificate-usage-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or certificate-status-type common-lisp:null))
   (active-date common-lisp:nil :type
    (common-lisp:or cert-date common-lisp:null))
   (inactive-date common-lisp:nil :type
    (common-lisp:or cert-date common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or certificate-type common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'listed-certificate 'make-listed-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage))
      (common-lisp:list
       (common-lisp:cons "Usage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-date))
      (common-lisp:list
       (common-lisp:cons "ActiveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inactive-date))
      (common-lisp:list
       (common-lisp:cons "InactiveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype listed-certificates ()
   '(trivial-types:proper-list listed-certificate))
 (common-lisp:defun |make-listed-certificates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-certificate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (listed-connector (:copier common-lisp:nil)
      (:conc-name "struct-shape-listed-connector-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (connector-id common-lisp:nil :type
    (common-lisp:or connector-id common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'listed-connector 'make-listed-connector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-connector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-connector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-id))
      (common-lisp:list
       (common-lisp:cons "ConnectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-connector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype listed-connectors ()
   '(trivial-types:proper-list listed-connector))
 (common-lisp:defun |make-listed-connectors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-connector))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (listed-execution (:copier common-lisp:nil)
      (:conc-name "struct-shape-listed-execution-"))
   (execution-id common-lisp:nil :type
    (common-lisp:or execution-id common-lisp:null))
   (initial-file-location common-lisp:nil :type
    (common-lisp:or file-location common-lisp:null))
   (service-metadata common-lisp:nil :type
    (common-lisp:or service-metadata common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or execution-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'listed-execution 'make-listed-execution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "ExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-file-location))
      (common-lisp:list
       (common-lisp:cons "InitialFileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-metadata))
      (common-lisp:list
       (common-lisp:cons "ServiceMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-execution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype listed-executions ()
   '(trivial-types:proper-list listed-execution))
 (common-lisp:defun |make-listed-executions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-execution))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (listed-host-key (:copier common-lisp:nil)
      (:conc-name "struct-shape-listed-host-key-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (host-key-id common-lisp:nil :type
    (common-lisp:or host-key-id common-lisp:null))
   (fingerprint common-lisp:nil :type
    (common-lisp:or host-key-fingerprint common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or host-key-description common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or host-key-type common-lisp:null))
   (date-imported common-lisp:nil :type
    (common-lisp:or date-imported common-lisp:null)))
 (common-lisp:export (common-lisp:list 'listed-host-key 'make-listed-host-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-host-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-host-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-key-id))
      (common-lisp:list
       (common-lisp:cons "HostKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fingerprint))
      (common-lisp:list
       (common-lisp:cons "Fingerprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-imported))
      (common-lisp:list
       (common-lisp:cons "DateImported"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-host-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype listed-host-keys ()
   '(trivial-types:proper-list listed-host-key))
 (common-lisp:defun |make-listed-host-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-host-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (listed-profile (:copier common-lisp:nil)
      (:conc-name "struct-shape-listed-profile-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (profile-id common-lisp:nil :type
    (common-lisp:or profile-id common-lisp:null))
   (as2id common-lisp:nil :type (common-lisp:or as2id common-lisp:null))
   (profile-type common-lisp:nil :type
    (common-lisp:or profile-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'listed-profile 'make-listed-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'as2id))
      (common-lisp:list
       (common-lisp:cons "As2Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-type))
      (common-lisp:list
       (common-lisp:cons "ProfileType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype listed-profiles ()
   '(trivial-types:proper-list listed-profile))
 (common-lisp:defun |make-listed-profiles|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-profile))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (listed-server (:copier common-lisp:nil)
      (:conc-name "struct-shape-listed-server-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (domain common-lisp:nil :type (common-lisp:or domain common-lisp:null))
   (identity-provider-type common-lisp:nil :type
    (common-lisp:or identity-provider-type common-lisp:null))
   (endpoint-type common-lisp:nil :type
    (common-lisp:or endpoint-type common-lisp:null))
   (logging-role common-lisp:nil :type (common-lisp:or role common-lisp:null))
   (server-id common-lisp:nil :type
    (common-lisp:or server-id common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or state common-lisp:null))
   (user-count common-lisp:nil :type
    (common-lisp:or user-count common-lisp:null)))
 (common-lisp:export (common-lisp:list 'listed-server 'make-listed-server))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-server))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-server))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-type))
      (common-lisp:list
       (common-lisp:cons "IdentityProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-type))
      (common-lisp:list
       (common-lisp:cons "EndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-role))
      (common-lisp:list
       (common-lisp:cons "LoggingRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-count))
      (common-lisp:list
       (common-lisp:cons "UserCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-server))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype listed-servers ()
   '(trivial-types:proper-list listed-server))
 (common-lisp:defun |make-listed-servers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-server))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (listed-user (:copier common-lisp:nil)
      (:conc-name "struct-shape-listed-user-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (home-directory common-lisp:nil :type
    (common-lisp:or home-directory common-lisp:null))
   (home-directory-type common-lisp:nil :type
    (common-lisp:or home-directory-type common-lisp:null))
   (role common-lisp:nil :type (common-lisp:or role common-lisp:null))
   (ssh-public-key-count common-lisp:nil :type
    (common-lisp:or ssh-public-key-count common-lisp:null))
   (user-name common-lisp:nil :type
    (common-lisp:or user-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'listed-user 'make-listed-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory))
      (common-lisp:list
       (common-lisp:cons "HomeDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory-type))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssh-public-key-count))
      (common-lisp:list
       (common-lisp:cons "SshPublicKeyCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype listed-users () '(trivial-types:proper-list listed-user))
 (common-lisp:defun |make-listed-users|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-user))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (listed-workflow (:copier common-lisp:nil)
      (:conc-name "struct-shape-listed-workflow-"))
   (workflow-id common-lisp:nil :type
    (common-lisp:or workflow-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or workflow-description common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'listed-workflow 'make-listed-workflow))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-workflow))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-workflow))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-workflow))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype listed-workflows ()
   '(trivial-types:proper-list listed-workflow))
 (common-lisp:defun |make-listed-workflows|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-workflow))
   aws-sdk/generator/shape::members))
(common-lisp:deftype log-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (logging-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-logging-configuration-"))
   (logging-role common-lisp:nil :type (common-lisp:or role common-lisp:null))
   (log-group-name common-lisp:nil :type
    (common-lisp:or log-group-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'logging-configuration 'make-logging-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-role))
      (common-lisp:list
       (common-lisp:cons "LoggingRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "LogGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration))
   common-lisp:nil))
(common-lisp:deftype map-entry () 'common-lisp:string)
(common-lisp:deftype map-target () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype mdn-response () 'common-lisp:string)
(common-lisp:deftype mdn-signing-alg () 'common-lisp:string)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:deftype message-subject () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype nullable-role () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype on-partial-upload-workflow-details ()
   '(trivial-types:proper-list workflow-detail))
 (common-lisp:defun |make-on-partial-upload-workflow-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workflow-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype on-upload-workflow-details ()
   '(trivial-types:proper-list workflow-detail))
 (common-lisp:defun |make-on-upload-workflow-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workflow-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype overwrite-existing () 'common-lisp:string)
(common-lisp:deftype passive-ip () 'common-lisp:string)
(common-lisp:deftype policy () 'common-lisp:string)
(common-lisp:deftype posix-id () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (posix-profile (:copier common-lisp:nil)
      (:conc-name "struct-shape-posix-profile-"))
   (uid (common-lisp:error ":uid is required") :type
    (common-lisp:or posix-id common-lisp:null))
   (gid (common-lisp:error ":gid is required") :type
    (common-lisp:or posix-id common-lisp:null))
   (secondary-gids common-lisp:nil :type
    (common-lisp:or secondary-gids common-lisp:null)))
 (common-lisp:export (common-lisp:list 'posix-profile 'make-posix-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input posix-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input posix-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uid))
      (common-lisp:list
       (common-lisp:cons "Uid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gid))
      (common-lisp:list
       (common-lisp:cons "Gid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secondary-gids))
      (common-lisp:list
       (common-lisp:cons "SecondaryGids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input posix-profile))
   common-lisp:nil))
(common-lisp:deftype post-authentication-login-banner () 'common-lisp:string)
(common-lisp:deftype pre-authentication-login-banner () 'common-lisp:string)
(common-lisp:deftype private-key-type () 'common-lisp:string)
(common-lisp:deftype profile-id () 'common-lisp:string)
(common-lisp:deftype profile-type () 'common-lisp:string)
(common-lisp:deftype protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (protocol-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-protocol-details-"))
   (passive-ip common-lisp:nil :type
    (common-lisp:or passive-ip common-lisp:null))
   (tls-session-resumption-mode common-lisp:nil :type
    (common-lisp:or tls-session-resumption-mode common-lisp:null))
   (set-stat-option common-lisp:nil :type
    (common-lisp:or set-stat-option common-lisp:null))
   (as2transports common-lisp:nil :type
    (common-lisp:or as2transports common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'protocol-details 'make-protocol-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input protocol-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input protocol-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'passive-ip))
      (common-lisp:list
       (common-lisp:cons "PassiveIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tls-session-resumption-mode))
      (common-lisp:list
       (common-lisp:cons "TlsSessionResumptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'set-stat-option))
      (common-lisp:list
       (common-lisp:cons "SetStatOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'as2transports))
      (common-lisp:list
       (common-lisp:cons "As2Transports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input protocol-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype protocols () '(trivial-types:proper-list protocol))
 (common-lisp:defun |make-protocols|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list protocol))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-exists-exception
     (transfer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-exists-exception-message)
      (resource :initarg :resource :initform common-lisp:nil :reader
       resource-exists-exception-resource)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-exists-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-exists-exception
                    'resource-exists-exception-message
                    'resource-exists-exception-resource
                    'resource-exists-exception-resource-type)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (transfer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource :initarg :resource :initform common-lisp:nil :reader
       resource-not-found-exception-resource)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype response () 'common-lisp:string)
(common-lisp:deftype retry-after-seconds () 'common-lisp:string)
(common-lisp:deftype role () 'common-lisp:string)
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3etag () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3file-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3file-location-"))
   (bucket common-lisp:nil :type (common-lisp:or s3bucket common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or s3key common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or s3version-id common-lisp:null))
   (etag common-lisp:nil :type (common-lisp:or s3etag common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3file-location 'make-s3file-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3file-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3file-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "Etag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3file-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3input-file-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3input-file-location-"))
   (bucket common-lisp:nil :type (common-lisp:or s3bucket common-lisp:null))
   (key common-lisp:nil :type (common-lisp:or s3key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3input-file-location 'make-s3input-file-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3input-file-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3input-file-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3input-file-location))
   common-lisp:nil))
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3tag (:copier common-lisp:nil) (:conc-name "struct-shape-s3tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or s3tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or s3tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3tag 'make-s3tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3tag))
   common-lisp:nil))
(common-lisp:deftype s3tag-key () 'common-lisp:string)
(common-lisp:deftype s3tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype s3tags () '(trivial-types:proper-list s3tag))
 (common-lisp:defun |make-s3tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3version-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype secondary-gids () '(trivial-types:proper-list posix-id))
 (common-lisp:defun |make-secondary-gids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list posix-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-ids ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun |make-security-group-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype security-policy-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-policy-names ()
   '(trivial-types:proper-list security-policy-name))
 (common-lisp:defun |make-security-policy-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-policy-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype security-policy-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-policy-options ()
   '(trivial-types:proper-list security-policy-option))
 (common-lisp:defun |make-security-policy-options|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-policy-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (send-workflow-step-state-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-workflow-step-state-request-"))
   (workflow-id (common-lisp:error ":workflow-id is required") :type
    (common-lisp:or workflow-id common-lisp:null))
   (execution-id (common-lisp:error ":execution-id is required") :type
    (common-lisp:or execution-id common-lisp:null))
   (token (common-lisp:error ":token is required") :type
    (common-lisp:or callback-token common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or custom-step-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-workflow-step-state-request
                    'make-send-workflow-step-state-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-workflow-step-state-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-workflow-step-state-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "ExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "Token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-workflow-step-state-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-workflow-step-state-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-workflow-step-state-response-")))
 (common-lisp:export
  (common-lisp:list 'send-workflow-step-state-response
                    'make-send-workflow-step-state-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-workflow-step-state-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-workflow-step-state-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-workflow-step-state-response))
   common-lisp:nil))
(common-lisp:deftype server-id () 'common-lisp:string)
(common-lisp:deftype service-error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (service-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-metadata-"))
   (user-details (common-lisp:error ":user-details is required") :type
    (common-lisp:or user-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-metadata 'make-service-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-details))
      (common-lisp:list
       (common-lisp:cons "UserDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (transfer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:deftype session-id () 'common-lisp:string)
(common-lisp:deftype set-stat-option () 'common-lisp:string)
(common-lisp:deftype signing-alg () 'common-lisp:string)
(common-lisp:deftype source-file-location () 'common-lisp:string)
(common-lisp:deftype source-ip () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ssh-public-key (:copier common-lisp:nil)
      (:conc-name "struct-shape-ssh-public-key-"))
   (date-imported (common-lisp:error ":date-imported is required") :type
    (common-lisp:or date-imported common-lisp:null))
   (ssh-public-key-body (common-lisp:error ":ssh-public-key-body is required")
    :type (common-lisp:or ssh-public-key-body common-lisp:null))
   (ssh-public-key-id (common-lisp:error ":ssh-public-key-id is required")
    :type (common-lisp:or ssh-public-key-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ssh-public-key 'make-ssh-public-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ssh-public-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ssh-public-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-imported))
      (common-lisp:list
       (common-lisp:cons "DateImported"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-public-key-body))
      (common-lisp:list
       (common-lisp:cons "SshPublicKeyBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-public-key-id))
      (common-lisp:list
       (common-lisp:cons "SshPublicKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ssh-public-key))
   common-lisp:nil))
(common-lisp:deftype ssh-public-key-body () 'common-lisp:string)
(common-lisp:deftype ssh-public-key-count () 'common-lisp:integer)
(common-lisp:deftype ssh-public-key-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ssh-public-keys ()
   '(trivial-types:proper-list ssh-public-key))
 (common-lisp:defun |make-ssh-public-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ssh-public-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (start-file-transfer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-file-transfer-request-"))
   (connector-id (common-lisp:error ":connector-id is required") :type
    (common-lisp:or connector-id common-lisp:null))
   (send-file-paths (common-lisp:error ":send-file-paths is required") :type
    (common-lisp:or file-paths common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-file-transfer-request
                    'make-start-file-transfer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-file-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-file-transfer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-id))
      (common-lisp:list
       (common-lisp:cons "ConnectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'send-file-paths))
      (common-lisp:list
       (common-lisp:cons "SendFilePaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-file-transfer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-file-transfer-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-file-transfer-response-"))
   (transfer-id (common-lisp:error ":transfer-id is required") :type
    (common-lisp:or transfer-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-file-transfer-response
                    'make-start-file-transfer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-file-transfer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-file-transfer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-id))
      (common-lisp:list
       (common-lisp:cons "TransferId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-file-transfer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-server-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-server-request-"))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-server-request 'make-start-server-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-server-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-server-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-server-request))
   common-lisp:nil))
(common-lisp:deftype state () 'common-lisp:string)
(common-lisp:deftype status-code () 'common-lisp:integer)
(common-lisp:deftype step-result-outputs-json () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stop-server-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-server-request-"))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-server-request 'make-stop-server-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-server-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-server-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-server-request))
   common-lisp:nil))
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-ids () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun |make-subnet-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-step-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-step-details-"))
   (name common-lisp:nil :type
    (common-lisp:or workflow-step-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or s3tags common-lisp:null))
   (source-file-location common-lisp:nil :type
    (common-lisp:or source-file-location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-step-details 'make-tag-step-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-step-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-step-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-file-location))
      (common-lisp:list
       (common-lisp:cons "SourceFileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-step-details))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (test-identity-provider-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-identity-provider-request-"))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (server-protocol common-lisp:nil :type
    (common-lisp:or protocol common-lisp:null))
   (source-ip common-lisp:nil :type
    (common-lisp:or source-ip common-lisp:null))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or user-name common-lisp:null))
   (user-password common-lisp:nil :type
    (common-lisp:or user-password common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-identity-provider-request
                    'make-test-identity-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-identity-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-identity-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-protocol))
      (common-lisp:list
       (common-lisp:cons "ServerProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ip))
      (common-lisp:list
       (common-lisp:cons "SourceIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-password))
      (common-lisp:list
       (common-lisp:cons "UserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-identity-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (test-identity-provider-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-identity-provider-response-"))
   (response common-lisp:nil :type (common-lisp:or response common-lisp:null))
   (status-code (common-lisp:error ":status-code is required") :type
    (common-lisp:or status-code common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or message common-lisp:null))
   (url (common-lisp:error ":url is required") :type
    (common-lisp:or url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-identity-provider-response
                    'make-test-identity-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-identity-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-identity-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response))
      (common-lisp:list
       (common-lisp:cons "Response"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "StatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-identity-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (transfer-error)
     ((retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception
                    'throttling-exception-retry-after-seconds)))
(common-lisp:deftype tls-session-resumption-mode () 'common-lisp:string)
(common-lisp:deftype transfer-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-keys common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-access-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-access-request-"))
   (home-directory common-lisp:nil :type
    (common-lisp:or home-directory common-lisp:null))
   (home-directory-type common-lisp:nil :type
    (common-lisp:or home-directory-type common-lisp:null))
   (home-directory-mappings common-lisp:nil :type
    (common-lisp:or home-directory-mappings common-lisp:null))
   (policy common-lisp:nil :type (common-lisp:or policy common-lisp:null))
   (posix-profile common-lisp:nil :type
    (common-lisp:or posix-profile common-lisp:null))
   (role common-lisp:nil :type (common-lisp:or role common-lisp:null))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (external-id (common-lisp:error ":external-id is required") :type
    (common-lisp:or external-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-access-request 'make-update-access-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-access-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory))
      (common-lisp:list
       (common-lisp:cons "HomeDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory-type))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'home-directory-mappings))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'posix-profile))
      (common-lisp:list
       (common-lisp:cons "PosixProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-access-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-access-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-access-response-"))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (external-id (common-lisp:error ":external-id is required") :type
    (common-lisp:or external-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-access-response 'make-update-access-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-access-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-access-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-access-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-agreement-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-agreement-request-"))
   (agreement-id (common-lisp:error ":agreement-id is required") :type
    (common-lisp:or agreement-id common-lisp:null))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or agreement-status-type common-lisp:null))
   (local-profile-id common-lisp:nil :type
    (common-lisp:or profile-id common-lisp:null))
   (partner-profile-id common-lisp:nil :type
    (common-lisp:or profile-id common-lisp:null))
   (base-directory common-lisp:nil :type
    (common-lisp:or home-directory common-lisp:null))
   (access-role common-lisp:nil :type (common-lisp:or role common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-agreement-request 'make-update-agreement-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-agreement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-agreement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement-id))
      (common-lisp:list
       (common-lisp:cons "AgreementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-profile-id))
      (common-lisp:list
       (common-lisp:cons "LocalProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partner-profile-id))
      (common-lisp:list
       (common-lisp:cons "PartnerProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-directory))
      (common-lisp:list
       (common-lisp:cons "BaseDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-role))
      (common-lisp:list
       (common-lisp:cons "AccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-agreement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-agreement-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-agreement-response-"))
   (agreement-id (common-lisp:error ":agreement-id is required") :type
    (common-lisp:or agreement-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-agreement-response
                    'make-update-agreement-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-agreement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-agreement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement-id))
      (common-lisp:list
       (common-lisp:cons "AgreementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-agreement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-certificate-request-"))
   (certificate-id (common-lisp:error ":certificate-id is required") :type
    (common-lisp:or certificate-id common-lisp:null))
   (active-date common-lisp:nil :type
    (common-lisp:or cert-date common-lisp:null))
   (inactive-date common-lisp:nil :type
    (common-lisp:or cert-date common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-certificate-request
                    'make-update-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-date))
      (common-lisp:list
       (common-lisp:cons "ActiveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inactive-date))
      (common-lisp:list
       (common-lisp:cons "InactiveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-certificate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-certificate-response-"))
   (certificate-id (common-lisp:error ":certificate-id is required") :type
    (common-lisp:or certificate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-certificate-response
                    'make-update-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-connector-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-connector-request-"))
   (connector-id (common-lisp:error ":connector-id is required") :type
    (common-lisp:or connector-id common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or url common-lisp:null))
   (as2config common-lisp:nil :type
    (common-lisp:or as2connector-config common-lisp:null))
   (access-role common-lisp:nil :type (common-lisp:or role common-lisp:null))
   (logging-role common-lisp:nil :type (common-lisp:or role common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-connector-request 'make-update-connector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-id))
      (common-lisp:list
       (common-lisp:cons "ConnectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'as2config))
      (common-lisp:list
       (common-lisp:cons "As2Config"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-role))
      (common-lisp:list
       (common-lisp:cons "AccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-role))
      (common-lisp:list
       (common-lisp:cons "LoggingRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-connector-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-connector-response-"))
   (connector-id (common-lisp:error ":connector-id is required") :type
    (common-lisp:or connector-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-connector-response
                    'make-update-connector-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-id))
      (common-lisp:list
       (common-lisp:cons "ConnectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-host-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-host-key-request-"))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (host-key-id (common-lisp:error ":host-key-id is required") :type
    (common-lisp:or host-key-id common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or host-key-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-host-key-request 'make-update-host-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-host-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-host-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-key-id))
      (common-lisp:list
       (common-lisp:cons "HostKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-host-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-host-key-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-host-key-response-"))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (host-key-id (common-lisp:error ":host-key-id is required") :type
    (common-lisp:or host-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-host-key-response 'make-update-host-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-host-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-host-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-key-id))
      (common-lisp:list
       (common-lisp:cons "HostKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-host-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-profile-request-"))
   (profile-id (common-lisp:error ":profile-id is required") :type
    (common-lisp:or profile-id common-lisp:null))
   (certificate-ids common-lisp:nil :type
    (common-lisp:or certificate-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-profile-request 'make-update-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-ids))
      (common-lisp:list
       (common-lisp:cons "CertificateIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-profile-response-"))
   (profile-id (common-lisp:error ":profile-id is required") :type
    (common-lisp:or profile-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-profile-response 'make-update-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-server-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-server-request-"))
   (certificate common-lisp:nil :type
    (common-lisp:or certificate common-lisp:null))
   (protocol-details common-lisp:nil :type
    (common-lisp:or protocol-details common-lisp:null))
   (endpoint-details common-lisp:nil :type
    (common-lisp:or endpoint-details common-lisp:null))
   (endpoint-type common-lisp:nil :type
    (common-lisp:or endpoint-type common-lisp:null))
   (host-key common-lisp:nil :type (common-lisp:or host-key common-lisp:null))
   (identity-provider-details common-lisp:nil :type
    (common-lisp:or identity-provider-details common-lisp:null))
   (logging-role common-lisp:nil :type
    (common-lisp:or nullable-role common-lisp:null))
   (post-authentication-login-banner common-lisp:nil :type
    (common-lisp:or post-authentication-login-banner common-lisp:null))
   (pre-authentication-login-banner common-lisp:nil :type
    (common-lisp:or pre-authentication-login-banner common-lisp:null))
   (protocols common-lisp:nil :type
    (common-lisp:or protocols common-lisp:null))
   (security-policy-name common-lisp:nil :type
    (common-lisp:or security-policy-name common-lisp:null))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (workflow-details common-lisp:nil :type
    (common-lisp:or workflow-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-server-request 'make-update-server-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-server-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-server-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol-details))
      (common-lisp:list
       (common-lisp:cons "ProtocolDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-details))
      (common-lisp:list
       (common-lisp:cons "EndpointDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-type))
      (common-lisp:list
       (common-lisp:cons "EndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-key))
      (common-lisp:list
       (common-lisp:cons "HostKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-details))
      (common-lisp:list
       (common-lisp:cons "IdentityProviderDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-role))
      (common-lisp:list
       (common-lisp:cons "LoggingRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-authentication-login-banner))
      (common-lisp:list
       (common-lisp:cons "PostAuthenticationLoginBanner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pre-authentication-login-banner))
      (common-lisp:list
       (common-lisp:cons "PreAuthenticationLoginBanner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols))
      (common-lisp:list
       (common-lisp:cons "Protocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-policy-name))
      (common-lisp:list
       (common-lisp:cons "SecurityPolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-details))
      (common-lisp:list
       (common-lisp:cons "WorkflowDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-server-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-server-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-server-response-"))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-server-response 'make-update-server-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-server-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-server-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-server-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-user-request-"))
   (home-directory common-lisp:nil :type
    (common-lisp:or home-directory common-lisp:null))
   (home-directory-type common-lisp:nil :type
    (common-lisp:or home-directory-type common-lisp:null))
   (home-directory-mappings common-lisp:nil :type
    (common-lisp:or home-directory-mappings common-lisp:null))
   (policy common-lisp:nil :type (common-lisp:or policy common-lisp:null))
   (posix-profile common-lisp:nil :type
    (common-lisp:or posix-profile common-lisp:null))
   (role common-lisp:nil :type (common-lisp:or role common-lisp:null))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or user-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-user-request 'make-update-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory))
      (common-lisp:list
       (common-lisp:cons "HomeDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory-type))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'home-directory-mappings))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'posix-profile))
      (common-lisp:list
       (common-lisp:cons "PosixProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-user-response-"))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or user-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-user-response 'make-update-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-response))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:deftype user-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (user-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-details-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or user-name common-lisp:null))
   (server-id (common-lisp:error ":server-id is required") :type
    (common-lisp:or server-id common-lisp:null))
   (session-id common-lisp:nil :type
    (common-lisp:or session-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user-details 'make-user-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-details))
   common-lisp:nil))
(common-lisp:deftype user-name () 'common-lisp:string)
(common-lisp:deftype user-password () 'common-lisp:string)
(common-lisp:deftype vpc-endpoint-id () 'common-lisp:string)
(common-lisp:deftype vpc-id () 'common-lisp:string)
(common-lisp:deftype workflow-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-detail-"))
   (workflow-id (common-lisp:error ":workflow-id is required") :type
    (common-lisp:or workflow-id common-lisp:null))
   (execution-role (common-lisp:error ":execution-role is required") :type
    (common-lisp:or role common-lisp:null)))
 (common-lisp:export (common-lisp:list 'workflow-detail 'make-workflow-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role))
      (common-lisp:list
       (common-lisp:cons "ExecutionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-details-"))
   (on-upload common-lisp:nil :type
    (common-lisp:or on-upload-workflow-details common-lisp:null))
   (on-partial-upload common-lisp:nil :type
    (common-lisp:or on-partial-upload-workflow-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workflow-details 'make-workflow-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-upload))
      (common-lisp:list
       (common-lisp:cons "OnUpload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-partial-upload))
      (common-lisp:list
       (common-lisp:cons "OnPartialUpload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-details))
   common-lisp:nil))
(common-lisp:deftype workflow-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (workflow-step (:copier common-lisp:nil)
      (:conc-name "struct-shape-workflow-step-"))
   (type common-lisp:nil :type
    (common-lisp:or workflow-step-type common-lisp:null))
   (copy-step-details common-lisp:nil :type
    (common-lisp:or copy-step-details common-lisp:null))
   (custom-step-details common-lisp:nil :type
    (common-lisp:or custom-step-details common-lisp:null))
   (delete-step-details common-lisp:nil :type
    (common-lisp:or delete-step-details common-lisp:null))
   (tag-step-details common-lisp:nil :type
    (common-lisp:or tag-step-details common-lisp:null))
   (decrypt-step-details common-lisp:nil :type
    (common-lisp:or decrypt-step-details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'workflow-step 'make-workflow-step))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-step))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-step))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-step-details))
      (common-lisp:list
       (common-lisp:cons "CopyStepDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-step-details))
      (common-lisp:list
       (common-lisp:cons "CustomStepDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-step-details))
      (common-lisp:list
       (common-lisp:cons "DeleteStepDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-step-details))
      (common-lisp:list
       (common-lisp:cons "TagStepDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decrypt-step-details))
      (common-lisp:list
       (common-lisp:cons "DecryptStepDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-step))
   common-lisp:nil))
(common-lisp:deftype workflow-step-name () 'common-lisp:string)
(common-lisp:deftype workflow-step-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workflow-steps ()
   '(trivial-types:proper-list workflow-step))
 (common-lisp:defun |make-workflow-steps|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workflow-step))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun create-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key home-directory home-directory-type
                     home-directory-mappings policy posix-profile role
                     server-id external-id)
   (common-lisp:declare
    (common-lisp:ignorable home-directory home-directory-type
     home-directory-mappings policy posix-profile role server-id external-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-access-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAccess"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-access))
(common-lisp:progn
 (common-lisp:defun create-agreement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description server-id local-profile-id
                     partner-profile-id base-directory access-role status tags)
   (common-lisp:declare
    (common-lisp:ignorable description server-id local-profile-id
     partner-profile-id base-directory access-role status tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-agreement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAgreement"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-agreement))
(common-lisp:progn
 (common-lisp:defun create-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key url as2config access-role logging-role
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable url as2config access-role logging-role tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateConnector"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-connector))
(common-lisp:progn
 (common-lisp:defun create-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key as2id profile-type certificate-ids tags)
   (common-lisp:declare
    (common-lisp:ignorable as2id profile-type certificate-ids tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateProfile"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-profile))
(common-lisp:progn
 (common-lisp:defun create-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate domain endpoint-details
                     endpoint-type host-key identity-provider-details
                     identity-provider-type logging-role
                     post-authentication-login-banner
                     pre-authentication-login-banner protocols protocol-details
                     security-policy-name tags workflow-details)
   (common-lisp:declare
    (common-lisp:ignorable certificate domain endpoint-details endpoint-type
     host-key identity-provider-details identity-provider-type logging-role
     post-authentication-login-banner pre-authentication-login-banner protocols
     protocol-details security-policy-name tags workflow-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-server-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateServer"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-server))
(common-lisp:progn
 (common-lisp:defun create-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key home-directory home-directory-type
                     home-directory-mappings policy posix-profile role
                     server-id ssh-public-key-body tags user-name)
   (common-lisp:declare
    (common-lisp:ignorable home-directory home-directory-type
     home-directory-mappings policy posix-profile role server-id
     ssh-public-key-body tags user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "CreateUser"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-user))
(common-lisp:progn
 (common-lisp:defun create-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description steps on-exception-steps
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable description steps on-exception-steps tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-workflow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateWorkflow"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-workflow))
(common-lisp:progn
 (common-lisp:defun delete-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id external-id)
   (common-lisp:declare (common-lisp:ignorable server-id external-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-access-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAccess"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-access))
(common-lisp:progn
 (common-lisp:defun delete-agreement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agreement-id server-id)
   (common-lisp:declare (common-lisp:ignorable agreement-id server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-agreement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAgreement"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-agreement))
(common-lisp:progn
 (common-lisp:defun delete-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id)
   (common-lisp:declare (common-lisp:ignorable certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCertificate"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-certificate))
(common-lisp:progn
 (common-lisp:defun delete-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-id)
   (common-lisp:declare (common-lisp:ignorable connector-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteConnector"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-connector))
(common-lisp:progn
 (common-lisp:defun delete-host-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id host-key-id)
   (common-lisp:declare (common-lisp:ignorable server-id host-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-host-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteHostKey"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-host-key))
(common-lisp:progn
 (common-lisp:defun delete-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-id)
   (common-lisp:declare (common-lisp:ignorable profile-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteProfile"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-profile))
(common-lisp:progn
 (common-lisp:defun delete-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id)
   (common-lisp:declare (common-lisp:ignorable server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-server-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteServer"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-server))
(common-lisp:progn
 (common-lisp:defun delete-ssh-public-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id ssh-public-key-id user-name)
   (common-lisp:declare
    (common-lisp:ignorable server-id ssh-public-key-id user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-ssh-public-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSshPublicKey"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-ssh-public-key))
(common-lisp:progn
 (common-lisp:defun delete-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id user-name)
   (common-lisp:declare (common-lisp:ignorable server-id user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "DeleteUser"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-user))
(common-lisp:progn
 (common-lisp:defun delete-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workflow-id)
   (common-lisp:declare (common-lisp:ignorable workflow-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-workflow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteWorkflow"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-workflow))
(common-lisp:progn
 (common-lisp:defun describe-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id external-id)
   (common-lisp:declare (common-lisp:ignorable server-id external-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-access-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAccess"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-access))
(common-lisp:progn
 (common-lisp:defun describe-agreement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agreement-id server-id)
   (common-lisp:declare (common-lisp:ignorable agreement-id server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-agreement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAgreement"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-agreement))
(common-lisp:progn
 (common-lisp:defun describe-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id)
   (common-lisp:declare (common-lisp:ignorable certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCertificate"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-certificate))
(common-lisp:progn
 (common-lisp:defun describe-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-id)
   (common-lisp:declare (common-lisp:ignorable connector-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeConnector"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-connector))
(common-lisp:progn
 (common-lisp:defun describe-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key execution-id workflow-id)
   (common-lisp:declare (common-lisp:ignorable execution-id workflow-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-execution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeExecution"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-execution))
(common-lisp:progn
 (common-lisp:defun describe-host-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id host-key-id)
   (common-lisp:declare (common-lisp:ignorable server-id host-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-host-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeHostKey"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-host-key))
(common-lisp:progn
 (common-lisp:defun describe-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-id)
   (common-lisp:declare (common-lisp:ignorable profile-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeProfile"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-profile))
(common-lisp:progn
 (common-lisp:defun describe-security-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key security-policy-name)
   (common-lisp:declare (common-lisp:ignorable security-policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-security-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSecurityPolicy"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-security-policy))
(common-lisp:progn
 (common-lisp:defun describe-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id)
   (common-lisp:declare (common-lisp:ignorable server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-server-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeServer"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-server))
(common-lisp:progn
 (common-lisp:defun describe-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id user-name)
   (common-lisp:declare (common-lisp:ignorable server-id user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeUser"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-user))
(common-lisp:progn
 (common-lisp:defun describe-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workflow-id)
   (common-lisp:declare (common-lisp:ignorable workflow-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-workflow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeWorkflow"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-workflow))
(common-lisp:progn
 (common-lisp:defun import-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key usage certificate certificate-chain
                     private-key active-date inactive-date description tags)
   (common-lisp:declare
    (common-lisp:ignorable usage certificate certificate-chain private-key
     active-date inactive-date description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ImportCertificate"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-certificate))
(common-lisp:progn
 (common-lisp:defun import-host-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id host-key-body description tags)
   (common-lisp:declare
    (common-lisp:ignorable server-id host-key-body description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-host-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ImportHostKey"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-host-key))
(common-lisp:progn
 (common-lisp:defun import-ssh-public-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id ssh-public-key-body user-name)
   (common-lisp:declare
    (common-lisp:ignorable server-id ssh-public-key-body user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-ssh-public-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ImportSshPublicKey"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-ssh-public-key))
(common-lisp:progn
 (common-lisp:defun list-accesses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token server-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-accesses-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAccesses"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-accesses))
(common-lisp:progn
 (common-lisp:defun list-agreements
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token server-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-agreements-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAgreements"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-agreements))
(common-lisp:progn
 (common-lisp:defun list-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-certificates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCertificates"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-certificates))
(common-lisp:progn
 (common-lisp:defun list-connectors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-connectors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListConnectors"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-connectors))
(common-lisp:progn
 (common-lisp:defun list-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token workflow-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token workflow-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-executions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListExecutions"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-executions))
(common-lisp:progn
 (common-lisp:defun list-host-keys
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token server-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-host-keys-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListHostKeys"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-host-keys))
(common-lisp:progn
 (common-lisp:defun list-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token profile-type)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token profile-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListProfiles"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-profiles))
(common-lisp:progn
 (common-lisp:defun list-security-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-security-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListSecurityPolicies"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-security-policies))
(common-lisp:progn
 (common-lisp:defun list-servers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-servers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServers"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-servers))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn max-results next-token)
   (common-lisp:declare (common-lisp:ignorable arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token server-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-users-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListUsers"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-users))
(common-lisp:progn
 (common-lisp:defun list-workflows
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-workflows-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListWorkflows"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-workflows))
(common-lisp:progn
 (common-lisp:defun send-workflow-step-state
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workflow-id execution-id token status)
   (common-lisp:declare
    (common-lisp:ignorable workflow-id execution-id token status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-workflow-step-state-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SendWorkflowStepState"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-workflow-step-state))
(common-lisp:progn
 (common-lisp:defun start-file-transfer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-id send-file-paths)
   (common-lisp:declare (common-lisp:ignorable connector-id send-file-paths))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-file-transfer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartFileTransfer"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-file-transfer))
(common-lisp:progn
 (common-lisp:defun start-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id)
   (common-lisp:declare (common-lisp:ignorable server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-server-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartServer"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-server))
(common-lisp:progn
 (common-lisp:defun stop-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id)
   (common-lisp:declare (common-lisp:ignorable server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-server-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "StopServer"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-server))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn tags)
   (common-lisp:declare (common-lisp:ignorable arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun test-identity-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id server-protocol source-ip
                     user-name user-password)
   (common-lisp:declare
    (common-lisp:ignorable server-id server-protocol source-ip user-name
     user-password))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-identity-provider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TestIdentityProvider"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'test-identity-provider))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key home-directory home-directory-type
                     home-directory-mappings policy posix-profile role
                     server-id external-id)
   (common-lisp:declare
    (common-lisp:ignorable home-directory home-directory-type
     home-directory-mappings policy posix-profile role server-id external-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-access-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAccess"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-access))
(common-lisp:progn
 (common-lisp:defun update-agreement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agreement-id server-id description status
                     local-profile-id partner-profile-id base-directory
                     access-role)
   (common-lisp:declare
    (common-lisp:ignorable agreement-id server-id description status
     local-profile-id partner-profile-id base-directory access-role))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-agreement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAgreement"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-agreement))
(common-lisp:progn
 (common-lisp:defun update-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id active-date inactive-date
                     description)
   (common-lisp:declare
    (common-lisp:ignorable certificate-id active-date inactive-date
     description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateCertificate"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-certificate))
(common-lisp:progn
 (common-lisp:defun update-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-id url as2config access-role
                     logging-role)
   (common-lisp:declare
    (common-lisp:ignorable connector-id url as2config access-role
     logging-role))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateConnector"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-connector))
(common-lisp:progn
 (common-lisp:defun update-host-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id host-key-id description)
   (common-lisp:declare
    (common-lisp:ignorable server-id host-key-id description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-host-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateHostKey"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-host-key))
(common-lisp:progn
 (common-lisp:defun update-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-id certificate-ids)
   (common-lisp:declare (common-lisp:ignorable profile-id certificate-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateProfile"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-profile))
(common-lisp:progn
 (common-lisp:defun update-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate protocol-details
                     endpoint-details endpoint-type host-key
                     identity-provider-details logging-role
                     post-authentication-login-banner
                     pre-authentication-login-banner protocols
                     security-policy-name server-id workflow-details)
   (common-lisp:declare
    (common-lisp:ignorable certificate protocol-details endpoint-details
     endpoint-type host-key identity-provider-details logging-role
     post-authentication-login-banner pre-authentication-login-banner protocols
     security-policy-name server-id workflow-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-server-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateServer"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-server))
(common-lisp:progn
 (common-lisp:defun update-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key home-directory home-directory-type
                     home-directory-mappings policy posix-profile role
                     server-id user-name)
   (common-lisp:declare
    (common-lisp:ignorable home-directory home-directory-type
     home-directory-mappings policy posix-profile role server-id user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "UpdateUser"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-user))
