;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/transfer/api
  (:use)
  (:nicknames #:aws/transfer)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/transfer/api)
(common-lisp:progn
 (common-lisp:defclass transfer-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "transfer" :protocol :json))
 (common-lisp:export 'transfer-request))
(common-lisp:progn
 (common-lisp:define-condition transfer-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'transfer-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServiceError" . internal-service-error)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("ResourceExistsException" . resource-exists-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("ThrottlingException" . throttling-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (transfer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype address-allocation-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype address-allocation-ids ()
   '(trivial-types:proper-list address-allocation-id))
 (common-lisp:defun |make-address-allocation-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list address-allocation-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype agreement-id () 'common-lisp:string)
(common-lisp:deftype agreement-status-type () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass as2connector-config common-lisp:nil
                       ((mdn-response :initarg :mdn-response :type
                         (common-lisp:or mdn-response common-lisp:null)
                         :accessor %as2connector-config-mdn-response :initform
                         common-lisp:nil)
                        (mdn-signing-algorithm :initarg :mdn-signing-algorithm
                         :type
                         (common-lisp:or mdn-signing-alg common-lisp:null)
                         :accessor %as2connector-config-mdn-signing-algorithm
                         :initform common-lisp:nil)
                        (signing-algorithm :initarg :signing-algorithm :type
                         (common-lisp:or signing-alg common-lisp:null)
                         :accessor %as2connector-config-signing-algorithm
                         :initform common-lisp:nil)
                        (encryption-algorithm :initarg :encryption-algorithm
                         :type (common-lisp:or encryption-alg common-lisp:null)
                         :accessor %as2connector-config-encryption-algorithm
                         :initform common-lisp:nil)
                        (compression :initarg :compression :type
                         (common-lisp:or compression-enum common-lisp:null)
                         :accessor %as2connector-config-compression :initform
                         common-lisp:nil)
                        (message-subject :initarg :message-subject :type
                         (common-lisp:or message-subject common-lisp:null)
                         :accessor %as2connector-config-message-subject
                         :initform common-lisp:nil)
                        (partner-profile-id :initarg :partner-profile-id :type
                         (common-lisp:or profile-id common-lisp:null) :accessor
                         %as2connector-config-partner-profile-id :initform
                         common-lisp:nil)
                        (local-profile-id :initarg :local-profile-id :type
                         (common-lisp:or profile-id common-lisp:null) :accessor
                         %as2connector-config-local-profile-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'as2connector-config 'make-as2connector-config))
 (common-lisp:defun make-as2connector-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mdn-response mdn-signing-algorithm
                     signing-algorithm encryption-algorithm compression
                     message-subject partner-profile-id local-profile-id)
   (common-lisp:apply #'common-lisp:make-instance 'as2connector-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input as2connector-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input as2connector-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-profile-id))
      (common-lisp:list
       (common-lisp:cons "LocalProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partner-profile-id))
      (common-lisp:list
       (common-lisp:cons "PartnerProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-subject))
      (common-lisp:list
       (common-lisp:cons "MessageSubject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression))
      (common-lisp:list
       (common-lisp:cons "Compression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-algorithm))
      (common-lisp:list
       (common-lisp:cons "EncryptionAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-algorithm))
      (common-lisp:list
       (common-lisp:cons "SigningAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'mdn-signing-algorithm))
      (common-lisp:list
       (common-lisp:cons "MdnSigningAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mdn-response))
      (common-lisp:list
       (common-lisp:cons "MdnResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input as2connector-config))
   common-lisp:nil))
(common-lisp:deftype as2id () 'common-lisp:string)
(common-lisp:deftype as2transport () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype as2transports ()
   '(trivial-types:proper-list as2transport))
 (common-lisp:defun |make-as2transports|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list as2transport))
   aws-sdk/generator/shape::members))
(common-lisp:deftype callback-token () 'common-lisp:string)
(common-lisp:deftype cert-date () 'common-lisp:string)
(common-lisp:deftype cert-serial () 'common-lisp:string)
(common-lisp:deftype certificate () 'common-lisp:string)
(common-lisp:deftype certificate-body-type () 'common-lisp:string)
(common-lisp:deftype certificate-chain-type () 'common-lisp:string)
(common-lisp:deftype certificate-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype certificate-ids ()
   '(trivial-types:proper-list certificate-id))
 (common-lisp:defun |make-certificate-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype certificate-status-type () 'common-lisp:string)
(common-lisp:deftype certificate-type () 'common-lisp:string)
(common-lisp:deftype certificate-usage-type () 'common-lisp:string)
(common-lisp:deftype compression-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (transfer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype connector-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass copy-step-details common-lisp:nil
                       ((source-file-location :initarg :source-file-location
                         :type
                         (common-lisp:or source-file-location common-lisp:null)
                         :accessor %copy-step-details-source-file-location
                         :initform common-lisp:nil)
                        (overwrite-existing :initarg :overwrite-existing :type
                         (common-lisp:or overwrite-existing common-lisp:null)
                         :accessor %copy-step-details-overwrite-existing
                         :initform common-lisp:nil)
                        (destination-file-location :initarg
                         :destination-file-location :type
                         (common-lisp:or input-file-location common-lisp:null)
                         :accessor %copy-step-details-destination-file-location
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or workflow-step-name common-lisp:null)
                         :accessor %copy-step-details-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'copy-step-details 'make-copy-step-details))
 (common-lisp:defun make-copy-step-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-file-location overwrite-existing
                     destination-file-location name)
   (common-lisp:apply #'common-lisp:make-instance 'copy-step-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-step-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-step-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-file-location))
      (common-lisp:list
       (common-lisp:cons "DestinationFileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overwrite-existing))
      (common-lisp:list
       (common-lisp:cons "OverwriteExisting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-file-location))
      (common-lisp:list
       (common-lisp:cons "SourceFileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-step-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-access-request common-lisp:nil
                       ((external-id :initarg :external-id :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor %create-access-request-external-id :initform
                         (common-lisp:error ":external-id is required"))
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %create-access-request-server-id :initform
                         (common-lisp:error ":server-id is required"))
                        (role :initarg :role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %create-access-request-role :initform
                         (common-lisp:error ":role is required"))
                        (posix-profile :initarg :posix-profile :type
                         (common-lisp:or posix-profile common-lisp:null)
                         :accessor %create-access-request-posix-profile
                         :initform common-lisp:nil)
                        (policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %create-access-request-policy :initform
                         common-lisp:nil)
                        (home-directory-mappings :initarg
                         :home-directory-mappings :type
                         (common-lisp:or home-directory-mappings
                                         common-lisp:null)
                         :accessor
                         %create-access-request-home-directory-mappings
                         :initform common-lisp:nil)
                        (home-directory-type :initarg :home-directory-type
                         :type
                         (common-lisp:or home-directory-type common-lisp:null)
                         :accessor %create-access-request-home-directory-type
                         :initform common-lisp:nil)
                        (home-directory :initarg :home-directory :type
                         (common-lisp:or home-directory common-lisp:null)
                         :accessor %create-access-request-home-directory
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-access-request 'make-create-access-request))
 (common-lisp:defun make-create-access-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key external-id server-id role posix-profile
                     policy home-directory-mappings home-directory-type
                     home-directory)
   (common-lisp:apply #'common-lisp:make-instance 'create-access-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory))
      (common-lisp:list
       (common-lisp:cons "HomeDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory-type))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'home-directory-mappings))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'posix-profile))
      (common-lisp:list
       (common-lisp:cons "PosixProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-access-response common-lisp:nil
                       ((external-id :initarg :external-id :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor %create-access-response-external-id
                         :initform
                         (common-lisp:error ":external-id is required"))
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %create-access-response-server-id :initform
                         (common-lisp:error ":server-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-access-response 'make-create-access-response))
 (common-lisp:defun make-create-access-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key external-id server-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-access-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-agreement-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-agreement-request-tags :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or agreement-status-type
                                         common-lisp:null)
                         :accessor %create-agreement-request-status :initform
                         common-lisp:nil)
                        (access-role :initarg :access-role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %create-agreement-request-access-role :initform
                         (common-lisp:error ":access-role is required"))
                        (base-directory :initarg :base-directory :type
                         (common-lisp:or home-directory common-lisp:null)
                         :accessor %create-agreement-request-base-directory
                         :initform
                         (common-lisp:error ":base-directory is required"))
                        (partner-profile-id :initarg :partner-profile-id :type
                         (common-lisp:or profile-id common-lisp:null) :accessor
                         %create-agreement-request-partner-profile-id :initform
                         (common-lisp:error ":partner-profile-id is required"))
                        (local-profile-id :initarg :local-profile-id :type
                         (common-lisp:or profile-id common-lisp:null) :accessor
                         %create-agreement-request-local-profile-id :initform
                         (common-lisp:error ":local-profile-id is required"))
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %create-agreement-request-server-id :initform
                         (common-lisp:error ":server-id is required"))
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-agreement-request-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-agreement-request 'make-create-agreement-request))
 (common-lisp:defun make-create-agreement-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags status access-role base-directory
                     partner-profile-id local-profile-id server-id description)
   (common-lisp:apply #'common-lisp:make-instance 'create-agreement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-agreement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-agreement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-profile-id))
      (common-lisp:list
       (common-lisp:cons "LocalProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partner-profile-id))
      (common-lisp:list
       (common-lisp:cons "PartnerProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-directory))
      (common-lisp:list
       (common-lisp:cons "BaseDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-role))
      (common-lisp:list
       (common-lisp:cons "AccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-agreement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-agreement-response common-lisp:nil
                       ((agreement-id :initarg :agreement-id :type
                         (common-lisp:or agreement-id common-lisp:null)
                         :accessor %create-agreement-response-agreement-id
                         :initform
                         (common-lisp:error ":agreement-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-agreement-response
                    'make-create-agreement-response))
 (common-lisp:defun make-create-agreement-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key agreement-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-agreement-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-agreement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-agreement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement-id))
      (common-lisp:list
       (common-lisp:cons "AgreementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-agreement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connector-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-connector-request-tags :initform
                         common-lisp:nil)
                        (logging-role :initarg :logging-role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %create-connector-request-logging-role :initform
                         common-lisp:nil)
                        (access-role :initarg :access-role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %create-connector-request-access-role :initform
                         (common-lisp:error ":access-role is required"))
                        (as2config :initarg :as2config :type
                         (common-lisp:or as2connector-config common-lisp:null)
                         :accessor %create-connector-request-as2config
                         :initform
                         (common-lisp:error ":as2config is required"))
                        (url :initarg :url :type
                         (common-lisp:or url common-lisp:null) :accessor
                         %create-connector-request-url :initform
                         (common-lisp:error ":url is required"))))
 (common-lisp:export
  (common-lisp:list 'create-connector-request 'make-create-connector-request))
 (common-lisp:defun make-create-connector-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags logging-role access-role as2config
                     url)
   (common-lisp:apply #'common-lisp:make-instance 'create-connector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'as2config))
      (common-lisp:list
       (common-lisp:cons "As2Config"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-role))
      (common-lisp:list
       (common-lisp:cons "AccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-role))
      (common-lisp:list
       (common-lisp:cons "LoggingRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connector-response common-lisp:nil
                       ((connector-id :initarg :connector-id :type
                         (common-lisp:or connector-id common-lisp:null)
                         :accessor %create-connector-response-connector-id
                         :initform
                         (common-lisp:error ":connector-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-connector-response
                    'make-create-connector-response))
 (common-lisp:defun make-create-connector-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connector-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-connector-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-id))
      (common-lisp:list
       (common-lisp:cons "ConnectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-profile-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-profile-request-tags :initform
                         common-lisp:nil)
                        (certificate-ids :initarg :certificate-ids :type
                         (common-lisp:or certificate-ids common-lisp:null)
                         :accessor %create-profile-request-certificate-ids
                         :initform common-lisp:nil)
                        (profile-type :initarg :profile-type :type
                         (common-lisp:or profile-type common-lisp:null)
                         :accessor %create-profile-request-profile-type
                         :initform
                         (common-lisp:error ":profile-type is required"))
                        (as2id :initarg :as2id :type
                         (common-lisp:or as2id common-lisp:null) :accessor
                         %create-profile-request-as2id :initform
                         (common-lisp:error ":as2id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-profile-request 'make-create-profile-request))
 (common-lisp:defun make-create-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags certificate-ids profile-type as2id)
   (common-lisp:apply #'common-lisp:make-instance 'create-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'as2id))
      (common-lisp:list
       (common-lisp:cons "As2Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-type))
      (common-lisp:list
       (common-lisp:cons "ProfileType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-ids))
      (common-lisp:list
       (common-lisp:cons "CertificateIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-profile-response common-lisp:nil
                       ((profile-id :initarg :profile-id :type
                         (common-lisp:or profile-id common-lisp:null) :accessor
                         %create-profile-response-profile-id :initform
                         (common-lisp:error ":profile-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-profile-response 'make-create-profile-response))
 (common-lisp:defun make-create-profile-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profile-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-server-request common-lisp:nil
                       ((workflow-details :initarg :workflow-details :type
                         (common-lisp:or workflow-details common-lisp:null)
                         :accessor %create-server-request-workflow-details
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-server-request-tags :initform common-lisp:nil)
                        (security-policy-name :initarg :security-policy-name
                         :type
                         (common-lisp:or security-policy-name common-lisp:null)
                         :accessor %create-server-request-security-policy-name
                         :initform common-lisp:nil)
                        (protocol-details :initarg :protocol-details :type
                         (common-lisp:or protocol-details common-lisp:null)
                         :accessor %create-server-request-protocol-details
                         :initform common-lisp:nil)
                        (protocols :initarg :protocols :type
                         (common-lisp:or protocols common-lisp:null) :accessor
                         %create-server-request-protocols :initform
                         common-lisp:nil)
                        (pre-authentication-login-banner :initarg
                         :pre-authentication-login-banner :type
                         (common-lisp:or pre-authentication-login-banner
                                         common-lisp:null)
                         :accessor
                         %create-server-request-pre-authentication-login-banner
                         :initform common-lisp:nil)
                        (post-authentication-login-banner :initarg
                         :post-authentication-login-banner :type
                         (common-lisp:or post-authentication-login-banner
                                         common-lisp:null)
                         :accessor
                         %create-server-request-post-authentication-login-banner
                         :initform common-lisp:nil)
                        (logging-role :initarg :logging-role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %create-server-request-logging-role :initform
                         common-lisp:nil)
                        (identity-provider-type :initarg
                         :identity-provider-type :type
                         (common-lisp:or identity-provider-type
                                         common-lisp:null)
                         :accessor
                         %create-server-request-identity-provider-type
                         :initform common-lisp:nil)
                        (identity-provider-details :initarg
                         :identity-provider-details :type
                         (common-lisp:or identity-provider-details
                                         common-lisp:null)
                         :accessor
                         %create-server-request-identity-provider-details
                         :initform common-lisp:nil)
                        (host-key :initarg :host-key :type
                         (common-lisp:or host-key common-lisp:null) :accessor
                         %create-server-request-host-key :initform
                         common-lisp:nil)
                        (endpoint-type :initarg :endpoint-type :type
                         (common-lisp:or endpoint-type common-lisp:null)
                         :accessor %create-server-request-endpoint-type
                         :initform common-lisp:nil)
                        (endpoint-details :initarg :endpoint-details :type
                         (common-lisp:or endpoint-details common-lisp:null)
                         :accessor %create-server-request-endpoint-details
                         :initform common-lisp:nil)
                        (domain :initarg :domain :type
                         (common-lisp:or domain common-lisp:null) :accessor
                         %create-server-request-domain :initform
                         common-lisp:nil)
                        (certificate :initarg :certificate :type
                         (common-lisp:or certificate common-lisp:null)
                         :accessor %create-server-request-certificate :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-server-request 'make-create-server-request))
 (common-lisp:defun make-create-server-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workflow-details tags
                     security-policy-name protocol-details protocols
                     pre-authentication-login-banner
                     post-authentication-login-banner logging-role
                     identity-provider-type identity-provider-details host-key
                     endpoint-type endpoint-details domain certificate)
   (common-lisp:apply #'common-lisp:make-instance 'create-server-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-server-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-server-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-details))
      (common-lisp:list
       (common-lisp:cons "EndpointDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-type))
      (common-lisp:list
       (common-lisp:cons "EndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-key))
      (common-lisp:list
       (common-lisp:cons "HostKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-details))
      (common-lisp:list
       (common-lisp:cons "IdentityProviderDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-type))
      (common-lisp:list
       (common-lisp:cons "IdentityProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-role))
      (common-lisp:list
       (common-lisp:cons "LoggingRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-authentication-login-banner))
      (common-lisp:list
       (common-lisp:cons "PostAuthenticationLoginBanner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pre-authentication-login-banner))
      (common-lisp:list
       (common-lisp:cons "PreAuthenticationLoginBanner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols))
      (common-lisp:list
       (common-lisp:cons "Protocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol-details))
      (common-lisp:list
       (common-lisp:cons "ProtocolDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-policy-name))
      (common-lisp:list
       (common-lisp:cons "SecurityPolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-details))
      (common-lisp:list
       (common-lisp:cons "WorkflowDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-server-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-server-response common-lisp:nil
                       ((server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %create-server-response-server-id :initform
                         (common-lisp:error ":server-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-server-response 'make-create-server-response))
 (common-lisp:defun make-create-server-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-server-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-server-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-server-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-server-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-request common-lisp:nil
                       ((user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %create-user-request-user-name :initform
                         (common-lisp:error ":user-name is required"))
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-user-request-tags :initform common-lisp:nil)
                        (ssh-public-key-body :initarg :ssh-public-key-body
                         :type
                         (common-lisp:or ssh-public-key-body common-lisp:null)
                         :accessor %create-user-request-ssh-public-key-body
                         :initform common-lisp:nil)
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %create-user-request-server-id :initform
                         (common-lisp:error ":server-id is required"))
                        (role :initarg :role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %create-user-request-role :initform
                         (common-lisp:error ":role is required"))
                        (posix-profile :initarg :posix-profile :type
                         (common-lisp:or posix-profile common-lisp:null)
                         :accessor %create-user-request-posix-profile :initform
                         common-lisp:nil)
                        (policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %create-user-request-policy :initform common-lisp:nil)
                        (home-directory-mappings :initarg
                         :home-directory-mappings :type
                         (common-lisp:or home-directory-mappings
                                         common-lisp:null)
                         :accessor %create-user-request-home-directory-mappings
                         :initform common-lisp:nil)
                        (home-directory-type :initarg :home-directory-type
                         :type
                         (common-lisp:or home-directory-type common-lisp:null)
                         :accessor %create-user-request-home-directory-type
                         :initform common-lisp:nil)
                        (home-directory :initarg :home-directory :type
                         (common-lisp:or home-directory common-lisp:null)
                         :accessor %create-user-request-home-directory
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-user-request 'make-create-user-request))
 (common-lisp:defun make-create-user-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-name tags ssh-public-key-body
                     server-id role posix-profile policy
                     home-directory-mappings home-directory-type
                     home-directory)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory))
      (common-lisp:list
       (common-lisp:cons "HomeDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory-type))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'home-directory-mappings))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'posix-profile))
      (common-lisp:list
       (common-lisp:cons "PosixProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-public-key-body))
      (common-lisp:list
       (common-lisp:cons "SshPublicKeyBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-user-response common-lisp:nil
                       ((user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %create-user-response-user-name :initform
                         (common-lisp:error ":user-name is required"))
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %create-user-response-server-id :initform
                         (common-lisp:error ":server-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-user-response 'make-create-user-response))
 (common-lisp:defun make-create-user-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-name server-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workflow-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %create-workflow-request-tags :initform
                         common-lisp:nil)
                        (on-exception-steps :initarg :on-exception-steps :type
                         (common-lisp:or workflow-steps common-lisp:null)
                         :accessor %create-workflow-request-on-exception-steps
                         :initform common-lisp:nil)
                        (steps :initarg :steps :type
                         (common-lisp:or workflow-steps common-lisp:null)
                         :accessor %create-workflow-request-steps :initform
                         (common-lisp:error ":steps is required"))
                        (description :initarg :description :type
                         (common-lisp:or workflow-description common-lisp:null)
                         :accessor %create-workflow-request-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-workflow-request 'make-create-workflow-request))
 (common-lisp:defun make-create-workflow-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags on-exception-steps steps
                     description)
   (common-lisp:apply #'common-lisp:make-instance 'create-workflow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'steps))
      (common-lisp:list
       (common-lisp:cons "Steps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-exception-steps))
      (common-lisp:list
       (common-lisp:cons "OnExceptionSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-workflow-response common-lisp:nil
                       ((workflow-id :initarg :workflow-id :type
                         (common-lisp:or workflow-id common-lisp:null)
                         :accessor %create-workflow-response-workflow-id
                         :initform
                         (common-lisp:error ":workflow-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-workflow-response 'make-create-workflow-response))
 (common-lisp:defun make-create-workflow-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workflow-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-workflow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workflow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-step-details common-lisp:nil
                       ((source-file-location :initarg :source-file-location
                         :type
                         (common-lisp:or source-file-location common-lisp:null)
                         :accessor %custom-step-details-source-file-location
                         :initform common-lisp:nil)
                        (timeout-seconds :initarg :timeout-seconds :type
                         (common-lisp:or custom-step-timeout-seconds
                                         common-lisp:null)
                         :accessor %custom-step-details-timeout-seconds
                         :initform common-lisp:nil)
                        (target :initarg :target :type
                         (common-lisp:or custom-step-target common-lisp:null)
                         :accessor %custom-step-details-target :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or workflow-step-name common-lisp:null)
                         :accessor %custom-step-details-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'custom-step-details 'make-custom-step-details))
 (common-lisp:defun make-custom-step-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-file-location timeout-seconds
                     target name)
   (common-lisp:apply #'common-lisp:make-instance 'custom-step-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-step-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-step-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "TimeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-file-location))
      (common-lisp:list
       (common-lisp:cons "SourceFileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-step-details))
   common-lisp:nil))
(common-lisp:deftype custom-step-status () 'common-lisp:string)
(common-lisp:deftype custom-step-target () 'common-lisp:string)
(common-lisp:deftype custom-step-timeout-seconds () 'common-lisp:integer)
(common-lisp:deftype date-imported () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass decrypt-step-details common-lisp:nil
                       ((destination-file-location :initarg
                         :destination-file-location :type
                         (common-lisp:or input-file-location common-lisp:null)
                         :accessor
                         %decrypt-step-details-destination-file-location
                         :initform
                         (common-lisp:error
                          ":destination-file-location is required"))
                        (overwrite-existing :initarg :overwrite-existing :type
                         (common-lisp:or overwrite-existing common-lisp:null)
                         :accessor %decrypt-step-details-overwrite-existing
                         :initform common-lisp:nil)
                        (source-file-location :initarg :source-file-location
                         :type
                         (common-lisp:or source-file-location common-lisp:null)
                         :accessor %decrypt-step-details-source-file-location
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or encryption-type common-lisp:null)
                         :accessor %decrypt-step-details-type :initform
                         (common-lisp:error ":type is required"))
                        (name :initarg :name :type
                         (common-lisp:or workflow-step-name common-lisp:null)
                         :accessor %decrypt-step-details-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'decrypt-step-details 'make-decrypt-step-details))
 (common-lisp:defun make-decrypt-step-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination-file-location
                     overwrite-existing source-file-location type name)
   (common-lisp:apply #'common-lisp:make-instance 'decrypt-step-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input decrypt-step-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input decrypt-step-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-file-location))
      (common-lisp:list
       (common-lisp:cons "SourceFileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'overwrite-existing))
      (common-lisp:list
       (common-lisp:cons "OverwriteExisting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-file-location))
      (common-lisp:list
       (common-lisp:cons "DestinationFileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input decrypt-step-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-access-request common-lisp:nil
                       ((external-id :initarg :external-id :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor %delete-access-request-external-id :initform
                         (common-lisp:error ":external-id is required"))
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %delete-access-request-server-id :initform
                         (common-lisp:error ":server-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-access-request 'make-delete-access-request))
 (common-lisp:defun make-delete-access-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key external-id server-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-access-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-agreement-request common-lisp:nil
                       ((server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %delete-agreement-request-server-id :initform
                         (common-lisp:error ":server-id is required"))
                        (agreement-id :initarg :agreement-id :type
                         (common-lisp:or agreement-id common-lisp:null)
                         :accessor %delete-agreement-request-agreement-id
                         :initform
                         (common-lisp:error ":agreement-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-agreement-request 'make-delete-agreement-request))
 (common-lisp:defun make-delete-agreement-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-id agreement-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-agreement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-agreement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-agreement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement-id))
      (common-lisp:list
       (common-lisp:cons "AgreementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-agreement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-certificate-request common-lisp:nil
                       ((certificate-id :initarg :certificate-id :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor %delete-certificate-request-certificate-id
                         :initform
                         (common-lisp:error ":certificate-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-certificate-request
                    'make-delete-certificate-request))
 (common-lisp:defun make-delete-certificate-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificate-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-connector-request common-lisp:nil
                       ((connector-id :initarg :connector-id :type
                         (common-lisp:or connector-id common-lisp:null)
                         :accessor %delete-connector-request-connector-id
                         :initform
                         (common-lisp:error ":connector-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-connector-request 'make-delete-connector-request))
 (common-lisp:defun make-delete-connector-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connector-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-connector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-id))
      (common-lisp:list
       (common-lisp:cons "ConnectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-host-key-request common-lisp:nil
                       ((host-key-id :initarg :host-key-id :type
                         (common-lisp:or host-key-id common-lisp:null)
                         :accessor %delete-host-key-request-host-key-id
                         :initform
                         (common-lisp:error ":host-key-id is required"))
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %delete-host-key-request-server-id :initform
                         (common-lisp:error ":server-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-host-key-request 'make-delete-host-key-request))
 (common-lisp:defun make-delete-host-key-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key host-key-id server-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-host-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-host-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-host-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-key-id))
      (common-lisp:list
       (common-lisp:cons "HostKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-host-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-profile-request common-lisp:nil
                       ((profile-id :initarg :profile-id :type
                         (common-lisp:or profile-id common-lisp:null) :accessor
                         %delete-profile-request-profile-id :initform
                         (common-lisp:error ":profile-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-profile-request 'make-delete-profile-request))
 (common-lisp:defun make-delete-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profile-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-server-request common-lisp:nil
                       ((server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %delete-server-request-server-id :initform
                         (common-lisp:error ":server-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-server-request 'make-delete-server-request))
 (common-lisp:defun make-delete-server-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-server-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-server-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-server-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-server-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-ssh-public-key-request common-lisp:nil
                       ((user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %delete-ssh-public-key-request-user-name :initform
                         (common-lisp:error ":user-name is required"))
                        (ssh-public-key-id :initarg :ssh-public-key-id :type
                         (common-lisp:or ssh-public-key-id common-lisp:null)
                         :accessor
                         %delete-ssh-public-key-request-ssh-public-key-id
                         :initform
                         (common-lisp:error ":ssh-public-key-id is required"))
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %delete-ssh-public-key-request-server-id :initform
                         (common-lisp:error ":server-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-ssh-public-key-request
                    'make-delete-ssh-public-key-request))
 (common-lisp:defun make-delete-ssh-public-key-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-name ssh-public-key-id server-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-ssh-public-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-ssh-public-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-ssh-public-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-public-key-id))
      (common-lisp:list
       (common-lisp:cons "SshPublicKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-ssh-public-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-step-details common-lisp:nil
                       ((source-file-location :initarg :source-file-location
                         :type
                         (common-lisp:or source-file-location common-lisp:null)
                         :accessor %delete-step-details-source-file-location
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or workflow-step-name common-lisp:null)
                         :accessor %delete-step-details-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-step-details 'make-delete-step-details))
 (common-lisp:defun make-delete-step-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-file-location name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-step-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-step-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-step-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-file-location))
      (common-lisp:list
       (common-lisp:cons "SourceFileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-step-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-user-request common-lisp:nil
                       ((user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %delete-user-request-user-name :initform
                         (common-lisp:error ":user-name is required"))
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %delete-user-request-server-id :initform
                         (common-lisp:error ":server-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-user-request 'make-delete-user-request))
 (common-lisp:defun make-delete-user-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-name server-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-workflow-request common-lisp:nil
                       ((workflow-id :initarg :workflow-id :type
                         (common-lisp:or workflow-id common-lisp:null)
                         :accessor %delete-workflow-request-workflow-id
                         :initform
                         (common-lisp:error ":workflow-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-workflow-request 'make-delete-workflow-request))
 (common-lisp:defun make-delete-workflow-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workflow-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-workflow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workflow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-access-request common-lisp:nil
                       ((external-id :initarg :external-id :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor %describe-access-request-external-id
                         :initform
                         (common-lisp:error ":external-id is required"))
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %describe-access-request-server-id :initform
                         (common-lisp:error ":server-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-access-request 'make-describe-access-request))
 (common-lisp:defun make-describe-access-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key external-id server-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-access-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-access-response common-lisp:nil
                       ((access :initarg :access :type
                         (common-lisp:or described-access common-lisp:null)
                         :accessor %describe-access-response-access :initform
                         (common-lisp:error ":access is required"))
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %describe-access-response-server-id :initform
                         (common-lisp:error ":server-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-access-response 'make-describe-access-response))
 (common-lisp:defun make-describe-access-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key access server-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-access-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access))
      (common-lisp:list
       (common-lisp:cons "Access"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-agreement-request common-lisp:nil
                       ((server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %describe-agreement-request-server-id :initform
                         (common-lisp:error ":server-id is required"))
                        (agreement-id :initarg :agreement-id :type
                         (common-lisp:or agreement-id common-lisp:null)
                         :accessor %describe-agreement-request-agreement-id
                         :initform
                         (common-lisp:error ":agreement-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-agreement-request
                    'make-describe-agreement-request))
 (common-lisp:defun make-describe-agreement-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-id agreement-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-agreement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-agreement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-agreement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement-id))
      (common-lisp:list
       (common-lisp:cons "AgreementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-agreement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-agreement-response common-lisp:nil
                       ((agreement :initarg :agreement :type
                         (common-lisp:or described-agreement common-lisp:null)
                         :accessor %describe-agreement-response-agreement
                         :initform
                         (common-lisp:error ":agreement is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-agreement-response
                    'make-describe-agreement-response))
 (common-lisp:defun make-describe-agreement-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key agreement)
   (common-lisp:apply #'common-lisp:make-instance 'describe-agreement-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-agreement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-agreement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement))
      (common-lisp:list
       (common-lisp:cons "Agreement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-agreement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-certificate-request common-lisp:nil
                       ((certificate-id :initarg :certificate-id :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor %describe-certificate-request-certificate-id
                         :initform
                         (common-lisp:error ":certificate-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-certificate-request
                    'make-describe-certificate-request))
 (common-lisp:defun make-describe-certificate-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificate-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-certificate-response common-lisp:nil
                       ((certificate :initarg :certificate :type
                         (common-lisp:or described-certificate
                                         common-lisp:null)
                         :accessor %describe-certificate-response-certificate
                         :initform
                         (common-lisp:error ":certificate is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-certificate-response
                    'make-describe-certificate-response))
 (common-lisp:defun make-describe-certificate-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificate)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-certificate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-connector-request common-lisp:nil
                       ((connector-id :initarg :connector-id :type
                         (common-lisp:or connector-id common-lisp:null)
                         :accessor %describe-connector-request-connector-id
                         :initform
                         (common-lisp:error ":connector-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-connector-request
                    'make-describe-connector-request))
 (common-lisp:defun make-describe-connector-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connector-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-connector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-id))
      (common-lisp:list
       (common-lisp:cons "ConnectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-connector-response common-lisp:nil
                       ((connector :initarg :connector :type
                         (common-lisp:or described-connector common-lisp:null)
                         :accessor %describe-connector-response-connector
                         :initform
                         (common-lisp:error ":connector is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-connector-response
                    'make-describe-connector-response))
 (common-lisp:defun make-describe-connector-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connector)
   (common-lisp:apply #'common-lisp:make-instance 'describe-connector-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector))
      (common-lisp:list
       (common-lisp:cons "Connector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-connector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-execution-request common-lisp:nil
                       ((workflow-id :initarg :workflow-id :type
                         (common-lisp:or workflow-id common-lisp:null)
                         :accessor %describe-execution-request-workflow-id
                         :initform
                         (common-lisp:error ":workflow-id is required"))
                        (execution-id :initarg :execution-id :type
                         (common-lisp:or execution-id common-lisp:null)
                         :accessor %describe-execution-request-execution-id
                         :initform
                         (common-lisp:error ":execution-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-execution-request
                    'make-describe-execution-request))
 (common-lisp:defun make-describe-execution-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workflow-id execution-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-execution-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "ExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-execution-response common-lisp:nil
                       ((execution :initarg :execution :type
                         (common-lisp:or described-execution common-lisp:null)
                         :accessor %describe-execution-response-execution
                         :initform
                         (common-lisp:error ":execution is required"))
                        (workflow-id :initarg :workflow-id :type
                         (common-lisp:or workflow-id common-lisp:null)
                         :accessor %describe-execution-response-workflow-id
                         :initform
                         (common-lisp:error ":workflow-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-execution-response
                    'make-describe-execution-response))
 (common-lisp:defun make-describe-execution-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key execution workflow-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-execution-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution))
      (common-lisp:list
       (common-lisp:cons "Execution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-execution-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-host-key-request common-lisp:nil
                       ((host-key-id :initarg :host-key-id :type
                         (common-lisp:or host-key-id common-lisp:null)
                         :accessor %describe-host-key-request-host-key-id
                         :initform
                         (common-lisp:error ":host-key-id is required"))
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %describe-host-key-request-server-id :initform
                         (common-lisp:error ":server-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-host-key-request
                    'make-describe-host-key-request))
 (common-lisp:defun make-describe-host-key-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key host-key-id server-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-host-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-host-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-host-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-key-id))
      (common-lisp:list
       (common-lisp:cons "HostKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-host-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-host-key-response common-lisp:nil
                       ((host-key :initarg :host-key :type
                         (common-lisp:or described-host-key common-lisp:null)
                         :accessor %describe-host-key-response-host-key
                         :initform
                         (common-lisp:error ":host-key is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-host-key-response
                    'make-describe-host-key-response))
 (common-lisp:defun make-describe-host-key-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key host-key)
   (common-lisp:apply #'common-lisp:make-instance 'describe-host-key-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-host-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-host-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-key))
      (common-lisp:list
       (common-lisp:cons "HostKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-host-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-profile-request common-lisp:nil
                       ((profile-id :initarg :profile-id :type
                         (common-lisp:or profile-id common-lisp:null) :accessor
                         %describe-profile-request-profile-id :initform
                         (common-lisp:error ":profile-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-profile-request 'make-describe-profile-request))
 (common-lisp:defun make-describe-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profile-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-profile-response common-lisp:nil
                       ((profile :initarg :profile :type
                         (common-lisp:or described-profile common-lisp:null)
                         :accessor %describe-profile-response-profile :initform
                         (common-lisp:error ":profile is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-profile-response
                    'make-describe-profile-response))
 (common-lisp:defun make-describe-profile-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profile)
   (common-lisp:apply #'common-lisp:make-instance 'describe-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile))
      (common-lisp:list
       (common-lisp:cons "Profile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-security-policy-request common-lisp:nil
                       ((security-policy-name :initarg :security-policy-name
                         :type
                         (common-lisp:or security-policy-name common-lisp:null)
                         :accessor
                         %describe-security-policy-request-security-policy-name
                         :initform
                         (common-lisp:error
                          ":security-policy-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-security-policy-request
                    'make-describe-security-policy-request))
 (common-lisp:defun make-describe-security-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-policy-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-security-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-policy-name))
      (common-lisp:list
       (common-lisp:cons "SecurityPolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-security-policy-response common-lisp:nil
                       ((security-policy :initarg :security-policy :type
                         (common-lisp:or described-security-policy
                                         common-lisp:null)
                         :accessor
                         %describe-security-policy-response-security-policy
                         :initform
                         (common-lisp:error ":security-policy is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-security-policy-response
                    'make-describe-security-policy-response))
 (common-lisp:defun make-describe-security-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-security-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-policy))
      (common-lisp:list
       (common-lisp:cons "SecurityPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-security-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-server-request common-lisp:nil
                       ((server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %describe-server-request-server-id :initform
                         (common-lisp:error ":server-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-server-request 'make-describe-server-request))
 (common-lisp:defun make-describe-server-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-server-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-server-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-server-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-server-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-server-response common-lisp:nil
                       ((server :initarg :server :type
                         (common-lisp:or described-server common-lisp:null)
                         :accessor %describe-server-response-server :initform
                         (common-lisp:error ":server is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-server-response 'make-describe-server-response))
 (common-lisp:defun make-describe-server-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server)
   (common-lisp:apply #'common-lisp:make-instance 'describe-server-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-server-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-server-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server))
      (common-lisp:list
       (common-lisp:cons "Server"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-server-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-user-request common-lisp:nil
                       ((user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %describe-user-request-user-name :initform
                         (common-lisp:error ":user-name is required"))
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %describe-user-request-server-id :initform
                         (common-lisp:error ":server-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-user-request 'make-describe-user-request))
 (common-lisp:defun make-describe-user-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-name server-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-user-response common-lisp:nil
                       ((user :initarg :user :type
                         (common-lisp:or described-user common-lisp:null)
                         :accessor %describe-user-response-user :initform
                         (common-lisp:error ":user is required"))
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %describe-user-response-server-id :initform
                         (common-lisp:error ":server-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-user-response 'make-describe-user-response))
 (common-lisp:defun make-describe-user-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user server-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-workflow-request common-lisp:nil
                       ((workflow-id :initarg :workflow-id :type
                         (common-lisp:or workflow-id common-lisp:null)
                         :accessor %describe-workflow-request-workflow-id
                         :initform
                         (common-lisp:error ":workflow-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-workflow-request
                    'make-describe-workflow-request))
 (common-lisp:defun make-describe-workflow-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workflow-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-workflow-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workflow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workflow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workflow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-workflow-response common-lisp:nil
                       ((workflow :initarg :workflow :type
                         (common-lisp:or described-workflow common-lisp:null)
                         :accessor %describe-workflow-response-workflow
                         :initform
                         (common-lisp:error ":workflow is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-workflow-response
                    'make-describe-workflow-response))
 (common-lisp:defun make-describe-workflow-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workflow)
   (common-lisp:apply #'common-lisp:make-instance 'describe-workflow-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workflow-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workflow-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow))
      (common-lisp:list
       (common-lisp:cons "Workflow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workflow-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass described-access common-lisp:nil
                       ((external-id :initarg :external-id :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor %described-access-external-id :initform
                         common-lisp:nil)
                        (role :initarg :role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %described-access-role :initform common-lisp:nil)
                        (posix-profile :initarg :posix-profile :type
                         (common-lisp:or posix-profile common-lisp:null)
                         :accessor %described-access-posix-profile :initform
                         common-lisp:nil)
                        (policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %described-access-policy :initform common-lisp:nil)
                        (home-directory-type :initarg :home-directory-type
                         :type
                         (common-lisp:or home-directory-type common-lisp:null)
                         :accessor %described-access-home-directory-type
                         :initform common-lisp:nil)
                        (home-directory-mappings :initarg
                         :home-directory-mappings :type
                         (common-lisp:or home-directory-mappings
                                         common-lisp:null)
                         :accessor %described-access-home-directory-mappings
                         :initform common-lisp:nil)
                        (home-directory :initarg :home-directory :type
                         (common-lisp:or home-directory common-lisp:null)
                         :accessor %described-access-home-directory :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'described-access 'make-described-access))
 (common-lisp:defun make-described-access
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key external-id role posix-profile policy
                     home-directory-type home-directory-mappings
                     home-directory)
   (common-lisp:apply #'common-lisp:make-instance 'described-access
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input described-access))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input described-access))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory))
      (common-lisp:list
       (common-lisp:cons "HomeDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'home-directory-mappings))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory-type))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'posix-profile))
      (common-lisp:list
       (common-lisp:cons "PosixProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input described-access))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass described-agreement common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %described-agreement-tags :initform common-lisp:nil)
                        (access-role :initarg :access-role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %described-agreement-access-role :initform
                         common-lisp:nil)
                        (base-directory :initarg :base-directory :type
                         (common-lisp:or home-directory common-lisp:null)
                         :accessor %described-agreement-base-directory
                         :initform common-lisp:nil)
                        (partner-profile-id :initarg :partner-profile-id :type
                         (common-lisp:or profile-id common-lisp:null) :accessor
                         %described-agreement-partner-profile-id :initform
                         common-lisp:nil)
                        (local-profile-id :initarg :local-profile-id :type
                         (common-lisp:or profile-id common-lisp:null) :accessor
                         %described-agreement-local-profile-id :initform
                         common-lisp:nil)
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %described-agreement-server-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or agreement-status-type
                                         common-lisp:null)
                         :accessor %described-agreement-status :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %described-agreement-description :initform
                         common-lisp:nil)
                        (agreement-id :initarg :agreement-id :type
                         (common-lisp:or agreement-id common-lisp:null)
                         :accessor %described-agreement-agreement-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %described-agreement-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'described-agreement 'make-described-agreement))
 (common-lisp:defun make-described-agreement
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags access-role base-directory
                     partner-profile-id local-profile-id server-id status
                     description agreement-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'described-agreement
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input described-agreement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input described-agreement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement-id))
      (common-lisp:list
       (common-lisp:cons "AgreementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-profile-id))
      (common-lisp:list
       (common-lisp:cons "LocalProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partner-profile-id))
      (common-lisp:list
       (common-lisp:cons "PartnerProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-directory))
      (common-lisp:list
       (common-lisp:cons "BaseDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-role))
      (common-lisp:list
       (common-lisp:cons "AccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input described-agreement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass described-certificate common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %described-certificate-tags :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %described-certificate-description :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or certificate-type common-lisp:null)
                         :accessor %described-certificate-type :initform
                         common-lisp:nil)
                        (not-after-date :initarg :not-after-date :type
                         (common-lisp:or cert-date common-lisp:null) :accessor
                         %described-certificate-not-after-date :initform
                         common-lisp:nil)
                        (not-before-date :initarg :not-before-date :type
                         (common-lisp:or cert-date common-lisp:null) :accessor
                         %described-certificate-not-before-date :initform
                         common-lisp:nil)
                        (serial :initarg :serial :type
                         (common-lisp:or cert-serial common-lisp:null)
                         :accessor %described-certificate-serial :initform
                         common-lisp:nil)
                        (inactive-date :initarg :inactive-date :type
                         (common-lisp:or cert-date common-lisp:null) :accessor
                         %described-certificate-inactive-date :initform
                         common-lisp:nil)
                        (active-date :initarg :active-date :type
                         (common-lisp:or cert-date common-lisp:null) :accessor
                         %described-certificate-active-date :initform
                         common-lisp:nil)
                        (certificate-chain :initarg :certificate-chain :type
                         (common-lisp:or certificate-chain-type
                                         common-lisp:null)
                         :accessor %described-certificate-certificate-chain
                         :initform common-lisp:nil)
                        (certificate :initarg :certificate :type
                         (common-lisp:or certificate-body-type
                                         common-lisp:null)
                         :accessor %described-certificate-certificate :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or certificate-status-type
                                         common-lisp:null)
                         :accessor %described-certificate-status :initform
                         common-lisp:nil)
                        (usage :initarg :usage :type
                         (common-lisp:or certificate-usage-type
                                         common-lisp:null)
                         :accessor %described-certificate-usage :initform
                         common-lisp:nil)
                        (certificate-id :initarg :certificate-id :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor %described-certificate-certificate-id
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %described-certificate-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'described-certificate 'make-described-certificate))
 (common-lisp:defun make-described-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags description type not-after-date
                     not-before-date serial inactive-date active-date
                     certificate-chain certificate status usage certificate-id
                     arn)
   (common-lisp:apply #'common-lisp:make-instance 'described-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          described-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          described-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage))
      (common-lisp:list
       (common-lisp:cons "Usage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "CertificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-date))
      (common-lisp:list
       (common-lisp:cons "ActiveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inactive-date))
      (common-lisp:list
       (common-lisp:cons "InactiveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial))
      (common-lisp:list
       (common-lisp:cons "Serial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-before-date))
      (common-lisp:list
       (common-lisp:cons "NotBeforeDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-after-date))
      (common-lisp:list
       (common-lisp:cons "NotAfterDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          described-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass described-connector common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %described-connector-tags :initform common-lisp:nil)
                        (logging-role :initarg :logging-role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %described-connector-logging-role :initform
                         common-lisp:nil)
                        (access-role :initarg :access-role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %described-connector-access-role :initform
                         common-lisp:nil)
                        (as2config :initarg :as2config :type
                         (common-lisp:or as2connector-config common-lisp:null)
                         :accessor %described-connector-as2config :initform
                         common-lisp:nil)
                        (url :initarg :url :type
                         (common-lisp:or url common-lisp:null) :accessor
                         %described-connector-url :initform common-lisp:nil)
                        (connector-id :initarg :connector-id :type
                         (common-lisp:or connector-id common-lisp:null)
                         :accessor %described-connector-connector-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %described-connector-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'described-connector 'make-described-connector))
 (common-lisp:defun make-described-connector
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags logging-role access-role as2config
                     url connector-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'described-connector
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input described-connector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input described-connector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-id))
      (common-lisp:list
       (common-lisp:cons "ConnectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'as2config))
      (common-lisp:list
       (common-lisp:cons "As2Config"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-role))
      (common-lisp:list
       (common-lisp:cons "AccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-role))
      (common-lisp:list
       (common-lisp:cons "LoggingRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input described-connector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass described-execution common-lisp:nil
                       ((results :initarg :results :type
                         (common-lisp:or execution-results common-lisp:null)
                         :accessor %described-execution-results :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or execution-status common-lisp:null)
                         :accessor %described-execution-status :initform
                         common-lisp:nil)
                        (posix-profile :initarg :posix-profile :type
                         (common-lisp:or posix-profile common-lisp:null)
                         :accessor %described-execution-posix-profile :initform
                         common-lisp:nil)
                        (logging-configuration :initarg :logging-configuration
                         :type
                         (common-lisp:or logging-configuration
                                         common-lisp:null)
                         :accessor %described-execution-logging-configuration
                         :initform common-lisp:nil)
                        (execution-role :initarg :execution-role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %described-execution-execution-role :initform
                         common-lisp:nil)
                        (service-metadata :initarg :service-metadata :type
                         (common-lisp:or service-metadata common-lisp:null)
                         :accessor %described-execution-service-metadata
                         :initform common-lisp:nil)
                        (initial-file-location :initarg :initial-file-location
                         :type (common-lisp:or file-location common-lisp:null)
                         :accessor %described-execution-initial-file-location
                         :initform common-lisp:nil)
                        (execution-id :initarg :execution-id :type
                         (common-lisp:or execution-id common-lisp:null)
                         :accessor %described-execution-execution-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'described-execution 'make-described-execution))
 (common-lisp:defun make-described-execution
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key results status posix-profile
                     logging-configuration execution-role service-metadata
                     initial-file-location execution-id)
   (common-lisp:apply #'common-lisp:make-instance 'described-execution
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input described-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input described-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "ExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-file-location))
      (common-lisp:list
       (common-lisp:cons "InitialFileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-metadata))
      (common-lisp:list
       (common-lisp:cons "ServiceMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role))
      (common-lisp:list
       (common-lisp:cons "ExecutionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logging-configuration))
      (common-lisp:list
       (common-lisp:cons "LoggingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'posix-profile))
      (common-lisp:list
       (common-lisp:cons "PosixProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input described-execution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass described-host-key common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %described-host-key-tags :initform common-lisp:nil)
                        (date-imported :initarg :date-imported :type
                         (common-lisp:or date-imported common-lisp:null)
                         :accessor %described-host-key-date-imported :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or host-key-type common-lisp:null)
                         :accessor %described-host-key-type :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or host-key-description common-lisp:null)
                         :accessor %described-host-key-description :initform
                         common-lisp:nil)
                        (host-key-fingerprint :initarg :host-key-fingerprint
                         :type
                         (common-lisp:or host-key-fingerprint common-lisp:null)
                         :accessor %described-host-key-host-key-fingerprint
                         :initform common-lisp:nil)
                        (host-key-id :initarg :host-key-id :type
                         (common-lisp:or host-key-id common-lisp:null)
                         :accessor %described-host-key-host-key-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %described-host-key-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'described-host-key 'make-described-host-key))
 (common-lisp:defun make-described-host-key
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags date-imported type description
                     host-key-fingerprint host-key-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'described-host-key
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input described-host-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input described-host-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-key-id))
      (common-lisp:list
       (common-lisp:cons "HostKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'host-key-fingerprint))
      (common-lisp:list
       (common-lisp:cons "HostKeyFingerprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-imported))
      (common-lisp:list
       (common-lisp:cons "DateImported"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input described-host-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass described-profile common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %described-profile-tags :initform common-lisp:nil)
                        (certificate-ids :initarg :certificate-ids :type
                         (common-lisp:or certificate-ids common-lisp:null)
                         :accessor %described-profile-certificate-ids :initform
                         common-lisp:nil)
                        (as2id :initarg :as2id :type
                         (common-lisp:or as2id common-lisp:null) :accessor
                         %described-profile-as2id :initform common-lisp:nil)
                        (profile-type :initarg :profile-type :type
                         (common-lisp:or profile-type common-lisp:null)
                         :accessor %described-profile-profile-type :initform
                         common-lisp:nil)
                        (profile-id :initarg :profile-id :type
                         (common-lisp:or profile-id common-lisp:null) :accessor
                         %described-profile-profile-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %described-profile-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'described-profile 'make-described-profile))
 (common-lisp:defun make-described-profile
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags certificate-ids as2id profile-type
                     profile-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'described-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input described-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input described-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-type))
      (common-lisp:list
       (common-lisp:cons "ProfileType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'as2id))
      (common-lisp:list
       (common-lisp:cons "As2Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-ids))
      (common-lisp:list
       (common-lisp:cons "CertificateIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input described-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass described-security-policy common-lisp:nil
                       ((tls-ciphers :initarg :tls-ciphers :type
                         (common-lisp:or security-policy-options
                                         common-lisp:null)
                         :accessor %described-security-policy-tls-ciphers
                         :initform common-lisp:nil)
                        (ssh-macs :initarg :ssh-macs :type
                         (common-lisp:or security-policy-options
                                         common-lisp:null)
                         :accessor %described-security-policy-ssh-macs
                         :initform common-lisp:nil)
                        (ssh-kexs :initarg :ssh-kexs :type
                         (common-lisp:or security-policy-options
                                         common-lisp:null)
                         :accessor %described-security-policy-ssh-kexs
                         :initform common-lisp:nil)
                        (ssh-ciphers :initarg :ssh-ciphers :type
                         (common-lisp:or security-policy-options
                                         common-lisp:null)
                         :accessor %described-security-policy-ssh-ciphers
                         :initform common-lisp:nil)
                        (security-policy-name :initarg :security-policy-name
                         :type
                         (common-lisp:or security-policy-name common-lisp:null)
                         :accessor
                         %described-security-policy-security-policy-name
                         :initform
                         (common-lisp:error
                          ":security-policy-name is required"))
                        (fips :initarg :fips :type
                         (common-lisp:or fips common-lisp:null) :accessor
                         %described-security-policy-fips :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'described-security-policy
                    'make-described-security-policy))
 (common-lisp:defun make-described-security-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tls-ciphers ssh-macs ssh-kexs ssh-ciphers
                     security-policy-name fips)
   (common-lisp:apply #'common-lisp:make-instance 'described-security-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          described-security-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          described-security-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fips))
      (common-lisp:list
       (common-lisp:cons "Fips"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-policy-name))
      (common-lisp:list
       (common-lisp:cons "SecurityPolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-ciphers))
      (common-lisp:list
       (common-lisp:cons "SshCiphers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-kexs))
      (common-lisp:list
       (common-lisp:cons "SshKexs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-macs))
      (common-lisp:list
       (common-lisp:cons "SshMacs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls-ciphers))
      (common-lisp:list
       (common-lisp:cons "TlsCiphers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          described-security-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass described-server common-lisp:nil
                       ((workflow-details :initarg :workflow-details :type
                         (common-lisp:or workflow-details common-lisp:null)
                         :accessor %described-server-workflow-details :initform
                         common-lisp:nil)
                        (user-count :initarg :user-count :type
                         (common-lisp:or user-count common-lisp:null) :accessor
                         %described-server-user-count :initform
                         common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %described-server-tags :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or state common-lisp:null) :accessor
                         %described-server-state :initform common-lisp:nil)
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %described-server-server-id :initform common-lisp:nil)
                        (security-policy-name :initarg :security-policy-name
                         :type
                         (common-lisp:or security-policy-name common-lisp:null)
                         :accessor %described-server-security-policy-name
                         :initform common-lisp:nil)
                        (protocols :initarg :protocols :type
                         (common-lisp:or protocols common-lisp:null) :accessor
                         %described-server-protocols :initform common-lisp:nil)
                        (pre-authentication-login-banner :initarg
                         :pre-authentication-login-banner :type
                         (common-lisp:or pre-authentication-login-banner
                                         common-lisp:null)
                         :accessor
                         %described-server-pre-authentication-login-banner
                         :initform common-lisp:nil)
                        (post-authentication-login-banner :initarg
                         :post-authentication-login-banner :type
                         (common-lisp:or post-authentication-login-banner
                                         common-lisp:null)
                         :accessor
                         %described-server-post-authentication-login-banner
                         :initform common-lisp:nil)
                        (logging-role :initarg :logging-role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %described-server-logging-role :initform
                         common-lisp:nil)
                        (identity-provider-type :initarg
                         :identity-provider-type :type
                         (common-lisp:or identity-provider-type
                                         common-lisp:null)
                         :accessor %described-server-identity-provider-type
                         :initform common-lisp:nil)
                        (identity-provider-details :initarg
                         :identity-provider-details :type
                         (common-lisp:or identity-provider-details
                                         common-lisp:null)
                         :accessor %described-server-identity-provider-details
                         :initform common-lisp:nil)
                        (host-key-fingerprint :initarg :host-key-fingerprint
                         :type
                         (common-lisp:or host-key-fingerprint common-lisp:null)
                         :accessor %described-server-host-key-fingerprint
                         :initform common-lisp:nil)
                        (endpoint-type :initarg :endpoint-type :type
                         (common-lisp:or endpoint-type common-lisp:null)
                         :accessor %described-server-endpoint-type :initform
                         common-lisp:nil)
                        (endpoint-details :initarg :endpoint-details :type
                         (common-lisp:or endpoint-details common-lisp:null)
                         :accessor %described-server-endpoint-details :initform
                         common-lisp:nil)
                        (domain :initarg :domain :type
                         (common-lisp:or domain common-lisp:null) :accessor
                         %described-server-domain :initform common-lisp:nil)
                        (protocol-details :initarg :protocol-details :type
                         (common-lisp:or protocol-details common-lisp:null)
                         :accessor %described-server-protocol-details :initform
                         common-lisp:nil)
                        (certificate :initarg :certificate :type
                         (common-lisp:or certificate common-lisp:null)
                         :accessor %described-server-certificate :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %described-server-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'described-server 'make-described-server))
 (common-lisp:defun make-described-server
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workflow-details user-count tags state
                     server-id security-policy-name protocols
                     pre-authentication-login-banner
                     post-authentication-login-banner logging-role
                     identity-provider-type identity-provider-details
                     host-key-fingerprint endpoint-type endpoint-details domain
                     protocol-details certificate arn)
   (common-lisp:apply #'common-lisp:make-instance 'described-server
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input described-server))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input described-server))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol-details))
      (common-lisp:list
       (common-lisp:cons "ProtocolDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-details))
      (common-lisp:list
       (common-lisp:cons "EndpointDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-type))
      (common-lisp:list
       (common-lisp:cons "EndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'host-key-fingerprint))
      (common-lisp:list
       (common-lisp:cons "HostKeyFingerprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-details))
      (common-lisp:list
       (common-lisp:cons "IdentityProviderDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-type))
      (common-lisp:list
       (common-lisp:cons "IdentityProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-role))
      (common-lisp:list
       (common-lisp:cons "LoggingRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-authentication-login-banner))
      (common-lisp:list
       (common-lisp:cons "PostAuthenticationLoginBanner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pre-authentication-login-banner))
      (common-lisp:list
       (common-lisp:cons "PreAuthenticationLoginBanner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols))
      (common-lisp:list
       (common-lisp:cons "Protocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-policy-name))
      (common-lisp:list
       (common-lisp:cons "SecurityPolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-count))
      (common-lisp:list
       (common-lisp:cons "UserCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-details))
      (common-lisp:list
       (common-lisp:cons "WorkflowDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input described-server))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass described-user common-lisp:nil
                       ((user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %described-user-user-name :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %described-user-tags :initform common-lisp:nil)
                        (ssh-public-keys :initarg :ssh-public-keys :type
                         (common-lisp:or ssh-public-keys common-lisp:null)
                         :accessor %described-user-ssh-public-keys :initform
                         common-lisp:nil)
                        (role :initarg :role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %described-user-role :initform common-lisp:nil)
                        (posix-profile :initarg :posix-profile :type
                         (common-lisp:or posix-profile common-lisp:null)
                         :accessor %described-user-posix-profile :initform
                         common-lisp:nil)
                        (policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %described-user-policy :initform common-lisp:nil)
                        (home-directory-type :initarg :home-directory-type
                         :type
                         (common-lisp:or home-directory-type common-lisp:null)
                         :accessor %described-user-home-directory-type
                         :initform common-lisp:nil)
                        (home-directory-mappings :initarg
                         :home-directory-mappings :type
                         (common-lisp:or home-directory-mappings
                                         common-lisp:null)
                         :accessor %described-user-home-directory-mappings
                         :initform common-lisp:nil)
                        (home-directory :initarg :home-directory :type
                         (common-lisp:or home-directory common-lisp:null)
                         :accessor %described-user-home-directory :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %described-user-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export (common-lisp:list 'described-user 'make-described-user))
 (common-lisp:defun make-described-user
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-name tags ssh-public-keys role
                     posix-profile policy home-directory-type
                     home-directory-mappings home-directory arn)
   (common-lisp:apply #'common-lisp:make-instance 'described-user
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input described-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input described-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory))
      (common-lisp:list
       (common-lisp:cons "HomeDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'home-directory-mappings))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory-type))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'posix-profile))
      (common-lisp:list
       (common-lisp:cons "PosixProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-public-keys))
      (common-lisp:list
       (common-lisp:cons "SshPublicKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input described-user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass described-workflow common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %described-workflow-tags :initform common-lisp:nil)
                        (workflow-id :initarg :workflow-id :type
                         (common-lisp:or workflow-id common-lisp:null)
                         :accessor %described-workflow-workflow-id :initform
                         common-lisp:nil)
                        (on-exception-steps :initarg :on-exception-steps :type
                         (common-lisp:or workflow-steps common-lisp:null)
                         :accessor %described-workflow-on-exception-steps
                         :initform common-lisp:nil)
                        (steps :initarg :steps :type
                         (common-lisp:or workflow-steps common-lisp:null)
                         :accessor %described-workflow-steps :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or workflow-description common-lisp:null)
                         :accessor %described-workflow-description :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %described-workflow-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'described-workflow 'make-described-workflow))
 (common-lisp:defun make-described-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags workflow-id on-exception-steps steps
                     description arn)
   (common-lisp:apply #'common-lisp:make-instance 'described-workflow
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input described-workflow))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input described-workflow))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'steps))
      (common-lisp:list
       (common-lisp:cons "Steps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-exception-steps))
      (common-lisp:list
       (common-lisp:cons "OnExceptionSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input described-workflow))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype directory-id () 'common-lisp:string)
(common-lisp:deftype domain () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass efs-file-location common-lisp:nil
                       ((path :initarg :path :type
                         (common-lisp:or efs-path common-lisp:null) :accessor
                         %efs-file-location-path :initform common-lisp:nil)
                        (file-system-id :initarg :file-system-id :type
                         (common-lisp:or efs-file-system-id common-lisp:null)
                         :accessor %efs-file-location-file-system-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'efs-file-location 'make-efs-file-location))
 (common-lisp:defun make-efs-file-location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key path file-system-id)
   (common-lisp:apply #'common-lisp:make-instance 'efs-file-location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input efs-file-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input efs-file-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input efs-file-location))
   common-lisp:nil))
(common-lisp:deftype efs-file-system-id () 'common-lisp:string)
(common-lisp:deftype efs-path () 'common-lisp:string)
(common-lisp:deftype encryption-alg () 'common-lisp:string)
(common-lisp:deftype encryption-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass endpoint-details common-lisp:nil
                       ((security-group-ids :initarg :security-group-ids :type
                         (common-lisp:or security-group-ids common-lisp:null)
                         :accessor %endpoint-details-security-group-ids
                         :initform common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or vpc-id common-lisp:null) :accessor
                         %endpoint-details-vpc-id :initform common-lisp:nil)
                        (vpc-endpoint-id :initarg :vpc-endpoint-id :type
                         (common-lisp:or vpc-endpoint-id common-lisp:null)
                         :accessor %endpoint-details-vpc-endpoint-id :initform
                         common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or subnet-ids common-lisp:null) :accessor
                         %endpoint-details-subnet-ids :initform
                         common-lisp:nil)
                        (address-allocation-ids :initarg
                         :address-allocation-ids :type
                         (common-lisp:or address-allocation-ids
                                         common-lisp:null)
                         :accessor %endpoint-details-address-allocation-ids
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'endpoint-details 'make-endpoint-details))
 (common-lisp:defun make-endpoint-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-group-ids vpc-id vpc-endpoint-id
                     subnet-ids address-allocation-ids)
   (common-lisp:apply #'common-lisp:make-instance 'endpoint-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'address-allocation-ids))
      (common-lisp:list
       (common-lisp:cons "AddressAllocationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-details))
   common-lisp:nil))
(common-lisp:deftype endpoint-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass execution-error common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or execution-error-message
                                         common-lisp:null)
                         :accessor %execution-error-message :initform
                         (common-lisp:error ":message is required"))
                        (type :initarg :type :type
                         (common-lisp:or execution-error-type common-lisp:null)
                         :accessor %execution-error-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export (common-lisp:list 'execution-error 'make-execution-error))
 (common-lisp:defun make-execution-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message type)
   (common-lisp:apply #'common-lisp:make-instance 'execution-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execution-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execution-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execution-error))
   common-lisp:nil))
(common-lisp:deftype execution-error-message () 'common-lisp:string)
(common-lisp:deftype execution-error-type () 'common-lisp:string)
(common-lisp:deftype execution-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass execution-results common-lisp:nil
                       ((on-exception-steps :initarg :on-exception-steps :type
                         (common-lisp:or execution-step-results
                                         common-lisp:null)
                         :accessor %execution-results-on-exception-steps
                         :initform common-lisp:nil)
                        (steps :initarg :steps :type
                         (common-lisp:or execution-step-results
                                         common-lisp:null)
                         :accessor %execution-results-steps :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'execution-results 'make-execution-results))
 (common-lisp:defun make-execution-results
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key on-exception-steps steps)
   (common-lisp:apply #'common-lisp:make-instance 'execution-results
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input execution-results))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input execution-results))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'steps))
      (common-lisp:list
       (common-lisp:cons "Steps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-exception-steps))
      (common-lisp:list
       (common-lisp:cons "OnExceptionSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input execution-results))
   common-lisp:nil))
(common-lisp:deftype execution-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass execution-step-result common-lisp:nil
                       ((error :initarg :error :type
                         (common-lisp:or execution-error common-lisp:null)
                         :accessor %execution-step-result-error :initform
                         common-lisp:nil)
                        (outputs :initarg :outputs :type
                         (common-lisp:or step-result-outputs-json
                                         common-lisp:null)
                         :accessor %execution-step-result-outputs :initform
                         common-lisp:nil)
                        (step-type :initarg :step-type :type
                         (common-lisp:or workflow-step-type common-lisp:null)
                         :accessor %execution-step-result-step-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'execution-step-result 'make-execution-step-result))
 (common-lisp:defun make-execution-step-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error outputs step-type)
   (common-lisp:apply #'common-lisp:make-instance 'execution-step-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          execution-step-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          execution-step-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-type))
      (common-lisp:list
       (common-lisp:cons "StepType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          execution-step-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype execution-step-results ()
   '(trivial-types:proper-list execution-step-result))
 (common-lisp:defun |make-execution-step-results|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list execution-step-result))
   aws-sdk/generator/shape::members))
(common-lisp:deftype external-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass file-location common-lisp:nil
                       ((efs-file-location :initarg :efs-file-location :type
                         (common-lisp:or efs-file-location common-lisp:null)
                         :accessor %file-location-efs-file-location :initform
                         common-lisp:nil)
                        (s3file-location :initarg :s3file-location :type
                         (common-lisp:or s3file-location common-lisp:null)
                         :accessor %file-location-s3file-location :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'file-location 'make-file-location))
 (common-lisp:defun make-file-location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key efs-file-location s3file-location)
   (common-lisp:apply #'common-lisp:make-instance 'file-location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input file-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input file-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3file-location))
      (common-lisp:list
       (common-lisp:cons "S3FileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'efs-file-location))
      (common-lisp:list
       (common-lisp:cons "EfsFileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input file-location))
   common-lisp:nil))
(common-lisp:deftype file-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype file-paths () '(trivial-types:proper-list file-path))
 (common-lisp:defun |make-file-paths|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list file-path))
   aws-sdk/generator/shape::members))
(common-lisp:deftype fips () 'common-lisp:boolean)
(common-lisp:deftype function () 'common-lisp:string)
(common-lisp:deftype home-directory () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass home-directory-map-entry common-lisp:nil
                       ((target :initarg :target :type
                         (common-lisp:or map-target common-lisp:null) :accessor
                         %home-directory-map-entry-target :initform
                         (common-lisp:error ":target is required"))
                        (entry :initarg :entry :type
                         (common-lisp:or map-entry common-lisp:null) :accessor
                         %home-directory-map-entry-entry :initform
                         (common-lisp:error ":entry is required"))))
 (common-lisp:export
  (common-lisp:list 'home-directory-map-entry 'make-home-directory-map-entry))
 (common-lisp:defun make-home-directory-map-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target entry)
   (common-lisp:apply #'common-lisp:make-instance 'home-directory-map-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          home-directory-map-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          home-directory-map-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry))
      (common-lisp:list
       (common-lisp:cons "Entry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "Target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          home-directory-map-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype home-directory-mappings ()
   '(trivial-types:proper-list home-directory-map-entry))
 (common-lisp:defun |make-home-directory-mappings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            home-directory-map-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype home-directory-type () 'common-lisp:string)
(common-lisp:deftype host-key () 'common-lisp:string)
(common-lisp:deftype host-key-description () 'common-lisp:string)
(common-lisp:deftype host-key-fingerprint () 'common-lisp:string)
(common-lisp:deftype host-key-id () 'common-lisp:string)
(common-lisp:deftype host-key-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass identity-provider-details common-lisp:nil
                       ((function :initarg :function :type
                         (common-lisp:or function common-lisp:null) :accessor
                         %identity-provider-details-function :initform
                         common-lisp:nil)
                        (directory-id :initarg :directory-id :type
                         (common-lisp:or directory-id common-lisp:null)
                         :accessor %identity-provider-details-directory-id
                         :initform common-lisp:nil)
                        (invocation-role :initarg :invocation-role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %identity-provider-details-invocation-role :initform
                         common-lisp:nil)
                        (url :initarg :url :type
                         (common-lisp:or url common-lisp:null) :accessor
                         %identity-provider-details-url :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'identity-provider-details
                    'make-identity-provider-details))
 (common-lisp:defun make-identity-provider-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key function directory-id invocation-role
                     url)
   (common-lisp:apply #'common-lisp:make-instance 'identity-provider-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'invocation-role))
      (common-lisp:list
       (common-lisp:cons "InvocationRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-id))
      (common-lisp:list
       (common-lisp:cons "DirectoryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'function))
      (common-lisp:list
       (common-lisp:cons "Function"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          identity-provider-details))
   common-lisp:nil))
(common-lisp:deftype identity-provider-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass import-certificate-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %import-certificate-request-tags :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %import-certificate-request-description
                         :initform common-lisp:nil)
                        (inactive-date :initarg :inactive-date :type
                         (common-lisp:or cert-date common-lisp:null) :accessor
                         %import-certificate-request-inactive-date :initform
                         common-lisp:nil)
                        (active-date :initarg :active-date :type
                         (common-lisp:or cert-date common-lisp:null) :accessor
                         %import-certificate-request-active-date :initform
                         common-lisp:nil)
                        (private-key :initarg :private-key :type
                         (common-lisp:or private-key-type common-lisp:null)
                         :accessor %import-certificate-request-private-key
                         :initform common-lisp:nil)
                        (certificate-chain :initarg :certificate-chain :type
                         (common-lisp:or certificate-chain-type
                                         common-lisp:null)
                         :accessor
                         %import-certificate-request-certificate-chain
                         :initform common-lisp:nil)
                        (certificate :initarg :certificate :type
                         (common-lisp:or certificate-body-type
                                         common-lisp:null)
                         :accessor %import-certificate-request-certificate
                         :initform
                         (common-lisp:error ":certificate is required"))
                        (usage :initarg :usage :type
                         (common-lisp:or certificate-usage-type
                                         common-lisp:null)
                         :accessor %import-certificate-request-usage :initform
                         (common-lisp:error ":usage is required"))))
 (common-lisp:export
  (common-lisp:list 'import-certificate-request
                    'make-import-certificate-request))
 (common-lisp:defun make-import-certificate-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags description inactive-date
                     active-date private-key certificate-chain certificate
                     usage)
   (common-lisp:apply #'common-lisp:make-instance 'import-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage))
      (common-lisp:list
       (common-lisp:cons "Usage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "CertificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key))
      (common-lisp:list
       (common-lisp:cons "PrivateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-date))
      (common-lisp:list
       (common-lisp:cons "ActiveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inactive-date))
      (common-lisp:list
       (common-lisp:cons "InactiveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-certificate-response common-lisp:nil
                       ((certificate-id :initarg :certificate-id :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor %import-certificate-response-certificate-id
                         :initform
                         (common-lisp:error ":certificate-id is required"))))
 (common-lisp:export
  (common-lisp:list 'import-certificate-response
                    'make-import-certificate-response))
 (common-lisp:defun make-import-certificate-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificate-id)
   (common-lisp:apply #'common-lisp:make-instance 'import-certificate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-host-key-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %import-host-key-request-tags :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or host-key-description common-lisp:null)
                         :accessor %import-host-key-request-description
                         :initform common-lisp:nil)
                        (host-key-body :initarg :host-key-body :type
                         (common-lisp:or host-key common-lisp:null) :accessor
                         %import-host-key-request-host-key-body :initform
                         (common-lisp:error ":host-key-body is required"))
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %import-host-key-request-server-id :initform
                         (common-lisp:error ":server-id is required"))))
 (common-lisp:export
  (common-lisp:list 'import-host-key-request 'make-import-host-key-request))
 (common-lisp:defun make-import-host-key-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags description host-key-body server-id)
   (common-lisp:apply #'common-lisp:make-instance 'import-host-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-host-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-host-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-key-body))
      (common-lisp:list
       (common-lisp:cons "HostKeyBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-host-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-host-key-response common-lisp:nil
                       ((host-key-id :initarg :host-key-id :type
                         (common-lisp:or host-key-id common-lisp:null)
                         :accessor %import-host-key-response-host-key-id
                         :initform
                         (common-lisp:error ":host-key-id is required"))
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %import-host-key-response-server-id :initform
                         (common-lisp:error ":server-id is required"))))
 (common-lisp:export
  (common-lisp:list 'import-host-key-response 'make-import-host-key-response))
 (common-lisp:defun make-import-host-key-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key host-key-id server-id)
   (common-lisp:apply #'common-lisp:make-instance 'import-host-key-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-host-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-host-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-key-id))
      (common-lisp:list
       (common-lisp:cons "HostKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-host-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-ssh-public-key-request common-lisp:nil
                       ((user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %import-ssh-public-key-request-user-name :initform
                         (common-lisp:error ":user-name is required"))
                        (ssh-public-key-body :initarg :ssh-public-key-body
                         :type
                         (common-lisp:or ssh-public-key-body common-lisp:null)
                         :accessor
                         %import-ssh-public-key-request-ssh-public-key-body
                         :initform
                         (common-lisp:error
                          ":ssh-public-key-body is required"))
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %import-ssh-public-key-request-server-id :initform
                         (common-lisp:error ":server-id is required"))))
 (common-lisp:export
  (common-lisp:list 'import-ssh-public-key-request
                    'make-import-ssh-public-key-request))
 (common-lisp:defun make-import-ssh-public-key-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-name ssh-public-key-body server-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-ssh-public-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-ssh-public-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-ssh-public-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-public-key-body))
      (common-lisp:list
       (common-lisp:cons "SshPublicKeyBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-ssh-public-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-ssh-public-key-response common-lisp:nil
                       ((user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %import-ssh-public-key-response-user-name :initform
                         (common-lisp:error ":user-name is required"))
                        (ssh-public-key-id :initarg :ssh-public-key-id :type
                         (common-lisp:or ssh-public-key-id common-lisp:null)
                         :accessor
                         %import-ssh-public-key-response-ssh-public-key-id
                         :initform
                         (common-lisp:error ":ssh-public-key-id is required"))
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %import-ssh-public-key-response-server-id :initform
                         (common-lisp:error ":server-id is required"))))
 (common-lisp:export
  (common-lisp:list 'import-ssh-public-key-response
                    'make-import-ssh-public-key-response))
 (common-lisp:defun make-import-ssh-public-key-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-name ssh-public-key-id server-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-ssh-public-key-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-ssh-public-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-ssh-public-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-public-key-id))
      (common-lisp:list
       (common-lisp:cons "SshPublicKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-ssh-public-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass input-file-location common-lisp:nil
                       ((efs-file-location :initarg :efs-file-location :type
                         (common-lisp:or efs-file-location common-lisp:null)
                         :accessor %input-file-location-efs-file-location
                         :initform common-lisp:nil)
                        (s3file-location :initarg :s3file-location :type
                         (common-lisp:or s3input-file-location
                                         common-lisp:null)
                         :accessor %input-file-location-s3file-location
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'input-file-location 'make-input-file-location))
 (common-lisp:defun make-input-file-location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key efs-file-location s3file-location)
   (common-lisp:apply #'common-lisp:make-instance 'input-file-location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-file-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-file-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3file-location))
      (common-lisp:list
       (common-lisp:cons "S3FileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'efs-file-location))
      (common-lisp:list
       (common-lisp:cons "EfsFileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-file-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-service-error
     (transfer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-error-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-error 'internal-service-error-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (transfer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-next-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'invalid-next-token-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (transfer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-accesses-request common-lisp:nil
                       ((server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %list-accesses-request-server-id :initform
                         (common-lisp:error ":server-id is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-accesses-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-accesses-request-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-accesses-request 'make-list-accesses-request))
 (common-lisp:defun make-list-accesses-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-id next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-accesses-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-accesses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-accesses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-accesses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-accesses-response common-lisp:nil
                       ((accesses :initarg :accesses :type
                         (common-lisp:or listed-accesses common-lisp:null)
                         :accessor %list-accesses-response-accesses :initform
                         (common-lisp:error ":accesses is required"))
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %list-accesses-response-server-id :initform
                         (common-lisp:error ":server-id is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-accesses-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-accesses-response 'make-list-accesses-response))
 (common-lisp:defun make-list-accesses-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key accesses server-id next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-accesses-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-accesses-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-accesses-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accesses))
      (common-lisp:list
       (common-lisp:cons "Accesses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-accesses-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-agreements-request common-lisp:nil
                       ((server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %list-agreements-request-server-id :initform
                         (common-lisp:error ":server-id is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-agreements-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-agreements-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-agreements-request 'make-list-agreements-request))
 (common-lisp:defun make-list-agreements-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-id next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-agreements-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-agreements-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-agreements-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-agreements-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-agreements-response common-lisp:nil
                       ((agreements :initarg :agreements :type
                         (common-lisp:or listed-agreements common-lisp:null)
                         :accessor %list-agreements-response-agreements
                         :initform
                         (common-lisp:error ":agreements is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-agreements-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-agreements-response 'make-list-agreements-response))
 (common-lisp:defun make-list-agreements-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key agreements next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-agreements-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-agreements-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-agreements-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreements))
      (common-lisp:list
       (common-lisp:cons "Agreements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-agreements-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-certificates-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-certificates-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-certificates-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-certificates-request
                    'make-list-certificates-request))
 (common-lisp:defun make-list-certificates-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-certificates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-certificates-response common-lisp:nil
                       ((certificates :initarg :certificates :type
                         (common-lisp:or listed-certificates common-lisp:null)
                         :accessor %list-certificates-response-certificates
                         :initform
                         (common-lisp:error ":certificates is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-certificates-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-certificates-response
                    'make-list-certificates-response))
 (common-lisp:defun make-list-certificates-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificates next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-certificates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "Certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-certificates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-connectors-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-connectors-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-connectors-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-connectors-request 'make-list-connectors-request))
 (common-lisp:defun make-list-connectors-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-connectors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-connectors-response common-lisp:nil
                       ((connectors :initarg :connectors :type
                         (common-lisp:or listed-connectors common-lisp:null)
                         :accessor %list-connectors-response-connectors
                         :initform
                         (common-lisp:error ":connectors is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-connectors-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-connectors-response 'make-list-connectors-response))
 (common-lisp:defun make-list-connectors-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connectors next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-connectors-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connectors))
      (common-lisp:list
       (common-lisp:cons "Connectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connectors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-executions-request common-lisp:nil
                       ((workflow-id :initarg :workflow-id :type
                         (common-lisp:or workflow-id common-lisp:null)
                         :accessor %list-executions-request-workflow-id
                         :initform
                         (common-lisp:error ":workflow-id is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-executions-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-executions-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-executions-request 'make-list-executions-request))
 (common-lisp:defun make-list-executions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workflow-id next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-executions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-executions-response common-lisp:nil
                       ((executions :initarg :executions :type
                         (common-lisp:or listed-executions common-lisp:null)
                         :accessor %list-executions-response-executions
                         :initform
                         (common-lisp:error ":executions is required"))
                        (workflow-id :initarg :workflow-id :type
                         (common-lisp:or workflow-id common-lisp:null)
                         :accessor %list-executions-response-workflow-id
                         :initform
                         (common-lisp:error ":workflow-id is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-executions-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-executions-response 'make-list-executions-response))
 (common-lisp:defun make-list-executions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key executions workflow-id next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-executions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'executions))
      (common-lisp:list
       (common-lisp:cons "Executions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-executions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-host-keys-request common-lisp:nil
                       ((server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %list-host-keys-request-server-id :initform
                         (common-lisp:error ":server-id is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-host-keys-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-host-keys-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-host-keys-request 'make-list-host-keys-request))
 (common-lisp:defun make-list-host-keys-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-id next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-host-keys-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-host-keys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-host-keys-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-host-keys-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-host-keys-response common-lisp:nil
                       ((host-keys :initarg :host-keys :type
                         (common-lisp:or listed-host-keys common-lisp:null)
                         :accessor %list-host-keys-response-host-keys :initform
                         (common-lisp:error ":host-keys is required"))
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %list-host-keys-response-server-id :initform
                         (common-lisp:error ":server-id is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-host-keys-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-host-keys-response 'make-list-host-keys-response))
 (common-lisp:defun make-list-host-keys-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key host-keys server-id next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-host-keys-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-host-keys-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-host-keys-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-keys))
      (common-lisp:list
       (common-lisp:cons "HostKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-host-keys-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-profiles-request common-lisp:nil
                       ((profile-type :initarg :profile-type :type
                         (common-lisp:or profile-type common-lisp:null)
                         :accessor %list-profiles-request-profile-type
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-profiles-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-profiles-request-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-profiles-request 'make-list-profiles-request))
 (common-lisp:defun make-list-profiles-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profile-type next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-profiles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profiles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-type))
      (common-lisp:list
       (common-lisp:cons "ProfileType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-profiles-response common-lisp:nil
                       ((profiles :initarg :profiles :type
                         (common-lisp:or listed-profiles common-lisp:null)
                         :accessor %list-profiles-response-profiles :initform
                         (common-lisp:error ":profiles is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-profiles-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-profiles-response 'make-list-profiles-response))
 (common-lisp:defun make-list-profiles-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profiles next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-profiles-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiles))
      (common-lisp:list
       (common-lisp:cons "Profiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-security-policies-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-security-policies-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-security-policies-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-security-policies-request
                    'make-list-security-policies-request))
 (common-lisp:defun make-list-security-policies-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-security-policies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-security-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-security-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-security-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-security-policies-response common-lisp:nil
                       ((security-policy-names :initarg :security-policy-names
                         :type
                         (common-lisp:or security-policy-names
                                         common-lisp:null)
                         :accessor
                         %list-security-policies-response-security-policy-names
                         :initform
                         (common-lisp:error
                          ":security-policy-names is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-security-policies-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-security-policies-response
                    'make-list-security-policies-response))
 (common-lisp:defun make-list-security-policies-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-policy-names next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-security-policies-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-security-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-security-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-policy-names))
      (common-lisp:list
       (common-lisp:cons "SecurityPolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-security-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-servers-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-servers-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-servers-request-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-servers-request 'make-list-servers-request))
 (common-lisp:defun make-list-servers-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-servers-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-servers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-servers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-servers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-servers-response common-lisp:nil
                       ((servers :initarg :servers :type
                         (common-lisp:or listed-servers common-lisp:null)
                         :accessor %list-servers-response-servers :initform
                         (common-lisp:error ":servers is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-servers-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-servers-response 'make-list-servers-response))
 (common-lisp:defun make-list-servers-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key servers next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-servers-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-servers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-servers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'servers))
      (common-lisp:list
       (common-lisp:cons "Servers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-servers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-tags-for-resource-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-tags-for-resource-request-max-results
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-tags-for-resource-request-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-tags-for-resource-response-next-token :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-tags-for-resource-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags next-token arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-users-request common-lisp:nil
                       ((server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %list-users-request-server-id :initform
                         (common-lisp:error ":server-id is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-users-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-users-request-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-users-request 'make-list-users-request))
 (common-lisp:defun make-list-users-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-id next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-users-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-users-response common-lisp:nil
                       ((users :initarg :users :type
                         (common-lisp:or listed-users common-lisp:null)
                         :accessor %list-users-response-users :initform
                         (common-lisp:error ":users is required"))
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %list-users-response-server-id :initform
                         (common-lisp:error ":server-id is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-users-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-users-response 'make-list-users-response))
 (common-lisp:defun make-list-users-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key users server-id next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-users-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "Users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workflows-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-workflows-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-workflows-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-workflows-request 'make-list-workflows-request))
 (common-lisp:defun make-list-workflows-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-workflows-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-workflows-response common-lisp:nil
                       ((workflows :initarg :workflows :type
                         (common-lisp:or listed-workflows common-lisp:null)
                         :accessor %list-workflows-response-workflows :initform
                         (common-lisp:error ":workflows is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-workflows-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-workflows-response 'make-list-workflows-response))
 (common-lisp:defun make-list-workflows-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workflows next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-workflows-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflows))
      (common-lisp:list
       (common-lisp:cons "Workflows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workflows-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass listed-access common-lisp:nil
                       ((external-id :initarg :external-id :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor %listed-access-external-id :initform
                         common-lisp:nil)
                        (role :initarg :role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %listed-access-role :initform common-lisp:nil)
                        (home-directory-type :initarg :home-directory-type
                         :type
                         (common-lisp:or home-directory-type common-lisp:null)
                         :accessor %listed-access-home-directory-type :initform
                         common-lisp:nil)
                        (home-directory :initarg :home-directory :type
                         (common-lisp:or home-directory common-lisp:null)
                         :accessor %listed-access-home-directory :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'listed-access 'make-listed-access))
 (common-lisp:defun make-listed-access
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key external-id role home-directory-type
                     home-directory)
   (common-lisp:apply #'common-lisp:make-instance 'listed-access
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-access))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-access))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory))
      (common-lisp:list
       (common-lisp:cons "HomeDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory-type))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-access))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype listed-accesses ()
   '(trivial-types:proper-list listed-access))
 (common-lisp:defun |make-listed-accesses|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-access))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass listed-agreement common-lisp:nil
                       ((partner-profile-id :initarg :partner-profile-id :type
                         (common-lisp:or profile-id common-lisp:null) :accessor
                         %listed-agreement-partner-profile-id :initform
                         common-lisp:nil)
                        (local-profile-id :initarg :local-profile-id :type
                         (common-lisp:or profile-id common-lisp:null) :accessor
                         %listed-agreement-local-profile-id :initform
                         common-lisp:nil)
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %listed-agreement-server-id :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or agreement-status-type
                                         common-lisp:null)
                         :accessor %listed-agreement-status :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %listed-agreement-description :initform
                         common-lisp:nil)
                        (agreement-id :initarg :agreement-id :type
                         (common-lisp:or agreement-id common-lisp:null)
                         :accessor %listed-agreement-agreement-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %listed-agreement-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'listed-agreement 'make-listed-agreement))
 (common-lisp:defun make-listed-agreement
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key partner-profile-id local-profile-id
                     server-id status description agreement-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'listed-agreement
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-agreement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-agreement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement-id))
      (common-lisp:list
       (common-lisp:cons "AgreementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-profile-id))
      (common-lisp:list
       (common-lisp:cons "LocalProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partner-profile-id))
      (common-lisp:list
       (common-lisp:cons "PartnerProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-agreement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype listed-agreements ()
   '(trivial-types:proper-list listed-agreement))
 (common-lisp:defun |make-listed-agreements|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-agreement))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass listed-certificate common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %listed-certificate-description :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or certificate-type common-lisp:null)
                         :accessor %listed-certificate-type :initform
                         common-lisp:nil)
                        (inactive-date :initarg :inactive-date :type
                         (common-lisp:or cert-date common-lisp:null) :accessor
                         %listed-certificate-inactive-date :initform
                         common-lisp:nil)
                        (active-date :initarg :active-date :type
                         (common-lisp:or cert-date common-lisp:null) :accessor
                         %listed-certificate-active-date :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or certificate-status-type
                                         common-lisp:null)
                         :accessor %listed-certificate-status :initform
                         common-lisp:nil)
                        (usage :initarg :usage :type
                         (common-lisp:or certificate-usage-type
                                         common-lisp:null)
                         :accessor %listed-certificate-usage :initform
                         common-lisp:nil)
                        (certificate-id :initarg :certificate-id :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor %listed-certificate-certificate-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %listed-certificate-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'listed-certificate 'make-listed-certificate))
 (common-lisp:defun make-listed-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description type inactive-date
                     active-date status usage certificate-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'listed-certificate
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage))
      (common-lisp:list
       (common-lisp:cons "Usage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-date))
      (common-lisp:list
       (common-lisp:cons "ActiveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inactive-date))
      (common-lisp:list
       (common-lisp:cons "InactiveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype listed-certificates ()
   '(trivial-types:proper-list listed-certificate))
 (common-lisp:defun |make-listed-certificates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-certificate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass listed-connector common-lisp:nil
                       ((url :initarg :url :type
                         (common-lisp:or url common-lisp:null) :accessor
                         %listed-connector-url :initform common-lisp:nil)
                        (connector-id :initarg :connector-id :type
                         (common-lisp:or connector-id common-lisp:null)
                         :accessor %listed-connector-connector-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %listed-connector-arn :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'listed-connector 'make-listed-connector))
 (common-lisp:defun make-listed-connector
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key url connector-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'listed-connector
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-connector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-connector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-id))
      (common-lisp:list
       (common-lisp:cons "ConnectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-connector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype listed-connectors ()
   '(trivial-types:proper-list listed-connector))
 (common-lisp:defun |make-listed-connectors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-connector))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass listed-execution common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or execution-status common-lisp:null)
                         :accessor %listed-execution-status :initform
                         common-lisp:nil)
                        (service-metadata :initarg :service-metadata :type
                         (common-lisp:or service-metadata common-lisp:null)
                         :accessor %listed-execution-service-metadata :initform
                         common-lisp:nil)
                        (initial-file-location :initarg :initial-file-location
                         :type (common-lisp:or file-location common-lisp:null)
                         :accessor %listed-execution-initial-file-location
                         :initform common-lisp:nil)
                        (execution-id :initarg :execution-id :type
                         (common-lisp:or execution-id common-lisp:null)
                         :accessor %listed-execution-execution-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'listed-execution 'make-listed-execution))
 (common-lisp:defun make-listed-execution
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status service-metadata
                     initial-file-location execution-id)
   (common-lisp:apply #'common-lisp:make-instance 'listed-execution
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "ExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-file-location))
      (common-lisp:list
       (common-lisp:cons "InitialFileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-metadata))
      (common-lisp:list
       (common-lisp:cons "ServiceMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-execution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype listed-executions ()
   '(trivial-types:proper-list listed-execution))
 (common-lisp:defun |make-listed-executions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-execution))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass listed-host-key common-lisp:nil
                       ((date-imported :initarg :date-imported :type
                         (common-lisp:or date-imported common-lisp:null)
                         :accessor %listed-host-key-date-imported :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or host-key-type common-lisp:null)
                         :accessor %listed-host-key-type :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or host-key-description common-lisp:null)
                         :accessor %listed-host-key-description :initform
                         common-lisp:nil)
                        (fingerprint :initarg :fingerprint :type
                         (common-lisp:or host-key-fingerprint common-lisp:null)
                         :accessor %listed-host-key-fingerprint :initform
                         common-lisp:nil)
                        (host-key-id :initarg :host-key-id :type
                         (common-lisp:or host-key-id common-lisp:null)
                         :accessor %listed-host-key-host-key-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %listed-host-key-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export (common-lisp:list 'listed-host-key 'make-listed-host-key))
 (common-lisp:defun make-listed-host-key
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key date-imported type description
                     fingerprint host-key-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'listed-host-key
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-host-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-host-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-key-id))
      (common-lisp:list
       (common-lisp:cons "HostKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fingerprint))
      (common-lisp:list
       (common-lisp:cons "Fingerprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-imported))
      (common-lisp:list
       (common-lisp:cons "DateImported"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-host-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype listed-host-keys ()
   '(trivial-types:proper-list listed-host-key))
 (common-lisp:defun |make-listed-host-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-host-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass listed-profile common-lisp:nil
                       ((profile-type :initarg :profile-type :type
                         (common-lisp:or profile-type common-lisp:null)
                         :accessor %listed-profile-profile-type :initform
                         common-lisp:nil)
                        (as2id :initarg :as2id :type
                         (common-lisp:or as2id common-lisp:null) :accessor
                         %listed-profile-as2id :initform common-lisp:nil)
                        (profile-id :initarg :profile-id :type
                         (common-lisp:or profile-id common-lisp:null) :accessor
                         %listed-profile-profile-id :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %listed-profile-arn :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'listed-profile 'make-listed-profile))
 (common-lisp:defun make-listed-profile
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profile-type as2id profile-id arn)
   (common-lisp:apply #'common-lisp:make-instance 'listed-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'as2id))
      (common-lisp:list
       (common-lisp:cons "As2Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-type))
      (common-lisp:list
       (common-lisp:cons "ProfileType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype listed-profiles ()
   '(trivial-types:proper-list listed-profile))
 (common-lisp:defun |make-listed-profiles|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-profile))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass listed-server common-lisp:nil
                       ((user-count :initarg :user-count :type
                         (common-lisp:or user-count common-lisp:null) :accessor
                         %listed-server-user-count :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or state common-lisp:null) :accessor
                         %listed-server-state :initform common-lisp:nil)
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %listed-server-server-id :initform common-lisp:nil)
                        (logging-role :initarg :logging-role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %listed-server-logging-role :initform common-lisp:nil)
                        (endpoint-type :initarg :endpoint-type :type
                         (common-lisp:or endpoint-type common-lisp:null)
                         :accessor %listed-server-endpoint-type :initform
                         common-lisp:nil)
                        (identity-provider-type :initarg
                         :identity-provider-type :type
                         (common-lisp:or identity-provider-type
                                         common-lisp:null)
                         :accessor %listed-server-identity-provider-type
                         :initform common-lisp:nil)
                        (domain :initarg :domain :type
                         (common-lisp:or domain common-lisp:null) :accessor
                         %listed-server-domain :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %listed-server-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export (common-lisp:list 'listed-server 'make-listed-server))
 (common-lisp:defun make-listed-server
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-count state server-id logging-role
                     endpoint-type identity-provider-type domain arn)
   (common-lisp:apply #'common-lisp:make-instance 'listed-server
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-server))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-server))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-type))
      (common-lisp:list
       (common-lisp:cons "IdentityProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-type))
      (common-lisp:list
       (common-lisp:cons "EndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-role))
      (common-lisp:list
       (common-lisp:cons "LoggingRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-count))
      (common-lisp:list
       (common-lisp:cons "UserCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-server))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype listed-servers ()
   '(trivial-types:proper-list listed-server))
 (common-lisp:defun |make-listed-servers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-server))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass listed-user common-lisp:nil
                       ((user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %listed-user-user-name :initform common-lisp:nil)
                        (ssh-public-key-count :initarg :ssh-public-key-count
                         :type
                         (common-lisp:or ssh-public-key-count common-lisp:null)
                         :accessor %listed-user-ssh-public-key-count :initform
                         common-lisp:nil)
                        (role :initarg :role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %listed-user-role :initform common-lisp:nil)
                        (home-directory-type :initarg :home-directory-type
                         :type
                         (common-lisp:or home-directory-type common-lisp:null)
                         :accessor %listed-user-home-directory-type :initform
                         common-lisp:nil)
                        (home-directory :initarg :home-directory :type
                         (common-lisp:or home-directory common-lisp:null)
                         :accessor %listed-user-home-directory :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %listed-user-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export (common-lisp:list 'listed-user 'make-listed-user))
 (common-lisp:defun make-listed-user
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-name ssh-public-key-count role
                     home-directory-type home-directory arn)
   (common-lisp:apply #'common-lisp:make-instance 'listed-user
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory))
      (common-lisp:list
       (common-lisp:cons "HomeDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory-type))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ssh-public-key-count))
      (common-lisp:list
       (common-lisp:cons "SshPublicKeyCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype listed-users () '(trivial-types:proper-list listed-user))
 (common-lisp:defun |make-listed-users|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-user))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass listed-workflow common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %listed-workflow-arn :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or workflow-description common-lisp:null)
                         :accessor %listed-workflow-description :initform
                         common-lisp:nil)
                        (workflow-id :initarg :workflow-id :type
                         (common-lisp:or workflow-id common-lisp:null)
                         :accessor %listed-workflow-workflow-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'listed-workflow 'make-listed-workflow))
 (common-lisp:defun make-listed-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn description workflow-id)
   (common-lisp:apply #'common-lisp:make-instance 'listed-workflow
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input listed-workflow))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input listed-workflow))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input listed-workflow))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype listed-workflows ()
   '(trivial-types:proper-list listed-workflow))
 (common-lisp:defun |make-listed-workflows|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list listed-workflow))
   aws-sdk/generator/shape::members))
(common-lisp:deftype log-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass logging-configuration common-lisp:nil
                       ((log-group-name :initarg :log-group-name :type
                         (common-lisp:or log-group-name common-lisp:null)
                         :accessor %logging-configuration-log-group-name
                         :initform common-lisp:nil)
                        (logging-role :initarg :logging-role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %logging-configuration-logging-role :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'logging-configuration 'make-logging-configuration))
 (common-lisp:defun make-logging-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-group-name logging-role)
   (common-lisp:apply #'common-lisp:make-instance 'logging-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-role))
      (common-lisp:list
       (common-lisp:cons "LoggingRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group-name))
      (common-lisp:list
       (common-lisp:cons "LogGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration))
   common-lisp:nil))
(common-lisp:deftype map-entry () 'common-lisp:string)
(common-lisp:deftype map-target () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype mdn-response () 'common-lisp:string)
(common-lisp:deftype mdn-signing-alg () 'common-lisp:string)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:deftype message-subject () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype nullable-role () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype on-partial-upload-workflow-details ()
   '(trivial-types:proper-list workflow-detail))
 (common-lisp:defun |make-on-partial-upload-workflow-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workflow-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype on-upload-workflow-details ()
   '(trivial-types:proper-list workflow-detail))
 (common-lisp:defun |make-on-upload-workflow-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workflow-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype overwrite-existing () 'common-lisp:string)
(common-lisp:deftype passive-ip () 'common-lisp:string)
(common-lisp:deftype policy () 'common-lisp:string)
(common-lisp:deftype posix-id () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass posix-profile common-lisp:nil
                       ((secondary-gids :initarg :secondary-gids :type
                         (common-lisp:or secondary-gids common-lisp:null)
                         :accessor %posix-profile-secondary-gids :initform
                         common-lisp:nil)
                        (gid :initarg :gid :type
                         (common-lisp:or posix-id common-lisp:null) :accessor
                         %posix-profile-gid :initform
                         (common-lisp:error ":gid is required"))
                        (uid :initarg :uid :type
                         (common-lisp:or posix-id common-lisp:null) :accessor
                         %posix-profile-uid :initform
                         (common-lisp:error ":uid is required"))))
 (common-lisp:export (common-lisp:list 'posix-profile 'make-posix-profile))
 (common-lisp:defun make-posix-profile
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key secondary-gids gid uid)
   (common-lisp:apply #'common-lisp:make-instance 'posix-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input posix-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input posix-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uid))
      (common-lisp:list
       (common-lisp:cons "Uid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gid))
      (common-lisp:list
       (common-lisp:cons "Gid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secondary-gids))
      (common-lisp:list
       (common-lisp:cons "SecondaryGids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input posix-profile))
   common-lisp:nil))
(common-lisp:deftype post-authentication-login-banner () 'common-lisp:string)
(common-lisp:deftype pre-authentication-login-banner () 'common-lisp:string)
(common-lisp:deftype private-key-type () 'common-lisp:string)
(common-lisp:deftype profile-id () 'common-lisp:string)
(common-lisp:deftype profile-type () 'common-lisp:string)
(common-lisp:deftype protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass protocol-details common-lisp:nil
                       ((as2transports :initarg :as2transports :type
                         (common-lisp:or as2transports common-lisp:null)
                         :accessor %protocol-details-as2transports :initform
                         common-lisp:nil)
                        (set-stat-option :initarg :set-stat-option :type
                         (common-lisp:or set-stat-option common-lisp:null)
                         :accessor %protocol-details-set-stat-option :initform
                         common-lisp:nil)
                        (tls-session-resumption-mode :initarg
                         :tls-session-resumption-mode :type
                         (common-lisp:or tls-session-resumption-mode
                                         common-lisp:null)
                         :accessor
                         %protocol-details-tls-session-resumption-mode
                         :initform common-lisp:nil)
                        (passive-ip :initarg :passive-ip :type
                         (common-lisp:or passive-ip common-lisp:null) :accessor
                         %protocol-details-passive-ip :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'protocol-details 'make-protocol-details))
 (common-lisp:defun make-protocol-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key as2transports set-stat-option
                     tls-session-resumption-mode passive-ip)
   (common-lisp:apply #'common-lisp:make-instance 'protocol-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input protocol-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input protocol-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'passive-ip))
      (common-lisp:list
       (common-lisp:cons "PassiveIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tls-session-resumption-mode))
      (common-lisp:list
       (common-lisp:cons "TlsSessionResumptionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'set-stat-option))
      (common-lisp:list
       (common-lisp:cons "SetStatOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'as2transports))
      (common-lisp:list
       (common-lisp:cons "As2Transports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input protocol-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype protocols () '(trivial-types:proper-list protocol))
 (common-lisp:defun |make-protocols|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list protocol))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-exists-exception
     (transfer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-exists-exception-message)
      (resource :initarg :resource :initform common-lisp:nil :reader
       resource-exists-exception-resource)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-exists-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-exists-exception
                    'resource-exists-exception-message
                    'resource-exists-exception-resource
                    'resource-exists-exception-resource-type)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (transfer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource :initarg :resource :initform common-lisp:nil :reader
       resource-not-found-exception-resource)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype response () 'common-lisp:string)
(common-lisp:deftype retry-after-seconds () 'common-lisp:string)
(common-lisp:deftype role () 'common-lisp:string)
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:deftype s3etag () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3file-location common-lisp:nil
                       ((etag :initarg :etag :type
                         (common-lisp:or s3etag common-lisp:null) :accessor
                         %s3file-location-etag :initform common-lisp:nil)
                        (version-id :initarg :version-id :type
                         (common-lisp:or s3version-id common-lisp:null)
                         :accessor %s3file-location-version-id :initform
                         common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         %s3file-location-key :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or s3bucket common-lisp:null) :accessor
                         %s3file-location-bucket :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 's3file-location 'make-s3file-location))
 (common-lisp:defun make-s3file-location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key etag version-id key bucket)
   (common-lisp:apply #'common-lisp:make-instance 's3file-location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3file-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3file-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:list
       (common-lisp:cons "Etag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3file-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3input-file-location common-lisp:nil
                       ((key :initarg :key :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         %s3input-file-location-key :initform common-lisp:nil)
                        (bucket :initarg :bucket :type
                         (common-lisp:or s3bucket common-lisp:null) :accessor
                         %s3input-file-location-bucket :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 's3input-file-location 'make-s3input-file-location))
 (common-lisp:defun make-s3input-file-location
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key key bucket)
   (common-lisp:apply #'common-lisp:make-instance 's3input-file-location
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3input-file-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3input-file-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3input-file-location))
   common-lisp:nil))
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass s3tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or s3tag-value common-lisp:null)
                         :accessor %s3tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or s3tag-key common-lisp:null) :accessor
                         %s3tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 's3tag 'make-s3tag))
 (common-lisp:defun make-s3tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 's3tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3tag))
   common-lisp:nil))
(common-lisp:deftype s3tag-key () 'common-lisp:string)
(common-lisp:deftype s3tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype s3tags () '(trivial-types:proper-list s3tag))
 (common-lisp:defun |make-s3tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3version-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype secondary-gids () '(trivial-types:proper-list posix-id))
 (common-lisp:defun |make-secondary-gids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list posix-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-ids ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun |make-security-group-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype security-policy-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-policy-names ()
   '(trivial-types:proper-list security-policy-name))
 (common-lisp:defun |make-security-policy-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-policy-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype security-policy-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-policy-options ()
   '(trivial-types:proper-list security-policy-option))
 (common-lisp:defun |make-security-policy-options|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-policy-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass send-workflow-step-state-request common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or custom-step-status common-lisp:null)
                         :accessor %send-workflow-step-state-request-status
                         :initform (common-lisp:error ":status is required"))
                        (token :initarg :token :type
                         (common-lisp:or callback-token common-lisp:null)
                         :accessor %send-workflow-step-state-request-token
                         :initform (common-lisp:error ":token is required"))
                        (execution-id :initarg :execution-id :type
                         (common-lisp:or execution-id common-lisp:null)
                         :accessor
                         %send-workflow-step-state-request-execution-id
                         :initform
                         (common-lisp:error ":execution-id is required"))
                        (workflow-id :initarg :workflow-id :type
                         (common-lisp:or workflow-id common-lisp:null)
                         :accessor
                         %send-workflow-step-state-request-workflow-id
                         :initform
                         (common-lisp:error ":workflow-id is required"))))
 (common-lisp:export
  (common-lisp:list 'send-workflow-step-state-request
                    'make-send-workflow-step-state-request))
 (common-lisp:defun make-send-workflow-step-state-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status token execution-id workflow-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'send-workflow-step-state-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-workflow-step-state-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-workflow-step-state-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-id))
      (common-lisp:list
       (common-lisp:cons "ExecutionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "Token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-workflow-step-state-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-workflow-step-state-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'send-workflow-step-state-response
                    'make-send-workflow-step-state-response))
 (common-lisp:defun make-send-workflow-step-state-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'send-workflow-step-state-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-workflow-step-state-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-workflow-step-state-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-workflow-step-state-response))
   common-lisp:nil))
(common-lisp:deftype server-id () 'common-lisp:string)
(common-lisp:deftype service-error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass service-metadata common-lisp:nil
                       ((user-details :initarg :user-details :type
                         (common-lisp:or user-details common-lisp:null)
                         :accessor %service-metadata-user-details :initform
                         (common-lisp:error ":user-details is required"))))
 (common-lisp:export
  (common-lisp:list 'service-metadata 'make-service-metadata))
 (common-lisp:defun make-service-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-details)
   (common-lisp:apply #'common-lisp:make-instance 'service-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-details))
      (common-lisp:list
       (common-lisp:cons "UserDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (transfer-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:deftype session-id () 'common-lisp:string)
(common-lisp:deftype set-stat-option () 'common-lisp:string)
(common-lisp:deftype signing-alg () 'common-lisp:string)
(common-lisp:deftype source-file-location () 'common-lisp:string)
(common-lisp:deftype source-ip () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ssh-public-key common-lisp:nil
                       ((ssh-public-key-id :initarg :ssh-public-key-id :type
                         (common-lisp:or ssh-public-key-id common-lisp:null)
                         :accessor %ssh-public-key-ssh-public-key-id :initform
                         (common-lisp:error ":ssh-public-key-id is required"))
                        (ssh-public-key-body :initarg :ssh-public-key-body
                         :type
                         (common-lisp:or ssh-public-key-body common-lisp:null)
                         :accessor %ssh-public-key-ssh-public-key-body
                         :initform
                         (common-lisp:error
                          ":ssh-public-key-body is required"))
                        (date-imported :initarg :date-imported :type
                         (common-lisp:or date-imported common-lisp:null)
                         :accessor %ssh-public-key-date-imported :initform
                         (common-lisp:error ":date-imported is required"))))
 (common-lisp:export (common-lisp:list 'ssh-public-key 'make-ssh-public-key))
 (common-lisp:defun make-ssh-public-key
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ssh-public-key-id ssh-public-key-body
                     date-imported)
   (common-lisp:apply #'common-lisp:make-instance 'ssh-public-key
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ssh-public-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ssh-public-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-imported))
      (common-lisp:list
       (common-lisp:cons "DateImported"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-public-key-body))
      (common-lisp:list
       (common-lisp:cons "SshPublicKeyBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-public-key-id))
      (common-lisp:list
       (common-lisp:cons "SshPublicKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ssh-public-key))
   common-lisp:nil))
(common-lisp:deftype ssh-public-key-body () 'common-lisp:string)
(common-lisp:deftype ssh-public-key-count () 'common-lisp:integer)
(common-lisp:deftype ssh-public-key-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ssh-public-keys ()
   '(trivial-types:proper-list ssh-public-key))
 (common-lisp:defun |make-ssh-public-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ssh-public-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass start-file-transfer-request common-lisp:nil
                       ((send-file-paths :initarg :send-file-paths :type
                         (common-lisp:or file-paths common-lisp:null) :accessor
                         %start-file-transfer-request-send-file-paths :initform
                         (common-lisp:error ":send-file-paths is required"))
                        (connector-id :initarg :connector-id :type
                         (common-lisp:or connector-id common-lisp:null)
                         :accessor %start-file-transfer-request-connector-id
                         :initform
                         (common-lisp:error ":connector-id is required"))))
 (common-lisp:export
  (common-lisp:list 'start-file-transfer-request
                    'make-start-file-transfer-request))
 (common-lisp:defun make-start-file-transfer-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key send-file-paths connector-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-file-transfer-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-file-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-file-transfer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-id))
      (common-lisp:list
       (common-lisp:cons "ConnectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'send-file-paths))
      (common-lisp:list
       (common-lisp:cons "SendFilePaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-file-transfer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-file-transfer-response common-lisp:nil
                       ((transfer-id :initarg :transfer-id :type
                         (common-lisp:or transfer-id common-lisp:null)
                         :accessor %start-file-transfer-response-transfer-id
                         :initform
                         (common-lisp:error ":transfer-id is required"))))
 (common-lisp:export
  (common-lisp:list 'start-file-transfer-response
                    'make-start-file-transfer-response))
 (common-lisp:defun make-start-file-transfer-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transfer-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-file-transfer-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-file-transfer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-file-transfer-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-id))
      (common-lisp:list
       (common-lisp:cons "TransferId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-file-transfer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-server-request common-lisp:nil
                       ((server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %start-server-request-server-id :initform
                         (common-lisp:error ":server-id is required"))))
 (common-lisp:export
  (common-lisp:list 'start-server-request 'make-start-server-request))
 (common-lisp:defun make-start-server-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-server-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-server-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-server-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-server-request))
   common-lisp:nil))
(common-lisp:deftype state () 'common-lisp:string)
(common-lisp:deftype status-code () 'common-lisp:integer)
(common-lisp:deftype step-result-outputs-json () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stop-server-request common-lisp:nil
                       ((server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %stop-server-request-server-id :initform
                         (common-lisp:error ":server-id is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-server-request 'make-stop-server-request))
 (common-lisp:defun make-stop-server-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-id)
   (common-lisp:apply #'common-lisp:make-instance 'stop-server-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-server-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-server-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-server-request))
   common-lisp:nil))
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnet-ids () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun |make-subnet-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %tag-resource-request-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-step-details common-lisp:nil
                       ((source-file-location :initarg :source-file-location
                         :type
                         (common-lisp:or source-file-location common-lisp:null)
                         :accessor %tag-step-details-source-file-location
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or s3tags common-lisp:null) :accessor
                         %tag-step-details-tags :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or workflow-step-name common-lisp:null)
                         :accessor %tag-step-details-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'tag-step-details 'make-tag-step-details))
 (common-lisp:defun make-tag-step-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key source-file-location tags name)
   (common-lisp:apply #'common-lisp:make-instance 'tag-step-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-step-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-step-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-file-location))
      (common-lisp:list
       (common-lisp:cons "SourceFileLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-step-details))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass test-identity-provider-request common-lisp:nil
                       ((user-password :initarg :user-password :type
                         (common-lisp:or user-password common-lisp:null)
                         :accessor
                         %test-identity-provider-request-user-password
                         :initform common-lisp:nil)
                        (user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %test-identity-provider-request-user-name :initform
                         (common-lisp:error ":user-name is required"))
                        (source-ip :initarg :source-ip :type
                         (common-lisp:or source-ip common-lisp:null) :accessor
                         %test-identity-provider-request-source-ip :initform
                         common-lisp:nil)
                        (server-protocol :initarg :server-protocol :type
                         (common-lisp:or protocol common-lisp:null) :accessor
                         %test-identity-provider-request-server-protocol
                         :initform common-lisp:nil)
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %test-identity-provider-request-server-id :initform
                         (common-lisp:error ":server-id is required"))))
 (common-lisp:export
  (common-lisp:list 'test-identity-provider-request
                    'make-test-identity-provider-request))
 (common-lisp:defun make-test-identity-provider-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-password user-name source-ip
                     server-protocol server-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'test-identity-provider-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-identity-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-identity-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-protocol))
      (common-lisp:list
       (common-lisp:cons "ServerProtocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ip))
      (common-lisp:list
       (common-lisp:cons "SourceIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-password))
      (common-lisp:list
       (common-lisp:cons "UserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-identity-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-identity-provider-response common-lisp:nil
                       ((url :initarg :url :type
                         (common-lisp:or url common-lisp:null) :accessor
                         %test-identity-provider-response-url :initform
                         (common-lisp:error ":url is required"))
                        (message :initarg :message :type
                         (common-lisp:or message common-lisp:null) :accessor
                         %test-identity-provider-response-message :initform
                         common-lisp:nil)
                        (status-code :initarg :status-code :type
                         (common-lisp:or status-code common-lisp:null)
                         :accessor %test-identity-provider-response-status-code
                         :initform
                         (common-lisp:error ":status-code is required"))
                        (response :initarg :response :type
                         (common-lisp:or response common-lisp:null) :accessor
                         %test-identity-provider-response-response :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'test-identity-provider-response
                    'make-test-identity-provider-response))
 (common-lisp:defun make-test-identity-provider-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key url message status-code response)
   (common-lisp:apply #'common-lisp:make-instance
                      'test-identity-provider-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-identity-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-identity-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'response))
      (common-lisp:list
       (common-lisp:cons "Response"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "StatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-identity-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (transfer-error)
     ((retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception
                    'throttling-exception-retry-after-seconds)))
(common-lisp:deftype tls-session-resumption-mode () 'common-lisp:string)
(common-lisp:deftype transfer-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %untag-resource-request-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-access-request common-lisp:nil
                       ((external-id :initarg :external-id :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor %update-access-request-external-id :initform
                         (common-lisp:error ":external-id is required"))
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %update-access-request-server-id :initform
                         (common-lisp:error ":server-id is required"))
                        (role :initarg :role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %update-access-request-role :initform common-lisp:nil)
                        (posix-profile :initarg :posix-profile :type
                         (common-lisp:or posix-profile common-lisp:null)
                         :accessor %update-access-request-posix-profile
                         :initform common-lisp:nil)
                        (policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %update-access-request-policy :initform
                         common-lisp:nil)
                        (home-directory-mappings :initarg
                         :home-directory-mappings :type
                         (common-lisp:or home-directory-mappings
                                         common-lisp:null)
                         :accessor
                         %update-access-request-home-directory-mappings
                         :initform common-lisp:nil)
                        (home-directory-type :initarg :home-directory-type
                         :type
                         (common-lisp:or home-directory-type common-lisp:null)
                         :accessor %update-access-request-home-directory-type
                         :initform common-lisp:nil)
                        (home-directory :initarg :home-directory :type
                         (common-lisp:or home-directory common-lisp:null)
                         :accessor %update-access-request-home-directory
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-access-request 'make-update-access-request))
 (common-lisp:defun make-update-access-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key external-id server-id role posix-profile
                     policy home-directory-mappings home-directory-type
                     home-directory)
   (common-lisp:apply #'common-lisp:make-instance 'update-access-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-access-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory))
      (common-lisp:list
       (common-lisp:cons "HomeDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory-type))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'home-directory-mappings))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'posix-profile))
      (common-lisp:list
       (common-lisp:cons "PosixProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-access-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-access-response common-lisp:nil
                       ((external-id :initarg :external-id :type
                         (common-lisp:or external-id common-lisp:null)
                         :accessor %update-access-response-external-id
                         :initform
                         (common-lisp:error ":external-id is required"))
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %update-access-response-server-id :initform
                         (common-lisp:error ":server-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-access-response 'make-update-access-response))
 (common-lisp:defun make-update-access-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key external-id server-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-access-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-access-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-access-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'external-id))
      (common-lisp:list
       (common-lisp:cons "ExternalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-access-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-agreement-request common-lisp:nil
                       ((access-role :initarg :access-role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %update-agreement-request-access-role :initform
                         common-lisp:nil)
                        (base-directory :initarg :base-directory :type
                         (common-lisp:or home-directory common-lisp:null)
                         :accessor %update-agreement-request-base-directory
                         :initform common-lisp:nil)
                        (partner-profile-id :initarg :partner-profile-id :type
                         (common-lisp:or profile-id common-lisp:null) :accessor
                         %update-agreement-request-partner-profile-id :initform
                         common-lisp:nil)
                        (local-profile-id :initarg :local-profile-id :type
                         (common-lisp:or profile-id common-lisp:null) :accessor
                         %update-agreement-request-local-profile-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or agreement-status-type
                                         common-lisp:null)
                         :accessor %update-agreement-request-status :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-agreement-request-description
                         :initform common-lisp:nil)
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %update-agreement-request-server-id :initform
                         (common-lisp:error ":server-id is required"))
                        (agreement-id :initarg :agreement-id :type
                         (common-lisp:or agreement-id common-lisp:null)
                         :accessor %update-agreement-request-agreement-id
                         :initform
                         (common-lisp:error ":agreement-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-agreement-request 'make-update-agreement-request))
 (common-lisp:defun make-update-agreement-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key access-role base-directory
                     partner-profile-id local-profile-id status description
                     server-id agreement-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-agreement-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-agreement-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-agreement-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement-id))
      (common-lisp:list
       (common-lisp:cons "AgreementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-profile-id))
      (common-lisp:list
       (common-lisp:cons "LocalProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partner-profile-id))
      (common-lisp:list
       (common-lisp:cons "PartnerProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-directory))
      (common-lisp:list
       (common-lisp:cons "BaseDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-role))
      (common-lisp:list
       (common-lisp:cons "AccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-agreement-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-agreement-response common-lisp:nil
                       ((agreement-id :initarg :agreement-id :type
                         (common-lisp:or agreement-id common-lisp:null)
                         :accessor %update-agreement-response-agreement-id
                         :initform
                         (common-lisp:error ":agreement-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-agreement-response
                    'make-update-agreement-response))
 (common-lisp:defun make-update-agreement-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key agreement-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-agreement-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-agreement-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-agreement-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agreement-id))
      (common-lisp:list
       (common-lisp:cons "AgreementId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-agreement-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-certificate-request common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-certificate-request-description
                         :initform common-lisp:nil)
                        (inactive-date :initarg :inactive-date :type
                         (common-lisp:or cert-date common-lisp:null) :accessor
                         %update-certificate-request-inactive-date :initform
                         common-lisp:nil)
                        (active-date :initarg :active-date :type
                         (common-lisp:or cert-date common-lisp:null) :accessor
                         %update-certificate-request-active-date :initform
                         common-lisp:nil)
                        (certificate-id :initarg :certificate-id :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor %update-certificate-request-certificate-id
                         :initform
                         (common-lisp:error ":certificate-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-certificate-request
                    'make-update-certificate-request))
 (common-lisp:defun make-update-certificate-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description inactive-date active-date
                     certificate-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-date))
      (common-lisp:list
       (common-lisp:cons "ActiveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inactive-date))
      (common-lisp:list
       (common-lisp:cons "InactiveDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-certificate-response common-lisp:nil
                       ((certificate-id :initarg :certificate-id :type
                         (common-lisp:or certificate-id common-lisp:null)
                         :accessor %update-certificate-response-certificate-id
                         :initform
                         (common-lisp:error ":certificate-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-certificate-response
                    'make-update-certificate-response))
 (common-lisp:defun make-update-certificate-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificate-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-certificate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-connector-request common-lisp:nil
                       ((logging-role :initarg :logging-role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %update-connector-request-logging-role :initform
                         common-lisp:nil)
                        (access-role :initarg :access-role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %update-connector-request-access-role :initform
                         common-lisp:nil)
                        (as2config :initarg :as2config :type
                         (common-lisp:or as2connector-config common-lisp:null)
                         :accessor %update-connector-request-as2config
                         :initform common-lisp:nil)
                        (url :initarg :url :type
                         (common-lisp:or url common-lisp:null) :accessor
                         %update-connector-request-url :initform
                         common-lisp:nil)
                        (connector-id :initarg :connector-id :type
                         (common-lisp:or connector-id common-lisp:null)
                         :accessor %update-connector-request-connector-id
                         :initform
                         (common-lisp:error ":connector-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-connector-request 'make-update-connector-request))
 (common-lisp:defun make-update-connector-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key logging-role access-role as2config url
                     connector-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-connector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-id))
      (common-lisp:list
       (common-lisp:cons "ConnectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'as2config))
      (common-lisp:list
       (common-lisp:cons "As2Config"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-role))
      (common-lisp:list
       (common-lisp:cons "AccessRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-role))
      (common-lisp:list
       (common-lisp:cons "LoggingRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-connector-response common-lisp:nil
                       ((connector-id :initarg :connector-id :type
                         (common-lisp:or connector-id common-lisp:null)
                         :accessor %update-connector-response-connector-id
                         :initform
                         (common-lisp:error ":connector-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-connector-response
                    'make-update-connector-response))
 (common-lisp:defun make-update-connector-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connector-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-connector-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connector-id))
      (common-lisp:list
       (common-lisp:cons "ConnectorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-connector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-host-key-request common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or host-key-description common-lisp:null)
                         :accessor %update-host-key-request-description
                         :initform
                         (common-lisp:error ":description is required"))
                        (host-key-id :initarg :host-key-id :type
                         (common-lisp:or host-key-id common-lisp:null)
                         :accessor %update-host-key-request-host-key-id
                         :initform
                         (common-lisp:error ":host-key-id is required"))
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %update-host-key-request-server-id :initform
                         (common-lisp:error ":server-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-host-key-request 'make-update-host-key-request))
 (common-lisp:defun make-update-host-key-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description host-key-id server-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-host-key-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-host-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-host-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-key-id))
      (common-lisp:list
       (common-lisp:cons "HostKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-host-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-host-key-response common-lisp:nil
                       ((host-key-id :initarg :host-key-id :type
                         (common-lisp:or host-key-id common-lisp:null)
                         :accessor %update-host-key-response-host-key-id
                         :initform
                         (common-lisp:error ":host-key-id is required"))
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %update-host-key-response-server-id :initform
                         (common-lisp:error ":server-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-host-key-response 'make-update-host-key-response))
 (common-lisp:defun make-update-host-key-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key host-key-id server-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-host-key-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-host-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-host-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-key-id))
      (common-lisp:list
       (common-lisp:cons "HostKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-host-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-profile-request common-lisp:nil
                       ((certificate-ids :initarg :certificate-ids :type
                         (common-lisp:or certificate-ids common-lisp:null)
                         :accessor %update-profile-request-certificate-ids
                         :initform common-lisp:nil)
                        (profile-id :initarg :profile-id :type
                         (common-lisp:or profile-id common-lisp:null) :accessor
                         %update-profile-request-profile-id :initform
                         (common-lisp:error ":profile-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-profile-request 'make-update-profile-request))
 (common-lisp:defun make-update-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key certificate-ids profile-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-ids))
      (common-lisp:list
       (common-lisp:cons "CertificateIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-profile-response common-lisp:nil
                       ((profile-id :initarg :profile-id :type
                         (common-lisp:or profile-id common-lisp:null) :accessor
                         %update-profile-response-profile-id :initform
                         (common-lisp:error ":profile-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-profile-response 'make-update-profile-response))
 (common-lisp:defun make-update-profile-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profile-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-id))
      (common-lisp:list
       (common-lisp:cons "ProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-server-request common-lisp:nil
                       ((workflow-details :initarg :workflow-details :type
                         (common-lisp:or workflow-details common-lisp:null)
                         :accessor %update-server-request-workflow-details
                         :initform common-lisp:nil)
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %update-server-request-server-id :initform
                         (common-lisp:error ":server-id is required"))
                        (security-policy-name :initarg :security-policy-name
                         :type
                         (common-lisp:or security-policy-name common-lisp:null)
                         :accessor %update-server-request-security-policy-name
                         :initform common-lisp:nil)
                        (protocols :initarg :protocols :type
                         (common-lisp:or protocols common-lisp:null) :accessor
                         %update-server-request-protocols :initform
                         common-lisp:nil)
                        (pre-authentication-login-banner :initarg
                         :pre-authentication-login-banner :type
                         (common-lisp:or pre-authentication-login-banner
                                         common-lisp:null)
                         :accessor
                         %update-server-request-pre-authentication-login-banner
                         :initform common-lisp:nil)
                        (post-authentication-login-banner :initarg
                         :post-authentication-login-banner :type
                         (common-lisp:or post-authentication-login-banner
                                         common-lisp:null)
                         :accessor
                         %update-server-request-post-authentication-login-banner
                         :initform common-lisp:nil)
                        (logging-role :initarg :logging-role :type
                         (common-lisp:or nullable-role common-lisp:null)
                         :accessor %update-server-request-logging-role
                         :initform common-lisp:nil)
                        (identity-provider-details :initarg
                         :identity-provider-details :type
                         (common-lisp:or identity-provider-details
                                         common-lisp:null)
                         :accessor
                         %update-server-request-identity-provider-details
                         :initform common-lisp:nil)
                        (host-key :initarg :host-key :type
                         (common-lisp:or host-key common-lisp:null) :accessor
                         %update-server-request-host-key :initform
                         common-lisp:nil)
                        (endpoint-type :initarg :endpoint-type :type
                         (common-lisp:or endpoint-type common-lisp:null)
                         :accessor %update-server-request-endpoint-type
                         :initform common-lisp:nil)
                        (endpoint-details :initarg :endpoint-details :type
                         (common-lisp:or endpoint-details common-lisp:null)
                         :accessor %update-server-request-endpoint-details
                         :initform common-lisp:nil)
                        (protocol-details :initarg :protocol-details :type
                         (common-lisp:or protocol-details common-lisp:null)
                         :accessor %update-server-request-protocol-details
                         :initform common-lisp:nil)
                        (certificate :initarg :certificate :type
                         (common-lisp:or certificate common-lisp:null)
                         :accessor %update-server-request-certificate :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-server-request 'make-update-server-request))
 (common-lisp:defun make-update-server-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key workflow-details server-id
                     security-policy-name protocols
                     pre-authentication-login-banner
                     post-authentication-login-banner logging-role
                     identity-provider-details host-key endpoint-type
                     endpoint-details protocol-details certificate)
   (common-lisp:apply #'common-lisp:make-instance 'update-server-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-server-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-server-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol-details))
      (common-lisp:list
       (common-lisp:cons "ProtocolDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-details))
      (common-lisp:list
       (common-lisp:cons "EndpointDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-type))
      (common-lisp:list
       (common-lisp:cons "EndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-key))
      (common-lisp:list
       (common-lisp:cons "HostKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-provider-details))
      (common-lisp:list
       (common-lisp:cons "IdentityProviderDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-role))
      (common-lisp:list
       (common-lisp:cons "LoggingRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-authentication-login-banner))
      (common-lisp:list
       (common-lisp:cons "PostAuthenticationLoginBanner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pre-authentication-login-banner))
      (common-lisp:list
       (common-lisp:cons "PreAuthenticationLoginBanner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols))
      (common-lisp:list
       (common-lisp:cons "Protocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-policy-name))
      (common-lisp:list
       (common-lisp:cons "SecurityPolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-details))
      (common-lisp:list
       (common-lisp:cons "WorkflowDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-server-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-server-response common-lisp:nil
                       ((server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %update-server-response-server-id :initform
                         (common-lisp:error ":server-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-server-response 'make-update-server-response))
 (common-lisp:defun make-update-server-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-server-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-server-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-server-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-server-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-request common-lisp:nil
                       ((user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %update-user-request-user-name :initform
                         (common-lisp:error ":user-name is required"))
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %update-user-request-server-id :initform
                         (common-lisp:error ":server-id is required"))
                        (role :initarg :role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %update-user-request-role :initform common-lisp:nil)
                        (posix-profile :initarg :posix-profile :type
                         (common-lisp:or posix-profile common-lisp:null)
                         :accessor %update-user-request-posix-profile :initform
                         common-lisp:nil)
                        (policy :initarg :policy :type
                         (common-lisp:or policy common-lisp:null) :accessor
                         %update-user-request-policy :initform common-lisp:nil)
                        (home-directory-mappings :initarg
                         :home-directory-mappings :type
                         (common-lisp:or home-directory-mappings
                                         common-lisp:null)
                         :accessor %update-user-request-home-directory-mappings
                         :initform common-lisp:nil)
                        (home-directory-type :initarg :home-directory-type
                         :type
                         (common-lisp:or home-directory-type common-lisp:null)
                         :accessor %update-user-request-home-directory-type
                         :initform common-lisp:nil)
                        (home-directory :initarg :home-directory :type
                         (common-lisp:or home-directory common-lisp:null)
                         :accessor %update-user-request-home-directory
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-user-request 'make-update-user-request))
 (common-lisp:defun make-update-user-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-name server-id role posix-profile
                     policy home-directory-mappings home-directory-type
                     home-directory)
   (common-lisp:apply #'common-lisp:make-instance 'update-user-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory))
      (common-lisp:list
       (common-lisp:cons "HomeDirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-directory-type))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'home-directory-mappings))
      (common-lisp:list
       (common-lisp:cons "HomeDirectoryMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'posix-profile))
      (common-lisp:list
       (common-lisp:cons "PosixProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-user-response common-lisp:nil
                       ((user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %update-user-response-user-name :initform
                         (common-lisp:error ":user-name is required"))
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %update-user-response-server-id :initform
                         (common-lisp:error ":server-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-user-response 'make-update-user-response))
 (common-lisp:defun make-update-user-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-name server-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-user-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-response))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:deftype user-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass user-details common-lisp:nil
                       ((session-id :initarg :session-id :type
                         (common-lisp:or session-id common-lisp:null) :accessor
                         %user-details-session-id :initform common-lisp:nil)
                        (server-id :initarg :server-id :type
                         (common-lisp:or server-id common-lisp:null) :accessor
                         %user-details-server-id :initform
                         (common-lisp:error ":server-id is required"))
                        (user-name :initarg :user-name :type
                         (common-lisp:or user-name common-lisp:null) :accessor
                         %user-details-user-name :initform
                         (common-lisp:error ":user-name is required"))))
 (common-lisp:export (common-lisp:list 'user-details 'make-user-details))
 (common-lisp:defun make-user-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-id server-id user-name)
   (common-lisp:apply #'common-lisp:make-instance 'user-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-id))
      (common-lisp:list
       (common-lisp:cons "ServerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-details))
   common-lisp:nil))
(common-lisp:deftype user-name () 'common-lisp:string)
(common-lisp:deftype user-password () 'common-lisp:string)
(common-lisp:deftype vpc-endpoint-id () 'common-lisp:string)
(common-lisp:deftype vpc-id () 'common-lisp:string)
(common-lisp:deftype workflow-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass workflow-detail common-lisp:nil
                       ((execution-role :initarg :execution-role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %workflow-detail-execution-role :initform
                         (common-lisp:error ":execution-role is required"))
                        (workflow-id :initarg :workflow-id :type
                         (common-lisp:or workflow-id common-lisp:null)
                         :accessor %workflow-detail-workflow-id :initform
                         (common-lisp:error ":workflow-id is required"))))
 (common-lisp:export (common-lisp:list 'workflow-detail 'make-workflow-detail))
 (common-lisp:defun make-workflow-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key execution-role workflow-id)
   (common-lisp:apply #'common-lisp:make-instance 'workflow-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workflow-id))
      (common-lisp:list
       (common-lisp:cons "WorkflowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role))
      (common-lisp:list
       (common-lisp:cons "ExecutionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass workflow-details common-lisp:nil
                       ((on-partial-upload :initarg :on-partial-upload :type
                         (common-lisp:or on-partial-upload-workflow-details
                                         common-lisp:null)
                         :accessor %workflow-details-on-partial-upload
                         :initform common-lisp:nil)
                        (on-upload :initarg :on-upload :type
                         (common-lisp:or on-upload-workflow-details
                                         common-lisp:null)
                         :accessor %workflow-details-on-upload :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'workflow-details 'make-workflow-details))
 (common-lisp:defun make-workflow-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key on-partial-upload on-upload)
   (common-lisp:apply #'common-lisp:make-instance 'workflow-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-upload))
      (common-lisp:list
       (common-lisp:cons "OnUpload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-partial-upload))
      (common-lisp:list
       (common-lisp:cons "OnPartialUpload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-details))
   common-lisp:nil))
(common-lisp:deftype workflow-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass workflow-step common-lisp:nil
                       ((decrypt-step-details :initarg :decrypt-step-details
                         :type
                         (common-lisp:or decrypt-step-details common-lisp:null)
                         :accessor %workflow-step-decrypt-step-details
                         :initform common-lisp:nil)
                        (tag-step-details :initarg :tag-step-details :type
                         (common-lisp:or tag-step-details common-lisp:null)
                         :accessor %workflow-step-tag-step-details :initform
                         common-lisp:nil)
                        (delete-step-details :initarg :delete-step-details
                         :type
                         (common-lisp:or delete-step-details common-lisp:null)
                         :accessor %workflow-step-delete-step-details :initform
                         common-lisp:nil)
                        (custom-step-details :initarg :custom-step-details
                         :type
                         (common-lisp:or custom-step-details common-lisp:null)
                         :accessor %workflow-step-custom-step-details :initform
                         common-lisp:nil)
                        (copy-step-details :initarg :copy-step-details :type
                         (common-lisp:or copy-step-details common-lisp:null)
                         :accessor %workflow-step-copy-step-details :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or workflow-step-type common-lisp:null)
                         :accessor %workflow-step-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'workflow-step 'make-workflow-step))
 (common-lisp:defun make-workflow-step
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key decrypt-step-details tag-step-details
                     delete-step-details custom-step-details copy-step-details
                     type)
   (common-lisp:apply #'common-lisp:make-instance 'workflow-step
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workflow-step))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workflow-step))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copy-step-details))
      (common-lisp:list
       (common-lisp:cons "CopyStepDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-step-details))
      (common-lisp:list
       (common-lisp:cons "CustomStepDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-step-details))
      (common-lisp:list
       (common-lisp:cons "DeleteStepDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-step-details))
      (common-lisp:list
       (common-lisp:cons "TagStepDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decrypt-step-details))
      (common-lisp:list
       (common-lisp:cons "DecryptStepDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workflow-step))
   common-lisp:nil))
(common-lisp:deftype workflow-step-name () 'common-lisp:string)
(common-lisp:deftype workflow-step-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workflow-steps ()
   '(trivial-types:proper-list workflow-step))
 (common-lisp:defun |make-workflow-steps|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workflow-step))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun create-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key home-directory home-directory-type
                     home-directory-mappings policy posix-profile role
                     server-id external-id)
   (common-lisp:declare
    (common-lisp:ignorable home-directory home-directory-type
     home-directory-mappings policy posix-profile role server-id external-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-access-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateAccess"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-access))
(common-lisp:progn
 (common-lisp:defun create-agreement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description server-id local-profile-id
                     partner-profile-id base-directory access-role status tags)
   (common-lisp:declare
    (common-lisp:ignorable description server-id local-profile-id
     partner-profile-id base-directory access-role status tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-agreement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateAgreement"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-agreement))
(common-lisp:progn
 (common-lisp:defun create-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key url as2config access-role logging-role
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable url as2config access-role logging-role tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateConnector"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-connector))
(common-lisp:progn
 (common-lisp:defun create-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key as2id profile-type certificate-ids tags)
   (common-lisp:declare
    (common-lisp:ignorable as2id profile-type certificate-ids tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateProfile"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-profile))
(common-lisp:progn
 (common-lisp:defun create-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate domain endpoint-details
                     endpoint-type host-key identity-provider-details
                     identity-provider-type logging-role
                     post-authentication-login-banner
                     pre-authentication-login-banner protocols protocol-details
                     security-policy-name tags workflow-details)
   (common-lisp:declare
    (common-lisp:ignorable certificate domain endpoint-details endpoint-type
     host-key identity-provider-details identity-provider-type logging-role
     post-authentication-login-banner pre-authentication-login-banner protocols
     protocol-details security-policy-name tags workflow-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-server-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateServer"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-server))
(common-lisp:progn
 (common-lisp:defun create-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key home-directory home-directory-type
                     home-directory-mappings policy posix-profile role
                     server-id ssh-public-key-body tags user-name)
   (common-lisp:declare
    (common-lisp:ignorable home-directory home-directory-type
     home-directory-mappings policy posix-profile role server-id
     ssh-public-key-body tags user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateUser"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-user))
(common-lisp:progn
 (common-lisp:defun create-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description steps on-exception-steps
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable description steps on-exception-steps tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-workflow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateWorkflow"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-workflow))
(common-lisp:progn
 (common-lisp:defun delete-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id external-id)
   (common-lisp:declare (common-lisp:ignorable server-id external-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-access-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteAccess"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-access))
(common-lisp:progn
 (common-lisp:defun delete-agreement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agreement-id server-id)
   (common-lisp:declare (common-lisp:ignorable agreement-id server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-agreement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteAgreement"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-agreement))
(common-lisp:progn
 (common-lisp:defun delete-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id)
   (common-lisp:declare (common-lisp:ignorable certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteCertificate"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-certificate))
(common-lisp:progn
 (common-lisp:defun delete-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-id)
   (common-lisp:declare (common-lisp:ignorable connector-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteConnector"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-connector))
(common-lisp:progn
 (common-lisp:defun delete-host-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id host-key-id)
   (common-lisp:declare (common-lisp:ignorable server-id host-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-host-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteHostKey"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-host-key))
(common-lisp:progn
 (common-lisp:defun delete-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-id)
   (common-lisp:declare (common-lisp:ignorable profile-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteProfile"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-profile))
(common-lisp:progn
 (common-lisp:defun delete-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id)
   (common-lisp:declare (common-lisp:ignorable server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-server-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteServer"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-server))
(common-lisp:progn
 (common-lisp:defun delete-ssh-public-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id ssh-public-key-id user-name)
   (common-lisp:declare
    (common-lisp:ignorable server-id ssh-public-key-id user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-ssh-public-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteSshPublicKey"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-ssh-public-key))
(common-lisp:progn
 (common-lisp:defun delete-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id user-name)
   (common-lisp:declare (common-lisp:ignorable server-id user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteUser"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-user))
(common-lisp:progn
 (common-lisp:defun delete-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workflow-id)
   (common-lisp:declare (common-lisp:ignorable workflow-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-workflow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteWorkflow"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-workflow))
(common-lisp:progn
 (common-lisp:defun describe-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id external-id)
   (common-lisp:declare (common-lisp:ignorable server-id external-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-access-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeAccess"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-access))
(common-lisp:progn
 (common-lisp:defun describe-agreement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agreement-id server-id)
   (common-lisp:declare (common-lisp:ignorable agreement-id server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-agreement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeAgreement"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-agreement))
(common-lisp:progn
 (common-lisp:defun describe-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id)
   (common-lisp:declare (common-lisp:ignorable certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeCertificate"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-certificate))
(common-lisp:progn
 (common-lisp:defun describe-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-id)
   (common-lisp:declare (common-lisp:ignorable connector-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeConnector"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-connector))
(common-lisp:progn
 (common-lisp:defun describe-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key execution-id workflow-id)
   (common-lisp:declare (common-lisp:ignorable execution-id workflow-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-execution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeExecution"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-execution))
(common-lisp:progn
 (common-lisp:defun describe-host-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id host-key-id)
   (common-lisp:declare (common-lisp:ignorable server-id host-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-host-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeHostKey"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-host-key))
(common-lisp:progn
 (common-lisp:defun describe-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-id)
   (common-lisp:declare (common-lisp:ignorable profile-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeProfile"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-profile))
(common-lisp:progn
 (common-lisp:defun describe-security-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key security-policy-name)
   (common-lisp:declare (common-lisp:ignorable security-policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-security-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeSecurityPolicy"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-security-policy))
(common-lisp:progn
 (common-lisp:defun describe-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id)
   (common-lisp:declare (common-lisp:ignorable server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-server-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeServer"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-server))
(common-lisp:progn
 (common-lisp:defun describe-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id user-name)
   (common-lisp:declare (common-lisp:ignorable server-id user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeUser"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-user))
(common-lisp:progn
 (common-lisp:defun describe-workflow
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workflow-id)
   (common-lisp:declare (common-lisp:ignorable workflow-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-workflow-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeWorkflow"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-workflow))
(common-lisp:progn
 (common-lisp:defun import-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key usage certificate certificate-chain
                     private-key active-date inactive-date description tags)
   (common-lisp:declare
    (common-lisp:ignorable usage certificate certificate-chain private-key
     active-date inactive-date description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ImportCertificate"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-certificate))
(common-lisp:progn
 (common-lisp:defun import-host-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id host-key-body description tags)
   (common-lisp:declare
    (common-lisp:ignorable server-id host-key-body description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-host-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ImportHostKey"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-host-key))
(common-lisp:progn
 (common-lisp:defun import-ssh-public-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id ssh-public-key-body user-name)
   (common-lisp:declare
    (common-lisp:ignorable server-id ssh-public-key-body user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-ssh-public-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ImportSshPublicKey"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-ssh-public-key))
(common-lisp:progn
 (common-lisp:defun list-accesses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token server-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-accesses-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListAccesses"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-accesses))
(common-lisp:progn
 (common-lisp:defun list-agreements
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token server-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-agreements-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListAgreements"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-agreements))
(common-lisp:progn
 (common-lisp:defun list-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-certificates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListCertificates"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-certificates))
(common-lisp:progn
 (common-lisp:defun list-connectors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-connectors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListConnectors"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-connectors))
(common-lisp:progn
 (common-lisp:defun list-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token workflow-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token workflow-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-executions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListExecutions"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-executions))
(common-lisp:progn
 (common-lisp:defun list-host-keys
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token server-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-host-keys-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListHostKeys"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-host-keys))
(common-lisp:progn
 (common-lisp:defun list-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token profile-type)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token profile-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListProfiles"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-profiles))
(common-lisp:progn
 (common-lisp:defun list-security-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-security-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListSecurityPolicies"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-security-policies))
(common-lisp:progn
 (common-lisp:defun list-servers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-servers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListServers"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-servers))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn max-results next-token)
   (common-lisp:declare (common-lisp:ignorable arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTagsForResource"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token server-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-users-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListUsers"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-users))
(common-lisp:progn
 (common-lisp:defun list-workflows
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-workflows-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListWorkflows"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-workflows))
(common-lisp:progn
 (common-lisp:defun send-workflow-step-state
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workflow-id execution-id token status)
   (common-lisp:declare
    (common-lisp:ignorable workflow-id execution-id token status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-send-workflow-step-state-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "SendWorkflowStepState"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-workflow-step-state))
(common-lisp:progn
 (common-lisp:defun start-file-transfer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-id send-file-paths)
   (common-lisp:declare (common-lisp:ignorable connector-id send-file-paths))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-file-transfer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartFileTransfer"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-file-transfer))
(common-lisp:progn
 (common-lisp:defun start-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id)
   (common-lisp:declare (common-lisp:ignorable server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-server-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartServer"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-server))
(common-lisp:progn
 (common-lisp:defun stop-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id)
   (common-lisp:declare (common-lisp:ignorable server-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-server-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StopServer"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-server))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn tags)
   (common-lisp:declare (common-lisp:ignorable arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TagResource"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun test-identity-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id server-protocol source-ip
                     user-name user-password)
   (common-lisp:declare
    (common-lisp:ignorable server-id server-protocol source-ip user-name
     user-password))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-identity-provider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TestIdentityProvider"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'test-identity-provider))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UntagResource"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key home-directory home-directory-type
                     home-directory-mappings policy posix-profile role
                     server-id external-id)
   (common-lisp:declare
    (common-lisp:ignorable home-directory home-directory-type
     home-directory-mappings policy posix-profile role server-id external-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-access-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateAccess"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-access))
(common-lisp:progn
 (common-lisp:defun update-agreement
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agreement-id server-id description status
                     local-profile-id partner-profile-id base-directory
                     access-role)
   (common-lisp:declare
    (common-lisp:ignorable agreement-id server-id description status
     local-profile-id partner-profile-id base-directory access-role))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-agreement-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateAgreement"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-agreement))
(common-lisp:progn
 (common-lisp:defun update-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id active-date inactive-date
                     description)
   (common-lisp:declare
    (common-lisp:ignorable certificate-id active-date inactive-date
     description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateCertificate"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-certificate))
(common-lisp:progn
 (common-lisp:defun update-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connector-id url as2config access-role
                     logging-role)
   (common-lisp:declare
    (common-lisp:ignorable connector-id url as2config access-role
     logging-role))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateConnector"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-connector))
(common-lisp:progn
 (common-lisp:defun update-host-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-id host-key-id description)
   (common-lisp:declare
    (common-lisp:ignorable server-id host-key-id description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-host-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateHostKey"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-host-key))
(common-lisp:progn
 (common-lisp:defun update-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profile-id certificate-ids)
   (common-lisp:declare (common-lisp:ignorable profile-id certificate-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateProfile"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-profile))
(common-lisp:progn
 (common-lisp:defun update-server
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate protocol-details
                     endpoint-details endpoint-type host-key
                     identity-provider-details logging-role
                     post-authentication-login-banner
                     pre-authentication-login-banner protocols
                     security-policy-name server-id workflow-details)
   (common-lisp:declare
    (common-lisp:ignorable certificate protocol-details endpoint-details
     endpoint-type host-key identity-provider-details logging-role
     post-authentication-login-banner pre-authentication-login-banner protocols
     security-policy-name server-id workflow-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-server-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateServer"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-server))
(common-lisp:progn
 (common-lisp:defun update-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key home-directory home-directory-type
                     home-directory-mappings policy posix-profile role
                     server-id user-name)
   (common-lisp:declare
    (common-lisp:ignorable home-directory home-directory-type
     home-directory-mappings policy posix-profile role server-id user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'transfer-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateUser"
                                                        "2018-11-05"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-user))
