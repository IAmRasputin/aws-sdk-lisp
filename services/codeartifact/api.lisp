;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/codeartifact/api
  (:use)
  (:nicknames #:aws/codeartifact)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/codeartifact/api)
(common-lisp:progn
 (common-lisp:define-condition codeartifact-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'codeartifact-error))
(common-lisp:progn
 (common-lisp:defclass codeartifact-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "codeartifact" :api-version
                        "2018-09-22" :host-prefix "codeartifact" :signing-name
                        "codeartifact" :global-host common-lisp:nil))
 (common-lisp:export 'codeartifact-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (codeartifact-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:deftype allow-publish () 'common-lisp:string)
(common-lisp:deftype allow-upstream () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype asset ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:deftype asset-hashes () 'common-lisp:hash-table)
 (common-lisp:defun make-asset-hashes (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype asset-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (asset-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-summary-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or asset-name common-lisp:null))
   (size common-lisp:nil :type (common-lisp:or long-optional common-lisp:null))
   (hashes common-lisp:nil :type
    (common-lisp:or asset-hashes common-lisp:null)))
 (common-lisp:export (common-lisp:list 'asset-summary 'make-asset-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hashes))
      (common-lisp:list
       (common-lisp:cons "hashes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-summary-list ()
   '(trivial-types:proper-list asset-summary))
 (common-lisp:defun make-asset-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-external-connection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-external-connection-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (external-connection (common-lisp:error ":externalconnection is required")
    :type (common-lisp:or external-connection-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-external-connection-request
                    'make-associate-external-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-external-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-external-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-external-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-external-connection-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-external-connection-result-"))
   (repository common-lisp:nil :type
    (common-lisp:or repository-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-external-connection-result
                    'make-associate-external-connection-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-external-connection-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-external-connection-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-external-connection-result))
   common-lisp:nil))
(common-lisp:deftype authorization-token-duration-seconds ()
  'common-lisp:integer)
(common-lisp:deftype boolean-optional () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (codeartifact-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-package-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-package-versions-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (source-repository (common-lisp:error ":sourcerepository is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (destination-repository
    (common-lisp:error ":destinationrepository is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or package-format common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or package-namespace common-lisp:null))
   (package (common-lisp:error ":package is required") :type
    (common-lisp:or package-name common-lisp:null))
   (versions common-lisp:nil :type
    (common-lisp:or package-version-list common-lisp:null))
   (version-revisions common-lisp:nil :type
    (common-lisp:or package-version-revision-map common-lisp:null))
   (allow-overwrite common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null))
   (include-from-upstream common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-package-versions-request
                    'make-copy-package-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-package-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-package-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-revisions))
      (common-lisp:list
       (common-lisp:cons "versionRevisions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-overwrite))
      (common-lisp:list
       (common-lisp:cons "allowOverwrite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-from-upstream))
      (common-lisp:list
       (common-lisp:cons "includeFromUpstream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-package-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-package-versions-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-package-versions-result-"))
   (successful-versions common-lisp:nil :type
    (common-lisp:or successful-package-version-info-map common-lisp:null))
   (failed-versions common-lisp:nil :type
    (common-lisp:or package-version-error-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-package-versions-result
                    'make-copy-package-versions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-package-versions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-package-versions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful-versions))
      (common-lisp:list
       (common-lisp:cons "successfulVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-versions))
      (common-lisp:list
       (common-lisp:cons "failedVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-package-versions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-domain-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-domain-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (encryption-key common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-domain-request 'make-create-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-domain-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-domain-result-"))
   (domain common-lisp:nil :type
    (common-lisp:or domain-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-domain-result 'make-create-domain-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-domain-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-domain-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-domain-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-repository-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-repository-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (upstreams common-lisp:nil :type
    (common-lisp:or upstream-repository-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-repository-request
                    'make-create-repository-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upstreams))
      (common-lisp:list
       (common-lisp:cons "upstreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-repository-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-repository-result-"))
   (repository common-lisp:nil :type
    (common-lisp:or repository-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-repository-result 'make-create-repository-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-domain-permissions-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-domain-permissions-policy-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (policy-revision common-lisp:nil :type
    (common-lisp:or policy-revision common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-domain-permissions-policy-request
                    'make-delete-domain-permissions-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-permissions-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-permissions-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-permissions-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-domain-permissions-policy-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-domain-permissions-policy-result-"))
   (policy common-lisp:nil :type
    (common-lisp:or resource-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-domain-permissions-policy-result
                    'make-delete-domain-permissions-policy-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-permissions-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-permissions-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-permissions-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-domain-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-domain-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-domain-request 'make-delete-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-domain-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-domain-result-"))
   (domain common-lisp:nil :type
    (common-lisp:or domain-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-domain-result 'make-delete-domain-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-domain-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-domain-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-domain-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-package-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-package-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or package-format common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or package-namespace common-lisp:null))
   (package (common-lisp:error ":package is required") :type
    (common-lisp:or package-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-package-request 'make-delete-package-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-package-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-package-result-"))
   (deleted-package common-lisp:nil :type
    (common-lisp:or package-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-package-result 'make-delete-package-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted-package))
      (common-lisp:list
       (common-lisp:cons "deletedPackage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-package-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-package-versions-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or package-format common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or package-namespace common-lisp:null))
   (package (common-lisp:error ":package is required") :type
    (common-lisp:or package-name common-lisp:null))
   (versions (common-lisp:error ":versions is required") :type
    (common-lisp:or package-version-list common-lisp:null))
   (expected-status common-lisp:nil :type
    (common-lisp:or package-version-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-package-versions-request
                    'make-delete-package-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected-status))
      (common-lisp:list
       (common-lisp:cons "expectedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-package-versions-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-package-versions-result-"))
   (successful-versions common-lisp:nil :type
    (common-lisp:or successful-package-version-info-map common-lisp:null))
   (failed-versions common-lisp:nil :type
    (common-lisp:or package-version-error-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-package-versions-result
                    'make-delete-package-versions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-versions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-versions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful-versions))
      (common-lisp:list
       (common-lisp:cons "successfulVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-versions))
      (common-lisp:list
       (common-lisp:cons "failedVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-versions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-repository-permissions-policy-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-repository-permissions-policy-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (policy-revision common-lisp:nil :type
    (common-lisp:or policy-revision common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-repository-permissions-policy-request
                    'make-delete-repository-permissions-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-permissions-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-permissions-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-permissions-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-repository-permissions-policy-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-repository-permissions-policy-result-"))
   (policy common-lisp:nil :type
    (common-lisp:or resource-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-repository-permissions-policy-result
                    'make-delete-repository-permissions-policy-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-permissions-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-permissions-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-permissions-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-repository-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-repository-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-repository-request
                    'make-delete-repository-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-repository-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-repository-result-"))
   (repository common-lisp:nil :type
    (common-lisp:or repository-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-repository-result 'make-delete-repository-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-domain-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-domain-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-domain-request 'make-describe-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-domain-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-domain-result-"))
   (domain common-lisp:nil :type
    (common-lisp:or domain-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-domain-result 'make-describe-domain-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-package-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-package-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or package-format common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or package-namespace common-lisp:null))
   (package (common-lisp:error ":package is required") :type
    (common-lisp:or package-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-package-request 'make-describe-package-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-package-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-package-result-"))
   (package (common-lisp:error ":package is required") :type
    (common-lisp:or package-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-package-result 'make-describe-package-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package))
      (common-lisp:list
       (common-lisp:cons "package"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-package-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-package-version-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or package-format common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or package-namespace common-lisp:null))
   (package (common-lisp:error ":package is required") :type
    (common-lisp:or package-name common-lisp:null))
   (package-version (common-lisp:error ":packageversion is required") :type
    (common-lisp:or package-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-package-version-request
                    'make-describe-package-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-package-version-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-package-version-result-"))
   (package-version (common-lisp:error ":packageversion is required") :type
    (common-lisp:or package-version-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-package-version-result
                    'make-describe-package-version-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version))
      (common-lisp:list
       (common-lisp:cons "packageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-repository-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-repository-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-repository-request
                    'make-describe-repository-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-repository-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-repository-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-repository-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-repository-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-repository-result-"))
   (repository common-lisp:nil :type
    (common-lisp:or repository-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-repository-result
                    'make-describe-repository-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-repository-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-repository-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-repository-result))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-external-connection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-external-connection-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (external-connection (common-lisp:error ":externalconnection is required")
    :type (common-lisp:or external-connection-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-external-connection-request
                    'make-disassociate-external-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-external-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-external-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-external-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-external-connection-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-external-connection-result-"))
   (repository common-lisp:nil :type
    (common-lisp:or repository-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-external-connection-result
                    'make-disassociate-external-connection-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-external-connection-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-external-connection-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-external-connection-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dispose-package-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-dispose-package-versions-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or package-format common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or package-namespace common-lisp:null))
   (package (common-lisp:error ":package is required") :type
    (common-lisp:or package-name common-lisp:null))
   (versions (common-lisp:error ":versions is required") :type
    (common-lisp:or package-version-list common-lisp:null))
   (version-revisions common-lisp:nil :type
    (common-lisp:or package-version-revision-map common-lisp:null))
   (expected-status common-lisp:nil :type
    (common-lisp:or package-version-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dispose-package-versions-request
                    'make-dispose-package-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dispose-package-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dispose-package-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-revisions))
      (common-lisp:list
       (common-lisp:cons "versionRevisions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected-status))
      (common-lisp:list
       (common-lisp:cons "expectedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dispose-package-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dispose-package-versions-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-dispose-package-versions-result-"))
   (successful-versions common-lisp:nil :type
    (common-lisp:or successful-package-version-info-map common-lisp:null))
   (failed-versions common-lisp:nil :type
    (common-lisp:or package-version-error-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dispose-package-versions-result
                    'make-dispose-package-versions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dispose-package-versions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dispose-package-versions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful-versions))
      (common-lisp:list
       (common-lisp:cons "successfulVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-versions))
      (common-lisp:list
       (common-lisp:cons "failedVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dispose-package-versions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (domain-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-domain-description-"))
   (name common-lisp:nil :type (common-lisp:or domain-name common-lisp:null))
   (owner common-lisp:nil :type (common-lisp:or account-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or domain-status common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (encryption-key common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (repository-count common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (asset-size-bytes common-lisp:nil :type
    (common-lisp:or long common-lisp:null))
   (s3bucket-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'domain-description 'make-domain-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-count))
      (common-lisp:list
       (common-lisp:cons "repositoryCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-size-bytes))
      (common-lisp:list
       (common-lisp:cons "assetSizeBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-arn))
      (common-lisp:list
       (common-lisp:cons "s3BucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (domain-entry-point (:copier common-lisp:nil)
      (:conc-name "struct-shape-domain-entry-point-"))
   (repository-name common-lisp:nil :type
    (common-lisp:or repository-name common-lisp:null))
   (external-connection-name common-lisp:nil :type
    (common-lisp:or external-connection-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'domain-entry-point 'make-domain-entry-point))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-entry-point))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-entry-point))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-connection-name))
      (common-lisp:list
       (common-lisp:cons "externalConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-entry-point))
   common-lisp:nil))
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:deftype domain-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (domain-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-domain-summary-"))
   (name common-lisp:nil :type (common-lisp:or domain-name common-lisp:null))
   (owner common-lisp:nil :type (common-lisp:or account-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or domain-status common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (encryption-key common-lisp:nil :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'domain-summary 'make-domain-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-summary-list ()
   '(trivial-types:proper-list domain-summary))
 (common-lisp:defun make-domain-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype external-connection-name () 'common-lisp:string)
(common-lisp:deftype external-connection-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-authorization-token-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-authorization-token-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (duration-seconds common-lisp:nil :type
    (common-lisp:or authorization-token-duration-seconds common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-authorization-token-request
                    'make-get-authorization-token-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-authorization-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-authorization-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-authorization-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-authorization-token-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-authorization-token-result-"))
   (authorization-token common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (expiration common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-authorization-token-result
                    'make-get-authorization-token-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-authorization-token-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-authorization-token-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorization-token))
      (common-lisp:list
       (common-lisp:cons "authorizationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-authorization-token-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-domain-permissions-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-domain-permissions-policy-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-domain-permissions-policy-request
                    'make-get-domain-permissions-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-permissions-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-permissions-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-permissions-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-domain-permissions-policy-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-domain-permissions-policy-result-"))
   (policy common-lisp:nil :type
    (common-lisp:or resource-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-domain-permissions-policy-result
                    'make-get-domain-permissions-policy-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-permissions-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-permissions-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-permissions-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-package-version-asset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-package-version-asset-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or package-format common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or package-namespace common-lisp:null))
   (package (common-lisp:error ":package is required") :type
    (common-lisp:or package-name common-lisp:null))
   (package-version (common-lisp:error ":packageversion is required") :type
    (common-lisp:or package-version common-lisp:null))
   (asset (common-lisp:error ":asset is required") :type
    (common-lisp:or asset-name common-lisp:null))
   (package-version-revision common-lisp:nil :type
    (common-lisp:or package-version-revision common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-package-version-asset-request
                    'make-get-package-version-asset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-asset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-asset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-asset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-package-version-asset-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-package-version-asset-result-"))
   (asset common-lisp:nil :type (common-lisp:or asset common-lisp:null))
   (asset-name common-lisp:nil :type
    (common-lisp:or asset-name common-lisp:null))
   (package-version common-lisp:nil :type
    (common-lisp:or package-version common-lisp:null))
   (package-version-revision common-lisp:nil :type
    (common-lisp:or package-version-revision common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-package-version-asset-result
                    'make-get-package-version-asset-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-asset-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-name))
      (common-lisp:cons "X-AssetName" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version))
      (common-lisp:cons "X-PackageVersion" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'package-version-revision))
      (common-lisp:cons "X-PackageVersionRevision"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-asset-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset))
      (common-lisp:list
       (common-lisp:cons "asset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-asset-result))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'asset)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-package-version-readme-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-package-version-readme-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or package-format common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or package-namespace common-lisp:null))
   (package (common-lisp:error ":package is required") :type
    (common-lisp:or package-name common-lisp:null))
   (package-version (common-lisp:error ":packageversion is required") :type
    (common-lisp:or package-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-package-version-readme-request
                    'make-get-package-version-readme-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-readme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-readme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-readme-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-package-version-readme-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-package-version-readme-result-"))
   (format common-lisp:nil :type
    (common-lisp:or package-format common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or package-namespace common-lisp:null))
   (package common-lisp:nil :type
    (common-lisp:or package-name common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or package-version common-lisp:null))
   (version-revision common-lisp:nil :type
    (common-lisp:or package-version-revision common-lisp:null))
   (readme common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-package-version-readme-result
                    'make-get-package-version-readme-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-readme-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-readme-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package))
      (common-lisp:list
       (common-lisp:cons "package"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-revision))
      (common-lisp:list
       (common-lisp:cons "versionRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'readme))
      (common-lisp:list
       (common-lisp:cons "readme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-readme-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-repository-endpoint-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-repository-endpoint-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or package-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-repository-endpoint-request
                    'make-get-repository-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-repository-endpoint-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-repository-endpoint-result-"))
   (repository-endpoint common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-repository-endpoint-result
                    'make-get-repository-endpoint-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-endpoint-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-endpoint-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-endpoint))
      (common-lisp:list
       (common-lisp:cons "repositoryEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-endpoint-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-repository-permissions-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-repository-permissions-policy-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-repository-permissions-policy-request
                    'make-get-repository-permissions-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-permissions-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-permissions-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-permissions-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-repository-permissions-policy-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-repository-permissions-policy-result-"))
   (policy common-lisp:nil :type
    (common-lisp:or resource-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-repository-permissions-policy-result
                    'make-get-repository-permissions-policy-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-permissions-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-permissions-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-permissions-policy-result))
   common-lisp:nil))
(common-lisp:deftype hash-algorithm () 'common-lisp:string)
(common-lisp:deftype hash-value () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (codeartifact-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (license-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-license-info-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'license-info 'make-license-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input license-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input license-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input license-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype license-info-list ()
   '(trivial-types:proper-list license-info))
 (common-lisp:defun make-license-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list license-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype list-domains-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-domains-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-domains-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-domains-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-domains-request 'make-list-domains-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-domains-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-domains-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-domains-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-domains-result-"))
   (domains common-lisp:nil :type
    (common-lisp:or domain-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-domains-result 'make-list-domains-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-domains-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-domains-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domains))
      (common-lisp:list
       (common-lisp:cons "domains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-domains-result))
   common-lisp:nil))
(common-lisp:deftype list-package-version-assets-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-package-version-assets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-package-version-assets-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or package-format common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or package-namespace common-lisp:null))
   (package (common-lisp:error ":package is required") :type
    (common-lisp:or package-name common-lisp:null))
   (package-version (common-lisp:error ":packageversion is required") :type
    (common-lisp:or package-version common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-package-version-assets-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-package-version-assets-request
                    'make-list-package-version-assets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-package-version-assets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-package-version-assets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-package-version-assets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-package-version-assets-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-package-version-assets-result-"))
   (format common-lisp:nil :type
    (common-lisp:or package-format common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or package-namespace common-lisp:null))
   (package common-lisp:nil :type
    (common-lisp:or package-name common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or package-version common-lisp:null))
   (version-revision common-lisp:nil :type
    (common-lisp:or package-version-revision common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (assets common-lisp:nil :type
    (common-lisp:or asset-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-package-version-assets-result
                    'make-list-package-version-assets-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-package-version-assets-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-package-version-assets-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package))
      (common-lisp:list
       (common-lisp:cons "package"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-revision))
      (common-lisp:list
       (common-lisp:cons "versionRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assets))
      (common-lisp:list
       (common-lisp:cons "assets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-package-version-assets-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-package-version-dependencies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-package-version-dependencies-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or package-format common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or package-namespace common-lisp:null))
   (package (common-lisp:error ":package is required") :type
    (common-lisp:or package-name common-lisp:null))
   (package-version (common-lisp:error ":packageversion is required") :type
    (common-lisp:or package-version common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-package-version-dependencies-request
                    'make-list-package-version-dependencies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-package-version-dependencies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-package-version-dependencies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-package-version-dependencies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-package-version-dependencies-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-package-version-dependencies-result-"))
   (format common-lisp:nil :type
    (common-lisp:or package-format common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or package-namespace common-lisp:null))
   (package common-lisp:nil :type
    (common-lisp:or package-name common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or package-version common-lisp:null))
   (version-revision common-lisp:nil :type
    (common-lisp:or package-version-revision common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (dependencies common-lisp:nil :type
    (common-lisp:or package-dependency-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-package-version-dependencies-result
                    'make-list-package-version-dependencies-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-package-version-dependencies-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-package-version-dependencies-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package))
      (common-lisp:list
       (common-lisp:cons "package"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-revision))
      (common-lisp:list
       (common-lisp:cons "versionRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dependencies))
      (common-lisp:list
       (common-lisp:cons "dependencies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-package-version-dependencies-result))
   common-lisp:nil))
(common-lisp:deftype list-package-versions-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-package-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-package-versions-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or package-format common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or package-namespace common-lisp:null))
   (package (common-lisp:error ":package is required") :type
    (common-lisp:or package-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or package-version-status common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or package-version-sort-type common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-package-versions-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (origin-type common-lisp:nil :type
    (common-lisp:or package-version-origin-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-package-versions-request
                    'make-list-package-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-package-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-package-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-package-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-package-versions-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-package-versions-result-"))
   (default-display-version common-lisp:nil :type
    (common-lisp:or package-version common-lisp:null))
   (format common-lisp:nil :type
    (common-lisp:or package-format common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or package-namespace common-lisp:null))
   (package common-lisp:nil :type
    (common-lisp:or package-name common-lisp:null))
   (versions common-lisp:nil :type
    (common-lisp:or package-version-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-package-versions-result
                    'make-list-package-versions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-package-versions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-package-versions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-display-version))
      (common-lisp:list
       (common-lisp:cons "defaultDisplayVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package))
      (common-lisp:list
       (common-lisp:cons "package"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-package-versions-result))
   common-lisp:nil))
(common-lisp:deftype list-packages-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-packages-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-packages-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (format common-lisp:nil :type
    (common-lisp:or package-format common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or package-namespace common-lisp:null))
   (package-prefix common-lisp:nil :type
    (common-lisp:or package-name common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-packages-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (publish common-lisp:nil :type
    (common-lisp:or allow-publish common-lisp:null))
   (upstream common-lisp:nil :type
    (common-lisp:or allow-upstream common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-packages-request 'make-list-packages-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-packages-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-packages-result-"))
   (packages common-lisp:nil :type
    (common-lisp:or package-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-packages-result 'make-list-packages-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-packages-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-packages-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'packages))
      (common-lisp:list
       (common-lisp:cons "packages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-packages-result))
   common-lisp:nil))
(common-lisp:deftype list-repositories-in-domain-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-repositories-in-domain-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-repositories-in-domain-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (administrator-account common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (repository-prefix common-lisp:nil :type
    (common-lisp:or repository-name common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-repositories-in-domain-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-repositories-in-domain-request
                    'make-list-repositories-in-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-in-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-in-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-in-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-repositories-in-domain-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-repositories-in-domain-result-"))
   (repositories common-lisp:nil :type
    (common-lisp:or repository-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-repositories-in-domain-result
                    'make-list-repositories-in-domain-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-in-domain-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-in-domain-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repositories))
      (common-lisp:list
       (common-lisp:cons "repositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-in-domain-result))
   common-lisp:nil))
(common-lisp:deftype list-repositories-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-repositories-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-repositories-request-"))
   (repository-prefix common-lisp:nil :type
    (common-lisp:or repository-name common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-repositories-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-repositories-request
                    'make-list-repositories-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-repositories-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-repositories-result-"))
   (repositories common-lisp:nil :type
    (common-lisp:or repository-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-repositories-result 'make-list-repositories-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repositories))
      (common-lisp:list
       (common-lisp:cons "repositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-result-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-result
                    'make-list-tags-for-resource-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype long-optional () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (package-dependency (:copier common-lisp:nil)
      (:conc-name "struct-shape-package-dependency-"))
   (namespace common-lisp:nil :type
    (common-lisp:or package-namespace common-lisp:null))
   (package common-lisp:nil :type
    (common-lisp:or package-name common-lisp:null))
   (dependency-type common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (version-requirement common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'package-dependency 'make-package-dependency))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input package-dependency))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input package-dependency))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package))
      (common-lisp:list
       (common-lisp:cons "package"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dependency-type))
      (common-lisp:list
       (common-lisp:cons "dependencyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-requirement))
      (common-lisp:list
       (common-lisp:cons "versionRequirement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input package-dependency))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype package-dependency-list ()
   '(trivial-types:proper-list package-dependency))
 (common-lisp:defun make-package-dependency-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list package-dependency))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (package-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-package-description-"))
   (format common-lisp:nil :type
    (common-lisp:or package-format common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or package-namespace common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or package-name common-lisp:null))
   (origin-configuration common-lisp:nil :type
    (common-lisp:or package-origin-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'package-description 'make-package-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input package-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input package-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-configuration))
      (common-lisp:list
       (common-lisp:cons "originConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input package-description))
   common-lisp:nil))
(common-lisp:deftype package-format () 'common-lisp:string)
(common-lisp:deftype package-name () 'common-lisp:string)
(common-lisp:deftype package-namespace () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (package-origin-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-package-origin-configuration-"))
   (restrictions common-lisp:nil :type
    (common-lisp:or package-origin-restrictions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'package-origin-configuration
                    'make-package-origin-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-origin-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-origin-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restrictions))
      (common-lisp:list
       (common-lisp:cons "restrictions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-origin-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (package-origin-restrictions (:copier common-lisp:nil)
      (:conc-name "struct-shape-package-origin-restrictions-"))
   (publish (common-lisp:error ":publish is required") :type
    (common-lisp:or allow-publish common-lisp:null))
   (upstream (common-lisp:error ":upstream is required") :type
    (common-lisp:or allow-upstream common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'package-origin-restrictions
                    'make-package-origin-restrictions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-origin-restrictions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-origin-restrictions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publish))
      (common-lisp:list
       (common-lisp:cons "publish"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upstream))
      (common-lisp:list
       (common-lisp:cons "upstream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-origin-restrictions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (package-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-package-summary-"))
   (format common-lisp:nil :type
    (common-lisp:or package-format common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or package-namespace common-lisp:null))
   (package common-lisp:nil :type
    (common-lisp:or package-name common-lisp:null))
   (origin-configuration common-lisp:nil :type
    (common-lisp:or package-origin-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'package-summary 'make-package-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input package-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input package-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package))
      (common-lisp:list
       (common-lisp:cons "package"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-configuration))
      (common-lisp:list
       (common-lisp:cons "originConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input package-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype package-summary-list ()
   '(trivial-types:proper-list package-summary))
 (common-lisp:defun make-package-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list package-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype package-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (package-version-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-package-version-description-"))
   (format common-lisp:nil :type
    (common-lisp:or package-format common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or package-namespace common-lisp:null))
   (package-name common-lisp:nil :type
    (common-lisp:or package-name common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or string255 common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or package-version common-lisp:null))
   (summary common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (home-page common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (source-code-repository common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (published-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (licenses common-lisp:nil :type
    (common-lisp:or license-info-list common-lisp:null))
   (revision common-lisp:nil :type
    (common-lisp:or package-version-revision common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or package-version-status common-lisp:null))
   (origin common-lisp:nil :type
    (common-lisp:or package-version-origin common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'package-version-description
                    'make-package-version-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-version-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-version-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "packageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-page))
      (common-lisp:list
       (common-lisp:cons "homePage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-code-repository))
      (common-lisp:list
       (common-lisp:cons "sourceCodeRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'published-time))
      (common-lisp:list
       (common-lisp:cons "publishedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'licenses))
      (common-lisp:list
       (common-lisp:cons "licenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin))
      (common-lisp:list
       (common-lisp:cons "origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-version-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (package-version-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-package-version-error-"))
   (error-code common-lisp:nil :type
    (common-lisp:or package-version-error-code common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'package-version-error 'make-package-version-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-version-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-version-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-version-error))
   common-lisp:nil))
(common-lisp:deftype package-version-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype package-version-error-map () 'common-lisp:hash-table)
 (common-lisp:defun make-package-version-error-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype package-version-list ()
   '(trivial-types:proper-list package-version))
 (common-lisp:defun make-package-version-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list package-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (package-version-origin (:copier common-lisp:nil)
      (:conc-name "struct-shape-package-version-origin-"))
   (domain-entry-point common-lisp:nil :type
    (common-lisp:or domain-entry-point common-lisp:null))
   (origin-type common-lisp:nil :type
    (common-lisp:or package-version-origin-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'package-version-origin 'make-package-version-origin))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-version-origin))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-version-origin))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-entry-point))
      (common-lisp:list
       (common-lisp:cons "domainEntryPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-type))
      (common-lisp:list
       (common-lisp:cons "originType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-version-origin))
   common-lisp:nil))
(common-lisp:deftype package-version-origin-type () 'common-lisp:string)
(common-lisp:deftype package-version-revision () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype package-version-revision-map () 'common-lisp:hash-table)
 (common-lisp:defun make-package-version-revision-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype package-version-sort-type () 'common-lisp:string)
(common-lisp:deftype package-version-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (package-version-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-package-version-summary-"))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or package-version common-lisp:null))
   (revision common-lisp:nil :type
    (common-lisp:or package-version-revision common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or package-version-status common-lisp:null))
   (origin common-lisp:nil :type
    (common-lisp:or package-version-origin common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'package-version-summary 'make-package-version-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin))
      (common-lisp:list
       (common-lisp:cons "origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-version-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype package-version-summary-list ()
   '(trivial-types:proper-list package-version-summary))
 (common-lisp:defun make-package-version-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list package-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:deftype policy-document () 'common-lisp:string)
(common-lisp:deftype policy-revision () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (publish-package-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-publish-package-version-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or package-format common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or package-namespace common-lisp:null))
   (package (common-lisp:error ":package is required") :type
    (common-lisp:or package-name common-lisp:null))
   (package-version (common-lisp:error ":packageversion is required") :type
    (common-lisp:or package-version common-lisp:null))
   (asset-content (common-lisp:error ":assetcontent is required") :type
    (common-lisp:or asset common-lisp:null))
   (asset-name (common-lisp:error ":assetname is required") :type
    (common-lisp:or asset-name common-lisp:null))
   (asset-sha256 (common-lisp:error ":assetsha256 is required") :type
    (common-lisp:or sha256 common-lisp:null))
   (unfinished common-lisp:nil :type
    (common-lisp:or boolean-optional common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'publish-package-version-request
                    'make-publish-package-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          publish-package-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-sha256))
      (common-lisp:cons "x-amz-content-sha256"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          publish-package-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-content))
      (common-lisp:list
       (common-lisp:cons "assetContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          publish-package-version-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'asset-content)))
(common-lisp:progn
 (common-lisp:defstruct
     (publish-package-version-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-publish-package-version-result-"))
   (format common-lisp:nil :type
    (common-lisp:or package-format common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or package-namespace common-lisp:null))
   (package common-lisp:nil :type
    (common-lisp:or package-name common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or package-version common-lisp:null))
   (version-revision common-lisp:nil :type
    (common-lisp:or package-version-revision common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or package-version-status common-lisp:null))
   (asset common-lisp:nil :type
    (common-lisp:or asset-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'publish-package-version-result
                    'make-publish-package-version-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          publish-package-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          publish-package-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package))
      (common-lisp:list
       (common-lisp:cons "package"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-revision))
      (common-lisp:list
       (common-lisp:cons "versionRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset))
      (common-lisp:list
       (common-lisp:cons "asset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          publish-package-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-domain-permissions-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-domain-permissions-policy-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (policy-revision common-lisp:nil :type
    (common-lisp:or policy-revision common-lisp:null))
   (policy-document (common-lisp:error ":policydocument is required") :type
    (common-lisp:or policy-document common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-domain-permissions-policy-request
                    'make-put-domain-permissions-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-domain-permissions-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-domain-permissions-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-owner))
      (common-lisp:list
       (common-lisp:cons "domainOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-revision))
      (common-lisp:list
       (common-lisp:cons "policyRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-domain-permissions-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-domain-permissions-policy-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-domain-permissions-policy-result-"))
   (policy common-lisp:nil :type
    (common-lisp:or resource-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-domain-permissions-policy-result
                    'make-put-domain-permissions-policy-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-domain-permissions-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-domain-permissions-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-domain-permissions-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-package-origin-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-package-origin-configuration-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or package-format common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or package-namespace common-lisp:null))
   (package (common-lisp:error ":package is required") :type
    (common-lisp:or package-name common-lisp:null))
   (restrictions (common-lisp:error ":restrictions is required") :type
    (common-lisp:or package-origin-restrictions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-package-origin-configuration-request
                    'make-put-package-origin-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-package-origin-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-package-origin-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restrictions))
      (common-lisp:list
       (common-lisp:cons "restrictions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-package-origin-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-package-origin-configuration-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-package-origin-configuration-result-"))
   (origin-configuration common-lisp:nil :type
    (common-lisp:or package-origin-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-package-origin-configuration-result
                    'make-put-package-origin-configuration-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-package-origin-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-package-origin-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-configuration))
      (common-lisp:list
       (common-lisp:cons "originConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-package-origin-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-repository-permissions-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-repository-permissions-policy-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (policy-revision common-lisp:nil :type
    (common-lisp:or policy-revision common-lisp:null))
   (policy-document (common-lisp:error ":policydocument is required") :type
    (common-lisp:or policy-document common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-repository-permissions-policy-request
                    'make-put-repository-permissions-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-repository-permissions-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-repository-permissions-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-revision))
      (common-lisp:list
       (common-lisp:cons "policyRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-repository-permissions-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-repository-permissions-policy-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-repository-permissions-policy-result-"))
   (policy common-lisp:nil :type
    (common-lisp:or resource-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-repository-permissions-policy-result
                    'make-put-repository-permissions-policy-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-repository-permissions-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-repository-permissions-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-repository-permissions-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (repository-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-repository-description-"))
   (name common-lisp:nil :type
    (common-lisp:or repository-name common-lisp:null))
   (administrator-account common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (domain-name common-lisp:nil :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (upstreams common-lisp:nil :type
    (common-lisp:or upstream-repository-info-list common-lisp:null))
   (external-connections common-lisp:nil :type
    (common-lisp:or repository-external-connection-info-list common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'repository-description 'make-repository-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'administrator-account))
      (common-lisp:list
       (common-lisp:cons "administratorAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-owner))
      (common-lisp:list
       (common-lisp:cons "domainOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upstreams))
      (common-lisp:list
       (common-lisp:cons "upstreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-connections))
      (common-lisp:list
       (common-lisp:cons "externalConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (repository-external-connection-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-repository-external-connection-info-"))
   (external-connection-name common-lisp:nil :type
    (common-lisp:or external-connection-name common-lisp:null))
   (package-format common-lisp:nil :type
    (common-lisp:or package-format common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or external-connection-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'repository-external-connection-info
                    'make-repository-external-connection-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-external-connection-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-external-connection-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-connection-name))
      (common-lisp:list
       (common-lisp:cons "externalConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-format))
      (common-lisp:list
       (common-lisp:cons "packageFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-external-connection-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype repository-external-connection-info-list ()
   '(trivial-types:proper-list repository-external-connection-info))
 (common-lisp:defun make-repository-external-connection-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            repository-external-connection-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype repository-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (repository-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-repository-summary-"))
   (name common-lisp:nil :type
    (common-lisp:or repository-name common-lisp:null))
   (administrator-account common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (domain-name common-lisp:nil :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (created-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'repository-summary 'make-repository-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input repository-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input repository-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'administrator-account))
      (common-lisp:list
       (common-lisp:cons "administratorAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-owner))
      (common-lisp:list
       (common-lisp:cons "domainOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input repository-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype repository-summary-list ()
   '(trivial-types:proper-list repository-summary))
 (common-lisp:defun make-repository-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list repository-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (codeartifact-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-policy-"))
   (resource-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (revision common-lisp:nil :type
    (common-lisp:or policy-revision common-lisp:null))
   (document common-lisp:nil :type
    (common-lisp:or policy-document common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-policy 'make-resource-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-policy))
   common-lisp:nil))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype retry-after-seconds () 'common-lisp:integer)
(common-lisp:deftype sha256 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (codeartifact-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string255 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (successful-package-version-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-successful-package-version-info-"))
   (revision common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or package-version-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'successful-package-version-info
                    'make-successful-package-version-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          successful-package-version-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          successful-package-version-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          successful-package-version-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype successful-package-version-info-map ()
   'common-lisp:hash-table)
 (common-lisp:defun make-successful-package-version-info-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-result-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-result 'make-tag-resource-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-result))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (codeartifact-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)
      (retry-after-seconds :initarg :retry-after-seconds :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-retry-after-seconds)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "tagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-result-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-result 'make-untag-resource-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-package-versions-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-package-versions-status-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or package-format common-lisp:null))
   (namespace common-lisp:nil :type
    (common-lisp:or package-namespace common-lisp:null))
   (package (common-lisp:error ":package is required") :type
    (common-lisp:or package-name common-lisp:null))
   (versions (common-lisp:error ":versions is required") :type
    (common-lisp:or package-version-list common-lisp:null))
   (version-revisions common-lisp:nil :type
    (common-lisp:or package-version-revision-map common-lisp:null))
   (expected-status common-lisp:nil :type
    (common-lisp:or package-version-status common-lisp:null))
   (target-status (common-lisp:error ":targetstatus is required") :type
    (common-lisp:or package-version-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-package-versions-status-request
                    'make-update-package-versions-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-package-versions-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-package-versions-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-revisions))
      (common-lisp:list
       (common-lisp:cons "versionRevisions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected-status))
      (common-lisp:list
       (common-lisp:cons "expectedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-status))
      (common-lisp:list
       (common-lisp:cons "targetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-package-versions-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-package-versions-status-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-package-versions-status-result-"))
   (successful-versions common-lisp:nil :type
    (common-lisp:or successful-package-version-info-map common-lisp:null))
   (failed-versions common-lisp:nil :type
    (common-lisp:or package-version-error-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-package-versions-status-result
                    'make-update-package-versions-status-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-package-versions-status-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-package-versions-status-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful-versions))
      (common-lisp:list
       (common-lisp:cons "successfulVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-versions))
      (common-lisp:list
       (common-lisp:cons "failedVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-package-versions-status-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-repository-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-repository-request-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-owner common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (repository (common-lisp:error ":repository is required") :type
    (common-lisp:or repository-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (upstreams common-lisp:nil :type
    (common-lisp:or upstream-repository-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-repository-request
                    'make-update-repository-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-repository-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-repository-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upstreams))
      (common-lisp:list
       (common-lisp:cons "upstreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-repository-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-repository-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-repository-result-"))
   (repository common-lisp:nil :type
    (common-lisp:or repository-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-repository-result 'make-update-repository-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-repository-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-repository-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-repository-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (upstream-repository (:copier common-lisp:nil)
      (:conc-name "struct-shape-upstream-repository-"))
   (repository-name (common-lisp:error ":repositoryname is required") :type
    (common-lisp:or repository-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upstream-repository 'make-upstream-repository))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upstream-repository))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upstream-repository))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upstream-repository))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (upstream-repository-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-upstream-repository-info-"))
   (repository-name common-lisp:nil :type
    (common-lisp:or repository-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upstream-repository-info 'make-upstream-repository-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upstream-repository-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upstream-repository-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upstream-repository-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype upstream-repository-info-list ()
   '(trivial-types:proper-list upstream-repository-info))
 (common-lisp:defun make-upstream-repository-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            upstream-repository-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype upstream-repository-list ()
   '(trivial-types:proper-list upstream-repository))
 (common-lisp:defun make-upstream-repository-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list upstream-repository))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (codeartifact-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-external-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository
                     external-connection)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository external-connection))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-external-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/repository/external-connection"
                                                        "AssociateExternalConnection"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-external-connection))
(common-lisp:progn
 (common-lisp:defun copy-package-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner source-repository
                     destination-repository format namespace package versions
                     version-revisions allow-overwrite include-from-upstream)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner source-repository
     destination-repository format namespace package versions version-revisions
     allow-overwrite include-from-upstream))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-package-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/package/versions/copy"
                                                        "CopyPackageVersions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'copy-package-versions))
(common-lisp:progn
 (common-lisp:defun create-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain encryption-key tags)
   (common-lisp:declare (common-lisp:ignorable domain encryption-key tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/v1/domain"
                                                        "CreateDomain"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-domain))
(common-lisp:progn
 (common-lisp:defun create-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository
                     description upstreams tags)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository description upstreams
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-repository-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/v1/repository"
                                                        "CreateRepository"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-repository))
(common-lisp:progn
 (common-lisp:defun delete-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner)
   (common-lisp:declare (common-lisp:ignorable domain domain-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" "/v1/domain"
                                                        "DeleteDomain"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-domain))
(common-lisp:progn
 (common-lisp:defun delete-domain-permissions-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner policy-revision)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner policy-revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-domain-permissions-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        "/v1/domain/permissions/policy"
                                                        "DeleteDomainPermissionsPolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-domain-permissions-policy))
(common-lisp:progn
 (common-lisp:defun delete-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" "/v1/package"
                                                        "DeletePackage"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-package))
(common-lisp:progn
 (common-lisp:defun delete-package-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package versions expected-status)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package versions expected-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-package-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/package/versions/delete"
                                                        "DeletePackageVersions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-package-versions))
(common-lisp:progn
 (common-lisp:defun delete-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository)
   (common-lisp:declare (common-lisp:ignorable domain domain-owner repository))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-repository-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        "/v1/repository"
                                                        "DeleteRepository"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-repository))
(common-lisp:progn
 (common-lisp:defun delete-repository-permissions-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository
                     policy-revision)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository policy-revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-repository-permissions-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        "/v1/repository/permissions/policies"
                                                        "DeleteRepositoryPermissionsPolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-repository-permissions-policy))
(common-lisp:progn
 (common-lisp:defun describe-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner)
   (common-lisp:declare (common-lisp:ignorable domain domain-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/v1/domain"
                                                        "DescribeDomain"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-domain))
(common-lisp:progn
 (common-lisp:defun describe-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/v1/package"
                                                        "DescribePackage"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-package))
(common-lisp:progn
 (common-lisp:defun describe-package-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package package-version)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package package-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-package-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/v1/package/version"
                                                        "DescribePackageVersion"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-package-version))
(common-lisp:progn
 (common-lisp:defun describe-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository)
   (common-lisp:declare (common-lisp:ignorable domain domain-owner repository))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-repository-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/v1/repository"
                                                        "DescribeRepository"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-repository))
(common-lisp:progn
 (common-lisp:defun disassociate-external-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository
                     external-connection)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository external-connection))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-external-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        "/v1/repository/external-connection"
                                                        "DisassociateExternalConnection"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-external-connection))
(common-lisp:progn
 (common-lisp:defun dispose-package-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package versions version-revisions
                     expected-status)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package versions version-revisions expected-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-dispose-package-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/package/versions/dispose"
                                                        "DisposePackageVersions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'dispose-package-versions))
(common-lisp:progn
 (common-lisp:defun get-authorization-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner duration-seconds)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner duration-seconds))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-authorization-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/authorization-token"
                                                        "GetAuthorizationToken"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-authorization-token))
(common-lisp:progn
 (common-lisp:defun get-domain-permissions-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner)
   (common-lisp:declare (common-lisp:ignorable domain domain-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-domain-permissions-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/v1/domain/permissions/policy"
                                                        "GetDomainPermissionsPolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-domain-permissions-policy))
(common-lisp:progn
 (common-lisp:defun get-package-version-asset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package package-version asset
                     package-version-revision)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package package-version asset package-version-revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-package-version-asset-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/v1/package/version/asset"
                                                        "GetPackageVersionAsset")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-package-version-asset))
(common-lisp:progn
 (common-lisp:defun get-package-version-readme
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package package-version)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package package-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-package-version-readme-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/v1/package/version/readme"
                                                        "GetPackageVersionReadme"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-package-version-readme))
(common-lisp:progn
 (common-lisp:defun get-repository-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-repository-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/v1/repository/endpoint"
                                                        "GetRepositoryEndpoint"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-repository-endpoint))
(common-lisp:progn
 (common-lisp:defun get-repository-permissions-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository)
   (common-lisp:declare (common-lisp:ignorable domain domain-owner repository))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-repository-permissions-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/v1/repository/permissions/policy"
                                                        "GetRepositoryPermissionsPolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-repository-permissions-policy))
(common-lisp:progn
 (common-lisp:defun list-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-domains-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/v1/domains"
                                                        "ListDomains"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-domains))
(common-lisp:progn
 (common-lisp:defun list-package-version-assets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package package-version max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package package-version max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-package-version-assets-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/package/version/assets"
                                                        "ListPackageVersionAssets"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-package-version-assets))
(common-lisp:progn
 (common-lisp:defun list-package-version-dependencies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package package-version next-token)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package package-version next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-package-version-dependencies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/package/version/dependencies"
                                                        "ListPackageVersionDependencies"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-package-version-dependencies))
(common-lisp:progn
 (common-lisp:defun list-package-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package status sort-by max-results next-token
                     origin-type)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package status sort-by max-results next-token origin-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-package-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/package/versions"
                                                        "ListPackageVersions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-package-versions))
(common-lisp:progn
 (common-lisp:defun list-packages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package-prefix max-results next-token publish
                     upstream)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package-prefix max-results next-token publish upstream))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-packages-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/v1/packages"
                                                        "ListPackages"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-packages))
(common-lisp:progn
 (common-lisp:defun list-repositories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key repository-prefix max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable repository-prefix max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-repositories-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/repositories"
                                                        "ListRepositories"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-repositories))
(common-lisp:progn
 (common-lisp:defun list-repositories-in-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner administrator-account
                     repository-prefix max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner administrator-account
     repository-prefix max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-repositories-in-domain-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/domain/repositories"
                                                        "ListRepositoriesInDomain"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-repositories-in-domain))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/v1/tags"
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun publish-package-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package package-version asset-content asset-name
                     asset-sha256 unfinished)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package package-version asset-content asset-name asset-sha256 unfinished))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-publish-package-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/package/version/publish"
                                                        "PublishPackageVersion"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'publish-package-version))
(common-lisp:progn
 (common-lisp:defun put-domain-permissions-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner policy-revision
                     policy-document)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner policy-revision
     policy-document))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-domain-permissions-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/v1/domain/permissions/policy"
                                                        "PutDomainPermissionsPolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-domain-permissions-policy))
(common-lisp:progn
 (common-lisp:defun put-package-origin-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package restrictions)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package restrictions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-package-origin-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/v1/package"
                                                        "PutPackageOriginConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-package-origin-configuration))
(common-lisp:progn
 (common-lisp:defun put-repository-permissions-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository
                     policy-revision policy-document)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository policy-revision
     policy-document))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-repository-permissions-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/v1/repository/permissions/policy"
                                                        "PutRepositoryPermissionsPolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-repository-permissions-policy))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/v1/tag"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/v1/untag"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-package-versions-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package versions version-revisions
                     expected-status target-status)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package versions version-revisions expected-status target-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-package-versions-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/v1/package/versions/update_status"
                                                        "UpdatePackageVersionsStatus"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-package-versions-status))
(common-lisp:progn
 (common-lisp:defun update-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository
                     description upstreams)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository description
     upstreams))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-repository-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" "/v1/repository"
                                                        "UpdateRepository"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-repository))
