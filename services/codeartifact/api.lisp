;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/codeartifact/api
  (:use)
  (:nicknames #:aws/codeartifact)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/codeartifact/api)
(common-lisp:progn
 (common-lisp:defclass codeartifact-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "codeartifact" :protocol
                        :rest-json))
 (common-lisp:export 'codeartifact-request))
(common-lisp:progn
 (common-lisp:define-condition codeartifact-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'codeartifact-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (codeartifact-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:deftype allow-publish () 'common-lisp:string)
(common-lisp:deftype allow-upstream () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype asset ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:deftype asset-hashes () 'common-lisp:hash-table)
 (common-lisp:defun |make-asset-hashes| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype asset-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass asset-summary common-lisp:nil
                       ((hashes :initarg :|hashes| :type
                         (common-lisp:or asset-hashes common-lisp:null)
                         :accessor %asset-summary-hashes :initform
                         common-lisp:nil)
                        (size :initarg :|size| :type
                         (common-lisp:or long-optional common-lisp:null)
                         :accessor %asset-summary-size :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or asset-name common-lisp:null) :accessor
                         %asset-summary-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export (common-lisp:list 'asset-summary 'make-asset-summary))
 (common-lisp:defun make-asset-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key hashes size name)
   (common-lisp:apply #'common-lisp:make-instance 'asset-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hashes))
      (common-lisp:list
       (common-lisp:cons "hashes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-summary-list ()
   '(trivial-types:proper-list asset-summary))
 (common-lisp:defun |make-asset-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass associate-external-connection-request common-lisp:nil
                       ((external-connection :initarg :|externalConnection|
                         :type
                         (common-lisp:or external-connection-name
                                         common-lisp:null)
                         :accessor
                         %associate-external-connection-request-external-connection
                         :initform
                         (common-lisp:error ":externalconnection is required"))
                        (repository :initarg :|repository| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         %associate-external-connection-request-repository
                         :initform
                         (common-lisp:error ":repository is required"))
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %associate-external-connection-request-domain-owner
                         :initform common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %associate-external-connection-request-domain
                         :initform (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-external-connection-request
                    'make-associate-external-connection-request))
 (common-lisp:defun make-associate-external-connection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key external-connection repository
                     domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-external-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-external-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-external-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-external-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-external-connection-result common-lisp:nil
                       ((repository :initarg :|repository| :type
                         (common-lisp:or repository-description
                                         common-lisp:null)
                         :accessor
                         %associate-external-connection-result-repository
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'associate-external-connection-result
                    'make-associate-external-connection-result))
 (common-lisp:defun make-associate-external-connection-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key repository)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-external-connection-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-external-connection-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-external-connection-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-external-connection-result))
   common-lisp:nil))
(common-lisp:deftype authorization-token-duration-seconds ()
  'common-lisp:integer)
(common-lisp:deftype boolean-optional () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (codeartifact-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :|resourceId| :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :|resourceType| :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass copy-package-versions-request common-lisp:nil
                       ((include-from-upstream :initarg :|includeFromUpstream|
                         :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         %copy-package-versions-request-include-from-upstream
                         :initform common-lisp:nil)
                        (allow-overwrite :initarg :|allowOverwrite| :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor
                         %copy-package-versions-request-allow-overwrite
                         :initform common-lisp:nil)
                        (version-revisions :initarg :|versionRevisions| :type
                         (common-lisp:or package-version-revision-map
                                         common-lisp:null)
                         :accessor
                         %copy-package-versions-request-version-revisions
                         :initform common-lisp:nil)
                        (versions :initarg :|versions| :type
                         (common-lisp:or package-version-list common-lisp:null)
                         :accessor %copy-package-versions-request-versions
                         :initform common-lisp:nil)
                        (package :initarg :|package| :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor %copy-package-versions-request-package
                         :initform (common-lisp:error ":package is required"))
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or package-namespace common-lisp:null)
                         :accessor %copy-package-versions-request-namespace
                         :initform common-lisp:nil)
                        (format :initarg :|format| :type
                         (common-lisp:or package-format common-lisp:null)
                         :accessor %copy-package-versions-request-format
                         :initform (common-lisp:error ":format is required"))
                        (destination-repository :initarg
                         :|destinationRepository| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         %copy-package-versions-request-destination-repository
                         :initform
                         (common-lisp:error
                          ":destinationrepository is required"))
                        (source-repository :initarg :|sourceRepository| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         %copy-package-versions-request-source-repository
                         :initform
                         (common-lisp:error ":sourcerepository is required"))
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %copy-package-versions-request-domain-owner :initform
                         common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %copy-package-versions-request-domain
                         :initform (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'copy-package-versions-request
                    'make-copy-package-versions-request))
 (common-lisp:defun make-copy-package-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key include-from-upstream allow-overwrite
                     version-revisions versions package namespace format
                     destination-repository source-repository domain-owner
                     domain)
   (common-lisp:apply #'common-lisp:make-instance
                      'copy-package-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-package-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-package-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-revisions))
      (common-lisp:list
       (common-lisp:cons "versionRevisions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-overwrite))
      (common-lisp:list
       (common-lisp:cons "allowOverwrite"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-from-upstream))
      (common-lisp:list
       (common-lisp:cons "includeFromUpstream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-package-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass copy-package-versions-result common-lisp:nil
                       ((failed-versions :initarg :|failedVersions| :type
                         (common-lisp:or package-version-error-map
                                         common-lisp:null)
                         :accessor
                         %copy-package-versions-result-failed-versions
                         :initform common-lisp:nil)
                        (successful-versions :initarg :|successfulVersions|
                         :type
                         (common-lisp:or successful-package-version-info-map
                                         common-lisp:null)
                         :accessor
                         %copy-package-versions-result-successful-versions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'copy-package-versions-result
                    'make-copy-package-versions-result))
 (common-lisp:defun make-copy-package-versions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-versions successful-versions)
   (common-lisp:apply #'common-lisp:make-instance 'copy-package-versions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-package-versions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-package-versions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful-versions))
      (common-lisp:list
       (common-lisp:cons "successfulVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-versions))
      (common-lisp:list
       (common-lisp:cons "failedVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-package-versions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-domain-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-domain-request-tags :initform common-lisp:nil)
                        (encryption-key :initarg :|encryptionKey| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-domain-request-encryption-key :initform
                         common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %create-domain-request-domain :initform
                         (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'create-domain-request 'make-create-domain-request))
 (common-lisp:defun make-create-domain-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags encryption-key domain)
   (common-lisp:apply #'common-lisp:make-instance 'create-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-domain-result common-lisp:nil
                       ((domain :initarg :|domain| :type
                         (common-lisp:or domain-description common-lisp:null)
                         :accessor %create-domain-result-domain :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-domain-result 'make-create-domain-result))
 (common-lisp:defun make-create-domain-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain)
   (common-lisp:apply #'common-lisp:make-instance 'create-domain-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-domain-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-domain-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-domain-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-repository-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-repository-request-tags :initform
                         common-lisp:nil)
                        (upstreams :initarg :|upstreams| :type
                         (common-lisp:or upstream-repository-list
                                         common-lisp:null)
                         :accessor %create-repository-request-upstreams
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-repository-request-description
                         :initform common-lisp:nil)
                        (repository :initarg :|repository| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor %create-repository-request-repository
                         :initform
                         (common-lisp:error ":repository is required"))
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %create-repository-request-domain-owner :initform
                         common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %create-repository-request-domain :initform
                         (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'create-repository-request
                    'make-create-repository-request))
 (common-lisp:defun make-create-repository-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags upstreams description repository
                     domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance 'create-repository-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upstreams))
      (common-lisp:list
       (common-lisp:cons "upstreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-repository-result common-lisp:nil
                       ((repository :initarg :|repository| :type
                         (common-lisp:or repository-description
                                         common-lisp:null)
                         :accessor %create-repository-result-repository
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-repository-result 'make-create-repository-result))
 (common-lisp:defun make-create-repository-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key repository)
   (common-lisp:apply #'common-lisp:make-instance 'create-repository-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-repository-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-domain-permissions-policy-request common-lisp:nil
                       ((policy-revision :initarg :|policyRevision| :type
                         (common-lisp:or policy-revision common-lisp:null)
                         :accessor
                         %delete-domain-permissions-policy-request-policy-revision
                         :initform common-lisp:nil)
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-domain-permissions-policy-request-domain-owner
                         :initform common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %delete-domain-permissions-policy-request-domain
                         :initform (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-domain-permissions-policy-request
                    'make-delete-domain-permissions-policy-request))
 (common-lisp:defun make-delete-domain-permissions-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-revision domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-domain-permissions-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-permissions-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-permissions-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-permissions-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-domain-permissions-policy-result common-lisp:nil
                       ((policy :initarg :|policy| :type
                         (common-lisp:or resource-policy common-lisp:null)
                         :accessor
                         %delete-domain-permissions-policy-result-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-domain-permissions-policy-result
                    'make-delete-domain-permissions-policy-result))
 (common-lisp:defun make-delete-domain-permissions-policy-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-domain-permissions-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-permissions-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-permissions-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-permissions-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-domain-request common-lisp:nil
                       ((domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-domain-request-domain-owner :initform
                         common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %delete-domain-request-domain :initform
                         (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-domain-request 'make-delete-domain-request))
 (common-lisp:defun make-delete-domain-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance 'delete-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-domain-result common-lisp:nil
                       ((domain :initarg :|domain| :type
                         (common-lisp:or domain-description common-lisp:null)
                         :accessor %delete-domain-result-domain :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-domain-result 'make-delete-domain-result))
 (common-lisp:defun make-delete-domain-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain)
   (common-lisp:apply #'common-lisp:make-instance 'delete-domain-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-domain-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-domain-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-domain-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-package-request common-lisp:nil
                       ((package :initarg :|package| :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor %delete-package-request-package :initform
                         (common-lisp:error ":package is required"))
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or package-namespace common-lisp:null)
                         :accessor %delete-package-request-namespace :initform
                         common-lisp:nil)
                        (format :initarg :|format| :type
                         (common-lisp:or package-format common-lisp:null)
                         :accessor %delete-package-request-format :initform
                         (common-lisp:error ":format is required"))
                        (repository :initarg :|repository| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor %delete-package-request-repository :initform
                         (common-lisp:error ":repository is required"))
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-package-request-domain-owner :initform
                         common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %delete-package-request-domain :initform
                         (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-package-request 'make-delete-package-request))
 (common-lisp:defun make-delete-package-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key package namespace format repository
                     domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance 'delete-package-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-package-result common-lisp:nil
                       ((deleted-package :initarg :|deletedPackage| :type
                         (common-lisp:or package-summary common-lisp:null)
                         :accessor %delete-package-result-deleted-package
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-package-result 'make-delete-package-result))
 (common-lisp:defun make-delete-package-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deleted-package)
   (common-lisp:apply #'common-lisp:make-instance 'delete-package-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted-package))
      (common-lisp:list
       (common-lisp:cons "deletedPackage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-package-versions-request common-lisp:nil
                       ((expected-status :initarg :|expectedStatus| :type
                         (common-lisp:or package-version-status
                                         common-lisp:null)
                         :accessor
                         %delete-package-versions-request-expected-status
                         :initform common-lisp:nil)
                        (versions :initarg :|versions| :type
                         (common-lisp:or package-version-list common-lisp:null)
                         :accessor %delete-package-versions-request-versions
                         :initform (common-lisp:error ":versions is required"))
                        (package :initarg :|package| :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor %delete-package-versions-request-package
                         :initform (common-lisp:error ":package is required"))
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or package-namespace common-lisp:null)
                         :accessor %delete-package-versions-request-namespace
                         :initform common-lisp:nil)
                        (format :initarg :|format| :type
                         (common-lisp:or package-format common-lisp:null)
                         :accessor %delete-package-versions-request-format
                         :initform (common-lisp:error ":format is required"))
                        (repository :initarg :|repository| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor %delete-package-versions-request-repository
                         :initform
                         (common-lisp:error ":repository is required"))
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-package-versions-request-domain-owner
                         :initform common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %delete-package-versions-request-domain
                         :initform (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-package-versions-request
                    'make-delete-package-versions-request))
 (common-lisp:defun make-delete-package-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-status versions package
                     namespace format repository domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-package-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected-status))
      (common-lisp:list
       (common-lisp:cons "expectedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-package-versions-result common-lisp:nil
                       ((failed-versions :initarg :|failedVersions| :type
                         (common-lisp:or package-version-error-map
                                         common-lisp:null)
                         :accessor
                         %delete-package-versions-result-failed-versions
                         :initform common-lisp:nil)
                        (successful-versions :initarg :|successfulVersions|
                         :type
                         (common-lisp:or successful-package-version-info-map
                                         common-lisp:null)
                         :accessor
                         %delete-package-versions-result-successful-versions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-package-versions-result
                    'make-delete-package-versions-result))
 (common-lisp:defun make-delete-package-versions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-versions successful-versions)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-package-versions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-versions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-versions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful-versions))
      (common-lisp:list
       (common-lisp:cons "successfulVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-versions))
      (common-lisp:list
       (common-lisp:cons "failedVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-versions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-repository-permissions-policy-request
                       common-lisp:nil
                       ((policy-revision :initarg :|policyRevision| :type
                         (common-lisp:or policy-revision common-lisp:null)
                         :accessor
                         %delete-repository-permissions-policy-request-policy-revision
                         :initform common-lisp:nil)
                        (repository :initarg :|repository| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         %delete-repository-permissions-policy-request-repository
                         :initform
                         (common-lisp:error ":repository is required"))
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-repository-permissions-policy-request-domain-owner
                         :initform common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %delete-repository-permissions-policy-request-domain
                         :initform (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-repository-permissions-policy-request
                    'make-delete-repository-permissions-policy-request))
 (common-lisp:defun make-delete-repository-permissions-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-revision repository domain-owner
                     domain)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-repository-permissions-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-permissions-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-permissions-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-permissions-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-repository-permissions-policy-result
                       common-lisp:nil
                       ((policy :initarg :|policy| :type
                         (common-lisp:or resource-policy common-lisp:null)
                         :accessor
                         %delete-repository-permissions-policy-result-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-repository-permissions-policy-result
                    'make-delete-repository-permissions-policy-result))
 (common-lisp:defun make-delete-repository-permissions-policy-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-repository-permissions-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-permissions-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-permissions-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-permissions-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-repository-request common-lisp:nil
                       ((repository :initarg :|repository| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor %delete-repository-request-repository
                         :initform
                         (common-lisp:error ":repository is required"))
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %delete-repository-request-domain-owner :initform
                         common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %delete-repository-request-domain :initform
                         (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-repository-request
                    'make-delete-repository-request))
 (common-lisp:defun make-delete-repository-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key repository domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance 'delete-repository-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-repository-result common-lisp:nil
                       ((repository :initarg :|repository| :type
                         (common-lisp:or repository-description
                                         common-lisp:null)
                         :accessor %delete-repository-result-repository
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-repository-result 'make-delete-repository-result))
 (common-lisp:defun make-delete-repository-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key repository)
   (common-lisp:apply #'common-lisp:make-instance 'delete-repository-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-repository-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-domain-request common-lisp:nil
                       ((domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %describe-domain-request-domain-owner :initform
                         common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %describe-domain-request-domain :initform
                         (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-domain-request 'make-describe-domain-request))
 (common-lisp:defun make-describe-domain-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance 'describe-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-domain-result common-lisp:nil
                       ((domain :initarg :|domain| :type
                         (common-lisp:or domain-description common-lisp:null)
                         :accessor %describe-domain-result-domain :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-domain-result 'make-describe-domain-result))
 (common-lisp:defun make-describe-domain-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain)
   (common-lisp:apply #'common-lisp:make-instance 'describe-domain-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-package-request common-lisp:nil
                       ((package :initarg :|package| :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor %describe-package-request-package :initform
                         (common-lisp:error ":package is required"))
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or package-namespace common-lisp:null)
                         :accessor %describe-package-request-namespace
                         :initform common-lisp:nil)
                        (format :initarg :|format| :type
                         (common-lisp:or package-format common-lisp:null)
                         :accessor %describe-package-request-format :initform
                         (common-lisp:error ":format is required"))
                        (repository :initarg :|repository| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor %describe-package-request-repository
                         :initform
                         (common-lisp:error ":repository is required"))
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %describe-package-request-domain-owner :initform
                         common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %describe-package-request-domain :initform
                         (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-package-request 'make-describe-package-request))
 (common-lisp:defun make-describe-package-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key package namespace format repository
                     domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance 'describe-package-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-package-result common-lisp:nil
                       ((package :initarg :|package| :type
                         (common-lisp:or package-description common-lisp:null)
                         :accessor %describe-package-result-package :initform
                         (common-lisp:error ":package is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-package-result 'make-describe-package-result))
 (common-lisp:defun make-describe-package-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key package)
   (common-lisp:apply #'common-lisp:make-instance 'describe-package-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package))
      (common-lisp:list
       (common-lisp:cons "package"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-package-version-request common-lisp:nil
                       ((package-version :initarg :|packageVersion| :type
                         (common-lisp:or package-version common-lisp:null)
                         :accessor
                         %describe-package-version-request-package-version
                         :initform
                         (common-lisp:error ":packageversion is required"))
                        (package :initarg :|package| :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor %describe-package-version-request-package
                         :initform (common-lisp:error ":package is required"))
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or package-namespace common-lisp:null)
                         :accessor %describe-package-version-request-namespace
                         :initform common-lisp:nil)
                        (format :initarg :|format| :type
                         (common-lisp:or package-format common-lisp:null)
                         :accessor %describe-package-version-request-format
                         :initform (common-lisp:error ":format is required"))
                        (repository :initarg :|repository| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor %describe-package-version-request-repository
                         :initform
                         (common-lisp:error ":repository is required"))
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %describe-package-version-request-domain-owner
                         :initform common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %describe-package-version-request-domain
                         :initform (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-package-version-request
                    'make-describe-package-version-request))
 (common-lisp:defun make-describe-package-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key package-version package namespace format
                     repository domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-package-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-package-version-result common-lisp:nil
                       ((package-version :initarg :|packageVersion| :type
                         (common-lisp:or package-version-description
                                         common-lisp:null)
                         :accessor
                         %describe-package-version-result-package-version
                         :initform
                         (common-lisp:error ":packageversion is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-package-version-result
                    'make-describe-package-version-result))
 (common-lisp:defun make-describe-package-version-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key package-version)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-package-version-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version))
      (common-lisp:list
       (common-lisp:cons "packageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-package-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-repository-request common-lisp:nil
                       ((repository :initarg :|repository| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor %describe-repository-request-repository
                         :initform
                         (common-lisp:error ":repository is required"))
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %describe-repository-request-domain-owner :initform
                         common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %describe-repository-request-domain
                         :initform (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-repository-request
                    'make-describe-repository-request))
 (common-lisp:defun make-describe-repository-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key repository domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance 'describe-repository-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-repository-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-repository-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-repository-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-repository-result common-lisp:nil
                       ((repository :initarg :|repository| :type
                         (common-lisp:or repository-description
                                         common-lisp:null)
                         :accessor %describe-repository-result-repository
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-repository-result
                    'make-describe-repository-result))
 (common-lisp:defun make-describe-repository-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key repository)
   (common-lisp:apply #'common-lisp:make-instance 'describe-repository-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-repository-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-repository-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-repository-result))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disassociate-external-connection-request common-lisp:nil
                       ((external-connection :initarg :|externalConnection|
                         :type
                         (common-lisp:or external-connection-name
                                         common-lisp:null)
                         :accessor
                         %disassociate-external-connection-request-external-connection
                         :initform
                         (common-lisp:error ":externalconnection is required"))
                        (repository :initarg :|repository| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         %disassociate-external-connection-request-repository
                         :initform
                         (common-lisp:error ":repository is required"))
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %disassociate-external-connection-request-domain-owner
                         :initform common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %disassociate-external-connection-request-domain
                         :initform (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-external-connection-request
                    'make-disassociate-external-connection-request))
 (common-lisp:defun make-disassociate-external-connection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key external-connection repository
                     domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-external-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-external-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-external-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-external-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-external-connection-result common-lisp:nil
                       ((repository :initarg :|repository| :type
                         (common-lisp:or repository-description
                                         common-lisp:null)
                         :accessor
                         %disassociate-external-connection-result-repository
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'disassociate-external-connection-result
                    'make-disassociate-external-connection-result))
 (common-lisp:defun make-disassociate-external-connection-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key repository)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-external-connection-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-external-connection-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-external-connection-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-external-connection-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dispose-package-versions-request common-lisp:nil
                       ((expected-status :initarg :|expectedStatus| :type
                         (common-lisp:or package-version-status
                                         common-lisp:null)
                         :accessor
                         %dispose-package-versions-request-expected-status
                         :initform common-lisp:nil)
                        (version-revisions :initarg :|versionRevisions| :type
                         (common-lisp:or package-version-revision-map
                                         common-lisp:null)
                         :accessor
                         %dispose-package-versions-request-version-revisions
                         :initform common-lisp:nil)
                        (versions :initarg :|versions| :type
                         (common-lisp:or package-version-list common-lisp:null)
                         :accessor %dispose-package-versions-request-versions
                         :initform (common-lisp:error ":versions is required"))
                        (package :initarg :|package| :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor %dispose-package-versions-request-package
                         :initform (common-lisp:error ":package is required"))
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or package-namespace common-lisp:null)
                         :accessor %dispose-package-versions-request-namespace
                         :initform common-lisp:nil)
                        (format :initarg :|format| :type
                         (common-lisp:or package-format common-lisp:null)
                         :accessor %dispose-package-versions-request-format
                         :initform (common-lisp:error ":format is required"))
                        (repository :initarg :|repository| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor %dispose-package-versions-request-repository
                         :initform
                         (common-lisp:error ":repository is required"))
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %dispose-package-versions-request-domain-owner
                         :initform common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %dispose-package-versions-request-domain
                         :initform (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'dispose-package-versions-request
                    'make-dispose-package-versions-request))
 (common-lisp:defun make-dispose-package-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expected-status version-revisions
                     versions package namespace format repository domain-owner
                     domain)
   (common-lisp:apply #'common-lisp:make-instance
                      'dispose-package-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dispose-package-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dispose-package-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-revisions))
      (common-lisp:list
       (common-lisp:cons "versionRevisions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected-status))
      (common-lisp:list
       (common-lisp:cons "expectedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dispose-package-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dispose-package-versions-result common-lisp:nil
                       ((failed-versions :initarg :|failedVersions| :type
                         (common-lisp:or package-version-error-map
                                         common-lisp:null)
                         :accessor
                         %dispose-package-versions-result-failed-versions
                         :initform common-lisp:nil)
                        (successful-versions :initarg :|successfulVersions|
                         :type
                         (common-lisp:or successful-package-version-info-map
                                         common-lisp:null)
                         :accessor
                         %dispose-package-versions-result-successful-versions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dispose-package-versions-result
                    'make-dispose-package-versions-result))
 (common-lisp:defun make-dispose-package-versions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-versions successful-versions)
   (common-lisp:apply #'common-lisp:make-instance
                      'dispose-package-versions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dispose-package-versions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dispose-package-versions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful-versions))
      (common-lisp:list
       (common-lisp:cons "successfulVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-versions))
      (common-lisp:list
       (common-lisp:cons "failedVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dispose-package-versions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass domain-description common-lisp:nil
                       ((s3bucket-arn :initarg :|s3BucketArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %domain-description-s3bucket-arn :initform
                         common-lisp:nil)
                        (asset-size-bytes :initarg :|assetSizeBytes| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %domain-description-asset-size-bytes :initform
                         common-lisp:nil)
                        (repository-count :initarg :|repositoryCount| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %domain-description-repository-count :initform
                         common-lisp:nil)
                        (encryption-key :initarg :|encryptionKey| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %domain-description-encryption-key :initform
                         common-lisp:nil)
                        (created-time :initarg :|createdTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %domain-description-created-time :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or domain-status common-lisp:null)
                         :accessor %domain-description-status :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %domain-description-arn :initform common-lisp:nil)
                        (owner :initarg :|owner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %domain-description-owner :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %domain-description-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'domain-description 'make-domain-description))
 (common-lisp:defun make-domain-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3bucket-arn asset-size-bytes
                     repository-count encryption-key created-time status arn
                     owner name)
   (common-lisp:apply #'common-lisp:make-instance 'domain-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-count))
      (common-lisp:list
       (common-lisp:cons "repositoryCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-size-bytes))
      (common-lisp:list
       (common-lisp:cons "assetSizeBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-arn))
      (common-lisp:list
       (common-lisp:cons "s3BucketArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass domain-entry-point common-lisp:nil
                       ((external-connection-name :initarg
                         :|externalConnectionName| :type
                         (common-lisp:or external-connection-name
                                         common-lisp:null)
                         :accessor %domain-entry-point-external-connection-name
                         :initform common-lisp:nil)
                        (repository-name :initarg :|repositoryName| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor %domain-entry-point-repository-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'domain-entry-point 'make-domain-entry-point))
 (common-lisp:defun make-domain-entry-point
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key external-connection-name repository-name)
   (common-lisp:apply #'common-lisp:make-instance 'domain-entry-point
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-entry-point))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-entry-point))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-connection-name))
      (common-lisp:list
       (common-lisp:cons "externalConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-entry-point))
   common-lisp:nil))
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:deftype domain-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass domain-summary common-lisp:nil
                       ((encryption-key :initarg :|encryptionKey| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %domain-summary-encryption-key :initform
                         common-lisp:nil)
                        (created-time :initarg :|createdTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %domain-summary-created-time :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or domain-status common-lisp:null)
                         :accessor %domain-summary-status :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %domain-summary-arn :initform common-lisp:nil)
                        (owner :initarg :|owner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %domain-summary-owner :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %domain-summary-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'domain-summary 'make-domain-summary))
 (common-lisp:defun make-domain-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key encryption-key created-time status arn
                     owner name)
   (common-lisp:apply #'common-lisp:make-instance 'domain-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner))
      (common-lisp:list
       (common-lisp:cons "owner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key))
      (common-lisp:list
       (common-lisp:cons "encryptionKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-summary-list ()
   '(trivial-types:proper-list domain-summary))
 (common-lisp:defun |make-domain-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype external-connection-name () 'common-lisp:string)
(common-lisp:deftype external-connection-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-authorization-token-request common-lisp:nil
                       ((duration-seconds :initarg :|durationSeconds| :type
                         (common-lisp:or authorization-token-duration-seconds
                                         common-lisp:null)
                         :accessor
                         %get-authorization-token-request-duration-seconds
                         :initform common-lisp:nil)
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-authorization-token-request-domain-owner
                         :initform common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %get-authorization-token-request-domain
                         :initform (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'get-authorization-token-request
                    'make-get-authorization-token-request))
 (common-lisp:defun make-get-authorization-token-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key duration-seconds domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-authorization-token-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-authorization-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-authorization-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-authorization-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-authorization-token-result common-lisp:nil
                       ((expiration :initarg :|expiration| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-authorization-token-result-expiration :initform
                         common-lisp:nil)
                        (authorization-token :initarg :|authorizationToken|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %get-authorization-token-result-authorization-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-authorization-token-result
                    'make-get-authorization-token-result))
 (common-lisp:defun make-get-authorization-token-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expiration authorization-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-authorization-token-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-authorization-token-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-authorization-token-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorization-token))
      (common-lisp:list
       (common-lisp:cons "authorizationToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-authorization-token-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-domain-permissions-policy-request common-lisp:nil
                       ((domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-domain-permissions-policy-request-domain-owner
                         :initform common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %get-domain-permissions-policy-request-domain
                         :initform (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'get-domain-permissions-policy-request
                    'make-get-domain-permissions-policy-request))
 (common-lisp:defun make-get-domain-permissions-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-domain-permissions-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-permissions-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-permissions-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-permissions-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-domain-permissions-policy-result common-lisp:nil
                       ((policy :initarg :|policy| :type
                         (common-lisp:or resource-policy common-lisp:null)
                         :accessor %get-domain-permissions-policy-result-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-domain-permissions-policy-result
                    'make-get-domain-permissions-policy-result))
 (common-lisp:defun make-get-domain-permissions-policy-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-domain-permissions-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-permissions-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-permissions-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-domain-permissions-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-package-version-asset-request common-lisp:nil
                       ((package-version-revision :initarg
                         :|packageVersionRevision| :type
                         (common-lisp:or package-version-revision
                                         common-lisp:null)
                         :accessor
                         %get-package-version-asset-request-package-version-revision
                         :initform common-lisp:nil)
                        (asset :initarg :|asset| :type
                         (common-lisp:or asset-name common-lisp:null) :accessor
                         %get-package-version-asset-request-asset :initform
                         (common-lisp:error ":asset is required"))
                        (package-version :initarg :|packageVersion| :type
                         (common-lisp:or package-version common-lisp:null)
                         :accessor
                         %get-package-version-asset-request-package-version
                         :initform
                         (common-lisp:error ":packageversion is required"))
                        (package :initarg :|package| :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor %get-package-version-asset-request-package
                         :initform (common-lisp:error ":package is required"))
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or package-namespace common-lisp:null)
                         :accessor %get-package-version-asset-request-namespace
                         :initform common-lisp:nil)
                        (format :initarg :|format| :type
                         (common-lisp:or package-format common-lisp:null)
                         :accessor %get-package-version-asset-request-format
                         :initform (common-lisp:error ":format is required"))
                        (repository :initarg :|repository| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         %get-package-version-asset-request-repository
                         :initform
                         (common-lisp:error ":repository is required"))
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-package-version-asset-request-domain-owner
                         :initform common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %get-package-version-asset-request-domain
                         :initform (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'get-package-version-asset-request
                    'make-get-package-version-asset-request))
 (common-lisp:defun make-get-package-version-asset-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key package-version-revision asset
                     package-version package namespace format repository
                     domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-package-version-asset-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-asset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-asset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-asset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-package-version-asset-result common-lisp:nil
                       ((package-version-revision :initarg
                         :|packageVersionRevision| :type
                         (common-lisp:or package-version-revision
                                         common-lisp:null)
                         :accessor
                         %get-package-version-asset-result-package-version-revision
                         :initform common-lisp:nil)
                        (package-version :initarg :|packageVersion| :type
                         (common-lisp:or package-version common-lisp:null)
                         :accessor
                         %get-package-version-asset-result-package-version
                         :initform common-lisp:nil)
                        (asset-name :initarg :|assetName| :type
                         (common-lisp:or asset-name common-lisp:null) :accessor
                         %get-package-version-asset-result-asset-name :initform
                         common-lisp:nil)
                        (asset :initarg :|asset| :type
                         (common-lisp:or asset common-lisp:null) :accessor
                         %get-package-version-asset-result-asset :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-package-version-asset-result
                    'make-get-package-version-asset-result))
 (common-lisp:defun make-get-package-version-asset-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key package-version-revision package-version
                     asset-name asset)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-package-version-asset-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-asset-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-name))
      (common-lisp:cons "X-AssetName" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version))
      (common-lisp:cons "X-PackageVersion" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'package-version-revision))
      (common-lisp:cons "X-PackageVersionRevision"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-asset-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset))
      (common-lisp:list
       (common-lisp:cons "asset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-asset-result))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'asset))))
(common-lisp:progn
 (common-lisp:defclass get-package-version-readme-request common-lisp:nil
                       ((package-version :initarg :|packageVersion| :type
                         (common-lisp:or package-version common-lisp:null)
                         :accessor
                         %get-package-version-readme-request-package-version
                         :initform
                         (common-lisp:error ":packageversion is required"))
                        (package :initarg :|package| :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor %get-package-version-readme-request-package
                         :initform (common-lisp:error ":package is required"))
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or package-namespace common-lisp:null)
                         :accessor
                         %get-package-version-readme-request-namespace
                         :initform common-lisp:nil)
                        (format :initarg :|format| :type
                         (common-lisp:or package-format common-lisp:null)
                         :accessor %get-package-version-readme-request-format
                         :initform (common-lisp:error ":format is required"))
                        (repository :initarg :|repository| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         %get-package-version-readme-request-repository
                         :initform
                         (common-lisp:error ":repository is required"))
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-package-version-readme-request-domain-owner
                         :initform common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %get-package-version-readme-request-domain
                         :initform (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'get-package-version-readme-request
                    'make-get-package-version-readme-request))
 (common-lisp:defun make-get-package-version-readme-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key package-version package namespace format
                     repository domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-package-version-readme-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-readme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-readme-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-readme-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-package-version-readme-result common-lisp:nil
                       ((readme :initarg :|readme| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-package-version-readme-result-readme :initform
                         common-lisp:nil)
                        (version-revision :initarg :|versionRevision| :type
                         (common-lisp:or package-version-revision
                                         common-lisp:null)
                         :accessor
                         %get-package-version-readme-result-version-revision
                         :initform common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or package-version common-lisp:null)
                         :accessor %get-package-version-readme-result-version
                         :initform common-lisp:nil)
                        (package :initarg :|package| :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor %get-package-version-readme-result-package
                         :initform common-lisp:nil)
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or package-namespace common-lisp:null)
                         :accessor %get-package-version-readme-result-namespace
                         :initform common-lisp:nil)
                        (format :initarg :|format| :type
                         (common-lisp:or package-format common-lisp:null)
                         :accessor %get-package-version-readme-result-format
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-package-version-readme-result
                    'make-get-package-version-readme-result))
 (common-lisp:defun make-get-package-version-readme-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key readme version-revision version package
                     namespace format)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-package-version-readme-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-readme-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-readme-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package))
      (common-lisp:list
       (common-lisp:cons "package"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-revision))
      (common-lisp:list
       (common-lisp:cons "versionRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'readme))
      (common-lisp:list
       (common-lisp:cons "readme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-readme-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-repository-endpoint-request common-lisp:nil
                       ((format :initarg :|format| :type
                         (common-lisp:or package-format common-lisp:null)
                         :accessor %get-repository-endpoint-request-format
                         :initform (common-lisp:error ":format is required"))
                        (repository :initarg :|repository| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor %get-repository-endpoint-request-repository
                         :initform
                         (common-lisp:error ":repository is required"))
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-repository-endpoint-request-domain-owner
                         :initform common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %get-repository-endpoint-request-domain
                         :initform (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'get-repository-endpoint-request
                    'make-get-repository-endpoint-request))
 (common-lisp:defun make-get-repository-endpoint-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key format repository domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-repository-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-repository-endpoint-result common-lisp:nil
                       ((repository-endpoint :initarg :|repositoryEndpoint|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %get-repository-endpoint-result-repository-endpoint
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-repository-endpoint-result
                    'make-get-repository-endpoint-result))
 (common-lisp:defun make-get-repository-endpoint-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key repository-endpoint)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-repository-endpoint-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-endpoint-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-endpoint-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-endpoint))
      (common-lisp:list
       (common-lisp:cons "repositoryEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-endpoint-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-repository-permissions-policy-request
                       common-lisp:nil
                       ((repository :initarg :|repository| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         %get-repository-permissions-policy-request-repository
                         :initform
                         (common-lisp:error ":repository is required"))
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %get-repository-permissions-policy-request-domain-owner
                         :initform common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %get-repository-permissions-policy-request-domain
                         :initform (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'get-repository-permissions-policy-request
                    'make-get-repository-permissions-policy-request))
 (common-lisp:defun make-get-repository-permissions-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key repository domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-repository-permissions-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-permissions-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-permissions-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-permissions-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-repository-permissions-policy-result common-lisp:nil
                       ((policy :initarg :|policy| :type
                         (common-lisp:or resource-policy common-lisp:null)
                         :accessor
                         %get-repository-permissions-policy-result-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-repository-permissions-policy-result
                    'make-get-repository-permissions-policy-result))
 (common-lisp:defun make-get-repository-permissions-policy-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-repository-permissions-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-permissions-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-permissions-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-repository-permissions-policy-result))
   common-lisp:nil))
(common-lisp:deftype hash-algorithm () 'common-lisp:string)
(common-lisp:deftype hash-value () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (codeartifact-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass license-info common-lisp:nil
                       ((url :initarg :|url| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-info-url :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %license-info-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'license-info 'make-license-info))
 (common-lisp:defun make-license-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key url name)
   (common-lisp:apply #'common-lisp:make-instance 'license-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input license-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input license-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input license-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype license-info-list ()
   '(trivial-types:proper-list license-info))
 (common-lisp:defun |make-license-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list license-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype list-domains-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-domains-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-domains-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or list-domains-max-results
                                         common-lisp:null)
                         :accessor %list-domains-request-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-domains-request 'make-list-domains-request))
 (common-lisp:defun make-list-domains-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-domains-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-domains-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-domains-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-domains-result common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-domains-result-next-token :initform
                         common-lisp:nil)
                        (domains :initarg :|domains| :type
                         (common-lisp:or domain-summary-list common-lisp:null)
                         :accessor %list-domains-result-domains :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-domains-result 'make-list-domains-result))
 (common-lisp:defun make-list-domains-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token domains)
   (common-lisp:apply #'common-lisp:make-instance 'list-domains-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-domains-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-domains-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domains))
      (common-lisp:list
       (common-lisp:cons "domains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-domains-result))
   common-lisp:nil))
(common-lisp:deftype list-package-version-assets-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-package-version-assets-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-package-version-assets-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-package-version-assets-max-results
                          common-lisp:null)
                         :accessor
                         %list-package-version-assets-request-max-results
                         :initform common-lisp:nil)
                        (package-version :initarg :|packageVersion| :type
                         (common-lisp:or package-version common-lisp:null)
                         :accessor
                         %list-package-version-assets-request-package-version
                         :initform
                         (common-lisp:error ":packageversion is required"))
                        (package :initarg :|package| :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor %list-package-version-assets-request-package
                         :initform (common-lisp:error ":package is required"))
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or package-namespace common-lisp:null)
                         :accessor
                         %list-package-version-assets-request-namespace
                         :initform common-lisp:nil)
                        (format :initarg :|format| :type
                         (common-lisp:or package-format common-lisp:null)
                         :accessor %list-package-version-assets-request-format
                         :initform (common-lisp:error ":format is required"))
                        (repository :initarg :|repository| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         %list-package-version-assets-request-repository
                         :initform
                         (common-lisp:error ":repository is required"))
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %list-package-version-assets-request-domain-owner
                         :initform common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %list-package-version-assets-request-domain
                         :initform (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'list-package-version-assets-request
                    'make-list-package-version-assets-request))
 (common-lisp:defun make-list-package-version-assets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results package-version
                     package namespace format repository domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-package-version-assets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-package-version-assets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-package-version-assets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-package-version-assets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-package-version-assets-result common-lisp:nil
                       ((assets :initarg :|assets| :type
                         (common-lisp:or asset-summary-list common-lisp:null)
                         :accessor %list-package-version-assets-result-assets
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-package-version-assets-result-next-token
                         :initform common-lisp:nil)
                        (version-revision :initarg :|versionRevision| :type
                         (common-lisp:or package-version-revision
                                         common-lisp:null)
                         :accessor
                         %list-package-version-assets-result-version-revision
                         :initform common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or package-version common-lisp:null)
                         :accessor %list-package-version-assets-result-version
                         :initform common-lisp:nil)
                        (package :initarg :|package| :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor %list-package-version-assets-result-package
                         :initform common-lisp:nil)
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or package-namespace common-lisp:null)
                         :accessor
                         %list-package-version-assets-result-namespace
                         :initform common-lisp:nil)
                        (format :initarg :|format| :type
                         (common-lisp:or package-format common-lisp:null)
                         :accessor %list-package-version-assets-result-format
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-package-version-assets-result
                    'make-list-package-version-assets-result))
 (common-lisp:defun make-list-package-version-assets-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key assets next-token version-revision
                     version package namespace format)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-package-version-assets-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-package-version-assets-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-package-version-assets-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package))
      (common-lisp:list
       (common-lisp:cons "package"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-revision))
      (common-lisp:list
       (common-lisp:cons "versionRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assets))
      (common-lisp:list
       (common-lisp:cons "assets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-package-version-assets-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-package-version-dependencies-request
                       common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-package-version-dependencies-request-next-token
                         :initform common-lisp:nil)
                        (package-version :initarg :|packageVersion| :type
                         (common-lisp:or package-version common-lisp:null)
                         :accessor
                         %list-package-version-dependencies-request-package-version
                         :initform
                         (common-lisp:error ":packageversion is required"))
                        (package :initarg :|package| :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor
                         %list-package-version-dependencies-request-package
                         :initform (common-lisp:error ":package is required"))
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or package-namespace common-lisp:null)
                         :accessor
                         %list-package-version-dependencies-request-namespace
                         :initform common-lisp:nil)
                        (format :initarg :|format| :type
                         (common-lisp:or package-format common-lisp:null)
                         :accessor
                         %list-package-version-dependencies-request-format
                         :initform (common-lisp:error ":format is required"))
                        (repository :initarg :|repository| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         %list-package-version-dependencies-request-repository
                         :initform
                         (common-lisp:error ":repository is required"))
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %list-package-version-dependencies-request-domain-owner
                         :initform common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %list-package-version-dependencies-request-domain
                         :initform (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'list-package-version-dependencies-request
                    'make-list-package-version-dependencies-request))
 (common-lisp:defun make-list-package-version-dependencies-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token package-version package
                     namespace format repository domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-package-version-dependencies-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-package-version-dependencies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-package-version-dependencies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-package-version-dependencies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-package-version-dependencies-result common-lisp:nil
                       ((dependencies :initarg :|dependencies| :type
                         (common-lisp:or package-dependency-list
                                         common-lisp:null)
                         :accessor
                         %list-package-version-dependencies-result-dependencies
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-package-version-dependencies-result-next-token
                         :initform common-lisp:nil)
                        (version-revision :initarg :|versionRevision| :type
                         (common-lisp:or package-version-revision
                                         common-lisp:null)
                         :accessor
                         %list-package-version-dependencies-result-version-revision
                         :initform common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or package-version common-lisp:null)
                         :accessor
                         %list-package-version-dependencies-result-version
                         :initform common-lisp:nil)
                        (package :initarg :|package| :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor
                         %list-package-version-dependencies-result-package
                         :initform common-lisp:nil)
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or package-namespace common-lisp:null)
                         :accessor
                         %list-package-version-dependencies-result-namespace
                         :initform common-lisp:nil)
                        (format :initarg :|format| :type
                         (common-lisp:or package-format common-lisp:null)
                         :accessor
                         %list-package-version-dependencies-result-format
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-package-version-dependencies-result
                    'make-list-package-version-dependencies-result))
 (common-lisp:defun make-list-package-version-dependencies-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dependencies next-token version-revision
                     version package namespace format)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-package-version-dependencies-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-package-version-dependencies-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-package-version-dependencies-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package))
      (common-lisp:list
       (common-lisp:cons "package"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-revision))
      (common-lisp:list
       (common-lisp:cons "versionRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dependencies))
      (common-lisp:list
       (common-lisp:cons "dependencies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-package-version-dependencies-result))
   common-lisp:nil))
(common-lisp:deftype list-package-versions-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-package-versions-request common-lisp:nil
                       ((origin-type :initarg :|originType| :type
                         (common-lisp:or package-version-origin-type
                                         common-lisp:null)
                         :accessor %list-package-versions-request-origin-type
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-package-versions-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or list-package-versions-max-results
                                         common-lisp:null)
                         :accessor %list-package-versions-request-max-results
                         :initform common-lisp:nil)
                        (sort-by :initarg :|sortBy| :type
                         (common-lisp:or package-version-sort-type
                                         common-lisp:null)
                         :accessor %list-package-versions-request-sort-by
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or package-version-status
                                         common-lisp:null)
                         :accessor %list-package-versions-request-status
                         :initform common-lisp:nil)
                        (package :initarg :|package| :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor %list-package-versions-request-package
                         :initform (common-lisp:error ":package is required"))
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or package-namespace common-lisp:null)
                         :accessor %list-package-versions-request-namespace
                         :initform common-lisp:nil)
                        (format :initarg :|format| :type
                         (common-lisp:or package-format common-lisp:null)
                         :accessor %list-package-versions-request-format
                         :initform (common-lisp:error ":format is required"))
                        (repository :initarg :|repository| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor %list-package-versions-request-repository
                         :initform
                         (common-lisp:error ":repository is required"))
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %list-package-versions-request-domain-owner :initform
                         common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %list-package-versions-request-domain
                         :initform (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'list-package-versions-request
                    'make-list-package-versions-request))
 (common-lisp:defun make-list-package-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin-type next-token max-results
                     sort-by status package namespace format repository
                     domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-package-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-package-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-package-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-package-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-package-versions-result common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-package-versions-result-next-token
                         :initform common-lisp:nil)
                        (versions :initarg :|versions| :type
                         (common-lisp:or package-version-summary-list
                                         common-lisp:null)
                         :accessor %list-package-versions-result-versions
                         :initform common-lisp:nil)
                        (package :initarg :|package| :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor %list-package-versions-result-package
                         :initform common-lisp:nil)
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or package-namespace common-lisp:null)
                         :accessor %list-package-versions-result-namespace
                         :initform common-lisp:nil)
                        (format :initarg :|format| :type
                         (common-lisp:or package-format common-lisp:null)
                         :accessor %list-package-versions-result-format
                         :initform common-lisp:nil)
                        (default-display-version :initarg
                         :|defaultDisplayVersion| :type
                         (common-lisp:or package-version common-lisp:null)
                         :accessor
                         %list-package-versions-result-default-display-version
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-package-versions-result
                    'make-list-package-versions-result))
 (common-lisp:defun make-list-package-versions-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token versions package namespace
                     format default-display-version)
   (common-lisp:apply #'common-lisp:make-instance 'list-package-versions-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-package-versions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-package-versions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-display-version))
      (common-lisp:list
       (common-lisp:cons "defaultDisplayVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package))
      (common-lisp:list
       (common-lisp:cons "package"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-package-versions-result))
   common-lisp:nil))
(common-lisp:deftype list-packages-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-packages-request common-lisp:nil
                       ((upstream :initarg :|upstream| :type
                         (common-lisp:or allow-upstream common-lisp:null)
                         :accessor %list-packages-request-upstream :initform
                         common-lisp:nil)
                        (publish :initarg :|publish| :type
                         (common-lisp:or allow-publish common-lisp:null)
                         :accessor %list-packages-request-publish :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-packages-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or list-packages-max-results
                                         common-lisp:null)
                         :accessor %list-packages-request-max-results :initform
                         common-lisp:nil)
                        (package-prefix :initarg :|packagePrefix| :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor %list-packages-request-package-prefix
                         :initform common-lisp:nil)
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or package-namespace common-lisp:null)
                         :accessor %list-packages-request-namespace :initform
                         common-lisp:nil)
                        (format :initarg :|format| :type
                         (common-lisp:or package-format common-lisp:null)
                         :accessor %list-packages-request-format :initform
                         common-lisp:nil)
                        (repository :initarg :|repository| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor %list-packages-request-repository :initform
                         (common-lisp:error ":repository is required"))
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %list-packages-request-domain-owner :initform
                         common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %list-packages-request-domain :initform
                         (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'list-packages-request 'make-list-packages-request))
 (common-lisp:defun make-list-packages-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key upstream publish next-token max-results
                     package-prefix namespace format repository domain-owner
                     domain)
   (common-lisp:apply #'common-lisp:make-instance 'list-packages-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-packages-result common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-packages-result-next-token :initform
                         common-lisp:nil)
                        (packages :initarg :|packages| :type
                         (common-lisp:or package-summary-list common-lisp:null)
                         :accessor %list-packages-result-packages :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-packages-result 'make-list-packages-result))
 (common-lisp:defun make-list-packages-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token packages)
   (common-lisp:apply #'common-lisp:make-instance 'list-packages-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-packages-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-packages-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'packages))
      (common-lisp:list
       (common-lisp:cons "packages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-packages-result))
   common-lisp:nil))
(common-lisp:deftype list-repositories-in-domain-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-repositories-in-domain-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-repositories-in-domain-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or
                          list-repositories-in-domain-max-results
                          common-lisp:null)
                         :accessor
                         %list-repositories-in-domain-request-max-results
                         :initform common-lisp:nil)
                        (repository-prefix :initarg :|repositoryPrefix| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         %list-repositories-in-domain-request-repository-prefix
                         :initform common-lisp:nil)
                        (administrator-account :initarg :|administratorAccount|
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %list-repositories-in-domain-request-administrator-account
                         :initform common-lisp:nil)
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %list-repositories-in-domain-request-domain-owner
                         :initform common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %list-repositories-in-domain-request-domain
                         :initform (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'list-repositories-in-domain-request
                    'make-list-repositories-in-domain-request))
 (common-lisp:defun make-list-repositories-in-domain-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results repository-prefix
                     administrator-account domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-repositories-in-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-in-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-in-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-in-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-repositories-in-domain-result common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-repositories-in-domain-result-next-token
                         :initform common-lisp:nil)
                        (repositories :initarg :|repositories| :type
                         (common-lisp:or repository-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-repositories-in-domain-result-repositories
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-repositories-in-domain-result
                    'make-list-repositories-in-domain-result))
 (common-lisp:defun make-list-repositories-in-domain-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token repositories)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-repositories-in-domain-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-in-domain-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-in-domain-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repositories))
      (common-lisp:list
       (common-lisp:cons "repositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-in-domain-result))
   common-lisp:nil))
(common-lisp:deftype list-repositories-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-repositories-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-repositories-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or list-repositories-max-results
                                         common-lisp:null)
                         :accessor %list-repositories-request-max-results
                         :initform common-lisp:nil)
                        (repository-prefix :initarg :|repositoryPrefix| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor %list-repositories-request-repository-prefix
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-repositories-request
                    'make-list-repositories-request))
 (common-lisp:defun make-list-repositories-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results repository-prefix)
   (common-lisp:apply #'common-lisp:make-instance 'list-repositories-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-repositories-result common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-repositories-result-next-token
                         :initform common-lisp:nil)
                        (repositories :initarg :|repositories| :type
                         (common-lisp:or repository-summary-list
                                         common-lisp:null)
                         :accessor %list-repositories-result-repositories
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-repositories-result 'make-list-repositories-result))
 (common-lisp:defun make-list-repositories-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token repositories)
   (common-lisp:apply #'common-lisp:make-instance 'list-repositories-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repositories))
      (common-lisp:list
       (common-lisp:cons "repositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-repositories-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-result common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-for-resource-result-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-result
                    'make-list-tags-for-resource-result))
 (common-lisp:defun make-list-tags-for-resource-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   common-lisp:nil))
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype long-optional () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass package-dependency common-lisp:nil
                       ((version-requirement :initarg :|versionRequirement|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor %package-dependency-version-requirement
                         :initform common-lisp:nil)
                        (dependency-type :initarg :|dependencyType| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %package-dependency-dependency-type :initform
                         common-lisp:nil)
                        (package :initarg :|package| :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor %package-dependency-package :initform
                         common-lisp:nil)
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or package-namespace common-lisp:null)
                         :accessor %package-dependency-namespace :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'package-dependency 'make-package-dependency))
 (common-lisp:defun make-package-dependency
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version-requirement dependency-type
                     package namespace)
   (common-lisp:apply #'common-lisp:make-instance 'package-dependency
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input package-dependency))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input package-dependency))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package))
      (common-lisp:list
       (common-lisp:cons "package"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dependency-type))
      (common-lisp:list
       (common-lisp:cons "dependencyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-requirement))
      (common-lisp:list
       (common-lisp:cons "versionRequirement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input package-dependency))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype package-dependency-list ()
   '(trivial-types:proper-list package-dependency))
 (common-lisp:defun |make-package-dependency-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list package-dependency))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass package-description common-lisp:nil
                       ((origin-configuration :initarg :|originConfiguration|
                         :type
                         (common-lisp:or package-origin-configuration
                                         common-lisp:null)
                         :accessor %package-description-origin-configuration
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor %package-description-name :initform
                         common-lisp:nil)
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or package-namespace common-lisp:null)
                         :accessor %package-description-namespace :initform
                         common-lisp:nil)
                        (format :initarg :|format| :type
                         (common-lisp:or package-format common-lisp:null)
                         :accessor %package-description-format :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'package-description 'make-package-description))
 (common-lisp:defun make-package-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin-configuration name namespace
                     format)
   (common-lisp:apply #'common-lisp:make-instance 'package-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input package-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input package-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-configuration))
      (common-lisp:list
       (common-lisp:cons "originConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input package-description))
   common-lisp:nil))
(common-lisp:deftype package-format () 'common-lisp:string)
(common-lisp:deftype package-name () 'common-lisp:string)
(common-lisp:deftype package-namespace () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass package-origin-configuration common-lisp:nil
                       ((restrictions :initarg :|restrictions| :type
                         (common-lisp:or package-origin-restrictions
                                         common-lisp:null)
                         :accessor %package-origin-configuration-restrictions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'package-origin-configuration
                    'make-package-origin-configuration))
 (common-lisp:defun make-package-origin-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key restrictions)
   (common-lisp:apply #'common-lisp:make-instance 'package-origin-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-origin-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-origin-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restrictions))
      (common-lisp:list
       (common-lisp:cons "restrictions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-origin-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass package-origin-restrictions common-lisp:nil
                       ((upstream :initarg :|upstream| :type
                         (common-lisp:or allow-upstream common-lisp:null)
                         :accessor %package-origin-restrictions-upstream
                         :initform (common-lisp:error ":upstream is required"))
                        (publish :initarg :|publish| :type
                         (common-lisp:or allow-publish common-lisp:null)
                         :accessor %package-origin-restrictions-publish
                         :initform
                         (common-lisp:error ":publish is required"))))
 (common-lisp:export
  (common-lisp:list 'package-origin-restrictions
                    'make-package-origin-restrictions))
 (common-lisp:defun make-package-origin-restrictions
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key upstream publish)
   (common-lisp:apply #'common-lisp:make-instance 'package-origin-restrictions
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-origin-restrictions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-origin-restrictions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publish))
      (common-lisp:list
       (common-lisp:cons "publish"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upstream))
      (common-lisp:list
       (common-lisp:cons "upstream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-origin-restrictions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass package-summary common-lisp:nil
                       ((origin-configuration :initarg :|originConfiguration|
                         :type
                         (common-lisp:or package-origin-configuration
                                         common-lisp:null)
                         :accessor %package-summary-origin-configuration
                         :initform common-lisp:nil)
                        (package :initarg :|package| :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor %package-summary-package :initform
                         common-lisp:nil)
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or package-namespace common-lisp:null)
                         :accessor %package-summary-namespace :initform
                         common-lisp:nil)
                        (format :initarg :|format| :type
                         (common-lisp:or package-format common-lisp:null)
                         :accessor %package-summary-format :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'package-summary 'make-package-summary))
 (common-lisp:defun make-package-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin-configuration package namespace
                     format)
   (common-lisp:apply #'common-lisp:make-instance 'package-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input package-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input package-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package))
      (common-lisp:list
       (common-lisp:cons "package"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-configuration))
      (common-lisp:list
       (common-lisp:cons "originConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input package-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype package-summary-list ()
   '(trivial-types:proper-list package-summary))
 (common-lisp:defun |make-package-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list package-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype package-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass package-version-description common-lisp:nil
                       ((origin :initarg :|origin| :type
                         (common-lisp:or package-version-origin
                                         common-lisp:null)
                         :accessor %package-version-description-origin
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or package-version-status
                                         common-lisp:null)
                         :accessor %package-version-description-status
                         :initform common-lisp:nil)
                        (revision :initarg :|revision| :type
                         (common-lisp:or package-version-revision
                                         common-lisp:null)
                         :accessor %package-version-description-revision
                         :initform common-lisp:nil)
                        (licenses :initarg :|licenses| :type
                         (common-lisp:or license-info-list common-lisp:null)
                         :accessor %package-version-description-licenses
                         :initform common-lisp:nil)
                        (published-time :initarg :|publishedTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %package-version-description-published-time :initform
                         common-lisp:nil)
                        (source-code-repository :initarg
                         :|sourceCodeRepository| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %package-version-description-source-code-repository
                         :initform common-lisp:nil)
                        (home-page :initarg :|homePage| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %package-version-description-home-page :initform
                         common-lisp:nil)
                        (summary :initarg :|summary| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %package-version-description-summary :initform
                         common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or package-version common-lisp:null)
                         :accessor %package-version-description-version
                         :initform common-lisp:nil)
                        (display-name :initarg :|displayName| :type
                         (common-lisp:or string255 common-lisp:null) :accessor
                         %package-version-description-display-name :initform
                         common-lisp:nil)
                        (package-name :initarg :|packageName| :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor %package-version-description-package-name
                         :initform common-lisp:nil)
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or package-namespace common-lisp:null)
                         :accessor %package-version-description-namespace
                         :initform common-lisp:nil)
                        (format :initarg :|format| :type
                         (common-lisp:or package-format common-lisp:null)
                         :accessor %package-version-description-format
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'package-version-description
                    'make-package-version-description))
 (common-lisp:defun make-package-version-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin status revision licenses
                     published-time source-code-repository home-page summary
                     version display-name package-name namespace format)
   (common-lisp:apply #'common-lisp:make-instance 'package-version-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-version-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-version-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "packageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary))
      (common-lisp:list
       (common-lisp:cons "summary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'home-page))
      (common-lisp:list
       (common-lisp:cons "homePage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-code-repository))
      (common-lisp:list
       (common-lisp:cons "sourceCodeRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'published-time))
      (common-lisp:list
       (common-lisp:cons "publishedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'licenses))
      (common-lisp:list
       (common-lisp:cons "licenses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin))
      (common-lisp:list
       (common-lisp:cons "origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-version-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass package-version-error common-lisp:nil
                       ((error-message :initarg :|errorMessage| :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor %package-version-error-error-message
                         :initform common-lisp:nil)
                        (error-code :initarg :|errorCode| :type
                         (common-lisp:or package-version-error-code
                                         common-lisp:null)
                         :accessor %package-version-error-error-code :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'package-version-error 'make-package-version-error))
 (common-lisp:defun make-package-version-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message error-code)
   (common-lisp:apply #'common-lisp:make-instance 'package-version-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-version-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-version-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-version-error))
   common-lisp:nil))
(common-lisp:deftype package-version-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype package-version-error-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-package-version-error-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype package-version-list ()
   '(trivial-types:proper-list package-version))
 (common-lisp:defun |make-package-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list package-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass package-version-origin common-lisp:nil
                       ((origin-type :initarg :|originType| :type
                         (common-lisp:or package-version-origin-type
                                         common-lisp:null)
                         :accessor %package-version-origin-origin-type
                         :initform common-lisp:nil)
                        (domain-entry-point :initarg :|domainEntryPoint| :type
                         (common-lisp:or domain-entry-point common-lisp:null)
                         :accessor %package-version-origin-domain-entry-point
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'package-version-origin 'make-package-version-origin))
 (common-lisp:defun make-package-version-origin
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin-type domain-entry-point)
   (common-lisp:apply #'common-lisp:make-instance 'package-version-origin
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-version-origin))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-version-origin))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-entry-point))
      (common-lisp:list
       (common-lisp:cons "domainEntryPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-type))
      (common-lisp:list
       (common-lisp:cons "originType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-version-origin))
   common-lisp:nil))
(common-lisp:deftype package-version-origin-type () 'common-lisp:string)
(common-lisp:deftype package-version-revision () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype package-version-revision-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-package-version-revision-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype package-version-sort-type () 'common-lisp:string)
(common-lisp:deftype package-version-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass package-version-summary common-lisp:nil
                       ((origin :initarg :|origin| :type
                         (common-lisp:or package-version-origin
                                         common-lisp:null)
                         :accessor %package-version-summary-origin :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or package-version-status
                                         common-lisp:null)
                         :accessor %package-version-summary-status :initform
                         (common-lisp:error ":status is required"))
                        (revision :initarg :|revision| :type
                         (common-lisp:or package-version-revision
                                         common-lisp:null)
                         :accessor %package-version-summary-revision :initform
                         common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or package-version common-lisp:null)
                         :accessor %package-version-summary-version :initform
                         (common-lisp:error ":version is required"))))
 (common-lisp:export
  (common-lisp:list 'package-version-summary 'make-package-version-summary))
 (common-lisp:defun make-package-version-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin status revision version)
   (common-lisp:apply #'common-lisp:make-instance 'package-version-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin))
      (common-lisp:list
       (common-lisp:cons "origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-version-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype package-version-summary-list ()
   '(trivial-types:proper-list package-version-summary))
 (common-lisp:defun |make-package-version-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list package-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:deftype policy-document () 'common-lisp:string)
(common-lisp:deftype policy-revision () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass publish-package-version-request common-lisp:nil
                       ((unfinished :initarg :|unfinished| :type
                         (common-lisp:or boolean-optional common-lisp:null)
                         :accessor %publish-package-version-request-unfinished
                         :initform common-lisp:nil)
                        (asset-sha256 :initarg :|assetSHA256| :type
                         (common-lisp:or sha256 common-lisp:null) :accessor
                         %publish-package-version-request-asset-sha256
                         :initform
                         (common-lisp:error ":assetsha256 is required"))
                        (asset-name :initarg :|assetName| :type
                         (common-lisp:or asset-name common-lisp:null) :accessor
                         %publish-package-version-request-asset-name :initform
                         (common-lisp:error ":assetname is required"))
                        (asset-content :initarg :|assetContent| :type
                         (common-lisp:or asset common-lisp:null) :accessor
                         %publish-package-version-request-asset-content
                         :initform
                         (common-lisp:error ":assetcontent is required"))
                        (package-version :initarg :|packageVersion| :type
                         (common-lisp:or package-version common-lisp:null)
                         :accessor
                         %publish-package-version-request-package-version
                         :initform
                         (common-lisp:error ":packageversion is required"))
                        (package :initarg :|package| :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor %publish-package-version-request-package
                         :initform (common-lisp:error ":package is required"))
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or package-namespace common-lisp:null)
                         :accessor %publish-package-version-request-namespace
                         :initform common-lisp:nil)
                        (format :initarg :|format| :type
                         (common-lisp:or package-format common-lisp:null)
                         :accessor %publish-package-version-request-format
                         :initform (common-lisp:error ":format is required"))
                        (repository :initarg :|repository| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor %publish-package-version-request-repository
                         :initform
                         (common-lisp:error ":repository is required"))
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %publish-package-version-request-domain-owner
                         :initform common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %publish-package-version-request-domain
                         :initform (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'publish-package-version-request
                    'make-publish-package-version-request))
 (common-lisp:defun make-publish-package-version-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unfinished asset-sha256 asset-name
                     asset-content package-version package namespace format
                     repository domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance
                      'publish-package-version-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          publish-package-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-sha256))
      (common-lisp:cons "x-amz-content-sha256"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          publish-package-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-content))
      (common-lisp:list
       (common-lisp:cons "assetContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          publish-package-version-request))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'asset-content))))
(common-lisp:progn
 (common-lisp:defclass publish-package-version-result common-lisp:nil
                       ((asset :initarg :|asset| :type
                         (common-lisp:or asset-summary common-lisp:null)
                         :accessor %publish-package-version-result-asset
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or package-version-status
                                         common-lisp:null)
                         :accessor %publish-package-version-result-status
                         :initform common-lisp:nil)
                        (version-revision :initarg :|versionRevision| :type
                         (common-lisp:or package-version-revision
                                         common-lisp:null)
                         :accessor
                         %publish-package-version-result-version-revision
                         :initform common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or package-version common-lisp:null)
                         :accessor %publish-package-version-result-version
                         :initform common-lisp:nil)
                        (package :initarg :|package| :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor %publish-package-version-result-package
                         :initform common-lisp:nil)
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or package-namespace common-lisp:null)
                         :accessor %publish-package-version-result-namespace
                         :initform common-lisp:nil)
                        (format :initarg :|format| :type
                         (common-lisp:or package-format common-lisp:null)
                         :accessor %publish-package-version-result-format
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'publish-package-version-result
                    'make-publish-package-version-result))
 (common-lisp:defun make-publish-package-version-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key asset status version-revision version
                     package namespace format)
   (common-lisp:apply #'common-lisp:make-instance
                      'publish-package-version-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          publish-package-version-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          publish-package-version-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package))
      (common-lisp:list
       (common-lisp:cons "package"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-revision))
      (common-lisp:list
       (common-lisp:cons "versionRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset))
      (common-lisp:list
       (common-lisp:cons "asset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          publish-package-version-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-domain-permissions-policy-request common-lisp:nil
                       ((policy-document :initarg :|policyDocument| :type
                         (common-lisp:or policy-document common-lisp:null)
                         :accessor
                         %put-domain-permissions-policy-request-policy-document
                         :initform
                         (common-lisp:error ":policydocument is required"))
                        (policy-revision :initarg :|policyRevision| :type
                         (common-lisp:or policy-revision common-lisp:null)
                         :accessor
                         %put-domain-permissions-policy-request-policy-revision
                         :initform common-lisp:nil)
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %put-domain-permissions-policy-request-domain-owner
                         :initform common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %put-domain-permissions-policy-request-domain
                         :initform (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'put-domain-permissions-policy-request
                    'make-put-domain-permissions-policy-request))
 (common-lisp:defun make-put-domain-permissions-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-document policy-revision
                     domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-domain-permissions-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-domain-permissions-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-domain-permissions-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-owner))
      (common-lisp:list
       (common-lisp:cons "domainOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-revision))
      (common-lisp:list
       (common-lisp:cons "policyRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-domain-permissions-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-domain-permissions-policy-result common-lisp:nil
                       ((policy :initarg :|policy| :type
                         (common-lisp:or resource-policy common-lisp:null)
                         :accessor %put-domain-permissions-policy-result-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-domain-permissions-policy-result
                    'make-put-domain-permissions-policy-result))
 (common-lisp:defun make-put-domain-permissions-policy-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-domain-permissions-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-domain-permissions-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-domain-permissions-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-domain-permissions-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-package-origin-configuration-request common-lisp:nil
                       ((restrictions :initarg :|restrictions| :type
                         (common-lisp:or package-origin-restrictions
                                         common-lisp:null)
                         :accessor
                         %put-package-origin-configuration-request-restrictions
                         :initform
                         (common-lisp:error ":restrictions is required"))
                        (package :initarg :|package| :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor
                         %put-package-origin-configuration-request-package
                         :initform (common-lisp:error ":package is required"))
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or package-namespace common-lisp:null)
                         :accessor
                         %put-package-origin-configuration-request-namespace
                         :initform common-lisp:nil)
                        (format :initarg :|format| :type
                         (common-lisp:or package-format common-lisp:null)
                         :accessor
                         %put-package-origin-configuration-request-format
                         :initform (common-lisp:error ":format is required"))
                        (repository :initarg :|repository| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         %put-package-origin-configuration-request-repository
                         :initform
                         (common-lisp:error ":repository is required"))
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %put-package-origin-configuration-request-domain-owner
                         :initform common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %put-package-origin-configuration-request-domain
                         :initform (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'put-package-origin-configuration-request
                    'make-put-package-origin-configuration-request))
 (common-lisp:defun make-put-package-origin-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key restrictions package namespace format
                     repository domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-package-origin-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-package-origin-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-package-origin-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restrictions))
      (common-lisp:list
       (common-lisp:cons "restrictions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-package-origin-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-package-origin-configuration-result common-lisp:nil
                       ((origin-configuration :initarg :|originConfiguration|
                         :type
                         (common-lisp:or package-origin-configuration
                                         common-lisp:null)
                         :accessor
                         %put-package-origin-configuration-result-origin-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-package-origin-configuration-result
                    'make-put-package-origin-configuration-result))
 (common-lisp:defun make-put-package-origin-configuration-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key origin-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-package-origin-configuration-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-package-origin-configuration-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-package-origin-configuration-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'origin-configuration))
      (common-lisp:list
       (common-lisp:cons "originConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-package-origin-configuration-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-repository-permissions-policy-request
                       common-lisp:nil
                       ((policy-document :initarg :|policyDocument| :type
                         (common-lisp:or policy-document common-lisp:null)
                         :accessor
                         %put-repository-permissions-policy-request-policy-document
                         :initform
                         (common-lisp:error ":policydocument is required"))
                        (policy-revision :initarg :|policyRevision| :type
                         (common-lisp:or policy-revision common-lisp:null)
                         :accessor
                         %put-repository-permissions-policy-request-policy-revision
                         :initform common-lisp:nil)
                        (repository :initarg :|repository| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         %put-repository-permissions-policy-request-repository
                         :initform
                         (common-lisp:error ":repository is required"))
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %put-repository-permissions-policy-request-domain-owner
                         :initform common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %put-repository-permissions-policy-request-domain
                         :initform (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'put-repository-permissions-policy-request
                    'make-put-repository-permissions-policy-request))
 (common-lisp:defun make-put-repository-permissions-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy-document policy-revision
                     repository domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-repository-permissions-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-repository-permissions-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-repository-permissions-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-revision))
      (common-lisp:list
       (common-lisp:cons "policyRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "policyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-repository-permissions-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-repository-permissions-policy-result common-lisp:nil
                       ((policy :initarg :|policy| :type
                         (common-lisp:or resource-policy common-lisp:null)
                         :accessor
                         %put-repository-permissions-policy-result-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-repository-permissions-policy-result
                    'make-put-repository-permissions-policy-result))
 (common-lisp:defun make-put-repository-permissions-policy-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-repository-permissions-policy-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-repository-permissions-policy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-repository-permissions-policy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-repository-permissions-policy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass repository-description common-lisp:nil
                       ((created-time :initarg :|createdTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %repository-description-created-time :initform
                         common-lisp:nil)
                        (external-connections :initarg :|externalConnections|
                         :type
                         (common-lisp:or
                          repository-external-connection-info-list
                          common-lisp:null)
                         :accessor %repository-description-external-connections
                         :initform common-lisp:nil)
                        (upstreams :initarg :|upstreams| :type
                         (common-lisp:or upstream-repository-info-list
                                         common-lisp:null)
                         :accessor %repository-description-upstreams :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %repository-description-description
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %repository-description-arn :initform common-lisp:nil)
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %repository-description-domain-owner :initform
                         common-lisp:nil)
                        (domain-name :initarg :|domainName| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %repository-description-domain-name
                         :initform common-lisp:nil)
                        (administrator-account :initarg :|administratorAccount|
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor
                         %repository-description-administrator-account
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor %repository-description-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'repository-description 'make-repository-description))
 (common-lisp:defun make-repository-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-time external-connections
                     upstreams description arn domain-owner domain-name
                     administrator-account name)
   (common-lisp:apply #'common-lisp:make-instance 'repository-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'administrator-account))
      (common-lisp:list
       (common-lisp:cons "administratorAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-owner))
      (common-lisp:list
       (common-lisp:cons "domainOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upstreams))
      (common-lisp:list
       (common-lisp:cons "upstreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-connections))
      (common-lisp:list
       (common-lisp:cons "externalConnections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass repository-external-connection-info common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or external-connection-status
                                         common-lisp:null)
                         :accessor %repository-external-connection-info-status
                         :initform common-lisp:nil)
                        (package-format :initarg :|packageFormat| :type
                         (common-lisp:or package-format common-lisp:null)
                         :accessor
                         %repository-external-connection-info-package-format
                         :initform common-lisp:nil)
                        (external-connection-name :initarg
                         :|externalConnectionName| :type
                         (common-lisp:or external-connection-name
                                         common-lisp:null)
                         :accessor
                         %repository-external-connection-info-external-connection-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'repository-external-connection-info
                    'make-repository-external-connection-info))
 (common-lisp:defun make-repository-external-connection-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status package-format
                     external-connection-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'repository-external-connection-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-external-connection-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-external-connection-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'external-connection-name))
      (common-lisp:list
       (common-lisp:cons "externalConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-format))
      (common-lisp:list
       (common-lisp:cons "packageFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-external-connection-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype repository-external-connection-info-list ()
   '(trivial-types:proper-list repository-external-connection-info))
 (common-lisp:defun |make-repository-external-connection-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            repository-external-connection-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype repository-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass repository-summary common-lisp:nil
                       ((created-time :initarg :|createdTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %repository-summary-created-time :initform
                         common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %repository-summary-description :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %repository-summary-arn :initform common-lisp:nil)
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %repository-summary-domain-owner :initform
                         common-lisp:nil)
                        (domain-name :initarg :|domainName| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %repository-summary-domain-name :initform
                         common-lisp:nil)
                        (administrator-account :initarg :|administratorAccount|
                         :type (common-lisp:or account-id common-lisp:null)
                         :accessor %repository-summary-administrator-account
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor %repository-summary-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'repository-summary 'make-repository-summary))
 (common-lisp:defun make-repository-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-time description arn domain-owner
                     domain-name administrator-account name)
   (common-lisp:apply #'common-lisp:make-instance 'repository-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input repository-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input repository-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'administrator-account))
      (common-lisp:list
       (common-lisp:cons "administratorAccount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-owner))
      (common-lisp:list
       (common-lisp:cons "domainOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-time))
      (common-lisp:list
       (common-lisp:cons "createdTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input repository-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype repository-summary-list ()
   '(trivial-types:proper-list repository-summary))
 (common-lisp:defun |make-repository-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list repository-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (codeartifact-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :|resourceId| :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :|resourceType| :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass resource-policy common-lisp:nil
                       ((document :initarg :|document| :type
                         (common-lisp:or policy-document common-lisp:null)
                         :accessor %resource-policy-document :initform
                         common-lisp:nil)
                        (revision :initarg :|revision| :type
                         (common-lisp:or policy-revision common-lisp:null)
                         :accessor %resource-policy-revision :initform
                         common-lisp:nil)
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %resource-policy-resource-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'resource-policy 'make-resource-policy))
 (common-lisp:defun make-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key document revision resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'resource-policy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-policy))
   common-lisp:nil))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype retry-after-seconds () 'common-lisp:integer)
(common-lisp:deftype sha256 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (codeartifact-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)
      (resource-id :initarg :|resourceId| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-id)
      (resource-type :initarg :|resourceType| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message
                    'service-quota-exceeded-exception-resource-id
                    'service-quota-exceeded-exception-resource-type)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string255 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass successful-package-version-info common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or package-version-status
                                         common-lisp:null)
                         :accessor %successful-package-version-info-status
                         :initform common-lisp:nil)
                        (revision :initarg :|revision| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %successful-package-version-info-revision :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'successful-package-version-info
                    'make-successful-package-version-info))
 (common-lisp:defun make-successful-package-version-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status revision)
   (common-lisp:apply #'common-lisp:make-instance
                      'successful-package-version-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          successful-package-version-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          successful-package-version-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          successful-package-version-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype successful-package-version-info-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-successful-package-version-info-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :|key| :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-result 'make-tag-resource-result))
 (common-lisp:defun make-tag-resource-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-result))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (codeartifact-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       throttling-exception-message)
      (retry-after-seconds :initarg :|retryAfterSeconds| :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-retry-after-seconds)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %untag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "tagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-result common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-result 'make-untag-resource-result))
 (common-lisp:defun make-untag-resource-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-package-versions-status-request common-lisp:nil
                       ((target-status :initarg :|targetStatus| :type
                         (common-lisp:or package-version-status
                                         common-lisp:null)
                         :accessor
                         %update-package-versions-status-request-target-status
                         :initform
                         (common-lisp:error ":targetstatus is required"))
                        (expected-status :initarg :|expectedStatus| :type
                         (common-lisp:or package-version-status
                                         common-lisp:null)
                         :accessor
                         %update-package-versions-status-request-expected-status
                         :initform common-lisp:nil)
                        (version-revisions :initarg :|versionRevisions| :type
                         (common-lisp:or package-version-revision-map
                                         common-lisp:null)
                         :accessor
                         %update-package-versions-status-request-version-revisions
                         :initform common-lisp:nil)
                        (versions :initarg :|versions| :type
                         (common-lisp:or package-version-list common-lisp:null)
                         :accessor
                         %update-package-versions-status-request-versions
                         :initform (common-lisp:error ":versions is required"))
                        (package :initarg :|package| :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor
                         %update-package-versions-status-request-package
                         :initform (common-lisp:error ":package is required"))
                        (namespace :initarg :|namespace| :type
                         (common-lisp:or package-namespace common-lisp:null)
                         :accessor
                         %update-package-versions-status-request-namespace
                         :initform common-lisp:nil)
                        (format :initarg :|format| :type
                         (common-lisp:or package-format common-lisp:null)
                         :accessor
                         %update-package-versions-status-request-format
                         :initform (common-lisp:error ":format is required"))
                        (repository :initarg :|repository| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor
                         %update-package-versions-status-request-repository
                         :initform
                         (common-lisp:error ":repository is required"))
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %update-package-versions-status-request-domain-owner
                         :initform common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %update-package-versions-status-request-domain
                         :initform (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'update-package-versions-status-request
                    'make-update-package-versions-status-request))
 (common-lisp:defun make-update-package-versions-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-status expected-status
                     version-revisions versions package namespace format
                     repository domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-package-versions-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-package-versions-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-package-versions-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-revisions))
      (common-lisp:list
       (common-lisp:cons "versionRevisions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expected-status))
      (common-lisp:list
       (common-lisp:cons "expectedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-status))
      (common-lisp:list
       (common-lisp:cons "targetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-package-versions-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-package-versions-status-result common-lisp:nil
                       ((failed-versions :initarg :|failedVersions| :type
                         (common-lisp:or package-version-error-map
                                         common-lisp:null)
                         :accessor
                         %update-package-versions-status-result-failed-versions
                         :initform common-lisp:nil)
                        (successful-versions :initarg :|successfulVersions|
                         :type
                         (common-lisp:or successful-package-version-info-map
                                         common-lisp:null)
                         :accessor
                         %update-package-versions-status-result-successful-versions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-package-versions-status-result
                    'make-update-package-versions-status-result))
 (common-lisp:defun make-update-package-versions-status-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-versions successful-versions)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-package-versions-status-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-package-versions-status-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-package-versions-status-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful-versions))
      (common-lisp:list
       (common-lisp:cons "successfulVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-versions))
      (common-lisp:list
       (common-lisp:cons "failedVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-package-versions-status-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-repository-request common-lisp:nil
                       ((upstreams :initarg :|upstreams| :type
                         (common-lisp:or upstream-repository-list
                                         common-lisp:null)
                         :accessor %update-repository-request-upstreams
                         :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-repository-request-description
                         :initform common-lisp:nil)
                        (repository :initarg :|repository| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor %update-repository-request-repository
                         :initform
                         (common-lisp:error ":repository is required"))
                        (domain-owner :initarg :|domainOwner| :type
                         (common-lisp:or account-id common-lisp:null) :accessor
                         %update-repository-request-domain-owner :initform
                         common-lisp:nil)
                        (domain :initarg :|domain| :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %update-repository-request-domain :initform
                         (common-lisp:error ":domain is required"))))
 (common-lisp:export
  (common-lisp:list 'update-repository-request
                    'make-update-repository-request))
 (common-lisp:defun make-update-repository-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key upstreams description repository
                     domain-owner domain)
   (common-lisp:apply #'common-lisp:make-instance 'update-repository-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-repository-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-repository-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upstreams))
      (common-lisp:list
       (common-lisp:cons "upstreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-repository-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-repository-result common-lisp:nil
                       ((repository :initarg :|repository| :type
                         (common-lisp:or repository-description
                                         common-lisp:null)
                         :accessor %update-repository-result-repository
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-repository-result 'make-update-repository-result))
 (common-lisp:defun make-update-repository-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key repository)
   (common-lisp:apply #'common-lisp:make-instance 'update-repository-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-repository-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-repository-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-repository-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upstream-repository common-lisp:nil
                       ((repository-name :initarg :|repositoryName| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor %upstream-repository-repository-name
                         :initform
                         (common-lisp:error ":repositoryname is required"))))
 (common-lisp:export
  (common-lisp:list 'upstream-repository 'make-upstream-repository))
 (common-lisp:defun make-upstream-repository
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key repository-name)
   (common-lisp:apply #'common-lisp:make-instance 'upstream-repository
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upstream-repository))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upstream-repository))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upstream-repository))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upstream-repository-info common-lisp:nil
                       ((repository-name :initarg :|repositoryName| :type
                         (common-lisp:or repository-name common-lisp:null)
                         :accessor %upstream-repository-info-repository-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'upstream-repository-info 'make-upstream-repository-info))
 (common-lisp:defun make-upstream-repository-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key repository-name)
   (common-lisp:apply #'common-lisp:make-instance 'upstream-repository-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upstream-repository-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upstream-repository-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-name))
      (common-lisp:list
       (common-lisp:cons "repositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upstream-repository-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype upstream-repository-info-list ()
   '(trivial-types:proper-list upstream-repository-info))
 (common-lisp:defun |make-upstream-repository-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            upstream-repository-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype upstream-repository-list ()
   '(trivial-types:proper-list upstream-repository))
 (common-lisp:defun |make-upstream-repository-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list upstream-repository))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (codeartifact-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :|reason| :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun associate-external-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository
                     external-connection)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository external-connection))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-external-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/repository/external-connection"
                                                        "AssociateExternalConnection"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-external-connection))
(common-lisp:progn
 (common-lisp:defun copy-package-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner source-repository
                     destination-repository format namespace package versions
                     version-revisions allow-overwrite include-from-upstream)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner source-repository
     destination-repository format namespace package versions version-revisions
     allow-overwrite include-from-upstream))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-package-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/package/versions/copy"
                                                        "CopyPackageVersions"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'copy-package-versions))
(common-lisp:progn
 (common-lisp:defun create-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain encryption-key tags)
   (common-lisp:declare (common-lisp:ignorable domain encryption-key tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/domain"
                                                        "CreateDomain"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-domain))
(common-lisp:progn
 (common-lisp:defun create-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository
                     description upstreams tags)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository description upstreams
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-repository-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/repository"
                                                        "CreateRepository"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-repository))
(common-lisp:progn
 (common-lisp:defun delete-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner)
   (common-lisp:declare (common-lisp:ignorable domain domain-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        "/v1/domain"
                                                        "DeleteDomain"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-domain))
(common-lisp:progn
 (common-lisp:defun delete-domain-permissions-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner policy-revision)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner policy-revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-domain-permissions-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        "/v1/domain/permissions/policy"
                                                        "DeleteDomainPermissionsPolicy"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-domain-permissions-policy))
(common-lisp:progn
 (common-lisp:defun delete-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        "/v1/package"
                                                        "DeletePackage"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-package))
(common-lisp:progn
 (common-lisp:defun delete-package-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package versions expected-status)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package versions expected-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-package-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/package/versions/delete"
                                                        "DeletePackageVersions"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-package-versions))
(common-lisp:progn
 (common-lisp:defun delete-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository)
   (common-lisp:declare (common-lisp:ignorable domain domain-owner repository))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-repository-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        "/v1/repository"
                                                        "DeleteRepository"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-repository))
(common-lisp:progn
 (common-lisp:defun delete-repository-permissions-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository
                     policy-revision)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository policy-revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-repository-permissions-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        "/v1/repository/permissions/policies"
                                                        "DeleteRepositoryPermissionsPolicy"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-repository-permissions-policy))
(common-lisp:progn
 (common-lisp:defun describe-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner)
   (common-lisp:declare (common-lisp:ignorable domain domain-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/domain"
                                                        "DescribeDomain"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-domain))
(common-lisp:progn
 (common-lisp:defun describe-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/package"
                                                        "DescribePackage"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-package))
(common-lisp:progn
 (common-lisp:defun describe-package-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package package-version)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package package-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-package-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/package/version"
                                                        "DescribePackageVersion"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-package-version))
(common-lisp:progn
 (common-lisp:defun describe-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository)
   (common-lisp:declare (common-lisp:ignorable domain domain-owner repository))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-repository-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/repository"
                                                        "DescribeRepository"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-repository))
(common-lisp:progn
 (common-lisp:defun disassociate-external-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository
                     external-connection)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository external-connection))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-external-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        "/v1/repository/external-connection"
                                                        "DisassociateExternalConnection"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-external-connection))
(common-lisp:progn
 (common-lisp:defun dispose-package-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package versions version-revisions
                     expected-status)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package versions version-revisions expected-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-dispose-package-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/package/versions/dispose"
                                                        "DisposePackageVersions"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'dispose-package-versions))
(common-lisp:progn
 (common-lisp:defun get-authorization-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner duration-seconds)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner duration-seconds))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-authorization-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/authorization-token"
                                                        "GetAuthorizationToken"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-authorization-token))
(common-lisp:progn
 (common-lisp:defun get-domain-permissions-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner)
   (common-lisp:declare (common-lisp:ignorable domain domain-owner))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-domain-permissions-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/domain/permissions/policy"
                                                        "GetDomainPermissionsPolicy"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-domain-permissions-policy))
(common-lisp:progn
 (common-lisp:defun get-package-version-asset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package package-version asset
                     package-version-revision)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package package-version asset package-version-revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-package-version-asset-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/package/version/asset"
                                                        "GetPackageVersionAsset"
                                                        "2018-09-22")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-package-version-asset))
(common-lisp:progn
 (common-lisp:defun get-package-version-readme
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package package-version)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package package-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-package-version-readme-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/package/version/readme"
                                                        "GetPackageVersionReadme"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-package-version-readme))
(common-lisp:progn
 (common-lisp:defun get-repository-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-repository-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/repository/endpoint"
                                                        "GetRepositoryEndpoint"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-repository-endpoint))
(common-lisp:progn
 (common-lisp:defun get-repository-permissions-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository)
   (common-lisp:declare (common-lisp:ignorable domain domain-owner repository))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-repository-permissions-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/v1/repository/permissions/policy"
                                                        "GetRepositoryPermissionsPolicy"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-repository-permissions-policy))
(common-lisp:progn
 (common-lisp:defun list-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-domains-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/domains"
                                                        "ListDomains"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-domains))
(common-lisp:progn
 (common-lisp:defun list-package-version-assets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package package-version max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package package-version max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-package-version-assets-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/package/version/assets"
                                                        "ListPackageVersionAssets"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-package-version-assets))
(common-lisp:progn
 (common-lisp:defun list-package-version-dependencies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package package-version next-token)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package package-version next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-package-version-dependencies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/package/version/dependencies"
                                                        "ListPackageVersionDependencies"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-package-version-dependencies))
(common-lisp:progn
 (common-lisp:defun list-package-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package status sort-by max-results next-token
                     origin-type)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package status sort-by max-results next-token origin-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-package-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/package/versions"
                                                        "ListPackageVersions"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-package-versions))
(common-lisp:progn
 (common-lisp:defun list-packages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package-prefix max-results next-token publish
                     upstream)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package-prefix max-results next-token publish upstream))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-packages-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/packages"
                                                        "ListPackages"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-packages))
(common-lisp:progn
 (common-lisp:defun list-repositories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key repository-prefix max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable repository-prefix max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-repositories-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/repositories"
                                                        "ListRepositories"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-repositories))
(common-lisp:progn
 (common-lisp:defun list-repositories-in-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner administrator-account
                     repository-prefix max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner administrator-account
     repository-prefix max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-repositories-in-domain-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/domain/repositories"
                                                        "ListRepositoriesInDomain"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-repositories-in-domain))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/tags"
                                                        "ListTagsForResource"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun publish-package-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package package-version asset-content asset-name
                     asset-sha256 unfinished)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package package-version asset-content asset-name asset-sha256 unfinished))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-publish-package-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/package/version/publish"
                                                        "PublishPackageVersion"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'publish-package-version))
(common-lisp:progn
 (common-lisp:defun put-domain-permissions-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner policy-revision
                     policy-document)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner policy-revision
     policy-document))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-domain-permissions-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/v1/domain/permissions/policy"
                                                        "PutDomainPermissionsPolicy"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-domain-permissions-policy))
(common-lisp:progn
 (common-lisp:defun put-package-origin-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package restrictions)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package restrictions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-package-origin-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/package"
                                                        "PutPackageOriginConfiguration"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-package-origin-configuration))
(common-lisp:progn
 (common-lisp:defun put-repository-permissions-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository
                     policy-revision policy-document)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository policy-revision
     policy-document))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-repository-permissions-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/v1/repository/permissions/policy"
                                                        "PutRepositoryPermissionsPolicy"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-repository-permissions-policy))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/tag" "TagResource"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/untag"
                                                        "UntagResource"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-package-versions-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository format
                     namespace package versions version-revisions
                     expected-status target-status)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository format namespace
     package versions version-revisions expected-status target-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-package-versions-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/v1/package/versions/update_status"
                                                        "UpdatePackageVersionsStatus"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-package-versions-status))
(common-lisp:progn
 (common-lisp:defun update-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain domain-owner repository
                     description upstreams)
   (common-lisp:declare
    (common-lisp:ignorable domain domain-owner repository description
     upstreams))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-repository-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'codeartifact-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/v1/repository"
                                                        "UpdateRepository"
                                                        "2018-09-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-repository))
