;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/amplifybackend/api
  (:use)
  (:nicknames #:aws/amplifybackend)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/amplifybackend/api)
(common-lisp:progn
 (common-lisp:defclass amplifybackend-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "amplifybackend" :protocol
                        :rest-json))
 (common-lisp:export 'amplifybackend-request))
(common-lisp:progn
 (common-lisp:define-condition amplifybackend-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'amplifybackend-error))
(common-lisp:defvar *error-map*
  '(("BadRequestException" . bad-request-exception)
    ("GatewayTimeoutException" . gateway-timeout-exception)
    ("NotFoundException" . not-found-exception)
    ("TooManyRequestsException" . too-many-requests-exception)))
(common-lisp:deftype auth-resources () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass backend-apiapp-sync-auth-settings common-lisp:nil
                       ((open-idprovider-name :initarg :open-idprovider-name
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %backend-apiapp-sync-auth-settings-open-idprovider-name
                         :initform common-lisp:nil)
                        (open-idissue-url :initarg :open-idissue-url :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-apiapp-sync-auth-settings-open-idissue-url
                         :initform common-lisp:nil)
                        (open-idiat-ttl :initarg :open-idiat-ttl :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-apiapp-sync-auth-settings-open-idiat-ttl
                         :initform common-lisp:nil)
                        (open-idclient-id :initarg :open-idclient-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-apiapp-sync-auth-settings-open-idclient-id
                         :initform common-lisp:nil)
                        (open-idauth-ttl :initarg :open-idauth-ttl :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-apiapp-sync-auth-settings-open-idauth-ttl
                         :initform common-lisp:nil)
                        (expiration-time :initarg :expiration-time :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %backend-apiapp-sync-auth-settings-expiration-time
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-apiapp-sync-auth-settings-description
                         :initform common-lisp:nil)
                        (cognito-user-pool-id :initarg :cognito-user-pool-id
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor
                         %backend-apiapp-sync-auth-settings-cognito-user-pool-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'backend-apiapp-sync-auth-settings
                    'make-backend-apiapp-sync-auth-settings))
 (common-lisp:defun make-backend-apiapp-sync-auth-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key open-idprovider-name open-idissue-url
                     open-idiat-ttl open-idclient-id open-idauth-ttl
                     expiration-time description cognito-user-pool-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'backend-apiapp-sync-auth-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backend-apiapp-sync-auth-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backend-apiapp-sync-auth-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cognito-user-pool-id))
      (common-lisp:list
       (common-lisp:cons "CognitoUserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration-time))
      (common-lisp:list
       (common-lisp:cons "ExpirationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-idauth-ttl))
      (common-lisp:list
       (common-lisp:cons "OpenIDAuthTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-idclient-id))
      (common-lisp:list
       (common-lisp:cons "OpenIDClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-idiat-ttl))
      (common-lisp:list
       (common-lisp:cons "OpenIDIatTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'open-idissue-url))
      (common-lisp:list
       (common-lisp:cons "OpenIDIssueURL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idprovider-name))
      (common-lisp:list
       (common-lisp:cons "OpenIDProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backend-apiapp-sync-auth-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-apiauth-type common-lisp:nil
                       ((settings :initarg :settings :type
                         (common-lisp:or backend-apiapp-sync-auth-settings
                                         common-lisp:null)
                         :accessor %backend-apiauth-type-settings :initform
                         common-lisp:nil)
                        (mode :initarg :mode :type
                         (common-lisp:or mode common-lisp:null) :accessor
                         %backend-apiauth-type-mode :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'backend-apiauth-type 'make-backend-apiauth-type))
 (common-lisp:defun make-backend-apiauth-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key settings mode)
   (common-lisp:apply #'common-lisp:make-instance 'backend-apiauth-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backend-apiauth-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backend-apiauth-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backend-apiauth-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-apicodegen-req-obj common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-apicodegen-req-obj-resource-name :initform
                         (common-lisp:error ":resource-name is required"))))
 (common-lisp:export
  (common-lisp:list 'backend-apicodegen-req-obj
                    'make-backend-apicodegen-req-obj))
 (common-lisp:defun make-backend-apicodegen-req-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name)
   (common-lisp:apply #'common-lisp:make-instance 'backend-apicodegen-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backend-apicodegen-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backend-apicodegen-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backend-apicodegen-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-apicodegen-resp-obj common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-apicodegen-resp-obj-status :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-apicodegen-resp-obj-operation :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-apicodegen-resp-obj-job-id :initform
                         common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-apicodegen-resp-obj-error :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-apicodegen-resp-obj-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-apicodegen-resp-obj-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'backend-apicodegen-resp-obj
                    'make-backend-apicodegen-resp-obj))
 (common-lisp:defun make-backend-apicodegen-resp-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status operation job-id error
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'backend-apicodegen-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backend-apicodegen-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backend-apicodegen-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backend-apicodegen-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-apiconflict-resolution common-lisp:nil
                       ((resolution-strategy :initarg :resolution-strategy
                         :type
                         (common-lisp:or resolution-strategy common-lisp:null)
                         :accessor
                         %backend-apiconflict-resolution-resolution-strategy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'backend-apiconflict-resolution
                    'make-backend-apiconflict-resolution))
 (common-lisp:defun make-backend-apiconflict-resolution
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resolution-strategy)
   (common-lisp:apply #'common-lisp:make-instance
                      'backend-apiconflict-resolution
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backend-apiconflict-resolution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backend-apiconflict-resolution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution-strategy))
      (common-lisp:list
       (common-lisp:cons "ResolutionStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backend-apiconflict-resolution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-apireq-obj common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-apireq-obj-resource-name :initform
                         (common-lisp:error ":resource-name is required"))
                        (resource-config :initarg :resource-config :type
                         (common-lisp:or backend-apiresource-config
                                         common-lisp:null)
                         :accessor %backend-apireq-obj-resource-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'backend-apireq-obj 'make-backend-apireq-obj))
 (common-lisp:defun make-backend-apireq-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name resource-config)
   (common-lisp:apply #'common-lisp:make-instance 'backend-apireq-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backend-apireq-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backend-apireq-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backend-apireq-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-apiresource-config common-lisp:nil
                       ((transform-schema :initarg :transform-schema :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-apiresource-config-transform-schema :initform
                         common-lisp:nil)
                        (service :initarg :service :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-apiresource-config-service :initform
                         common-lisp:nil)
                        (default-auth-type :initarg :default-auth-type :type
                         (common-lisp:or backend-apiauth-type common-lisp:null)
                         :accessor
                         %backend-apiresource-config-default-auth-type
                         :initform common-lisp:nil)
                        (conflict-resolution :initarg :conflict-resolution
                         :type
                         (common-lisp:or backend-apiconflict-resolution
                                         common-lisp:null)
                         :accessor
                         %backend-apiresource-config-conflict-resolution
                         :initform common-lisp:nil)
                        (api-name :initarg :api-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-apiresource-config-api-name :initform
                         common-lisp:nil)
                        (additional-auth-types :initarg :additional-auth-types
                         :type
                         (common-lisp:or list-of-backend-apiauth-type
                                         common-lisp:null)
                         :accessor
                         %backend-apiresource-config-additional-auth-types
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'backend-apiresource-config
                    'make-backend-apiresource-config))
 (common-lisp:defun make-backend-apiresource-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transform-schema service
                     default-auth-type conflict-resolution api-name
                     additional-auth-types)
   (common-lisp:apply #'common-lisp:make-instance 'backend-apiresource-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backend-apiresource-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backend-apiresource-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-auth-types))
      (common-lisp:list
       (common-lisp:cons "AdditionalAuthTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'api-name))
      (common-lisp:list
       (common-lisp:cons "ApiName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conflict-resolution))
      (common-lisp:list
       (common-lisp:cons "ConflictResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-auth-type))
      (common-lisp:list
       (common-lisp:cons "DefaultAuthType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-schema))
      (common-lisp:list
       (common-lisp:cons "TransformSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backend-apiresource-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-apiresp-obj common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-apiresp-obj-status :initform common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-apiresp-obj-operation :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-apiresp-obj-job-id :initform common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-apiresp-obj-error :initform common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-apiresp-obj-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-apiresp-obj-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'backend-apiresp-obj 'make-backend-apiresp-obj))
 (common-lisp:defun make-backend-apiresp-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status operation job-id error
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'backend-apiresp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backend-apiresp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backend-apiresp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backend-apiresp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-auth-apple-provider-config common-lisp:nil
                       ((team-id :initarg :team-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-auth-apple-provider-config-team-id :initform
                         common-lisp:nil)
                        (private-key :initarg :private-key :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-auth-apple-provider-config-private-key
                         :initform common-lisp:nil)
                        (key-id :initarg :key-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-auth-apple-provider-config-key-id :initform
                         common-lisp:nil)
                        (client-id :initarg :client-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-auth-apple-provider-config-client-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'backend-auth-apple-provider-config
                    'make-backend-auth-apple-provider-config))
 (common-lisp:defun make-backend-auth-apple-provider-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key team-id private-key key-id client-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'backend-auth-apple-provider-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backend-auth-apple-provider-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backend-auth-apple-provider-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-id))
      (common-lisp:list
       (common-lisp:cons "KeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key))
      (common-lisp:list
       (common-lisp:cons "PrivateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'team-id))
      (common-lisp:list
       (common-lisp:cons "TeamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backend-auth-apple-provider-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-auth-resp-obj common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-auth-resp-obj-status :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-auth-resp-obj-operation :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-auth-resp-obj-job-id :initform
                         common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-auth-resp-obj-error :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-auth-resp-obj-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-auth-resp-obj-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'backend-auth-resp-obj 'make-backend-auth-resp-obj))
 (common-lisp:defun make-backend-auth-resp-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status operation job-id error
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'backend-auth-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backend-auth-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backend-auth-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backend-auth-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-auth-social-provider-config common-lisp:nil
                       ((client-secret :initarg :client-secret :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-auth-social-provider-config-client-secret
                         :initform common-lisp:nil)
                        (client-id :initarg :client-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-auth-social-provider-config-client-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'backend-auth-social-provider-config
                    'make-backend-auth-social-provider-config))
 (common-lisp:defun make-backend-auth-social-provider-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-secret client-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'backend-auth-social-provider-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backend-auth-social-provider-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backend-auth-social-provider-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-secret))
      (common-lisp:list
       (common-lisp:cons "ClientSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backend-auth-social-provider-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-config-resp-obj common-lisp:nil
                       ((login-auth-config :initarg :login-auth-config :type
                         (common-lisp:or login-auth-config-req-obj
                                         common-lisp:null)
                         :accessor %backend-config-resp-obj-login-auth-config
                         :initform common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-config-resp-obj-error :initform
                         common-lisp:nil)
                        (backend-manager-app-id :initarg
                         :backend-manager-app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-config-resp-obj-backend-manager-app-id
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-config-resp-obj-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'backend-config-resp-obj 'make-backend-config-resp-obj))
 (common-lisp:defun make-backend-config-resp-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key login-auth-config error
                     backend-manager-app-id app-id)
   (common-lisp:apply #'common-lisp:make-instance 'backend-config-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backend-config-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backend-config-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-manager-app-id))
      (common-lisp:list
       (common-lisp:cons "BackendManagerAppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'login-auth-config))
      (common-lisp:list
       (common-lisp:cons "LoginAuthConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backend-config-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-job-req-obj common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-job-req-obj-status :initform common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-job-req-obj-operation :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'backend-job-req-obj 'make-backend-job-req-obj))
 (common-lisp:defun make-backend-job-req-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status operation)
   (common-lisp:apply #'common-lisp:make-instance 'backend-job-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backend-job-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backend-job-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backend-job-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-job-resp-obj common-lisp:nil
                       ((update-time :initarg :update-time :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-job-resp-obj-update-time :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-job-resp-obj-status :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-job-resp-obj-operation :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-job-resp-obj-job-id :initform
                         common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-job-resp-obj-error :initform common-lisp:nil)
                        (create-time :initarg :create-time :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-job-resp-obj-create-time :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-job-resp-obj-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-job-resp-obj-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'backend-job-resp-obj 'make-backend-job-resp-obj))
 (common-lisp:defun make-backend-job-resp-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-time status operation job-id error
                     create-time backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'backend-job-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input backend-job-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input backend-job-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input backend-job-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-storage-permissions common-lisp:nil
                       ((un-authenticated :initarg :un-authenticated :type
                         (common-lisp:or list-of-un-authenticated-element
                                         common-lisp:null)
                         :accessor
                         %backend-storage-permissions-un-authenticated
                         :initform common-lisp:nil)
                        (authenticated :initarg :authenticated :type
                         (common-lisp:or list-of-authenticated-element
                                         common-lisp:null)
                         :accessor %backend-storage-permissions-authenticated
                         :initform
                         (common-lisp:error ":authenticated is required"))))
 (common-lisp:export
  (common-lisp:list 'backend-storage-permissions
                    'make-backend-storage-permissions))
 (common-lisp:defun make-backend-storage-permissions
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key un-authenticated authenticated)
   (common-lisp:apply #'common-lisp:make-instance 'backend-storage-permissions
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backend-storage-permissions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backend-storage-permissions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authenticated))
      (common-lisp:list
       (common-lisp:cons "Authenticated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'un-authenticated))
      (common-lisp:list
       (common-lisp:cons "UnAuthenticated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backend-storage-permissions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass backend-storage-resp-obj common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-storage-resp-obj-status :initform
                         (common-lisp:error ":status is required"))
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-storage-resp-obj-job-id :initform
                         (common-lisp:error ":job-id is required"))
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-storage-resp-obj-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %backend-storage-resp-obj-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'backend-storage-resp-obj 'make-backend-storage-resp-obj))
 (common-lisp:defun make-backend-storage-resp-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status job-id backend-environment-name
                     app-id)
   (common-lisp:apply #'common-lisp:make-instance 'backend-storage-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          backend-storage-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          backend-storage-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          backend-storage-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (amplifybackend-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:progn
 (common-lisp:defclass clone-backend-req-obj common-lisp:nil
                       ((target-environment-name :initarg
                         :target-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %clone-backend-req-obj-target-environment-name
                         :initform
                         (common-lisp:error
                          ":target-environment-name is required"))))
 (common-lisp:export
  (common-lisp:list 'clone-backend-req-obj 'make-clone-backend-req-obj))
 (common-lisp:defun make-clone-backend-req-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-environment-name)
   (common-lisp:apply #'common-lisp:make-instance 'clone-backend-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          clone-backend-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          clone-backend-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-environment-name))
      (common-lisp:list
       (common-lisp:cons "TargetEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          clone-backend-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass clone-backend-request common-lisp:nil
                       ((target-environment-name :initarg
                         :target-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %clone-backend-request-target-environment-name
                         :initform
                         (common-lisp:error
                          ":target-environment-name is required"))
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %clone-backend-request-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %clone-backend-request-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'clone-backend-request 'make-clone-backend-request))
 (common-lisp:defun make-clone-backend-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-environment-name
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'clone-backend-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          clone-backend-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          clone-backend-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-environment-name))
      (common-lisp:list
       (common-lisp:cons "TargetEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          clone-backend-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass clone-backend-resp-obj common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %clone-backend-resp-obj-status :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %clone-backend-resp-obj-operation :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %clone-backend-resp-obj-job-id :initform
                         common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %clone-backend-resp-obj-error :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %clone-backend-resp-obj-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %clone-backend-resp-obj-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'clone-backend-resp-obj 'make-clone-backend-resp-obj))
 (common-lisp:defun make-clone-backend-resp-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status operation job-id error
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'clone-backend-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          clone-backend-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          clone-backend-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          clone-backend-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass clone-backend-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %clone-backend-response-status :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %clone-backend-response-operation :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %clone-backend-response-job-id :initform
                         common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %clone-backend-response-error :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %clone-backend-response-backend-environment-name
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %clone-backend-response-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'clone-backend-response 'make-clone-backend-response))
 (common-lisp:defun make-clone-backend-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status operation job-id error
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'clone-backend-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          clone-backend-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          clone-backend-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          clone-backend-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-apireq-obj common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-apireq-obj-resource-name :initform
                         (common-lisp:error ":resource-name is required"))
                        (resource-config :initarg :resource-config :type
                         (common-lisp:or backend-apiresource-config
                                         common-lisp:null)
                         :accessor %create-backend-apireq-obj-resource-config
                         :initform
                         (common-lisp:error ":resource-config is required"))
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-apireq-obj-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-backend-apireq-obj
                    'make-create-backend-apireq-obj))
 (common-lisp:defun make-create-backend-apireq-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name resource-config
                     backend-environment-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-backend-apireq-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-apireq-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-apireq-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-apireq-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-apirequest common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-apirequest-resource-name :initform
                         (common-lisp:error ":resource-name is required"))
                        (resource-config :initarg :resource-config :type
                         (common-lisp:or backend-apiresource-config
                                         common-lisp:null)
                         :accessor %create-backend-apirequest-resource-config
                         :initform
                         (common-lisp:error ":resource-config is required"))
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-apirequest-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-apirequest-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-backend-apirequest
                    'make-create-backend-apirequest))
 (common-lisp:defun make-create-backend-apirequest
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name resource-config
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-backend-apirequest
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-apirequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-apirequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-apirequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-apiresponse common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-apiresponse-status :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-apiresponse-operation :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-apiresponse-job-id :initform
                         common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-apiresponse-error :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-apiresponse-backend-environment-name
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-apiresponse-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-backend-apiresponse
                    'make-create-backend-apiresponse))
 (common-lisp:defun make-create-backend-apiresponse
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status operation job-id error
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-backend-apiresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-apiresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-apiresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-apiresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-auth-forgot-password-config
                       common-lisp:nil
                       ((sms-settings :initarg :sms-settings :type
                         (common-lisp:or sms-settings common-lisp:null)
                         :accessor
                         %create-backend-auth-forgot-password-config-sms-settings
                         :initform common-lisp:nil)
                        (email-settings :initarg :email-settings :type
                         (common-lisp:or email-settings common-lisp:null)
                         :accessor
                         %create-backend-auth-forgot-password-config-email-settings
                         :initform common-lisp:nil)
                        (delivery-method :initarg :delivery-method :type
                         (common-lisp:or delivery-method common-lisp:null)
                         :accessor
                         %create-backend-auth-forgot-password-config-delivery-method
                         :initform
                         (common-lisp:error ":delivery-method is required"))))
 (common-lisp:export
  (common-lisp:list 'create-backend-auth-forgot-password-config
                    'make-create-backend-auth-forgot-password-config))
 (common-lisp:defun make-create-backend-auth-forgot-password-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sms-settings email-settings
                     delivery-method)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-auth-forgot-password-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-forgot-password-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-forgot-password-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-method))
      (common-lisp:list
       (common-lisp:cons "DeliveryMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-settings))
      (common-lisp:list
       (common-lisp:cons "EmailSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sms-settings))
      (common-lisp:list
       (common-lisp:cons "SmsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-forgot-password-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-auth-identity-pool-config common-lisp:nil
                       ((unauthenticated-login :initarg :unauthenticated-login
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         %create-backend-auth-identity-pool-config-unauthenticated-login
                         :initform
                         (common-lisp:error
                          ":unauthenticated-login is required"))
                        (identity-pool-name :initarg :identity-pool-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-auth-identity-pool-config-identity-pool-name
                         :initform
                         (common-lisp:error
                          ":identity-pool-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-backend-auth-identity-pool-config
                    'make-create-backend-auth-identity-pool-config))
 (common-lisp:defun make-create-backend-auth-identity-pool-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unauthenticated-login identity-pool-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-auth-identity-pool-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-identity-pool-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-identity-pool-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-name))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unauthenticated-login))
      (common-lisp:list
       (common-lisp:cons "UnauthenticatedLogin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-identity-pool-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-auth-mfaconfig common-lisp:nil
                       ((settings :initarg :settings :type
                         (common-lisp:or settings common-lisp:null) :accessor
                         %create-backend-auth-mfaconfig-settings :initform
                         common-lisp:nil)
                        (mfamode :initarg :mfamode :type
                         (common-lisp:or mfamode common-lisp:null) :accessor
                         %create-backend-auth-mfaconfig-mfamode :initform
                         (common-lisp:error ":mfamode is required"))))
 (common-lisp:export
  (common-lisp:list 'create-backend-auth-mfaconfig
                    'make-create-backend-auth-mfaconfig))
 (common-lisp:defun make-create-backend-auth-mfaconfig
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key settings mfamode)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-auth-mfaconfig
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-mfaconfig))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-mfaconfig))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfamode))
      (common-lisp:list
       (common-lisp:cons "MFAMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-mfaconfig))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-auth-oauth-config common-lisp:nil
                       ((social-provider-settings :initarg
                         :social-provider-settings :type
                         (common-lisp:or social-provider-settings
                                         common-lisp:null)
                         :accessor
                         %create-backend-auth-oauth-config-social-provider-settings
                         :initform common-lisp:nil)
                        (redirect-sign-out-uris :initarg
                         :redirect-sign-out-uris :type
                         (common-lisp:or list-of-string common-lisp:null)
                         :accessor
                         %create-backend-auth-oauth-config-redirect-sign-out-uris
                         :initform
                         (common-lisp:error
                          ":redirect-sign-out-uris is required"))
                        (redirect-sign-in-uris :initarg :redirect-sign-in-uris
                         :type (common-lisp:or list-of-string common-lisp:null)
                         :accessor
                         %create-backend-auth-oauth-config-redirect-sign-in-uris
                         :initform
                         (common-lisp:error
                          ":redirect-sign-in-uris is required"))
                        (oauth-scopes :initarg :oauth-scopes :type
                         (common-lisp:or list-of-oauth-scopes-element
                                         common-lisp:null)
                         :accessor
                         %create-backend-auth-oauth-config-oauth-scopes
                         :initform
                         (common-lisp:error ":oauth-scopes is required"))
                        (oauth-grant-type :initarg :oauth-grant-type :type
                         (common-lisp:or oauth-grant-type common-lisp:null)
                         :accessor
                         %create-backend-auth-oauth-config-oauth-grant-type
                         :initform
                         (common-lisp:error ":oauth-grant-type is required"))
                        (domain-prefix :initarg :domain-prefix :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-auth-oauth-config-domain-prefix
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-backend-auth-oauth-config
                    'make-create-backend-auth-oauth-config))
 (common-lisp:defun make-create-backend-auth-oauth-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key social-provider-settings
                     redirect-sign-out-uris redirect-sign-in-uris oauth-scopes
                     oauth-grant-type domain-prefix)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-auth-oauth-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-oauth-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-oauth-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-prefix))
      (common-lisp:list
       (common-lisp:cons "DomainPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oauth-grant-type))
      (common-lisp:list
       (common-lisp:cons "OAuthGrantType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oauth-scopes))
      (common-lisp:list
       (common-lisp:cons "OAuthScopes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redirect-sign-in-uris))
      (common-lisp:list
       (common-lisp:cons "RedirectSignInURIs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redirect-sign-out-uris))
      (common-lisp:list
       (common-lisp:cons "RedirectSignOutURIs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'social-provider-settings))
      (common-lisp:list
       (common-lisp:cons "SocialProviderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-oauth-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-auth-password-policy-config
                       common-lisp:nil
                       ((minimum-length :initarg :minimum-length :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %create-backend-auth-password-policy-config-minimum-length
                         :initform
                         (common-lisp:error ":minimum-length is required"))
                        (additional-constraints :initarg
                         :additional-constraints :type
                         (common-lisp:or list-of-additional-constraints-element
                                         common-lisp:null)
                         :accessor
                         %create-backend-auth-password-policy-config-additional-constraints
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-backend-auth-password-policy-config
                    'make-create-backend-auth-password-policy-config))
 (common-lisp:defun make-create-backend-auth-password-policy-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key minimum-length additional-constraints)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-auth-password-policy-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-password-policy-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-password-policy-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-constraints))
      (common-lisp:list
       (common-lisp:cons "AdditionalConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-length))
      (common-lisp:list
       (common-lisp:cons "MinimumLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-password-policy-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-auth-req-obj common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-auth-req-obj-resource-name :initform
                         (common-lisp:error ":resource-name is required"))
                        (resource-config :initarg :resource-config :type
                         (common-lisp:or create-backend-auth-resource-config
                                         common-lisp:null)
                         :accessor %create-backend-auth-req-obj-resource-config
                         :initform
                         (common-lisp:error ":resource-config is required"))
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-auth-req-obj-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-backend-auth-req-obj
                    'make-create-backend-auth-req-obj))
 (common-lisp:defun make-create-backend-auth-req-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name resource-config
                     backend-environment-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-backend-auth-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-auth-request common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-auth-request-resource-name :initform
                         (common-lisp:error ":resource-name is required"))
                        (resource-config :initarg :resource-config :type
                         (common-lisp:or create-backend-auth-resource-config
                                         common-lisp:null)
                         :accessor %create-backend-auth-request-resource-config
                         :initform
                         (common-lisp:error ":resource-config is required"))
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-auth-request-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-auth-request-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-backend-auth-request
                    'make-create-backend-auth-request))
 (common-lisp:defun make-create-backend-auth-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name resource-config
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-backend-auth-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-auth-resource-config common-lisp:nil
                       ((user-pool-configs :initarg :user-pool-configs :type
                         (common-lisp:or create-backend-auth-user-pool-config
                                         common-lisp:null)
                         :accessor
                         %create-backend-auth-resource-config-user-pool-configs
                         :initform
                         (common-lisp:error ":user-pool-configs is required"))
                        (service :initarg :service :type
                         (common-lisp:or service common-lisp:null) :accessor
                         %create-backend-auth-resource-config-service :initform
                         (common-lisp:error ":service is required"))
                        (identity-pool-configs :initarg :identity-pool-configs
                         :type
                         (common-lisp:or
                          create-backend-auth-identity-pool-config
                          common-lisp:null)
                         :accessor
                         %create-backend-auth-resource-config-identity-pool-configs
                         :initform common-lisp:nil)
                        (auth-resources :initarg :auth-resources :type
                         (common-lisp:or auth-resources common-lisp:null)
                         :accessor
                         %create-backend-auth-resource-config-auth-resources
                         :initform
                         (common-lisp:error ":auth-resources is required"))))
 (common-lisp:export
  (common-lisp:list 'create-backend-auth-resource-config
                    'make-create-backend-auth-resource-config))
 (common-lisp:defun make-create-backend-auth-resource-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-pool-configs service
                     identity-pool-configs auth-resources)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-auth-resource-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-resource-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-resource-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-resources))
      (common-lisp:list
       (common-lisp:cons "AuthResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-pool-configs))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-configs))
      (common-lisp:list
       (common-lisp:cons "UserPoolConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-resource-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-auth-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-auth-response-status :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-auth-response-operation :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-auth-response-job-id :initform
                         common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-auth-response-error :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-auth-response-backend-environment-name
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-auth-response-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-backend-auth-response
                    'make-create-backend-auth-response))
 (common-lisp:defun make-create-backend-auth-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status operation job-id error
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-backend-auth-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-auth-user-pool-config common-lisp:nil
                       ((verification-message :initarg :verification-message
                         :type
                         (common-lisp:or
                          create-backend-auth-verification-message-config
                          common-lisp:null)
                         :accessor
                         %create-backend-auth-user-pool-config-verification-message
                         :initform common-lisp:nil)
                        (user-pool-name :initarg :user-pool-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-auth-user-pool-config-user-pool-name
                         :initform
                         (common-lisp:error ":user-pool-name is required"))
                        (sign-in-method :initarg :sign-in-method :type
                         (common-lisp:or sign-in-method common-lisp:null)
                         :accessor
                         %create-backend-auth-user-pool-config-sign-in-method
                         :initform
                         (common-lisp:error ":sign-in-method is required"))
                        (required-sign-up-attributes :initarg
                         :required-sign-up-attributes :type
                         (common-lisp:or
                          list-of-required-sign-up-attributes-element
                          common-lisp:null)
                         :accessor
                         %create-backend-auth-user-pool-config-required-sign-up-attributes
                         :initform
                         (common-lisp:error
                          ":required-sign-up-attributes is required"))
                        (password-policy :initarg :password-policy :type
                         (common-lisp:or
                          create-backend-auth-password-policy-config
                          common-lisp:null)
                         :accessor
                         %create-backend-auth-user-pool-config-password-policy
                         :initform common-lisp:nil)
                        (oauth :initarg :oauth :type
                         (common-lisp:or create-backend-auth-oauth-config
                                         common-lisp:null)
                         :accessor %create-backend-auth-user-pool-config-oauth
                         :initform common-lisp:nil)
                        (mfa :initarg :mfa :type
                         (common-lisp:or create-backend-auth-mfaconfig
                                         common-lisp:null)
                         :accessor %create-backend-auth-user-pool-config-mfa
                         :initform common-lisp:nil)
                        (forgot-password :initarg :forgot-password :type
                         (common-lisp:or
                          create-backend-auth-forgot-password-config
                          common-lisp:null)
                         :accessor
                         %create-backend-auth-user-pool-config-forgot-password
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-backend-auth-user-pool-config
                    'make-create-backend-auth-user-pool-config))
 (common-lisp:defun make-create-backend-auth-user-pool-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key verification-message user-pool-name
                     sign-in-method required-sign-up-attributes password-policy
                     oauth mfa forgot-password)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-auth-user-pool-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-user-pool-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-user-pool-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forgot-password))
      (common-lisp:list
       (common-lisp:cons "ForgotPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa))
      (common-lisp:list
       (common-lisp:cons "Mfa"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oauth))
      (common-lisp:list
       (common-lisp:cons "OAuth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-policy))
      (common-lisp:list
       (common-lisp:cons "PasswordPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'required-sign-up-attributes))
      (common-lisp:list
       (common-lisp:cons "RequiredSignUpAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sign-in-method))
      (common-lisp:list
       (common-lisp:cons "SignInMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-name))
      (common-lisp:list
       (common-lisp:cons "UserPoolName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verification-message))
      (common-lisp:list
       (common-lisp:cons "VerificationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-user-pool-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-auth-verification-message-config
                       common-lisp:nil
                       ((sms-settings :initarg :sms-settings :type
                         (common-lisp:or sms-settings common-lisp:null)
                         :accessor
                         %create-backend-auth-verification-message-config-sms-settings
                         :initform common-lisp:nil)
                        (email-settings :initarg :email-settings :type
                         (common-lisp:or email-settings common-lisp:null)
                         :accessor
                         %create-backend-auth-verification-message-config-email-settings
                         :initform common-lisp:nil)
                        (delivery-method :initarg :delivery-method :type
                         (common-lisp:or delivery-method common-lisp:null)
                         :accessor
                         %create-backend-auth-verification-message-config-delivery-method
                         :initform
                         (common-lisp:error ":delivery-method is required"))))
 (common-lisp:export
  (common-lisp:list 'create-backend-auth-verification-message-config
                    'make-create-backend-auth-verification-message-config))
 (common-lisp:defun make-create-backend-auth-verification-message-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sms-settings email-settings
                     delivery-method)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-auth-verification-message-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-verification-message-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-verification-message-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-method))
      (common-lisp:list
       (common-lisp:cons "DeliveryMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-settings))
      (common-lisp:list
       (common-lisp:cons "EmailSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sms-settings))
      (common-lisp:list
       (common-lisp:cons "SmsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-auth-verification-message-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-config-req-obj common-lisp:nil
                       ((backend-manager-app-id :initarg
                         :backend-manager-app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-config-req-obj-backend-manager-app-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-backend-config-req-obj
                    'make-create-backend-config-req-obj))
 (common-lisp:defun make-create-backend-config-req-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backend-manager-app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-config-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-config-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-config-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-manager-app-id))
      (common-lisp:list
       (common-lisp:cons "BackendManagerAppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-config-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-config-request common-lisp:nil
                       ((backend-manager-app-id :initarg
                         :backend-manager-app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-config-request-backend-manager-app-id
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-config-request-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-backend-config-request
                    'make-create-backend-config-request))
 (common-lisp:defun make-create-backend-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backend-manager-app-id app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-manager-app-id))
      (common-lisp:list
       (common-lisp:cons "BackendManagerAppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-config-resp-obj common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-config-resp-obj-status :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-config-resp-obj-job-id :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-config-resp-obj-backend-environment-name
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-config-resp-obj-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-backend-config-resp-obj
                    'make-create-backend-config-resp-obj))
 (common-lisp:defun make-create-backend-config-resp-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status job-id backend-environment-name
                     app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-config-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-config-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-config-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-config-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-config-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-config-response-status :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-config-response-job-id :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-config-response-backend-environment-name
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-config-response-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-backend-config-response
                    'make-create-backend-config-response))
 (common-lisp:defun make-create-backend-config-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status job-id backend-environment-name
                     app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-req-obj common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-req-obj-resource-name :initform
                         common-lisp:nil)
                        (resource-config :initarg :resource-config :type
                         (common-lisp:or resource-config common-lisp:null)
                         :accessor %create-backend-req-obj-resource-config
                         :initform common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-req-obj-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-name :initarg :app-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-req-obj-app-name :initform
                         (common-lisp:error ":app-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-req-obj-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-backend-req-obj 'make-create-backend-req-obj))
 (common-lisp:defun make-create-backend-req-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name resource-config
                     backend-environment-name app-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-backend-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-name))
      (common-lisp:list
       (common-lisp:cons "AppName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-request common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-request-resource-name :initform
                         common-lisp:nil)
                        (resource-config :initarg :resource-config :type
                         (common-lisp:or resource-config common-lisp:null)
                         :accessor %create-backend-request-resource-config
                         :initform common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-request-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-name :initarg :app-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-request-app-name :initform
                         (common-lisp:error ":app-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-request-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-backend-request 'make-create-backend-request))
 (common-lisp:defun make-create-backend-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name resource-config
                     backend-environment-name app-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-backend-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-name))
      (common-lisp:list
       (common-lisp:cons "AppName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-resp-obj common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-resp-obj-status :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-resp-obj-operation :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-resp-obj-job-id :initform
                         common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-resp-obj-error :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-resp-obj-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-resp-obj-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-backend-resp-obj 'make-create-backend-resp-obj))
 (common-lisp:defun make-create-backend-resp-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status operation job-id error
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-backend-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-response-status :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-response-operation :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-response-job-id :initform
                         common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-response-error :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-response-backend-environment-name
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-response-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-backend-response 'make-create-backend-response))
 (common-lisp:defun make-create-backend-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status operation job-id error
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-backend-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-storage-req-obj common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-storage-req-obj-resource-name
                         :initform
                         (common-lisp:error ":resource-name is required"))
                        (resource-config :initarg :resource-config :type
                         (common-lisp:or create-backend-storage-resource-config
                                         common-lisp:null)
                         :accessor
                         %create-backend-storage-req-obj-resource-config
                         :initform
                         (common-lisp:error ":resource-config is required"))
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-storage-req-obj-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-backend-storage-req-obj
                    'make-create-backend-storage-req-obj))
 (common-lisp:defun make-create-backend-storage-req-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name resource-config
                     backend-environment-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-storage-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-storage-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-storage-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-storage-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-storage-request common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-storage-request-resource-name
                         :initform
                         (common-lisp:error ":resource-name is required"))
                        (resource-config :initarg :resource-config :type
                         (common-lisp:or create-backend-storage-resource-config
                                         common-lisp:null)
                         :accessor
                         %create-backend-storage-request-resource-config
                         :initform
                         (common-lisp:error ":resource-config is required"))
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-storage-request-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-storage-request-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-backend-storage-request
                    'make-create-backend-storage-request))
 (common-lisp:defun make-create-backend-storage-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name resource-config
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-storage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-storage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-storage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-storage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-storage-resource-config common-lisp:nil
                       ((service-name :initarg :service-name :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor
                         %create-backend-storage-resource-config-service-name
                         :initform
                         (common-lisp:error ":service-name is required"))
                        (permissions :initarg :permissions :type
                         (common-lisp:or backend-storage-permissions
                                         common-lisp:null)
                         :accessor
                         %create-backend-storage-resource-config-permissions
                         :initform
                         (common-lisp:error ":permissions is required"))
                        (bucket-name :initarg :bucket-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-storage-resource-config-bucket-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-backend-storage-resource-config
                    'make-create-backend-storage-resource-config))
 (common-lisp:defun make-create-backend-storage-resource-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-name permissions bucket-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-storage-resource-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-storage-resource-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-storage-resource-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-storage-resource-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-backend-storage-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-storage-response-status :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-storage-response-job-id :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-storage-response-backend-environment-name
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-backend-storage-response-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-backend-storage-response
                    'make-create-backend-storage-response))
 (common-lisp:defun make-create-backend-storage-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status job-id backend-environment-name
                     app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-backend-storage-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-storage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-storage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-backend-storage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-token-request common-lisp:nil
                       ((app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-token-request-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-token-request 'make-create-token-request))
 (common-lisp:defun make-create-token-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key app-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-token-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-token-resp-obj common-lisp:nil
                       ((ttl :initarg :ttl :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-token-resp-obj-ttl :initform
                         (common-lisp:error ":ttl is required"))
                        (session-id :initarg :session-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-token-resp-obj-session-id :initform
                         (common-lisp:error ":session-id is required"))
                        (challenge-code :initarg :challenge-code :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-token-resp-obj-challenge-code :initform
                         (common-lisp:error ":challenge-code is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-token-resp-obj-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-token-resp-obj 'make-create-token-resp-obj))
 (common-lisp:defun make-create-token-resp-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ttl session-id challenge-code app-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-token-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-token-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-token-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'challenge-code))
      (common-lisp:list
       (common-lisp:cons "ChallengeCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "Ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-token-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-token-response common-lisp:nil
                       ((ttl :initarg :ttl :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-token-response-ttl :initform common-lisp:nil)
                        (session-id :initarg :session-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-token-response-session-id :initform
                         common-lisp:nil)
                        (challenge-code :initarg :challenge-code :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-token-response-challenge-code :initform
                         common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %create-token-response-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-token-response 'make-create-token-response))
 (common-lisp:defun make-create-token-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ttl session-id challenge-code app-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-token-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'challenge-code))
      (common-lisp:list
       (common-lisp:cons "ChallengeCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "Ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-token-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backend-apirequest common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-apirequest-resource-name :initform
                         (common-lisp:error ":resource-name is required"))
                        (resource-config :initarg :resource-config :type
                         (common-lisp:or backend-apiresource-config
                                         common-lisp:null)
                         :accessor %delete-backend-apirequest-resource-config
                         :initform common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-apirequest-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-apirequest-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-backend-apirequest
                    'make-delete-backend-apirequest))
 (common-lisp:defun make-delete-backend-apirequest
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name resource-config
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-backend-apirequest
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-apirequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-apirequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-apirequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backend-apiresponse common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-apiresponse-status :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-apiresponse-operation :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-apiresponse-job-id :initform
                         common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-apiresponse-error :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-apiresponse-backend-environment-name
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-apiresponse-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-backend-apiresponse
                    'make-delete-backend-apiresponse))
 (common-lisp:defun make-delete-backend-apiresponse
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status operation job-id error
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-backend-apiresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-apiresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-apiresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-apiresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backend-auth-request common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-auth-request-resource-name :initform
                         (common-lisp:error ":resource-name is required"))
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-auth-request-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-auth-request-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-backend-auth-request
                    'make-delete-backend-auth-request))
 (common-lisp:defun make-delete-backend-auth-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name backend-environment-name
                     app-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-backend-auth-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-auth-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-auth-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-auth-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backend-auth-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-auth-response-status :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-auth-response-operation :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-auth-response-job-id :initform
                         common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-auth-response-error :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-auth-response-backend-environment-name
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-auth-response-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-backend-auth-response
                    'make-delete-backend-auth-response))
 (common-lisp:defun make-delete-backend-auth-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status operation job-id error
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-backend-auth-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-auth-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-auth-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-auth-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backend-request common-lisp:nil
                       ((backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-request-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-request-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-backend-request 'make-delete-backend-request))
 (common-lisp:defun make-delete-backend-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-backend-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backend-resp-obj common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-resp-obj-status :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-resp-obj-operation :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-resp-obj-job-id :initform
                         common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-resp-obj-error :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-resp-obj-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-resp-obj-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-backend-resp-obj 'make-delete-backend-resp-obj))
 (common-lisp:defun make-delete-backend-resp-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status operation job-id error
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-backend-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backend-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-response-status :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-response-operation :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-response-job-id :initform
                         common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-response-error :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-response-backend-environment-name
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-response-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-backend-response 'make-delete-backend-response))
 (common-lisp:defun make-delete-backend-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status operation job-id error
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-backend-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backend-storage-request common-lisp:nil
                       ((service-name :initarg :service-name :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor %delete-backend-storage-request-service-name
                         :initform
                         (common-lisp:error ":service-name is required"))
                        (resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-storage-request-resource-name
                         :initform
                         (common-lisp:error ":resource-name is required"))
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-storage-request-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-storage-request-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-backend-storage-request
                    'make-delete-backend-storage-request))
 (common-lisp:defun make-delete-backend-storage-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-name resource-name
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-backend-storage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-storage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-storage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-storage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-backend-storage-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-storage-response-status :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-storage-response-job-id :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-storage-response-backend-environment-name
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-backend-storage-response-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-backend-storage-response
                    'make-delete-backend-storage-response))
 (common-lisp:defun make-delete-backend-storage-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status job-id backend-environment-name
                     app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-backend-storage-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-storage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-storage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-backend-storage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-token-request common-lisp:nil
                       ((session-id :initarg :session-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-token-request-session-id :initform
                         (common-lisp:error ":session-id is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %delete-token-request-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-token-request 'make-delete-token-request))
 (common-lisp:defun make-delete-token-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-id app-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-token-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-token-resp-obj common-lisp:nil
                       ((is-success :initarg :is-success :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %delete-token-resp-obj-is-success :initform
                         (common-lisp:error ":is-success is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-token-resp-obj 'make-delete-token-resp-obj))
 (common-lisp:defun make-delete-token-resp-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-success)
   (common-lisp:apply #'common-lisp:make-instance 'delete-token-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-token-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-token-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-success))
      (common-lisp:list
       (common-lisp:cons "IsSuccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-token-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-token-response common-lisp:nil
                       ((is-success :initarg :is-success :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor %delete-token-response-is-success :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-token-response 'make-delete-token-response))
 (common-lisp:defun make-delete-token-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-success)
   (common-lisp:apply #'common-lisp:make-instance 'delete-token-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-success))
      (common-lisp:list
       (common-lisp:cons "IsSuccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-token-response))
   common-lisp:nil))
(common-lisp:deftype delivery-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass email-settings common-lisp:nil
                       ((email-subject :initarg :email-subject :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %email-settings-email-subject :initform
                         common-lisp:nil)
                        (email-message :initarg :email-message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %email-settings-email-message :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'email-settings 'make-email-settings))
 (common-lisp:defun make-email-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key email-subject email-message)
   (common-lisp:apply #'common-lisp:make-instance 'email-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input email-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input email-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-message))
      (common-lisp:list
       (common-lisp:cons "EmailMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-subject))
      (common-lisp:list
       (common-lisp:cons "EmailSubject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input email-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition gateway-timeout-exception
     (amplifybackend-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       gateway-timeout-exception-message)))
 (common-lisp:export
  (common-lisp:list 'gateway-timeout-exception
                    'gateway-timeout-exception-message)))
(common-lisp:progn
 (common-lisp:defclass generate-backend-apimodels-request common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %generate-backend-apimodels-request-resource-name
                         :initform
                         (common-lisp:error ":resource-name is required"))
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %generate-backend-apimodels-request-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %generate-backend-apimodels-request-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'generate-backend-apimodels-request
                    'make-generate-backend-apimodels-request))
 (common-lisp:defun make-generate-backend-apimodels-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name backend-environment-name
                     app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'generate-backend-apimodels-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-backend-apimodels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-backend-apimodels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-backend-apimodels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass generate-backend-apimodels-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %generate-backend-apimodels-response-status :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %generate-backend-apimodels-response-operation
                         :initform common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %generate-backend-apimodels-response-job-id :initform
                         common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %generate-backend-apimodels-response-error :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %generate-backend-apimodels-response-backend-environment-name
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %generate-backend-apimodels-response-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'generate-backend-apimodels-response
                    'make-generate-backend-apimodels-response))
 (common-lisp:defun make-generate-backend-apimodels-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status operation job-id error
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'generate-backend-apimodels-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-backend-apimodels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-backend-apimodels-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-backend-apimodels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-apimodels-request common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-apimodels-request-resource-name :initform
                         (common-lisp:error ":resource-name is required"))
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-apimodels-request-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-apimodels-request-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-backend-apimodels-request
                    'make-get-backend-apimodels-request))
 (common-lisp:defun make-get-backend-apimodels-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name backend-environment-name
                     app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-backend-apimodels-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apimodels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apimodels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apimodels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-apimodels-response common-lisp:nil
                       ((model-introspection-schema :initarg
                         :model-introspection-schema :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-apimodels-response-model-introspection-schema
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %get-backend-apimodels-response-status :initform
                         common-lisp:nil)
                        (models :initarg :models :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-apimodels-response-models :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-backend-apimodels-response
                    'make-get-backend-apimodels-response))
 (common-lisp:defun make-get-backend-apimodels-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key model-introspection-schema status models)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-backend-apimodels-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apimodels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apimodels-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'models))
      (common-lisp:list
       (common-lisp:cons "Models"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-introspection-schema))
      (common-lisp:list
       (common-lisp:cons "ModelIntrospectionSchema"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apimodels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-apirequest common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-apirequest-resource-name :initform
                         (common-lisp:error ":resource-name is required"))
                        (resource-config :initarg :resource-config :type
                         (common-lisp:or backend-apiresource-config
                                         common-lisp:null)
                         :accessor %get-backend-apirequest-resource-config
                         :initform common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-apirequest-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-apirequest-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-backend-apirequest 'make-get-backend-apirequest))
 (common-lisp:defun make-get-backend-apirequest
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name resource-config
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-apirequest
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apirequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apirequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apirequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-apiresp-obj common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-apiresp-obj-resource-name :initform
                         common-lisp:nil)
                        (resource-config :initarg :resource-config :type
                         (common-lisp:or backend-apiresource-config
                                         common-lisp:null)
                         :accessor %get-backend-apiresp-obj-resource-config
                         :initform common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-apiresp-obj-error :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-apiresp-obj-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-apiresp-obj-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-backend-apiresp-obj 'make-get-backend-apiresp-obj))
 (common-lisp:defun make-get-backend-apiresp-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name resource-config error
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-apiresp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apiresp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apiresp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apiresp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-apiresponse common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-apiresponse-resource-name :initform
                         common-lisp:nil)
                        (resource-config :initarg :resource-config :type
                         (common-lisp:or backend-apiresource-config
                                         common-lisp:null)
                         :accessor %get-backend-apiresponse-resource-config
                         :initform common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-apiresponse-error :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-apiresponse-backend-environment-name
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-apiresponse-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-backend-apiresponse 'make-get-backend-apiresponse))
 (common-lisp:defun make-get-backend-apiresponse
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name resource-config error
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-apiresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apiresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apiresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-apiresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-auth-req-obj common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-auth-req-obj-resource-name :initform
                         (common-lisp:error ":resource-name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-backend-auth-req-obj 'make-get-backend-auth-req-obj))
 (common-lisp:defun make-get-backend-auth-req-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-auth-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-auth-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-auth-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-auth-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-auth-request common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-auth-request-resource-name :initform
                         (common-lisp:error ":resource-name is required"))
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-auth-request-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-auth-request-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-backend-auth-request 'make-get-backend-auth-request))
 (common-lisp:defun make-get-backend-auth-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name backend-environment-name
                     app-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-auth-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-auth-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-auth-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-auth-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-auth-resp-obj common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-auth-resp-obj-resource-name :initform
                         common-lisp:nil)
                        (resource-config :initarg :resource-config :type
                         (common-lisp:or create-backend-auth-resource-config
                                         common-lisp:null)
                         :accessor %get-backend-auth-resp-obj-resource-config
                         :initform common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-auth-resp-obj-error :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-auth-resp-obj-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-auth-resp-obj-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-backend-auth-resp-obj
                    'make-get-backend-auth-resp-obj))
 (common-lisp:defun make-get-backend-auth-resp-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name resource-config error
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-auth-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-auth-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-auth-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-auth-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-auth-response common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-auth-response-resource-name :initform
                         common-lisp:nil)
                        (resource-config :initarg :resource-config :type
                         (common-lisp:or create-backend-auth-resource-config
                                         common-lisp:null)
                         :accessor %get-backend-auth-response-resource-config
                         :initform common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-auth-response-error :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-auth-response-backend-environment-name
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-auth-response-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-backend-auth-response
                    'make-get-backend-auth-response))
 (common-lisp:defun make-get-backend-auth-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name resource-config error
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-auth-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-auth-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-auth-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-auth-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-job-request common-lisp:nil
                       ((job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-job-request-job-id :initform
                         (common-lisp:error ":job-id is required"))
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-job-request-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-job-request-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-backend-job-request 'make-get-backend-job-request))
 (common-lisp:defun make-get-backend-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key job-id backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-job-response common-lisp:nil
                       ((update-time :initarg :update-time :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-job-response-update-time :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-job-response-status :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-job-response-operation :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-job-response-job-id :initform
                         common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-job-response-error :initform
                         common-lisp:nil)
                        (create-time :initarg :create-time :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-job-response-create-time :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-job-response-backend-environment-name
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-job-response-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-backend-job-response 'make-get-backend-job-response))
 (common-lisp:defun make-get-backend-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-time status operation job-id error
                     create-time backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-req-obj common-lisp:nil
                       ((backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-req-obj-backend-environment-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-backend-req-obj 'make-get-backend-req-obj))
 (common-lisp:defun make-get-backend-req-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backend-environment-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-backend-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-backend-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-backend-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-request common-lisp:nil
                       ((backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-request-backend-environment-name
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-request-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-backend-request 'make-get-backend-request))
 (common-lisp:defun make-get-backend-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-backend-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-backend-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-backend-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-resp-obj common-lisp:nil
                       ((error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-resp-obj-error :initform common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-resp-obj-backend-environment-name
                         :initform common-lisp:nil)
                        (backend-environment-list :initarg
                         :backend-environment-list :type
                         (common-lisp:or list-of-string common-lisp:null)
                         :accessor
                         %get-backend-resp-obj-backend-environment-list
                         :initform common-lisp:nil)
                        (app-name :initarg :app-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-resp-obj-app-name :initform
                         common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-resp-obj-app-id :initform
                         (common-lisp:error ":app-id is required"))
                        (amplify-meta-config :initarg :amplify-meta-config
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %get-backend-resp-obj-amplify-meta-config
                         :initform common-lisp:nil)
                        (amplify-feature-flags :initarg :amplify-feature-flags
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %get-backend-resp-obj-amplify-feature-flags
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-backend-resp-obj 'make-get-backend-resp-obj))
 (common-lisp:defun make-get-backend-resp-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error backend-environment-name
                     backend-environment-list app-name app-id
                     amplify-meta-config amplify-feature-flags)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-backend-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-backend-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amplify-feature-flags))
      (common-lisp:list
       (common-lisp:cons "AmplifyFeatureFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amplify-meta-config))
      (common-lisp:list
       (common-lisp:cons "AmplifyMetaConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-name))
      (common-lisp:list
       (common-lisp:cons "AppName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-list))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-backend-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-response common-lisp:nil
                       ((error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-response-error :initform common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-response-backend-environment-name
                         :initform common-lisp:nil)
                        (backend-environment-list :initarg
                         :backend-environment-list :type
                         (common-lisp:or list-of-string common-lisp:null)
                         :accessor
                         %get-backend-response-backend-environment-list
                         :initform common-lisp:nil)
                        (app-name :initarg :app-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-response-app-name :initform
                         common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-response-app-id :initform
                         common-lisp:nil)
                        (amplify-meta-config :initarg :amplify-meta-config
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %get-backend-response-amplify-meta-config
                         :initform common-lisp:nil)
                        (amplify-feature-flags :initarg :amplify-feature-flags
                         :type (common-lisp:or |__string| common-lisp:null)
                         :accessor %get-backend-response-amplify-feature-flags
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-backend-response 'make-get-backend-response))
 (common-lisp:defun make-get-backend-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error backend-environment-name
                     backend-environment-list app-name app-id
                     amplify-meta-config amplify-feature-flags)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-backend-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-backend-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amplify-feature-flags))
      (common-lisp:list
       (common-lisp:cons "AmplifyFeatureFlags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amplify-meta-config))
      (common-lisp:list
       (common-lisp:cons "AmplifyMetaConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-name))
      (common-lisp:list
       (common-lisp:cons "AppName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-list))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-backend-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-storage-req-obj common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-storage-req-obj-resource-name :initform
                         (common-lisp:error ":resource-name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-backend-storage-req-obj
                    'make-get-backend-storage-req-obj))
 (common-lisp:defun make-get-backend-storage-req-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-storage-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-storage-request common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-storage-request-resource-name :initform
                         (common-lisp:error ":resource-name is required"))
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-storage-request-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-storage-request-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-backend-storage-request
                    'make-get-backend-storage-request))
 (common-lisp:defun make-get-backend-storage-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name backend-environment-name
                     app-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-storage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-storage-resource-config common-lisp:nil
                       ((service-name :initarg :service-name :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor
                         %get-backend-storage-resource-config-service-name
                         :initform
                         (common-lisp:error ":service-name is required"))
                        (permissions :initarg :permissions :type
                         (common-lisp:or backend-storage-permissions
                                         common-lisp:null)
                         :accessor
                         %get-backend-storage-resource-config-permissions
                         :initform common-lisp:nil)
                        (imported :initarg :imported :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         %get-backend-storage-resource-config-imported
                         :initform (common-lisp:error ":imported is required"))
                        (bucket-name :initarg :bucket-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-storage-resource-config-bucket-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-backend-storage-resource-config
                    'make-get-backend-storage-resource-config))
 (common-lisp:defun make-get-backend-storage-resource-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-name permissions imported
                     bucket-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-backend-storage-resource-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-resource-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-resource-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'imported))
      (common-lisp:list
       (common-lisp:cons "Imported"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-resource-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-storage-resp-obj common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-storage-resp-obj-resource-name :initform
                         common-lisp:nil)
                        (resource-config :initarg :resource-config :type
                         (common-lisp:or get-backend-storage-resource-config
                                         common-lisp:null)
                         :accessor
                         %get-backend-storage-resp-obj-resource-config
                         :initform common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-storage-resp-obj-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-storage-resp-obj-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-backend-storage-resp-obj
                    'make-get-backend-storage-resp-obj))
 (common-lisp:defun make-get-backend-storage-resp-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name resource-config
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-storage-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-backend-storage-response common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-storage-response-resource-name :initform
                         common-lisp:nil)
                        (resource-config :initarg :resource-config :type
                         (common-lisp:or get-backend-storage-resource-config
                                         common-lisp:null)
                         :accessor
                         %get-backend-storage-response-resource-config
                         :initform common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-storage-response-backend-environment-name
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-backend-storage-response-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-backend-storage-response
                    'make-get-backend-storage-response))
 (common-lisp:defun make-get-backend-storage-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name resource-config
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-backend-storage-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-backend-storage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-token-request common-lisp:nil
                       ((session-id :initarg :session-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-token-request-session-id :initform
                         (common-lisp:error ":session-id is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-token-request-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-token-request 'make-get-token-request))
 (common-lisp:defun make-get-token-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-id app-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-token-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-token-resp-obj common-lisp:nil
                       ((ttl :initarg :ttl :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-token-resp-obj-ttl :initform
                         (common-lisp:error ":ttl is required"))
                        (session-id :initarg :session-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-token-resp-obj-session-id :initform
                         (common-lisp:error ":session-id is required"))
                        (challenge-code :initarg :challenge-code :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-token-resp-obj-challenge-code :initform
                         (common-lisp:error ":challenge-code is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-token-resp-obj-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-token-resp-obj 'make-get-token-resp-obj))
 (common-lisp:defun make-get-token-resp-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ttl session-id challenge-code app-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-token-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-token-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-token-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'challenge-code))
      (common-lisp:list
       (common-lisp:cons "ChallengeCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "Ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-token-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-token-response common-lisp:nil
                       ((ttl :initarg :ttl :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-token-response-ttl :initform common-lisp:nil)
                        (session-id :initarg :session-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-token-response-session-id :initform
                         common-lisp:nil)
                        (challenge-code :initarg :challenge-code :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-token-response-challenge-code :initform
                         common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %get-token-response-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-token-response 'make-get-token-response))
 (common-lisp:defun make-get-token-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ttl session-id challenge-code app-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-token-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'challenge-code))
      (common-lisp:list
       (common-lisp:cons "ChallengeCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "SessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ttl))
      (common-lisp:list
       (common-lisp:cons "Ttl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-token-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-backend-auth-req-obj common-lisp:nil
                       ((web-client-id :initarg :web-client-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-backend-auth-req-obj-web-client-id :initform
                         (common-lisp:error ":web-client-id is required"))
                        (user-pool-id :initarg :user-pool-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-backend-auth-req-obj-user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required"))
                        (native-client-id :initarg :native-client-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-backend-auth-req-obj-native-client-id
                         :initform
                         (common-lisp:error ":native-client-id is required"))
                        (identity-pool-id :initarg :identity-pool-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-backend-auth-req-obj-identity-pool-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'import-backend-auth-req-obj
                    'make-import-backend-auth-req-obj))
 (common-lisp:defun make-import-backend-auth-req-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key web-client-id user-pool-id
                     native-client-id identity-pool-id)
   (common-lisp:apply #'common-lisp:make-instance 'import-backend-auth-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-auth-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-auth-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'native-client-id))
      (common-lisp:list
       (common-lisp:cons "NativeClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-client-id))
      (common-lisp:list
       (common-lisp:cons "WebClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-auth-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-backend-auth-request common-lisp:nil
                       ((web-client-id :initarg :web-client-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-backend-auth-request-web-client-id :initform
                         (common-lisp:error ":web-client-id is required"))
                        (user-pool-id :initarg :user-pool-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-backend-auth-request-user-pool-id :initform
                         (common-lisp:error ":user-pool-id is required"))
                        (native-client-id :initarg :native-client-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-backend-auth-request-native-client-id
                         :initform
                         (common-lisp:error ":native-client-id is required"))
                        (identity-pool-id :initarg :identity-pool-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-backend-auth-request-identity-pool-id
                         :initform common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-backend-auth-request-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-backend-auth-request-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'import-backend-auth-request
                    'make-import-backend-auth-request))
 (common-lisp:defun make-import-backend-auth-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key web-client-id user-pool-id
                     native-client-id identity-pool-id backend-environment-name
                     app-id)
   (common-lisp:apply #'common-lisp:make-instance 'import-backend-auth-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-auth-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-auth-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'native-client-id))
      (common-lisp:list
       (common-lisp:cons "NativeClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-client-id))
      (common-lisp:list
       (common-lisp:cons "WebClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-auth-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-backend-auth-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-backend-auth-response-status :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-backend-auth-response-operation :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-backend-auth-response-job-id :initform
                         common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-backend-auth-response-error :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-backend-auth-response-backend-environment-name
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-backend-auth-response-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'import-backend-auth-response
                    'make-import-backend-auth-response))
 (common-lisp:defun make-import-backend-auth-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status operation job-id error
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'import-backend-auth-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-auth-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-auth-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-auth-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-backend-storage-req-obj common-lisp:nil
                       ((service-name :initarg :service-name :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor %import-backend-storage-req-obj-service-name
                         :initform
                         (common-lisp:error ":service-name is required"))
                        (bucket-name :initarg :bucket-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-backend-storage-req-obj-bucket-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'import-backend-storage-req-obj
                    'make-import-backend-storage-req-obj))
 (common-lisp:defun make-import-backend-storage-req-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-name bucket-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-backend-storage-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-storage-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-storage-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-storage-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-backend-storage-request common-lisp:nil
                       ((service-name :initarg :service-name :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor %import-backend-storage-request-service-name
                         :initform
                         (common-lisp:error ":service-name is required"))
                        (bucket-name :initarg :bucket-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-backend-storage-request-bucket-name :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-backend-storage-request-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-backend-storage-request-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'import-backend-storage-request
                    'make-import-backend-storage-request))
 (common-lisp:defun make-import-backend-storage-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-name bucket-name
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-backend-storage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-storage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-storage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-storage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass import-backend-storage-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-backend-storage-response-status :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-backend-storage-response-job-id :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-backend-storage-response-backend-environment-name
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %import-backend-storage-response-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'import-backend-storage-response
                    'make-import-backend-storage-response))
 (common-lisp:defun make-import-backend-storage-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status job-id backend-environment-name
                     app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'import-backend-storage-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-storage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-storage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-backend-storage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass internal-service-exception common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %internal-service-exception-message :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'internal-service-exception
                    'make-internal-service-exception))
 (common-lisp:defun make-internal-service-exception
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message)
   (common-lisp:apply #'common-lisp:make-instance 'internal-service-exception
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          internal-service-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          internal-service-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          internal-service-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass limit-exceeded-exception common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %limit-exceeded-exception-message :initform
                         common-lisp:nil)
                        (limit-type :initarg :limit-type :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %limit-exceeded-exception-limit-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'make-limit-exceeded-exception))
 (common-lisp:defun make-limit-exceeded-exception
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message limit-type)
   (common-lisp:apply #'common-lisp:make-instance 'limit-exceeded-exception
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          limit-exceeded-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          limit-exceeded-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit-type))
      (common-lisp:list
       (common-lisp:cons "LimitType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          limit-exceeded-exception))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-backend-job-req-obj common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-backend-job-req-obj-status :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-backend-job-req-obj-operation :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-backend-job-req-obj-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or |__integerMin1Max25| common-lisp:null)
                         :accessor %list-backend-job-req-obj-max-results
                         :initform common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-backend-job-req-obj-job-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-backend-job-req-obj 'make-list-backend-job-req-obj))
 (common-lisp:defun make-list-backend-job-req-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status operation next-token max-results
                     job-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-backend-job-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-job-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-job-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-job-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-backend-job-resp-obj common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-backend-job-resp-obj-next-token :initform
                         common-lisp:nil)
                        (jobs :initarg :jobs :type
                         (common-lisp:or list-of-backend-job-resp-obj
                                         common-lisp:null)
                         :accessor %list-backend-job-resp-obj-jobs :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-backend-job-resp-obj
                    'make-list-backend-job-resp-obj))
 (common-lisp:defun make-list-backend-job-resp-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token jobs)
   (common-lisp:apply #'common-lisp:make-instance 'list-backend-job-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-job-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-job-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "Jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-job-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-backend-jobs-request common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-backend-jobs-request-status :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-backend-jobs-request-operation :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-backend-jobs-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or |__integerMin1Max25| common-lisp:null)
                         :accessor %list-backend-jobs-request-max-results
                         :initform common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-backend-jobs-request-job-id :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-backend-jobs-request-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-backend-jobs-request-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-backend-jobs-request
                    'make-list-backend-jobs-request))
 (common-lisp:defun make-list-backend-jobs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status operation next-token max-results
                     job-id backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'list-backend-jobs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-backend-jobs-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-backend-jobs-response-next-token :initform
                         common-lisp:nil)
                        (jobs :initarg :jobs :type
                         (common-lisp:or list-of-backend-job-resp-obj
                                         common-lisp:null)
                         :accessor %list-backend-jobs-response-jobs :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-backend-jobs-response
                    'make-list-backend-jobs-response))
 (common-lisp:defun make-list-backend-jobs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token jobs)
   (common-lisp:apply #'common-lisp:make-instance 'list-backend-jobs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jobs))
      (common-lisp:list
       (common-lisp:cons "Jobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-backend-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-s3buckets-req-obj common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-s3buckets-req-obj-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-s3buckets-req-obj 'make-list-s3buckets-req-obj))
 (common-lisp:defun make-list-s3buckets-req-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-s3buckets-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-s3buckets-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-s3buckets-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-s3buckets-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-s3buckets-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-s3buckets-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-s3buckets-request 'make-list-s3buckets-request))
 (common-lisp:defun make-list-s3buckets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-s3buckets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-s3buckets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-s3buckets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-s3buckets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-s3buckets-resp-obj common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-s3buckets-resp-obj-next-token :initform
                         common-lisp:nil)
                        (buckets :initarg :buckets :type
                         (common-lisp:or list-of-s3bucket-info
                                         common-lisp:null)
                         :accessor %list-s3buckets-resp-obj-buckets :initform
                         (common-lisp:error ":buckets is required"))))
 (common-lisp:export
  (common-lisp:list 'list-s3buckets-resp-obj 'make-list-s3buckets-resp-obj))
 (common-lisp:defun make-list-s3buckets-resp-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token buckets)
   (common-lisp:apply #'common-lisp:make-instance 'list-s3buckets-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-s3buckets-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-s3buckets-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buckets))
      (common-lisp:list
       (common-lisp:cons "Buckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-s3buckets-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-s3buckets-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %list-s3buckets-response-next-token :initform
                         common-lisp:nil)
                        (buckets :initarg :buckets :type
                         (common-lisp:or list-of-s3bucket-info
                                         common-lisp:null)
                         :accessor %list-s3buckets-response-buckets :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-s3buckets-response 'make-list-s3buckets-response))
 (common-lisp:defun make-list-s3buckets-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token buckets)
   (common-lisp:apply #'common-lisp:make-instance 'list-s3buckets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-s3buckets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-s3buckets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buckets))
      (common-lisp:list
       (common-lisp:cons "Buckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-s3buckets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass login-auth-config-req-obj common-lisp:nil
                       ((aws-user-pools-web-client-id :initarg
                         :aws-user-pools-web-client-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %login-auth-config-req-obj-aws-user-pools-web-client-id
                         :initform common-lisp:nil)
                        (aws-user-pools-id :initarg :aws-user-pools-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %login-auth-config-req-obj-aws-user-pools-id :initform
                         common-lisp:nil)
                        (aws-cognito-region :initarg :aws-cognito-region :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %login-auth-config-req-obj-aws-cognito-region
                         :initform common-lisp:nil)
                        (aws-cognito-identity-pool-id :initarg
                         :aws-cognito-identity-pool-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %login-auth-config-req-obj-aws-cognito-identity-pool-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'login-auth-config-req-obj
                    'make-login-auth-config-req-obj))
 (common-lisp:defun make-login-auth-config-req-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key aws-user-pools-web-client-id
                     aws-user-pools-id aws-cognito-region
                     aws-cognito-identity-pool-id)
   (common-lisp:apply #'common-lisp:make-instance 'login-auth-config-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          login-auth-config-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          login-auth-config-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-cognito-identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "AwsCognitoIdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-cognito-region))
      (common-lisp:list
       (common-lisp:cons "AwsCognitoRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aws-user-pools-id))
      (common-lisp:list
       (common-lisp:cons "AwsUserPoolsId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-user-pools-web-client-id))
      (common-lisp:list
       (common-lisp:cons "AwsUserPoolsWebClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          login-auth-config-req-obj))
   common-lisp:nil))
(common-lisp:deftype mfamode () 'common-lisp:string)
(common-lisp:deftype mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (amplifybackend-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message
                    'not-found-exception-resource-type)))
(common-lisp:deftype oauth-grant-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass remove-all-backends-req-obj common-lisp:nil
                       ((clean-amplify-app :initarg :clean-amplify-app :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         %remove-all-backends-req-obj-clean-amplify-app
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remove-all-backends-req-obj
                    'make-remove-all-backends-req-obj))
 (common-lisp:defun make-remove-all-backends-req-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key clean-amplify-app)
   (common-lisp:apply #'common-lisp:make-instance 'remove-all-backends-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-backends-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-backends-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clean-amplify-app))
      (common-lisp:list
       (common-lisp:cons "CleanAmplifyApp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-backends-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-all-backends-request common-lisp:nil
                       ((clean-amplify-app :initarg :clean-amplify-app :type
                         (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         %remove-all-backends-request-clean-amplify-app
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-all-backends-request-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-all-backends-request
                    'make-remove-all-backends-request))
 (common-lisp:defun make-remove-all-backends-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key clean-amplify-app app-id)
   (common-lisp:apply #'common-lisp:make-instance 'remove-all-backends-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-backends-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-backends-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clean-amplify-app))
      (common-lisp:list
       (common-lisp:cons "CleanAmplifyApp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-backends-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-all-backends-resp-obj common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-all-backends-resp-obj-status :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-all-backends-resp-obj-operation :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-all-backends-resp-obj-job-id :initform
                         common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-all-backends-resp-obj-error :initform
                         common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-all-backends-resp-obj-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-all-backends-resp-obj
                    'make-remove-all-backends-resp-obj))
 (common-lisp:defun make-remove-all-backends-resp-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status operation job-id error app-id)
   (common-lisp:apply #'common-lisp:make-instance 'remove-all-backends-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-backends-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-backends-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-backends-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-all-backends-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-all-backends-response-status :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-all-backends-response-operation :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-all-backends-response-job-id :initform
                         common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-all-backends-response-error :initform
                         common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-all-backends-response-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remove-all-backends-response
                    'make-remove-all-backends-response))
 (common-lisp:defun make-remove-all-backends-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status operation job-id error app-id)
   (common-lisp:apply #'common-lisp:make-instance 'remove-all-backends-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-backends-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-backends-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-all-backends-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-backend-auth-req-obj common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-backend-auth-req-obj-resource-name :initform
                         (common-lisp:error ":resource-name is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-backend-auth-req-obj
                    'make-remove-backend-auth-req-obj))
 (common-lisp:defun make-remove-backend-auth-req-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name)
   (common-lisp:apply #'common-lisp:make-instance 'remove-backend-auth-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-auth-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-auth-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-auth-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-backend-config-request common-lisp:nil
                       ((app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-backend-config-request-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-backend-config-request
                    'make-remove-backend-config-request))
 (common-lisp:defun make-remove-backend-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-backend-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-backend-config-resp-obj common-lisp:nil
                       ((error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-backend-config-resp-obj-error :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remove-backend-config-resp-obj
                    'make-remove-backend-config-resp-obj))
 (common-lisp:defun make-remove-backend-config-resp-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-backend-config-resp-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-config-resp-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-config-resp-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-config-resp-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-backend-config-response common-lisp:nil
                       ((error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-backend-config-response-error :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remove-backend-config-response
                    'make-remove-backend-config-response))
 (common-lisp:defun make-remove-backend-config-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-backend-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-backend-storage-req-obj common-lisp:nil
                       ((service-name :initarg :service-name :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor %remove-backend-storage-req-obj-service-name
                         :initform
                         (common-lisp:error ":service-name is required"))
                        (resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %remove-backend-storage-req-obj-resource-name
                         :initform
                         (common-lisp:error ":resource-name is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-backend-storage-req-obj
                    'make-remove-backend-storage-req-obj))
 (common-lisp:defun make-remove-backend-storage-req-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-name resource-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-backend-storage-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-storage-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-storage-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-backend-storage-req-obj))
   common-lisp:nil))
(common-lisp:deftype resolution-strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-config common-lisp:nil common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-config 'make-resource-config))
 (common-lisp:defun make-resource-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'resource-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass s3bucket-info common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %s3bucket-info-name :initform common-lisp:nil)
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %s3bucket-info-creation-date :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 's3bucket-info 'make-s3bucket-info))
 (common-lisp:defun make-s3bucket-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name creation-date)
   (common-lisp:apply #'common-lisp:make-instance 's3bucket-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3bucket-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3bucket-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3bucket-info))
   common-lisp:nil))
(common-lisp:deftype service () 'common-lisp:string)
(common-lisp:deftype service-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass settings common-lisp:nil
                       ((sms-message :initarg :sms-message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %settings-sms-message :initform common-lisp:nil)
                        (mfa-types :initarg :mfa-types :type
                         (common-lisp:or list-of-mfa-types-element
                                         common-lisp:null)
                         :accessor %settings-mfa-types :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'settings 'make-settings))
 (common-lisp:defun make-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sms-message mfa-types)
   (common-lisp:apply #'common-lisp:make-instance 'settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa-types))
      (common-lisp:list
       (common-lisp:cons "MfaTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sms-message))
      (common-lisp:list
       (common-lisp:cons "SmsMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input settings))
   common-lisp:nil))
(common-lisp:deftype sign-in-method () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sms-settings common-lisp:nil
                       ((sms-message :initarg :sms-message :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %sms-settings-sms-message :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'sms-settings 'make-sms-settings))
 (common-lisp:defun make-sms-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sms-message)
   (common-lisp:apply #'common-lisp:make-instance 'sms-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sms-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sms-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sms-message))
      (common-lisp:list
       (common-lisp:cons "SmsMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sms-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass social-provider-settings common-lisp:nil
                       ((sign-in-with-apple :initarg :sign-in-with-apple :type
                         (common-lisp:or backend-auth-apple-provider-config
                                         common-lisp:null)
                         :accessor %social-provider-settings-sign-in-with-apple
                         :initform common-lisp:nil)
                        (login-with-amazon :initarg :login-with-amazon :type
                         (common-lisp:or backend-auth-social-provider-config
                                         common-lisp:null)
                         :accessor %social-provider-settings-login-with-amazon
                         :initform common-lisp:nil)
                        (google :initarg :google :type
                         (common-lisp:or backend-auth-social-provider-config
                                         common-lisp:null)
                         :accessor %social-provider-settings-google :initform
                         common-lisp:nil)
                        (facebook :initarg :facebook :type
                         (common-lisp:or backend-auth-social-provider-config
                                         common-lisp:null)
                         :accessor %social-provider-settings-facebook :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'social-provider-settings 'make-social-provider-settings))
 (common-lisp:defun make-social-provider-settings
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sign-in-with-apple login-with-amazon
                     google facebook)
   (common-lisp:apply #'common-lisp:make-instance 'social-provider-settings
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          social-provider-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          social-provider-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facebook))
      (common-lisp:list
       (common-lisp:cons "Facebook"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'google))
      (common-lisp:list
       (common-lisp:cons "Google"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'login-with-amazon))
      (common-lisp:list
       (common-lisp:cons "LoginWithAmazon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sign-in-with-apple))
      (common-lisp:list
       (common-lisp:cons "SignInWithApple"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          social-provider-settings))
   common-lisp:nil))
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (amplifybackend-error)
     ((limit-type :initarg :limit-type :initform common-lisp:nil :reader
       too-many-requests-exception-limit-type)
      (message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-limit-type
                    'too-many-requests-exception-message)))
(common-lisp:progn
 (common-lisp:defclass update-backend-apirequest common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-apirequest-resource-name :initform
                         (common-lisp:error ":resource-name is required"))
                        (resource-config :initarg :resource-config :type
                         (common-lisp:or backend-apiresource-config
                                         common-lisp:null)
                         :accessor %update-backend-apirequest-resource-config
                         :initform common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-apirequest-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-apirequest-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-backend-apirequest
                    'make-update-backend-apirequest))
 (common-lisp:defun make-update-backend-apirequest
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name resource-config
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-backend-apirequest
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-apirequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-apirequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-apirequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-apiresponse common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-apiresponse-status :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-apiresponse-operation :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-apiresponse-job-id :initform
                         common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-apiresponse-error :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-apiresponse-backend-environment-name
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-apiresponse-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-backend-apiresponse
                    'make-update-backend-apiresponse))
 (common-lisp:defun make-update-backend-apiresponse
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status operation job-id error
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-backend-apiresponse
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-apiresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-apiresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-apiresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-auth-forgot-password-config
                       common-lisp:nil
                       ((sms-settings :initarg :sms-settings :type
                         (common-lisp:or sms-settings common-lisp:null)
                         :accessor
                         %update-backend-auth-forgot-password-config-sms-settings
                         :initform common-lisp:nil)
                        (email-settings :initarg :email-settings :type
                         (common-lisp:or email-settings common-lisp:null)
                         :accessor
                         %update-backend-auth-forgot-password-config-email-settings
                         :initform common-lisp:nil)
                        (delivery-method :initarg :delivery-method :type
                         (common-lisp:or delivery-method common-lisp:null)
                         :accessor
                         %update-backend-auth-forgot-password-config-delivery-method
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-backend-auth-forgot-password-config
                    'make-update-backend-auth-forgot-password-config))
 (common-lisp:defun make-update-backend-auth-forgot-password-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sms-settings email-settings
                     delivery-method)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-auth-forgot-password-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-forgot-password-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-forgot-password-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-method))
      (common-lisp:list
       (common-lisp:cons "DeliveryMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-settings))
      (common-lisp:list
       (common-lisp:cons "EmailSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sms-settings))
      (common-lisp:list
       (common-lisp:cons "SmsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-forgot-password-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-auth-identity-pool-config common-lisp:nil
                       ((unauthenticated-login :initarg :unauthenticated-login
                         :type (common-lisp:or |__boolean| common-lisp:null)
                         :accessor
                         %update-backend-auth-identity-pool-config-unauthenticated-login
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-backend-auth-identity-pool-config
                    'make-update-backend-auth-identity-pool-config))
 (common-lisp:defun make-update-backend-auth-identity-pool-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unauthenticated-login)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-auth-identity-pool-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-identity-pool-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-identity-pool-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unauthenticated-login))
      (common-lisp:list
       (common-lisp:cons "UnauthenticatedLogin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-identity-pool-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-auth-mfaconfig common-lisp:nil
                       ((settings :initarg :settings :type
                         (common-lisp:or settings common-lisp:null) :accessor
                         %update-backend-auth-mfaconfig-settings :initform
                         common-lisp:nil)
                        (mfamode :initarg :mfamode :type
                         (common-lisp:or mfamode common-lisp:null) :accessor
                         %update-backend-auth-mfaconfig-mfamode :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-backend-auth-mfaconfig
                    'make-update-backend-auth-mfaconfig))
 (common-lisp:defun make-update-backend-auth-mfaconfig
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key settings mfamode)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-auth-mfaconfig
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-mfaconfig))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-mfaconfig))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfamode))
      (common-lisp:list
       (common-lisp:cons "MFAMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-mfaconfig))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-auth-oauth-config common-lisp:nil
                       ((social-provider-settings :initarg
                         :social-provider-settings :type
                         (common-lisp:or social-provider-settings
                                         common-lisp:null)
                         :accessor
                         %update-backend-auth-oauth-config-social-provider-settings
                         :initform common-lisp:nil)
                        (redirect-sign-out-uris :initarg
                         :redirect-sign-out-uris :type
                         (common-lisp:or list-of-string common-lisp:null)
                         :accessor
                         %update-backend-auth-oauth-config-redirect-sign-out-uris
                         :initform common-lisp:nil)
                        (redirect-sign-in-uris :initarg :redirect-sign-in-uris
                         :type (common-lisp:or list-of-string common-lisp:null)
                         :accessor
                         %update-backend-auth-oauth-config-redirect-sign-in-uris
                         :initform common-lisp:nil)
                        (oauth-scopes :initarg :oauth-scopes :type
                         (common-lisp:or list-of-oauth-scopes-element
                                         common-lisp:null)
                         :accessor
                         %update-backend-auth-oauth-config-oauth-scopes
                         :initform common-lisp:nil)
                        (oauth-grant-type :initarg :oauth-grant-type :type
                         (common-lisp:or oauth-grant-type common-lisp:null)
                         :accessor
                         %update-backend-auth-oauth-config-oauth-grant-type
                         :initform common-lisp:nil)
                        (domain-prefix :initarg :domain-prefix :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-auth-oauth-config-domain-prefix
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-backend-auth-oauth-config
                    'make-update-backend-auth-oauth-config))
 (common-lisp:defun make-update-backend-auth-oauth-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key social-provider-settings
                     redirect-sign-out-uris redirect-sign-in-uris oauth-scopes
                     oauth-grant-type domain-prefix)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-auth-oauth-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-oauth-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-oauth-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-prefix))
      (common-lisp:list
       (common-lisp:cons "DomainPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oauth-grant-type))
      (common-lisp:list
       (common-lisp:cons "OAuthGrantType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oauth-scopes))
      (common-lisp:list
       (common-lisp:cons "OAuthScopes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redirect-sign-in-uris))
      (common-lisp:list
       (common-lisp:cons "RedirectSignInURIs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redirect-sign-out-uris))
      (common-lisp:list
       (common-lisp:cons "RedirectSignOutURIs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'social-provider-settings))
      (common-lisp:list
       (common-lisp:cons "SocialProviderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-oauth-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-auth-password-policy-config
                       common-lisp:nil
                       ((minimum-length :initarg :minimum-length :type
                         (common-lisp:or |__double| common-lisp:null) :accessor
                         %update-backend-auth-password-policy-config-minimum-length
                         :initform common-lisp:nil)
                        (additional-constraints :initarg
                         :additional-constraints :type
                         (common-lisp:or list-of-additional-constraints-element
                                         common-lisp:null)
                         :accessor
                         %update-backend-auth-password-policy-config-additional-constraints
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-backend-auth-password-policy-config
                    'make-update-backend-auth-password-policy-config))
 (common-lisp:defun make-update-backend-auth-password-policy-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key minimum-length additional-constraints)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-auth-password-policy-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-password-policy-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-password-policy-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-constraints))
      (common-lisp:list
       (common-lisp:cons "AdditionalConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-length))
      (common-lisp:list
       (common-lisp:cons "MinimumLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-password-policy-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-auth-req-obj common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-auth-req-obj-resource-name :initform
                         (common-lisp:error ":resource-name is required"))
                        (resource-config :initarg :resource-config :type
                         (common-lisp:or update-backend-auth-resource-config
                                         common-lisp:null)
                         :accessor %update-backend-auth-req-obj-resource-config
                         :initform
                         (common-lisp:error ":resource-config is required"))))
 (common-lisp:export
  (common-lisp:list 'update-backend-auth-req-obj
                    'make-update-backend-auth-req-obj))
 (common-lisp:defun make-update-backend-auth-req-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name resource-config)
   (common-lisp:apply #'common-lisp:make-instance 'update-backend-auth-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-auth-request common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-auth-request-resource-name :initform
                         (common-lisp:error ":resource-name is required"))
                        (resource-config :initarg :resource-config :type
                         (common-lisp:or update-backend-auth-resource-config
                                         common-lisp:null)
                         :accessor %update-backend-auth-request-resource-config
                         :initform
                         (common-lisp:error ":resource-config is required"))
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-auth-request-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-auth-request-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-backend-auth-request
                    'make-update-backend-auth-request))
 (common-lisp:defun make-update-backend-auth-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name resource-config
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-backend-auth-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-auth-resource-config common-lisp:nil
                       ((user-pool-configs :initarg :user-pool-configs :type
                         (common-lisp:or update-backend-auth-user-pool-config
                                         common-lisp:null)
                         :accessor
                         %update-backend-auth-resource-config-user-pool-configs
                         :initform
                         (common-lisp:error ":user-pool-configs is required"))
                        (service :initarg :service :type
                         (common-lisp:or service common-lisp:null) :accessor
                         %update-backend-auth-resource-config-service :initform
                         (common-lisp:error ":service is required"))
                        (identity-pool-configs :initarg :identity-pool-configs
                         :type
                         (common-lisp:or
                          update-backend-auth-identity-pool-config
                          common-lisp:null)
                         :accessor
                         %update-backend-auth-resource-config-identity-pool-configs
                         :initform common-lisp:nil)
                        (auth-resources :initarg :auth-resources :type
                         (common-lisp:or auth-resources common-lisp:null)
                         :accessor
                         %update-backend-auth-resource-config-auth-resources
                         :initform
                         (common-lisp:error ":auth-resources is required"))))
 (common-lisp:export
  (common-lisp:list 'update-backend-auth-resource-config
                    'make-update-backend-auth-resource-config))
 (common-lisp:defun make-update-backend-auth-resource-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-pool-configs service
                     identity-pool-configs auth-resources)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-auth-resource-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-resource-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-resource-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-resources))
      (common-lisp:list
       (common-lisp:cons "AuthResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-pool-configs))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-configs))
      (common-lisp:list
       (common-lisp:cons "UserPoolConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-resource-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-auth-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-auth-response-status :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-auth-response-operation :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-auth-response-job-id :initform
                         common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-auth-response-error :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-auth-response-backend-environment-name
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-auth-response-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-backend-auth-response
                    'make-update-backend-auth-response))
 (common-lisp:defun make-update-backend-auth-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status operation job-id error
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-backend-auth-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-auth-user-pool-config common-lisp:nil
                       ((verification-message :initarg :verification-message
                         :type
                         (common-lisp:or
                          update-backend-auth-verification-message-config
                          common-lisp:null)
                         :accessor
                         %update-backend-auth-user-pool-config-verification-message
                         :initform common-lisp:nil)
                        (password-policy :initarg :password-policy :type
                         (common-lisp:or
                          update-backend-auth-password-policy-config
                          common-lisp:null)
                         :accessor
                         %update-backend-auth-user-pool-config-password-policy
                         :initform common-lisp:nil)
                        (oauth :initarg :oauth :type
                         (common-lisp:or update-backend-auth-oauth-config
                                         common-lisp:null)
                         :accessor %update-backend-auth-user-pool-config-oauth
                         :initform common-lisp:nil)
                        (mfa :initarg :mfa :type
                         (common-lisp:or update-backend-auth-mfaconfig
                                         common-lisp:null)
                         :accessor %update-backend-auth-user-pool-config-mfa
                         :initform common-lisp:nil)
                        (forgot-password :initarg :forgot-password :type
                         (common-lisp:or
                          update-backend-auth-forgot-password-config
                          common-lisp:null)
                         :accessor
                         %update-backend-auth-user-pool-config-forgot-password
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-backend-auth-user-pool-config
                    'make-update-backend-auth-user-pool-config))
 (common-lisp:defun make-update-backend-auth-user-pool-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key verification-message password-policy
                     oauth mfa forgot-password)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-auth-user-pool-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-user-pool-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-user-pool-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forgot-password))
      (common-lisp:list
       (common-lisp:cons "ForgotPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfa))
      (common-lisp:list
       (common-lisp:cons "Mfa"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oauth))
      (common-lisp:list
       (common-lisp:cons "OAuth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-policy))
      (common-lisp:list
       (common-lisp:cons "PasswordPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verification-message))
      (common-lisp:list
       (common-lisp:cons "VerificationMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-user-pool-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-auth-verification-message-config
                       common-lisp:nil
                       ((sms-settings :initarg :sms-settings :type
                         (common-lisp:or sms-settings common-lisp:null)
                         :accessor
                         %update-backend-auth-verification-message-config-sms-settings
                         :initform common-lisp:nil)
                        (email-settings :initarg :email-settings :type
                         (common-lisp:or email-settings common-lisp:null)
                         :accessor
                         %update-backend-auth-verification-message-config-email-settings
                         :initform common-lisp:nil)
                        (delivery-method :initarg :delivery-method :type
                         (common-lisp:or delivery-method common-lisp:null)
                         :accessor
                         %update-backend-auth-verification-message-config-delivery-method
                         :initform
                         (common-lisp:error ":delivery-method is required"))))
 (common-lisp:export
  (common-lisp:list 'update-backend-auth-verification-message-config
                    'make-update-backend-auth-verification-message-config))
 (common-lisp:defun make-update-backend-auth-verification-message-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sms-settings email-settings
                     delivery-method)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-auth-verification-message-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-verification-message-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-verification-message-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delivery-method))
      (common-lisp:list
       (common-lisp:cons "DeliveryMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-settings))
      (common-lisp:list
       (common-lisp:cons "EmailSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sms-settings))
      (common-lisp:list
       (common-lisp:cons "SmsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-auth-verification-message-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-config-req-obj common-lisp:nil
                       ((login-auth-config :initarg :login-auth-config :type
                         (common-lisp:or login-auth-config-req-obj
                                         common-lisp:null)
                         :accessor
                         %update-backend-config-req-obj-login-auth-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-backend-config-req-obj
                    'make-update-backend-config-req-obj))
 (common-lisp:defun make-update-backend-config-req-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key login-auth-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-config-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-config-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-config-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'login-auth-config))
      (common-lisp:list
       (common-lisp:cons "LoginAuthConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-config-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-config-request common-lisp:nil
                       ((login-auth-config :initarg :login-auth-config :type
                         (common-lisp:or login-auth-config-req-obj
                                         common-lisp:null)
                         :accessor
                         %update-backend-config-request-login-auth-config
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-config-request-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-backend-config-request
                    'make-update-backend-config-request))
 (common-lisp:defun make-update-backend-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key login-auth-config app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'login-auth-config))
      (common-lisp:list
       (common-lisp:cons "LoginAuthConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-config-response common-lisp:nil
                       ((login-auth-config :initarg :login-auth-config :type
                         (common-lisp:or login-auth-config-req-obj
                                         common-lisp:null)
                         :accessor
                         %update-backend-config-response-login-auth-config
                         :initform common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-config-response-error :initform
                         common-lisp:nil)
                        (backend-manager-app-id :initarg
                         :backend-manager-app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-config-response-backend-manager-app-id
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-config-response-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-backend-config-response
                    'make-update-backend-config-response))
 (common-lisp:defun make-update-backend-config-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key login-auth-config error
                     backend-manager-app-id app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-manager-app-id))
      (common-lisp:list
       (common-lisp:cons "BackendManagerAppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'login-auth-config))
      (common-lisp:list
       (common-lisp:cons "LoginAuthConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-job-request common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-job-request-status :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-job-request-operation :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-job-request-job-id :initform
                         (common-lisp:error ":job-id is required"))
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-job-request-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-job-request-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-backend-job-request
                    'make-update-backend-job-request))
 (common-lisp:defun make-update-backend-job-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status operation job-id
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-backend-job-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-job-response common-lisp:nil
                       ((update-time :initarg :update-time :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-job-response-update-time :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-job-response-status :initform
                         common-lisp:nil)
                        (operation :initarg :operation :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-job-response-operation :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-job-response-job-id :initform
                         common-lisp:nil)
                        (error :initarg :error :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-job-response-error :initform
                         common-lisp:nil)
                        (create-time :initarg :create-time :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-job-response-create-time :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-job-response-backend-environment-name
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-job-response-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-backend-job-response
                    'make-update-backend-job-response))
 (common-lisp:defun make-update-backend-job-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-time status operation job-id error
                     create-time backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-backend-job-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "CreateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-time))
      (common-lisp:list
       (common-lisp:cons "UpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-storage-req-obj common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-storage-req-obj-resource-name
                         :initform
                         (common-lisp:error ":resource-name is required"))
                        (resource-config :initarg :resource-config :type
                         (common-lisp:or update-backend-storage-resource-config
                                         common-lisp:null)
                         :accessor
                         %update-backend-storage-req-obj-resource-config
                         :initform
                         (common-lisp:error ":resource-config is required"))))
 (common-lisp:export
  (common-lisp:list 'update-backend-storage-req-obj
                    'make-update-backend-storage-req-obj))
 (common-lisp:defun make-update-backend-storage-req-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name resource-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-storage-req-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-storage-req-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-storage-req-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-storage-req-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-storage-request common-lisp:nil
                       ((resource-name :initarg :resource-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-storage-request-resource-name
                         :initform
                         (common-lisp:error ":resource-name is required"))
                        (resource-config :initarg :resource-config :type
                         (common-lisp:or update-backend-storage-resource-config
                                         common-lisp:null)
                         :accessor
                         %update-backend-storage-request-resource-config
                         :initform
                         (common-lisp:error ":resource-config is required"))
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-storage-request-backend-environment-name
                         :initform
                         (common-lisp:error
                          ":backend-environment-name is required"))
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-storage-request-app-id :initform
                         (common-lisp:error ":app-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-backend-storage-request
                    'make-update-backend-storage-request))
 (common-lisp:defun make-update-backend-storage-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-name resource-config
                     backend-environment-name app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-storage-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-storage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-storage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "ResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-storage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-storage-resource-config common-lisp:nil
                       ((service-name :initarg :service-name :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor
                         %update-backend-storage-resource-config-service-name
                         :initform
                         (common-lisp:error ":service-name is required"))
                        (permissions :initarg :permissions :type
                         (common-lisp:or backend-storage-permissions
                                         common-lisp:null)
                         :accessor
                         %update-backend-storage-resource-config-permissions
                         :initform
                         (common-lisp:error ":permissions is required"))))
 (common-lisp:export
  (common-lisp:list 'update-backend-storage-resource-config
                    'make-update-backend-storage-resource-config))
 (common-lisp:defun make-update-backend-storage-resource-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-name permissions)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-storage-resource-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-storage-resource-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-storage-resource-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions))
      (common-lisp:list
       (common-lisp:cons "Permissions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-storage-resource-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-backend-storage-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-storage-response-status :initform
                         common-lisp:nil)
                        (job-id :initarg :job-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-storage-response-job-id :initform
                         common-lisp:nil)
                        (backend-environment-name :initarg
                         :backend-environment-name :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-storage-response-backend-environment-name
                         :initform common-lisp:nil)
                        (app-id :initarg :app-id :type
                         (common-lisp:or |__string| common-lisp:null) :accessor
                         %update-backend-storage-response-app-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-backend-storage-response
                    'make-update-backend-storage-response))
 (common-lisp:defun make-update-backend-storage-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status job-id backend-environment-name
                     app-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-backend-storage-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-storage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-storage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "AppId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backend-environment-name))
      (common-lisp:list
       (common-lisp:cons "BackendEnvironmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-backend-storage-response))
   common-lisp:nil))
(common-lisp:deftype additional-constraints-element () 'common-lisp:string)
(common-lisp:deftype authenticated-element () 'common-lisp:string)
(common-lisp:deftype mfa-types-element () 'common-lisp:string)
(common-lisp:deftype oauth-scopes-element () 'common-lisp:string)
(common-lisp:deftype required-sign-up-attributes-element () 'common-lisp:string)
(common-lisp:deftype un-authenticated-element () 'common-lisp:string)
(common-lisp:deftype |__boolean| () 'common-lisp:boolean)
(common-lisp:deftype |__double| () 'common-lisp:double-float)
(common-lisp:deftype |__integer| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max25| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype list-of-backend-apiauth-type ()
   '(trivial-types:proper-list backend-apiauth-type))
 (common-lisp:defun |make-list-of-backend-apiauth-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list backend-apiauth-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-backend-job-resp-obj ()
   '(trivial-types:proper-list backend-job-resp-obj))
 (common-lisp:defun |make-list-of-backend-job-resp-obj|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list backend-job-resp-obj))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-s3bucket-info ()
   '(trivial-types:proper-list s3bucket-info))
 (common-lisp:defun |make-list-of-s3bucket-info|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3bucket-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-additional-constraints-element ()
   '(trivial-types:proper-list additional-constraints-element))
 (common-lisp:defun |make-list-of-additional-constraints-element|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            additional-constraints-element))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-authenticated-element ()
   '(trivial-types:proper-list authenticated-element))
 (common-lisp:defun |make-list-of-authenticated-element|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list authenticated-element))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-mfa-types-element ()
   '(trivial-types:proper-list mfa-types-element))
 (common-lisp:defun |make-list-of-mfa-types-element|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mfa-types-element))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-oauth-scopes-element ()
   '(trivial-types:proper-list oauth-scopes-element))
 (common-lisp:defun |make-list-of-oauth-scopes-element|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list oauth-scopes-element))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-required-sign-up-attributes-element ()
   '(trivial-types:proper-list required-sign-up-attributes-element))
 (common-lisp:defun |make-list-of-required-sign-up-attributes-element|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            required-sign-up-attributes-element))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-un-authenticated-element ()
   '(trivial-types:proper-list un-authenticated-element))
 (common-lisp:defun |make-list-of-un-authenticated-element|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            un-authenticated-element))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-of-string ()
   '(trivial-types:proper-list |__string|))
 (common-lisp:defun |make-list-of-string|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |__string|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |__long| () 'common-lisp:integer)
(common-lisp:deftype |__string| () 'common-lisp:string)
(common-lisp:deftype |__timestampIso8601| () 'common-lisp:string)
(common-lisp:deftype |__timestampUnix| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun clone-backend
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     target-environment-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name
     target-environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-clone-backend-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/environments/~A/clone"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "CloneBackend"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'clone-backend))
(common-lisp:progn
 (common-lisp:defun create-backend
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id app-name backend-environment-name
                     resource-config resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id app-name backend-environment-name
     resource-config resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-backend-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/backend"
                                                        "CreateBackend"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-backend))
(common-lisp:progn
 (common-lisp:defun create-backend-api
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-config resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-config
     resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-backend-apirequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/api"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "CreateBackendAPI"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-backend-api))
(common-lisp:progn
 (common-lisp:defun create-backend-auth
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-config resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-config
     resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-backend-auth-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/auth"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "CreateBackendAuth"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-backend-auth))
(common-lisp:progn
 (common-lisp:defun create-backend-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-manager-app-id)
   (common-lisp:declare (common-lisp:ignorable app-id backend-manager-app-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-backend-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "CreateBackendConfig"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-backend-config))
(common-lisp:progn
 (common-lisp:defun create-backend-storage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-config resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-config
     resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-backend-storage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/storage"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "CreateBackendStorage"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-backend-storage))
(common-lisp:progn
 (common-lisp:defun create-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id)
   (common-lisp:declare (common-lisp:ignorable app-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/challenge"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "CreateToken"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-token))
(common-lisp:progn
 (common-lisp:defun delete-backend
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-backend-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/environments/~A/remove"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "DeleteBackend"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-backend))
(common-lisp:progn
 (common-lisp:defun delete-backend-api
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-config resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-config
     resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-backend-apirequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/api/~A/remove"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "DeleteBackendAPI"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-backend-api))
(common-lisp:progn
 (common-lisp:defun delete-backend-auth
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-backend-auth-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/auth/~A/remove"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "DeleteBackendAuth"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-backend-auth))
(common-lisp:progn
 (common-lisp:defun delete-backend-storage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-name service-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-name
     service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-backend-storage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/storage/~A/remove"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "DeleteBackendStorage"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-backend-storage))
(common-lisp:progn
 (common-lisp:defun delete-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id session-id)
   (common-lisp:declare (common-lisp:ignorable app-id session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/challenge/~A/remove"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "DeleteToken"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-token))
(common-lisp:progn
 (common-lisp:defun generate-backend-apimodels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-generate-backend-apimodels-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/api/~A/generateModels"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "GenerateBackendAPIModels"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'generate-backend-apimodels))
(common-lisp:progn
 (common-lisp:defun get-backend
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-backend-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/details"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "GetBackend"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-backend))
(common-lisp:progn
 (common-lisp:defun get-backend-api
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-config resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-config
     resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-backend-apirequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/api/~A/details"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "GetBackendAPI"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-backend-api))
(common-lisp:progn
 (common-lisp:defun get-backend-apimodels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-backend-apimodels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/api/~A/getModels"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "GetBackendAPIModels"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-backend-apimodels))
(common-lisp:progn
 (common-lisp:defun get-backend-auth
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-backend-auth-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/auth/~A/details"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "GetBackendAuth"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-backend-auth))
(common-lisp:progn
 (common-lisp:defun get-backend-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name job-id)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-backend-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/job/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "GetBackendJob"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-backend-job))
(common-lisp:progn
 (common-lisp:defun get-backend-storage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-backend-storage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/storage/~A/details"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "GetBackendStorage"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-backend-storage))
(common-lisp:progn
 (common-lisp:defun get-token
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id session-id)
   (common-lisp:declare (common-lisp:ignorable app-id session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-token-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/challenge/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "GetToken"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-token))
(common-lisp:progn
 (common-lisp:defun import-backend-auth
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     identity-pool-id native-client-id user-pool-id
                     web-client-id)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name identity-pool-id
     native-client-id user-pool-id web-client-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-backend-auth-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/auth/~A/import"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "ImportBackendAuth"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-backend-auth))
(common-lisp:progn
 (common-lisp:defun import-backend-storage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     bucket-name service-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name bucket-name
     service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-backend-storage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/storage/~A/import"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "ImportBackendStorage"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-backend-storage))
(common-lisp:progn
 (common-lisp:defun list-backend-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name job-id
                     max-results next-token operation status)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name job-id max-results
     next-token operation status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-backend-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/job/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "ListBackendJobs"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-backend-jobs))
(common-lisp:progn
 (common-lisp:defun list-s3buckets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-s3buckets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/s3Buckets"
                                                        "ListS3Buckets"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-s3buckets))
(common-lisp:progn
 (common-lisp:defun remove-all-backends
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id clean-amplify-app)
   (common-lisp:declare (common-lisp:ignorable app-id clean-amplify-app))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-all-backends-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/remove"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "RemoveAllBackends"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-all-backends))
(common-lisp:progn
 (common-lisp:defun remove-backend-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id)
   (common-lisp:declare (common-lisp:ignorable app-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-backend-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/config/remove"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "RemoveBackendConfig"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-backend-config))
(common-lisp:progn
 (common-lisp:defun update-backend-api
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-config resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-config
     resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-backend-apirequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/api/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "UpdateBackendAPI"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-backend-api))
(common-lisp:progn
 (common-lisp:defun update-backend-auth
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-config resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-config
     resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-backend-auth-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/auth/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "UpdateBackendAuth"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-backend-auth))
(common-lisp:progn
 (common-lisp:defun update-backend-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id login-auth-config)
   (common-lisp:declare (common-lisp:ignorable app-id login-auth-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-backend-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/config/update"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))))
                                                        "UpdateBackendConfig"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-backend-config))
(common-lisp:progn
 (common-lisp:defun update-backend-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name job-id
                     operation status)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name job-id operation
     status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-backend-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/job/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "UpdateBackendJob"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-backend-job))
(common-lisp:progn
 (common-lisp:defun update-backend-storage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-id backend-environment-name
                     resource-config resource-name)
   (common-lisp:declare
    (common-lisp:ignorable app-id backend-environment-name resource-config
     resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-backend-storage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'amplifybackend-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/backend/~A/storage/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'backend-environment-name))))
                                                        "UpdateBackendStorage"
                                                        "2020-08-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-backend-storage))
