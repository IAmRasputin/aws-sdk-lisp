;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/arc-zonal-shift/api
  (:use)
  (:nicknames #:aws/arc-zonal-shift)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/arc-zonal-shift/api)
(common-lisp:progn
 (common-lisp:defclass arc-zonal-shift-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "arc-zonal-shift" :protocol
                        :rest-json))
 (common-lisp:export 'arc-zonal-shift-request))
(common-lisp:progn
 (common-lisp:define-condition arc-zonal-shift-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'arc-zonal-shift-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (arc-zonal-shift-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype applied-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype applied-weights () 'common-lisp:hash-table)
 (common-lisp:defun |make-applied-weights|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype availability-zone () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype availability-zones ()
   '(trivial-types:proper-list availability-zone))
 (common-lisp:defun |make-availability-zones|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list availability-zone))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-zonal-shift-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-zonal-shift-request-"))
   (zonal-shift-id (common-lisp:error ":zonalshiftid is required") :type
    (common-lisp:or zonal-shift-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-zonal-shift-request
                    'make-cancel-zonal-shift-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-zonal-shift-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-zonal-shift-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-zonal-shift-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (arc-zonal-shift-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       conflict-exception-reason)
      (zonal-shift-id :initarg :zonal-shift-id :initform common-lisp:nil
       :reader conflict-exception-zonal-shift-id)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-reason
                    'conflict-exception-zonal-shift-id)))
(common-lisp:deftype conflict-exception-reason () 'common-lisp:string)
(common-lisp:deftype expires-in () 'common-lisp:string)
(common-lisp:deftype expiry-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-managed-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-managed-resource-request-"))
   (resource-identifier (common-lisp:error ":resourceidentifier is required")
    :type (common-lisp:or resource-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-managed-resource-request
                    'make-get-managed-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-managed-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-managed-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-managed-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-managed-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-managed-resource-response-"))
   (applied-weights (common-lisp:error ":appliedweights is required") :type
    (common-lisp:or applied-weights common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or resource-arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (zonal-shifts (common-lisp:error ":zonalshifts is required") :type
    (common-lisp:or zonal-shifts-in-resource common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-managed-resource-response
                    'make-get-managed-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-managed-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-managed-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applied-weights))
      (common-lisp:list
       (common-lisp:cons "appliedWeights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zonal-shifts))
      (common-lisp:list
       (common-lisp:cons "zonalShifts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-managed-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (arc-zonal-shift-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-managed-resources-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-managed-resources-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-managed-resources-request
                    'make-list-managed-resources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-managed-resources-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-managed-resources-response-"))
   (items (common-lisp:error ":items is required") :type
    (common-lisp:or managed-resource-summaries common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-managed-resources-response
                    'make-list-managed-resources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-zonal-shifts-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-zonal-shifts-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or zonal-shift-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-zonal-shifts-request
                    'make-list-zonal-shifts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-zonal-shifts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-zonal-shifts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-zonal-shifts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-zonal-shifts-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-zonal-shifts-response-"))
   (items common-lisp:nil :type
    (common-lisp:or zonal-shift-summaries common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-zonal-shifts-response
                    'make-list-zonal-shifts-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-zonal-shifts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-zonal-shifts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'items))
      (common-lisp:list
       (common-lisp:cons "items"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-zonal-shifts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype managed-resource-summaries ()
   '(trivial-types:proper-list managed-resource-summary))
 (common-lisp:defun |make-managed-resource-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            managed-resource-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (managed-resource-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-managed-resource-summary-"))
   (arn common-lisp:nil :type (common-lisp:or resource-arn common-lisp:null))
   (availability-zones (common-lisp:error ":availabilityzones is required")
    :type (common-lisp:or availability-zones common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'managed-resource-summary 'make-managed-resource-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          managed-resource-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          managed-resource-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "availabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          managed-resource-summary))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:deftype resource-identifier () 'common-lisp:string)
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (arc-zonal-shift-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype start-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-zonal-shift-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-zonal-shift-request-"))
   (away-from (common-lisp:error ":awayfrom is required") :type
    (common-lisp:or availability-zone common-lisp:null))
   (comment (common-lisp:error ":comment is required") :type
    (common-lisp:or zonal-shift-comment common-lisp:null))
   (expires-in (common-lisp:error ":expiresin is required") :type
    (common-lisp:or expires-in common-lisp:null))
   (resource-identifier (common-lisp:error ":resourceidentifier is required")
    :type (common-lisp:or resource-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-zonal-shift-request
                    'make-start-zonal-shift-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-zonal-shift-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-zonal-shift-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'away-from))
      (common-lisp:list
       (common-lisp:cons "awayFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-in))
      (common-lisp:list
       (common-lisp:cons "expiresIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-zonal-shift-request))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (arc-zonal-shift-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-zonal-shift-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-zonal-shift-request-"))
   (comment common-lisp:nil :type
    (common-lisp:or zonal-shift-comment common-lisp:null))
   (expires-in common-lisp:nil :type
    (common-lisp:or expires-in common-lisp:null))
   (zonal-shift-id (common-lisp:error ":zonalshiftid is required") :type
    (common-lisp:or zonal-shift-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-zonal-shift-request
                    'make-update-zonal-shift-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-zonal-shift-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-zonal-shift-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-in))
      (common-lisp:list
       (common-lisp:cons "expiresIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-zonal-shift-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (arc-zonal-shift-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       validation-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message
                    'validation-exception-reason)))
(common-lisp:deftype validation-exception-reason () 'common-lisp:string)
(common-lisp:deftype weight () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defstruct
     (zonal-shift (:copier common-lisp:nil)
      (:conc-name "struct-shape-zonal-shift-"))
   (away-from (common-lisp:error ":awayfrom is required") :type
    (common-lisp:or availability-zone common-lisp:null))
   (comment (common-lisp:error ":comment is required") :type
    (common-lisp:or zonal-shift-comment common-lisp:null))
   (expiry-time (common-lisp:error ":expirytime is required") :type
    (common-lisp:or expiry-time common-lisp:null))
   (resource-identifier (common-lisp:error ":resourceidentifier is required")
    :type (common-lisp:or resource-identifier common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or start-time common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or zonal-shift-status common-lisp:null))
   (zonal-shift-id (common-lisp:error ":zonalshiftid is required") :type
    (common-lisp:or zonal-shift-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'zonal-shift 'make-zonal-shift))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input zonal-shift))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input zonal-shift))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'away-from))
      (common-lisp:list
       (common-lisp:cons "awayFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiry-time))
      (common-lisp:list
       (common-lisp:cons "expiryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zonal-shift-id))
      (common-lisp:list
       (common-lisp:cons "zonalShiftId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input zonal-shift))
   common-lisp:nil))
(common-lisp:deftype zonal-shift-comment () 'common-lisp:string)
(common-lisp:deftype zonal-shift-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (zonal-shift-in-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-zonal-shift-in-resource-"))
   (applied-status (common-lisp:error ":appliedstatus is required") :type
    (common-lisp:or applied-status common-lisp:null))
   (away-from (common-lisp:error ":awayfrom is required") :type
    (common-lisp:or availability-zone common-lisp:null))
   (comment (common-lisp:error ":comment is required") :type
    (common-lisp:or zonal-shift-comment common-lisp:null))
   (expiry-time (common-lisp:error ":expirytime is required") :type
    (common-lisp:or expiry-time common-lisp:null))
   (resource-identifier (common-lisp:error ":resourceidentifier is required")
    :type (common-lisp:or resource-identifier common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or start-time common-lisp:null))
   (zonal-shift-id (common-lisp:error ":zonalshiftid is required") :type
    (common-lisp:or zonal-shift-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'zonal-shift-in-resource 'make-zonal-shift-in-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          zonal-shift-in-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          zonal-shift-in-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applied-status))
      (common-lisp:list
       (common-lisp:cons "appliedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'away-from))
      (common-lisp:list
       (common-lisp:cons "awayFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiry-time))
      (common-lisp:list
       (common-lisp:cons "expiryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zonal-shift-id))
      (common-lisp:list
       (common-lisp:cons "zonalShiftId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          zonal-shift-in-resource))
   common-lisp:nil))
(common-lisp:deftype zonal-shift-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype zonal-shift-summaries ()
   '(trivial-types:proper-list zonal-shift-summary))
 (common-lisp:defun |make-zonal-shift-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list zonal-shift-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (zonal-shift-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-zonal-shift-summary-"))
   (away-from (common-lisp:error ":awayfrom is required") :type
    (common-lisp:or availability-zone common-lisp:null))
   (comment (common-lisp:error ":comment is required") :type
    (common-lisp:or zonal-shift-comment common-lisp:null))
   (expiry-time (common-lisp:error ":expirytime is required") :type
    (common-lisp:or expiry-time common-lisp:null))
   (resource-identifier (common-lisp:error ":resourceidentifier is required")
    :type (common-lisp:or resource-identifier common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or start-time common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or zonal-shift-status common-lisp:null))
   (zonal-shift-id (common-lisp:error ":zonalshiftid is required") :type
    (common-lisp:or zonal-shift-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'zonal-shift-summary 'make-zonal-shift-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input zonal-shift-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input zonal-shift-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'away-from))
      (common-lisp:list
       (common-lisp:cons "awayFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiry-time))
      (common-lisp:list
       (common-lisp:cons "expiryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "resourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zonal-shift-id))
      (common-lisp:list
       (common-lisp:cons "zonalShiftId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input zonal-shift-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype zonal-shifts-in-resource ()
   '(trivial-types:proper-list zonal-shift-in-resource))
 (common-lisp:defun |make-zonal-shifts-in-resource|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list zonal-shift-in-resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun cancel-zonal-shift
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key zonal-shift-id)
   (common-lisp:declare (common-lisp:ignorable zonal-shift-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-zonal-shift-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'arc-zonal-shift-request aws-sdk/generator/operation::input "DELETE"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/zonalshifts/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'zonal-shift-id))))
        "CancelZonalShift" "2022-10-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-zonal-shift))
(common-lisp:progn
 (common-lisp:defun get-managed-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-identifier)
   (common-lisp:declare (common-lisp:ignorable resource-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-managed-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'arc-zonal-shift-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/managedresources/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-identifier))))
        "GetManagedResource" "2022-10-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-managed-resource))
(common-lisp:progn
 (common-lisp:defun list-managed-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-managed-resources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'arc-zonal-shift-request aws-sdk/generator/operation::input "GET"
        :rest-json "/managedresources" "ListManagedResources" "2022-10-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-managed-resources))
(common-lisp:progn
 (common-lisp:defun list-zonal-shifts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token status)
   (common-lisp:declare (common-lisp:ignorable max-results next-token status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-zonal-shifts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'arc-zonal-shift-request aws-sdk/generator/operation::input "GET"
        :rest-json "/zonalshifts" "ListZonalShifts" "2022-10-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-zonal-shifts))
(common-lisp:progn
 (common-lisp:defun start-zonal-shift
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key away-from comment expires-in
                     resource-identifier)
   (common-lisp:declare
    (common-lisp:ignorable away-from comment expires-in resource-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-zonal-shift-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'arc-zonal-shift-request aws-sdk/generator/operation::input "POST"
        :rest-json "/zonalshifts" "StartZonalShift" "2022-10-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-zonal-shift))
(common-lisp:progn
 (common-lisp:defun update-zonal-shift
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key comment expires-in zonal-shift-id)
   (common-lisp:declare
    (common-lisp:ignorable comment expires-in zonal-shift-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-zonal-shift-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'arc-zonal-shift-request aws-sdk/generator/operation::input "PATCH"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/zonalshifts/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'zonal-shift-id))))
        "UpdateZonalShift" "2022-10-30"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-zonal-shift))
