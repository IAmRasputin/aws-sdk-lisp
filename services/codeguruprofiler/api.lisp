;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/codeguruprofiler/api
  (:use)
  (:nicknames #:aws/codeguruprofiler)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/codeguruprofiler/api)
(common-lisp:progn
 (common-lisp:defclass codeguruprofiler-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "codeguruprofiler" :protocol
                        :rest-json))
 (common-lisp:export 'codeguruprofiler-request))
(common-lisp:progn
 (common-lisp:define-condition codeguruprofiler-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'codeguruprofiler-error))
(common-lisp:defvar *error-map*
  '(("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype action-group () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass add-notification-channels-request common-lisp:nil
                       ((profiling-group-name :initarg :|profilingGroupName|
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         %add-notification-channels-request-profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required"))
                        (channels :initarg :|channels| :type
                         (common-lisp:or channels common-lisp:null) :accessor
                         %add-notification-channels-request-channels :initform
                         (common-lisp:error ":channels is required"))))
 (common-lisp:export
  (common-lisp:list 'add-notification-channels-request
                    'make-add-notification-channels-request))
 (common-lisp:defun make-add-notification-channels-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profiling-group-name channels)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-notification-channels-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-notification-channels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-notification-channels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-notification-channels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-notification-channels-response common-lisp:nil
                       ((notification-configuration :initarg
                         :|notificationConfiguration| :type
                         (common-lisp:or notification-configuration
                                         common-lisp:null)
                         :accessor
                         %add-notification-channels-response-notification-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'add-notification-channels-response
                    'make-add-notification-channels-response))
 (common-lisp:defun make-add-notification-channels-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key notification-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-notification-channels-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-notification-channels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-notification-channels-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-configuration))
      (common-lisp:list
       (common-lisp:cons "notificationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-notification-channels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass agent-configuration common-lisp:nil
                       ((should-profile :initarg :|shouldProfile| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %agent-configuration-should-profile :initform
                         (common-lisp:error ":shouldprofile is required"))
                        (period-in-seconds :initarg :|periodInSeconds| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %agent-configuration-period-in-seconds :initform
                         (common-lisp:error ":periodinseconds is required"))
                        (agent-parameters :initarg :|agentParameters| :type
                         (common-lisp:or agent-parameters common-lisp:null)
                         :accessor %agent-configuration-agent-parameters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'agent-configuration 'make-agent-configuration))
 (common-lisp:defun make-agent-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key should-profile period-in-seconds
                     agent-parameters)
   (common-lisp:apply #'common-lisp:make-instance 'agent-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input agent-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input agent-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-parameters))
      (common-lisp:list
       (common-lisp:cons "agentParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period-in-seconds))
      (common-lisp:list
       (common-lisp:cons "periodInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'should-profile))
      (common-lisp:list
       (common-lisp:cons "shouldProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input agent-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass agent-orchestration-config common-lisp:nil
                       ((profiling-enabled :initarg :|profilingEnabled| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %agent-orchestration-config-profiling-enabled
                         :initform
                         (common-lisp:error ":profilingenabled is required"))))
 (common-lisp:export
  (common-lisp:list 'agent-orchestration-config
                    'make-agent-orchestration-config))
 (common-lisp:defun make-agent-orchestration-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profiling-enabled)
   (common-lisp:apply #'common-lisp:make-instance 'agent-orchestration-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          agent-orchestration-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          agent-orchestration-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiling-enabled))
      (common-lisp:list
       (common-lisp:cons "profilingEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          agent-orchestration-config))
   common-lisp:nil))
(common-lisp:deftype agent-parameter-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype agent-parameters () 'common-lisp:hash-table)
 (common-lisp:defun |make-agent-parameters|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype agent-profile ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype aggregated-profile ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass aggregated-profile-time common-lisp:nil
                       ((start :initarg :|start| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %aggregated-profile-time-start :initform
                         common-lisp:nil)
                        (period :initarg :|period| :type
                         (common-lisp:or aggregation-period common-lisp:null)
                         :accessor %aggregated-profile-time-period :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'aggregated-profile-time 'make-aggregated-profile-time))
 (common-lisp:defun make-aggregated-profile-time
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start period)
   (common-lisp:apply #'common-lisp:make-instance 'aggregated-profile-time
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-profile-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-profile-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          aggregated-profile-time))
   common-lisp:nil))
(common-lisp:deftype aggregation-period () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype anomalies () '(trivial-types:proper-list anomaly))
 (common-lisp:defun |make-anomalies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list anomaly))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass anomaly common-lisp:nil
                       ((reason :initarg :|reason| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %anomaly-reason :initform
                         (common-lisp:error ":reason is required"))
                        (metric :initarg :|metric| :type
                         (common-lisp:or metric common-lisp:null) :accessor
                         %anomaly-metric :initform
                         (common-lisp:error ":metric is required"))
                        (instances :initarg :|instances| :type
                         (common-lisp:or anomaly-instances common-lisp:null)
                         :accessor %anomaly-instances :initform
                         (common-lisp:error ":instances is required"))))
 (common-lisp:export (common-lisp:list 'anomaly 'make-anomaly))
 (common-lisp:defun make-anomaly
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reason metric instances)
   (common-lisp:apply #'common-lisp:make-instance 'anomaly
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input anomaly))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input anomaly))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input anomaly))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass anomaly-instance common-lisp:nil
                       ((user-feedback :initarg :|userFeedback| :type
                         (common-lisp:or user-feedback common-lisp:null)
                         :accessor %anomaly-instance-user-feedback :initform
                         common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %anomaly-instance-start-time :initform
                         (common-lisp:error ":starttime is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %anomaly-instance-id :initform
                         (common-lisp:error ":id is required"))
                        (end-time :initarg :|endTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %anomaly-instance-end-time :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'anomaly-instance 'make-anomaly-instance))
 (common-lisp:defun make-anomaly-instance
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-feedback start-time id end-time)
   (common-lisp:apply #'common-lisp:make-instance 'anomaly-instance
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input anomaly-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input anomaly-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-feedback))
      (common-lisp:list
       (common-lisp:cons "userFeedback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input anomaly-instance))
   common-lisp:nil))
(common-lisp:deftype anomaly-instance-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype anomaly-instances ()
   '(trivial-types:proper-list anomaly-instance))
 (common-lisp:defun |make-anomaly-instances|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list anomaly-instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-get-frame-metric-data-request common-lisp:nil
                       ((target-resolution :initarg :|targetResolution| :type
                         (common-lisp:or aggregation-period common-lisp:null)
                         :accessor
                         %batch-get-frame-metric-data-request-target-resolution
                         :initform common-lisp:nil)
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %batch-get-frame-metric-data-request-start-time
                         :initform common-lisp:nil)
                        (profiling-group-name :initarg :|profilingGroupName|
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         %batch-get-frame-metric-data-request-profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required"))
                        (period :initarg :|period| :type
                         (common-lisp:or period common-lisp:null) :accessor
                         %batch-get-frame-metric-data-request-period :initform
                         common-lisp:nil)
                        (frame-metrics :initarg :|frameMetrics| :type
                         (common-lisp:or frame-metrics common-lisp:null)
                         :accessor
                         %batch-get-frame-metric-data-request-frame-metrics
                         :initform common-lisp:nil)
                        (end-time :initarg :|endTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %batch-get-frame-metric-data-request-end-time
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-get-frame-metric-data-request
                    'make-batch-get-frame-metric-data-request))
 (common-lisp:defun make-batch-get-frame-metric-data-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-resolution start-time
                     profiling-group-name period frame-metrics end-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-frame-metric-data-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-frame-metric-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-frame-metric-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frame-metrics))
      (common-lisp:list
       (common-lisp:cons "frameMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-frame-metric-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-frame-metric-data-response common-lisp:nil
                       ((unprocessed-end-times :initarg :|unprocessedEndTimes|
                         :type
                         (common-lisp:or unprocessed-end-time-map
                                         common-lisp:null)
                         :accessor
                         %batch-get-frame-metric-data-response-unprocessed-end-times
                         :initform
                         (common-lisp:error
                          ":unprocessedendtimes is required"))
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %batch-get-frame-metric-data-response-start-time
                         :initform
                         (common-lisp:error ":starttime is required"))
                        (resolution :initarg :|resolution| :type
                         (common-lisp:or aggregation-period common-lisp:null)
                         :accessor
                         %batch-get-frame-metric-data-response-resolution
                         :initform
                         (common-lisp:error ":resolution is required"))
                        (frame-metric-data :initarg :|frameMetricData| :type
                         (common-lisp:or frame-metric-data common-lisp:null)
                         :accessor
                         %batch-get-frame-metric-data-response-frame-metric-data
                         :initform
                         (common-lisp:error ":framemetricdata is required"))
                        (end-times :initarg :|endTimes| :type
                         (common-lisp:or list-of-timestamps common-lisp:null)
                         :accessor
                         %batch-get-frame-metric-data-response-end-times
                         :initform (common-lisp:error ":endtimes is required"))
                        (end-time :initarg :|endTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %batch-get-frame-metric-data-response-end-time
                         :initform
                         (common-lisp:error ":endtime is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-get-frame-metric-data-response
                    'make-batch-get-frame-metric-data-response))
 (common-lisp:defun make-batch-get-frame-metric-data-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unprocessed-end-times start-time
                     resolution frame-metric-data end-times end-time)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-frame-metric-data-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-frame-metric-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-frame-metric-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-times))
      (common-lisp:list
       (common-lisp:cons "endTimes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frame-metric-data))
      (common-lisp:list
       (common-lisp:cons "frameMetricData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution))
      (common-lisp:list
       (common-lisp:cons "resolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unprocessed-end-times))
      (common-lisp:list
       (common-lisp:cons "unprocessedEndTimes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-frame-metric-data-response))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass channel common-lisp:nil
                       ((uri :initarg :|uri| :type
                         (common-lisp:or channel-uri common-lisp:null)
                         :accessor %channel-uri :initform
                         (common-lisp:error ":uri is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or channel-id common-lisp:null) :accessor
                         %channel-id :initform common-lisp:nil)
                        (event-publishers :initarg :|eventPublishers| :type
                         (common-lisp:or event-publishers common-lisp:null)
                         :accessor %channel-event-publishers :initform
                         (common-lisp:error ":eventpublishers is required"))))
 (common-lisp:export (common-lisp:list 'channel 'make-channel))
 (common-lisp:defun make-channel
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key uri id event-publishers)
   (common-lisp:apply #'common-lisp:make-instance 'channel
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-publishers))
      (common-lisp:list
       (common-lisp:cons "eventPublishers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel))
   common-lisp:nil))
(common-lisp:deftype channel-id () 'common-lisp:string)
(common-lisp:deftype channel-uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype channels () '(trivial-types:proper-list channel))
 (common-lisp:defun |make-channels|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list channel))
   aws-sdk/generator/shape::members))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:deftype compute-platform () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configure-agent-request common-lisp:nil
                       ((profiling-group-name :initarg :|profilingGroupName|
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         %configure-agent-request-profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required"))
                        (metadata :initarg :|metadata| :type
                         (common-lisp:or metadata common-lisp:null) :accessor
                         %configure-agent-request-metadata :initform
                         common-lisp:nil)
                        (fleet-instance-id :initarg :|fleetInstanceId| :type
                         (common-lisp:or fleet-instance-id common-lisp:null)
                         :accessor %configure-agent-request-fleet-instance-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'configure-agent-request 'make-configure-agent-request))
 (common-lisp:defun make-configure-agent-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profiling-group-name metadata
                     fleet-instance-id)
   (common-lisp:apply #'common-lisp:make-instance 'configure-agent-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configure-agent-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configure-agent-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fleet-instance-id))
      (common-lisp:list
       (common-lisp:cons "fleetInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configure-agent-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass configure-agent-response common-lisp:nil
                       ((configuration :initarg :|configuration| :type
                         (common-lisp:or agent-configuration common-lisp:null)
                         :accessor %configure-agent-response-configuration
                         :initform
                         (common-lisp:error ":configuration is required"))))
 (common-lisp:export
  (common-lisp:list 'configure-agent-response 'make-configure-agent-response))
 (common-lisp:defun make-configure-agent-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration)
   (common-lisp:apply #'common-lisp:make-instance 'configure-agent-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configure-agent-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configure-agent-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configure-agent-response))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'configuration))))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (codeguruprofiler-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defclass create-profiling-group-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %create-profiling-group-request-tags :initform
                         common-lisp:nil)
                        (profiling-group-name :initarg :|profilingGroupName|
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         %create-profiling-group-request-profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required"))
                        (compute-platform :initarg :|computePlatform| :type
                         (common-lisp:or compute-platform common-lisp:null)
                         :accessor
                         %create-profiling-group-request-compute-platform
                         :initform common-lisp:nil)
                        (client-token :initarg :|clientToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-profiling-group-request-client-token
                         :initform
                         (common-lisp:error ":clienttoken is required"))
                        (agent-orchestration-config :initarg
                         :|agentOrchestrationConfig| :type
                         (common-lisp:or agent-orchestration-config
                                         common-lisp:null)
                         :accessor
                         %create-profiling-group-request-agent-orchestration-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-profiling-group-request
                    'make-create-profiling-group-request))
 (common-lisp:defun make-create-profiling-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags profiling-group-name
                     compute-platform client-token agent-orchestration-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-profiling-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-profiling-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-profiling-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agent-orchestration-config))
      (common-lisp:list
       (common-lisp:cons "agentOrchestrationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-platform))
      (common-lisp:list
       (common-lisp:cons "computePlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'profiling-group-name))
      (common-lisp:list
       (common-lisp:cons "profilingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-profiling-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-profiling-group-response common-lisp:nil
                       ((profiling-group :initarg :|profilingGroup| :type
                         (common-lisp:or profiling-group-description
                                         common-lisp:null)
                         :accessor
                         %create-profiling-group-response-profiling-group
                         :initform
                         (common-lisp:error ":profilinggroup is required"))))
 (common-lisp:export
  (common-lisp:list 'create-profiling-group-response
                    'make-create-profiling-group-response))
 (common-lisp:defun make-create-profiling-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profiling-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-profiling-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-profiling-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-profiling-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiling-group))
      (common-lisp:list
       (common-lisp:cons "profilingGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-profiling-group-response))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'profiling-group))))
(common-lisp:progn
 (common-lisp:defclass delete-profiling-group-request common-lisp:nil
                       ((profiling-group-name :initarg :|profilingGroupName|
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         %delete-profiling-group-request-profiling-group-name
                         :initform
                         (common-lisp:error
                          ":profilinggroupname is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-profiling-group-request
                    'make-delete-profiling-group-request))
 (common-lisp:defun make-delete-profiling-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profiling-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-profiling-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profiling-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profiling-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profiling-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-profiling-group-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-profiling-group-response
                    'make-delete-profiling-group-response))
 (common-lisp:defun make-delete-profiling-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-profiling-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-profiling-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-profiling-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-profiling-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-profiling-group-request common-lisp:nil
                       ((profiling-group-name :initarg :|profilingGroupName|
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         %describe-profiling-group-request-profiling-group-name
                         :initform
                         (common-lisp:error
                          ":profilinggroupname is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-profiling-group-request
                    'make-describe-profiling-group-request))
 (common-lisp:defun make-describe-profiling-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profiling-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-profiling-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-profiling-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-profiling-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-profiling-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-profiling-group-response common-lisp:nil
                       ((profiling-group :initarg :|profilingGroup| :type
                         (common-lisp:or profiling-group-description
                                         common-lisp:null)
                         :accessor
                         %describe-profiling-group-response-profiling-group
                         :initform
                         (common-lisp:error ":profilinggroup is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-profiling-group-response
                    'make-describe-profiling-group-response))
 (common-lisp:defun make-describe-profiling-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profiling-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-profiling-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-profiling-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-profiling-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiling-group))
      (common-lisp:list
       (common-lisp:cons "profilingGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-profiling-group-response))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'profiling-group))))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype event-publisher () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype event-publishers ()
   '(trivial-types:proper-list event-publisher))
 (common-lisp:defun |make-event-publishers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-publisher))
   aws-sdk/generator/shape::members))
(common-lisp:deftype feedback-type () 'common-lisp:string)
(common-lisp:deftype findings-report-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype findings-report-summaries ()
   '(trivial-types:proper-list findings-report-summary))
 (common-lisp:defun |make-findings-report-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list findings-report-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass findings-report-summary common-lisp:nil
                       ((total-number-of-findings :initarg
                         :|totalNumberOfFindings| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %findings-report-summary-total-number-of-findings
                         :initform common-lisp:nil)
                        (profiling-group-name :initarg :|profilingGroupName|
                         :type (common-lisp:or string common-lisp:null)
                         :accessor
                         %findings-report-summary-profiling-group-name
                         :initform common-lisp:nil)
                        (profile-start-time :initarg :|profileStartTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %findings-report-summary-profile-start-time :initform
                         common-lisp:nil)
                        (profile-end-time :initarg :|profileEndTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %findings-report-summary-profile-end-time :initform
                         common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or findings-report-id common-lisp:null)
                         :accessor %findings-report-summary-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'findings-report-summary 'make-findings-report-summary))
 (common-lisp:defun make-findings-report-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key total-number-of-findings
                     profiling-group-name profile-start-time profile-end-time
                     id)
   (common-lisp:apply #'common-lisp:make-instance 'findings-report-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          findings-report-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          findings-report-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-end-time))
      (common-lisp:list
       (common-lisp:cons "profileEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-start-time))
      (common-lisp:list
       (common-lisp:cons "profileStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'profiling-group-name))
      (common-lisp:list
       (common-lisp:cons "profilingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-number-of-findings))
      (common-lisp:list
       (common-lisp:cons "totalNumberOfFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          findings-report-summary))
   common-lisp:nil))
(common-lisp:deftype fleet-instance-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass frame-metric common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or metric-type common-lisp:null)
                         :accessor %frame-metric-type :initform
                         (common-lisp:error ":type is required"))
                        (thread-states :initarg :|threadStates| :type
                         (common-lisp:or thread-states common-lisp:null)
                         :accessor %frame-metric-thread-states :initform
                         (common-lisp:error ":threadstates is required"))
                        (frame-name :initarg :|frameName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %frame-metric-frame-name :initform
                         (common-lisp:error ":framename is required"))))
 (common-lisp:export (common-lisp:list 'frame-metric 'make-frame-metric))
 (common-lisp:defun make-frame-metric
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type thread-states frame-name)
   (common-lisp:apply #'common-lisp:make-instance 'frame-metric
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input frame-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input frame-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frame-name))
      (common-lisp:list
       (common-lisp:cons "frameName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thread-states))
      (common-lisp:list
       (common-lisp:cons "threadStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input frame-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype frame-metric-data ()
   '(trivial-types:proper-list frame-metric-datum))
 (common-lisp:defun |make-frame-metric-data|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list frame-metric-datum))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass frame-metric-datum common-lisp:nil
                       ((values :initarg :|values| :type
                         (common-lisp:or frame-metric-values common-lisp:null)
                         :accessor %frame-metric-datum-values :initform
                         (common-lisp:error ":values is required"))
                        (frame-metric :initarg :|frameMetric| :type
                         (common-lisp:or frame-metric common-lisp:null)
                         :accessor %frame-metric-datum-frame-metric :initform
                         (common-lisp:error ":framemetric is required"))))
 (common-lisp:export
  (common-lisp:list 'frame-metric-datum 'make-frame-metric-datum))
 (common-lisp:defun make-frame-metric-datum
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values frame-metric)
   (common-lisp:apply #'common-lisp:make-instance 'frame-metric-datum
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input frame-metric-datum))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input frame-metric-datum))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frame-metric))
      (common-lisp:list
       (common-lisp:cons "frameMetric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input frame-metric-datum))
   common-lisp:nil))
(common-lisp:deftype frame-metric-value () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:deftype frame-metric-values ()
   '(trivial-types:proper-list frame-metric-value))
 (common-lisp:defun |make-frame-metric-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list frame-metric-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype frame-metrics ()
   '(trivial-types:proper-list frame-metric))
 (common-lisp:defun |make-frame-metrics|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list frame-metric))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-findings-report-account-summary-request
                       common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %get-findings-report-account-summary-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %get-findings-report-account-summary-request-max-results
                         :initform common-lisp:nil)
                        (daily-reports-only :initarg :|dailyReportsOnly| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %get-findings-report-account-summary-request-daily-reports-only
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-findings-report-account-summary-request
                    'make-get-findings-report-account-summary-request))
 (common-lisp:defun make-get-findings-report-account-summary-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     daily-reports-only)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-findings-report-account-summary-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-report-account-summary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-report-account-summary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-report-account-summary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-findings-report-account-summary-response
                       common-lisp:nil
                       ((report-summaries :initarg :|reportSummaries| :type
                         (common-lisp:or findings-report-summaries
                                         common-lisp:null)
                         :accessor
                         %get-findings-report-account-summary-response-report-summaries
                         :initform
                         (common-lisp:error ":reportsummaries is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %get-findings-report-account-summary-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-findings-report-account-summary-response
                    'make-get-findings-report-account-summary-response))
 (common-lisp:defun make-get-findings-report-account-summary-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key report-summaries next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-findings-report-account-summary-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-report-account-summary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-report-account-summary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-summaries))
      (common-lisp:list
       (common-lisp:cons "reportSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-findings-report-account-summary-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-notification-configuration-request common-lisp:nil
                       ((profiling-group-name :initarg :|profilingGroupName|
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         %get-notification-configuration-request-profiling-group-name
                         :initform
                         (common-lisp:error
                          ":profilinggroupname is required"))))
 (common-lisp:export
  (common-lisp:list 'get-notification-configuration-request
                    'make-get-notification-configuration-request))
 (common-lisp:defun make-get-notification-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profiling-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-notification-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-notification-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-notification-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-notification-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-notification-configuration-response common-lisp:nil
                       ((notification-configuration :initarg
                         :|notificationConfiguration| :type
                         (common-lisp:or notification-configuration
                                         common-lisp:null)
                         :accessor
                         %get-notification-configuration-response-notification-configuration
                         :initform
                         (common-lisp:error
                          ":notificationconfiguration is required"))))
 (common-lisp:export
  (common-lisp:list 'get-notification-configuration-response
                    'make-get-notification-configuration-response))
 (common-lisp:defun make-get-notification-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key notification-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-notification-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-notification-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-notification-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-configuration))
      (common-lisp:list
       (common-lisp:cons "notificationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-notification-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-policy-request common-lisp:nil
                       ((profiling-group-name :initarg :|profilingGroupName|
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor %get-policy-request-profiling-group-name
                         :initform
                         (common-lisp:error
                          ":profilinggroupname is required"))))
 (common-lisp:export
  (common-lisp:list 'get-policy-request 'make-get-policy-request))
 (common-lisp:defun make-get-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profiling-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-policy-response common-lisp:nil
                       ((revision-id :initarg :|revisionId| :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor %get-policy-response-revision-id :initform
                         (common-lisp:error ":revisionid is required"))
                        (policy :initarg :|policy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-policy-response-policy :initform
                         (common-lisp:error ":policy is required"))))
 (common-lisp:export
  (common-lisp:list 'get-policy-response 'make-get-policy-response))
 (common-lisp:defun make-get-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id policy)
   (common-lisp:apply #'common-lisp:make-instance 'get-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-profile-request common-lisp:nil
                       ((start-time :initarg :|startTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-profile-request-start-time :initform
                         common-lisp:nil)
                        (profiling-group-name :initarg :|profilingGroupName|
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor %get-profile-request-profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required"))
                        (period :initarg :|period| :type
                         (common-lisp:or period common-lisp:null) :accessor
                         %get-profile-request-period :initform common-lisp:nil)
                        (max-depth :initarg :|maxDepth| :type
                         (common-lisp:or max-depth common-lisp:null) :accessor
                         %get-profile-request-max-depth :initform
                         common-lisp:nil)
                        (end-time :initarg :|endTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-profile-request-end-time :initform
                         common-lisp:nil)
                        (accept :initarg :|accept| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-profile-request-accept :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-profile-request 'make-get-profile-request))
 (common-lisp:defun make-get-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start-time profiling-group-name period
                     max-depth end-time accept)
   (common-lisp:apply #'common-lisp:make-instance 'get-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept))
      (common-lisp:cons "Accept" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-profile-response common-lisp:nil
                       ((profile :initarg :|profile| :type
                         (common-lisp:or aggregated-profile common-lisp:null)
                         :accessor %get-profile-response-profile :initform
                         (common-lisp:error ":profile is required"))
                        (content-type :initarg :|contentType| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-profile-response-content-type :initform
                         (common-lisp:error ":contenttype is required"))
                        (content-encoding :initarg :|contentEncoding| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-profile-response-content-encoding :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-profile-response 'make-get-profile-response))
 (common-lisp:defun make-get-profile-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profile content-type content-encoding)
   (common-lisp:apply #'common-lisp:make-instance 'get-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-encoding))
      (common-lisp:cons "Content-Encoding" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile))
      (common-lisp:list
       (common-lisp:cons "profile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-profile-response))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'profile))))
(common-lisp:progn
 (common-lisp:defclass get-recommendations-request common-lisp:nil
                       ((start-time :initarg :|startTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-recommendations-request-start-time :initform
                         (common-lisp:error ":starttime is required"))
                        (profiling-group-name :initarg :|profilingGroupName|
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         %get-recommendations-request-profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required"))
                        (locale :initarg :|locale| :type
                         (common-lisp:or locale common-lisp:null) :accessor
                         %get-recommendations-request-locale :initform
                         common-lisp:nil)
                        (end-time :initarg :|endTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-recommendations-request-end-time :initform
                         (common-lisp:error ":endtime is required"))))
 (common-lisp:export
  (common-lisp:list 'get-recommendations-request
                    'make-get-recommendations-request))
 (common-lisp:defun make-get-recommendations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start-time profiling-group-name locale
                     end-time)
   (common-lisp:apply #'common-lisp:make-instance 'get-recommendations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-recommendations-response common-lisp:nil
                       ((recommendations :initarg :|recommendations| :type
                         (common-lisp:or recommendations common-lisp:null)
                         :accessor
                         %get-recommendations-response-recommendations
                         :initform
                         (common-lisp:error ":recommendations is required"))
                        (profiling-group-name :initarg :|profilingGroupName|
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         %get-recommendations-response-profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required"))
                        (profile-start-time :initarg :|profileStartTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-recommendations-response-profile-start-time
                         :initform
                         (common-lisp:error ":profilestarttime is required"))
                        (profile-end-time :initarg :|profileEndTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %get-recommendations-response-profile-end-time
                         :initform
                         (common-lisp:error ":profileendtime is required"))
                        (anomalies :initarg :|anomalies| :type
                         (common-lisp:or anomalies common-lisp:null) :accessor
                         %get-recommendations-response-anomalies :initform
                         (common-lisp:error ":anomalies is required"))))
 (common-lisp:export
  (common-lisp:list 'get-recommendations-response
                    'make-get-recommendations-response))
 (common-lisp:defun make-get-recommendations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recommendations profiling-group-name
                     profile-start-time profile-end-time anomalies)
   (common-lisp:apply #'common-lisp:make-instance 'get-recommendations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'anomalies))
      (common-lisp:list
       (common-lisp:cons "anomalies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-end-time))
      (common-lisp:list
       (common-lisp:cons "profileEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-start-time))
      (common-lisp:list
       (common-lisp:cons "profileStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'profiling-group-name))
      (common-lisp:list
       (common-lisp:cons "profilingGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendations))
      (common-lisp:list
       (common-lisp:cons "recommendations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-recommendations-response))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (codeguruprofiler-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-findings-reports-request common-lisp:nil
                       ((start-time :initarg :|startTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %list-findings-reports-request-start-time :initform
                         (common-lisp:error ":starttime is required"))
                        (profiling-group-name :initarg :|profilingGroupName|
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         %list-findings-reports-request-profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-findings-reports-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-findings-reports-request-max-results
                         :initform common-lisp:nil)
                        (end-time :initarg :|endTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %list-findings-reports-request-end-time :initform
                         (common-lisp:error ":endtime is required"))
                        (daily-reports-only :initarg :|dailyReportsOnly| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %list-findings-reports-request-daily-reports-only
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-findings-reports-request
                    'make-list-findings-reports-request))
 (common-lisp:defun make-list-findings-reports-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start-time profiling-group-name
                     next-token max-results end-time daily-reports-only)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-findings-reports-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-reports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-reports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-reports-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-findings-reports-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-findings-reports-response-next-token
                         :initform common-lisp:nil)
                        (findings-report-summaries :initarg
                         :|findingsReportSummaries| :type
                         (common-lisp:or findings-report-summaries
                                         common-lisp:null)
                         :accessor
                         %list-findings-reports-response-findings-report-summaries
                         :initform
                         (common-lisp:error
                          ":findingsreportsummaries is required"))))
 (common-lisp:export
  (common-lisp:list 'list-findings-reports-response
                    'make-list-findings-reports-response))
 (common-lisp:defun make-list-findings-reports-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token findings-report-summaries)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-findings-reports-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-reports-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-reports-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'findings-report-summaries))
      (common-lisp:list
       (common-lisp:cons "findingsReportSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-reports-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-of-timestamps ()
   '(trivial-types:proper-list timestamp-structure))
 (common-lisp:defun |make-list-of-timestamps|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list timestamp-structure))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-profile-times-request common-lisp:nil
                       ((start-time :initarg :|startTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %list-profile-times-request-start-time :initform
                         (common-lisp:error ":starttime is required"))
                        (profiling-group-name :initarg :|profilingGroupName|
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         %list-profile-times-request-profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required"))
                        (period :initarg :|period| :type
                         (common-lisp:or aggregation-period common-lisp:null)
                         :accessor %list-profile-times-request-period :initform
                         (common-lisp:error ":period is required"))
                        (order-by :initarg :|orderBy| :type
                         (common-lisp:or order-by common-lisp:null) :accessor
                         %list-profile-times-request-order-by :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-profile-times-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-profile-times-request-max-results
                         :initform common-lisp:nil)
                        (end-time :initarg :|endTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %list-profile-times-request-end-time :initform
                         (common-lisp:error ":endtime is required"))))
 (common-lisp:export
  (common-lisp:list 'list-profile-times-request
                    'make-list-profile-times-request))
 (common-lisp:defun make-list-profile-times-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start-time profiling-group-name period
                     order-by next-token max-results end-time)
   (common-lisp:apply #'common-lisp:make-instance 'list-profile-times-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-times-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-times-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-times-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-profile-times-response common-lisp:nil
                       ((profile-times :initarg :|profileTimes| :type
                         (common-lisp:or profile-times common-lisp:null)
                         :accessor %list-profile-times-response-profile-times
                         :initform
                         (common-lisp:error ":profiletimes is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-profile-times-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-profile-times-response
                    'make-list-profile-times-response))
 (common-lisp:defun make-list-profile-times-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profile-times next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-profile-times-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-times-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-times-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-times))
      (common-lisp:list
       (common-lisp:cons "profileTimes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profile-times-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-profiling-groups-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-profiling-groups-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-profiling-groups-request-max-results
                         :initform common-lisp:nil)
                        (include-description :initarg :|includeDescription|
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %list-profiling-groups-request-include-description
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-profiling-groups-request
                    'make-list-profiling-groups-request))
 (common-lisp:defun make-list-profiling-groups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     include-description)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-profiling-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profiling-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profiling-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profiling-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-profiling-groups-response common-lisp:nil
                       ((profiling-groups :initarg :|profilingGroups| :type
                         (common-lisp:or profiling-group-descriptions
                                         common-lisp:null)
                         :accessor
                         %list-profiling-groups-response-profiling-groups
                         :initform common-lisp:nil)
                        (profiling-group-names :initarg :|profilingGroupNames|
                         :type
                         (common-lisp:or profiling-group-names
                                         common-lisp:null)
                         :accessor
                         %list-profiling-groups-response-profiling-group-names
                         :initform
                         (common-lisp:error
                          ":profilinggroupnames is required"))
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-profiling-groups-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-profiling-groups-response
                    'make-list-profiling-groups-response))
 (common-lisp:defun make-list-profiling-groups-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profiling-groups profiling-group-names
                     next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-profiling-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-profiling-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-profiling-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'profiling-group-names))
      (common-lisp:list
       (common-lisp:cons "profilingGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiling-groups))
      (common-lisp:list
       (common-lisp:cons "profilingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-profiling-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or profiling-group-arn common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype locale () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass match common-lisp:nil
                       ((threshold-breach-value :initarg
                         :|thresholdBreachValue| :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %match-threshold-breach-value :initform
                         common-lisp:nil)
                        (target-frames-index :initarg :|targetFramesIndex|
                         :type (common-lisp:or integer common-lisp:null)
                         :accessor %match-target-frames-index :initform
                         common-lisp:nil)
                        (frame-address :initarg :|frameAddress| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %match-frame-address :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'match 'make-match))
 (common-lisp:defun make-match
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key threshold-breach-value
                     target-frames-index frame-address)
   (common-lisp:apply #'common-lisp:make-instance 'match
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frame-address))
      (common-lisp:list
       (common-lisp:cons "frameAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-frames-index))
      (common-lisp:list
       (common-lisp:cons "targetFramesIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'threshold-breach-value))
      (common-lisp:list
       (common-lisp:cons "thresholdBreachValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input match))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype matches () '(trivial-types:proper-list match))
 (common-lisp:defun |make-matches|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list match))
   aws-sdk/generator/shape::members))
(common-lisp:deftype max-depth () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype metadata () 'common-lisp:hash-table)
 (common-lisp:defun |make-metadata| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype metadata-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass metric common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or metric-type common-lisp:null)
                         :accessor %metric-type :initform
                         (common-lisp:error ":type is required"))
                        (thread-states :initarg :|threadStates| :type
                         (common-lisp:or strings common-lisp:null) :accessor
                         %metric-thread-states :initform
                         (common-lisp:error ":threadstates is required"))
                        (frame-name :initarg :|frameName| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %metric-frame-name :initform
                         (common-lisp:error ":framename is required"))))
 (common-lisp:export (common-lisp:list 'metric 'make-metric))
 (common-lisp:defun make-metric
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type thread-states frame-name)
   (common-lisp:apply #'common-lisp:make-instance 'metric
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frame-name))
      (common-lisp:list
       (common-lisp:cons "frameName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thread-states))
      (common-lisp:list
       (common-lisp:cons "threadStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric))
   common-lisp:nil))
(common-lisp:deftype metric-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass notification-configuration common-lisp:nil
                       ((channels :initarg :|channels| :type
                         (common-lisp:or channels common-lisp:null) :accessor
                         %notification-configuration-channels :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'notification-configuration
                    'make-notification-configuration))
 (common-lisp:defun make-notification-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key channels)
   (common-lisp:apply #'common-lisp:make-instance 'notification-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   common-lisp:nil))
(common-lisp:deftype order-by () 'common-lisp:string)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pattern common-lisp:nil
                       ((threshold-percent :initarg :|thresholdPercent| :type
                         (common-lisp:or percentage common-lisp:null) :accessor
                         %pattern-threshold-percent :initform common-lisp:nil)
                        (target-frames :initarg :|targetFrames| :type
                         (common-lisp:or target-frames common-lisp:null)
                         :accessor %pattern-target-frames :initform
                         common-lisp:nil)
                        (resolution-steps :initarg :|resolutionSteps| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %pattern-resolution-steps :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %pattern-name :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %pattern-id :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %pattern-description :initform common-lisp:nil)
                        (counters-to-aggregate :initarg :|countersToAggregate|
                         :type (common-lisp:or strings common-lisp:null)
                         :accessor %pattern-counters-to-aggregate :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'pattern 'make-pattern))
 (common-lisp:defun make-pattern
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key threshold-percent target-frames
                     resolution-steps name id description
                     counters-to-aggregate)
   (common-lisp:apply #'common-lisp:make-instance 'pattern
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pattern))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pattern))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'counters-to-aggregate))
      (common-lisp:list
       (common-lisp:cons "countersToAggregate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution-steps))
      (common-lisp:list
       (common-lisp:cons "resolutionSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-frames))
      (common-lisp:list
       (common-lisp:cons "targetFrames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold-percent))
      (common-lisp:list
       (common-lisp:cons "thresholdPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pattern))
   common-lisp:nil))
(common-lisp:deftype percentage () 'common-lisp:double-float)
(common-lisp:deftype period () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass post-agent-profile-request common-lisp:nil
                       ((profiling-group-name :initarg :|profilingGroupName|
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         %post-agent-profile-request-profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required"))
                        (profile-token :initarg :|profileToken| :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %post-agent-profile-request-profile-token
                         :initform common-lisp:nil)
                        (content-type :initarg :|contentType| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %post-agent-profile-request-content-type :initform
                         (common-lisp:error ":contenttype is required"))
                        (agent-profile :initarg :|agentProfile| :type
                         (common-lisp:or agent-profile common-lisp:null)
                         :accessor %post-agent-profile-request-agent-profile
                         :initform
                         (common-lisp:error ":agentprofile is required"))))
 (common-lisp:export
  (common-lisp:list 'post-agent-profile-request
                    'make-post-agent-profile-request))
 (common-lisp:defun make-post-agent-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profiling-group-name profile-token
                     content-type agent-profile)
   (common-lisp:apply #'common-lisp:make-instance 'post-agent-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          post-agent-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          post-agent-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-profile))
      (common-lisp:list
       (common-lisp:cons "agentProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          post-agent-profile-request))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'agent-profile))))
(common-lisp:progn
 (common-lisp:defclass post-agent-profile-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'post-agent-profile-response
                    'make-post-agent-profile-response))
 (common-lisp:defun make-post-agent-profile-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'post-agent-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          post-agent-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          post-agent-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          post-agent-profile-response))
   common-lisp:nil))
(common-lisp:deftype principal () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype principals () '(trivial-types:proper-list principal))
 (common-lisp:defun |make-principals|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list principal))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass profile-time common-lisp:nil
                       ((start :initarg :|start| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %profile-time-start :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'profile-time 'make-profile-time))
 (common-lisp:defun make-profile-time
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start)
   (common-lisp:apply #'common-lisp:make-instance 'profile-time
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input profile-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input profile-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input profile-time))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype profile-times ()
   '(trivial-types:proper-list profile-time))
 (common-lisp:defun |make-profile-times|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list profile-time))
   aws-sdk/generator/shape::members))
(common-lisp:deftype profiling-group-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass profiling-group-description common-lisp:nil
                       ((updated-at :initarg :|updatedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %profiling-group-description-updated-at :initform
                         common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %profiling-group-description-tags :initform
                         common-lisp:nil)
                        (profiling-status :initarg :|profilingStatus| :type
                         (common-lisp:or profiling-status common-lisp:null)
                         :accessor
                         %profiling-group-description-profiling-status
                         :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor %profiling-group-description-name :initform
                         common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %profiling-group-description-created-at :initform
                         common-lisp:nil)
                        (compute-platform :initarg :|computePlatform| :type
                         (common-lisp:or compute-platform common-lisp:null)
                         :accessor
                         %profiling-group-description-compute-platform
                         :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or profiling-group-arn common-lisp:null)
                         :accessor %profiling-group-description-arn :initform
                         common-lisp:nil)
                        (agent-orchestration-config :initarg
                         :|agentOrchestrationConfig| :type
                         (common-lisp:or agent-orchestration-config
                                         common-lisp:null)
                         :accessor
                         %profiling-group-description-agent-orchestration-config
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'profiling-group-description
                    'make-profiling-group-description))
 (common-lisp:defun make-profiling-group-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at tags profiling-status name
                     created-at compute-platform arn
                     agent-orchestration-config)
   (common-lisp:apply #'common-lisp:make-instance 'profiling-group-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          profiling-group-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          profiling-group-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agent-orchestration-config))
      (common-lisp:list
       (common-lisp:cons "agentOrchestrationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-platform))
      (common-lisp:list
       (common-lisp:cons "computePlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiling-status))
      (common-lisp:list
       (common-lisp:cons "profilingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          profiling-group-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype profiling-group-descriptions ()
   '(trivial-types:proper-list profiling-group-description))
 (common-lisp:defun |make-profiling-group-descriptions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            profiling-group-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype profiling-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype profiling-group-names ()
   '(trivial-types:proper-list profiling-group-name))
 (common-lisp:defun |make-profiling-group-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list profiling-group-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass profiling-status common-lisp:nil
                       ((latest-aggregated-profile :initarg
                         :|latestAggregatedProfile| :type
                         (common-lisp:or aggregated-profile-time
                                         common-lisp:null)
                         :accessor %profiling-status-latest-aggregated-profile
                         :initform common-lisp:nil)
                        (latest-agent-profile-reported-at :initarg
                         :|latestAgentProfileReportedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %profiling-status-latest-agent-profile-reported-at
                         :initform common-lisp:nil)
                        (latest-agent-orchestrated-at :initarg
                         :|latestAgentOrchestratedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %profiling-status-latest-agent-orchestrated-at
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'profiling-status 'make-profiling-status))
 (common-lisp:defun make-profiling-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key latest-aggregated-profile
                     latest-agent-profile-reported-at
                     latest-agent-orchestrated-at)
   (common-lisp:apply #'common-lisp:make-instance 'profiling-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input profiling-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input profiling-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-agent-orchestrated-at))
      (common-lisp:list
       (common-lisp:cons "latestAgentOrchestratedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-agent-profile-reported-at))
      (common-lisp:list
       (common-lisp:cons "latestAgentProfileReportedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-aggregated-profile))
      (common-lisp:list
       (common-lisp:cons "latestAggregatedProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input profiling-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-permission-request common-lisp:nil
                       ((revision-id :initarg :|revisionId| :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor %put-permission-request-revision-id
                         :initform common-lisp:nil)
                        (profiling-group-name :initarg :|profilingGroupName|
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor %put-permission-request-profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required"))
                        (principals :initarg :|principals| :type
                         (common-lisp:or principals common-lisp:null) :accessor
                         %put-permission-request-principals :initform
                         (common-lisp:error ":principals is required"))
                        (action-group :initarg :|actionGroup| :type
                         (common-lisp:or action-group common-lisp:null)
                         :accessor %put-permission-request-action-group
                         :initform
                         (common-lisp:error ":actiongroup is required"))))
 (common-lisp:export
  (common-lisp:list 'put-permission-request 'make-put-permission-request))
 (common-lisp:defun make-put-permission-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id profiling-group-name
                     principals action-group)
   (common-lisp:apply #'common-lisp:make-instance 'put-permission-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principals))
      (common-lisp:list
       (common-lisp:cons "principals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-permission-response common-lisp:nil
                       ((revision-id :initarg :|revisionId| :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor %put-permission-response-revision-id
                         :initform
                         (common-lisp:error ":revisionid is required"))
                        (policy :initarg :|policy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %put-permission-response-policy :initform
                         (common-lisp:error ":policy is required"))))
 (common-lisp:export
  (common-lisp:list 'put-permission-response 'make-put-permission-response))
 (common-lisp:defun make-put-permission-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id policy)
   (common-lisp:apply #'common-lisp:make-instance 'put-permission-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass recommendation common-lisp:nil
                       ((top-matches :initarg :|topMatches| :type
                         (common-lisp:or matches common-lisp:null) :accessor
                         %recommendation-top-matches :initform
                         (common-lisp:error ":topmatches is required"))
                        (start-time :initarg :|startTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %recommendation-start-time :initform
                         (common-lisp:error ":starttime is required"))
                        (pattern :initarg :|pattern| :type
                         (common-lisp:or pattern common-lisp:null) :accessor
                         %recommendation-pattern :initform
                         (common-lisp:error ":pattern is required"))
                        (end-time :initarg :|endTime| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %recommendation-end-time :initform
                         (common-lisp:error ":endtime is required"))
                        (all-matches-sum :initarg :|allMatchesSum| :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %recommendation-all-matches-sum :initform
                         (common-lisp:error ":allmatchessum is required"))
                        (all-matches-count :initarg :|allMatchesCount| :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %recommendation-all-matches-count :initform
                         (common-lisp:error ":allmatchescount is required"))))
 (common-lisp:export (common-lisp:list 'recommendation 'make-recommendation))
 (common-lisp:defun make-recommendation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key top-matches start-time pattern end-time
                     all-matches-sum all-matches-count)
   (common-lisp:apply #'common-lisp:make-instance 'recommendation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'all-matches-count))
      (common-lisp:list
       (common-lisp:cons "allMatchesCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'all-matches-sum))
      (common-lisp:list
       (common-lisp:cons "allMatchesSum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern))
      (common-lisp:list
       (common-lisp:cons "pattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'top-matches))
      (common-lisp:list
       (common-lisp:cons "topMatches"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recommendation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recommendations ()
   '(trivial-types:proper-list recommendation))
 (common-lisp:defun |make-recommendations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recommendation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass remove-notification-channel-request common-lisp:nil
                       ((profiling-group-name :initarg :|profilingGroupName|
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         %remove-notification-channel-request-profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required"))
                        (channel-id :initarg :|channelId| :type
                         (common-lisp:or channel-id common-lisp:null) :accessor
                         %remove-notification-channel-request-channel-id
                         :initform
                         (common-lisp:error ":channelid is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-notification-channel-request
                    'make-remove-notification-channel-request))
 (common-lisp:defun make-remove-notification-channel-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profiling-group-name channel-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-notification-channel-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-notification-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-notification-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-notification-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-notification-channel-response common-lisp:nil
                       ((notification-configuration :initarg
                         :|notificationConfiguration| :type
                         (common-lisp:or notification-configuration
                                         common-lisp:null)
                         :accessor
                         %remove-notification-channel-response-notification-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remove-notification-channel-response
                    'make-remove-notification-channel-response))
 (common-lisp:defun make-remove-notification-channel-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key notification-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-notification-channel-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-notification-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-notification-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-configuration))
      (common-lisp:list
       (common-lisp:cons "notificationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-notification-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-permission-request common-lisp:nil
                       ((revision-id :initarg :|revisionId| :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor %remove-permission-request-revision-id
                         :initform
                         (common-lisp:error ":revisionid is required"))
                        (profiling-group-name :initarg :|profilingGroupName|
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         %remove-permission-request-profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required"))
                        (action-group :initarg :|actionGroup| :type
                         (common-lisp:or action-group common-lisp:null)
                         :accessor %remove-permission-request-action-group
                         :initform
                         (common-lisp:error ":actiongroup is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-permission-request
                    'make-remove-permission-request))
 (common-lisp:defun make-remove-permission-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id profiling-group-name
                     action-group)
   (common-lisp:apply #'common-lisp:make-instance 'remove-permission-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-permission-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-permission-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-permission-response common-lisp:nil
                       ((revision-id :initarg :|revisionId| :type
                         (common-lisp:or revision-id common-lisp:null)
                         :accessor %remove-permission-response-revision-id
                         :initform
                         (common-lisp:error ":revisionid is required"))
                        (policy :initarg :|policy| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %remove-permission-response-policy :initform
                         (common-lisp:error ":policy is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-permission-response
                    'make-remove-permission-response))
 (common-lisp:defun make-remove-permission-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key revision-id policy)
   (common-lisp:apply #'common-lisp:make-instance 'remove-permission-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-permission-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-permission-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision-id))
      (common-lisp:list
       (common-lisp:cons "revisionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-permission-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (codeguruprofiler-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype revision-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (codeguruprofiler-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype strings () '(trivial-types:proper-list string))
 (common-lisp:defun |make-strings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass submit-feedback-request common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or feedback-type common-lisp:null)
                         :accessor %submit-feedback-request-type :initform
                         (common-lisp:error ":type is required"))
                        (profiling-group-name :initarg :|profilingGroupName|
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         %submit-feedback-request-profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required"))
                        (comment :initarg :|comment| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %submit-feedback-request-comment :initform
                         common-lisp:nil)
                        (anomaly-instance-id :initarg :|anomalyInstanceId|
                         :type
                         (common-lisp:or anomaly-instance-id common-lisp:null)
                         :accessor %submit-feedback-request-anomaly-instance-id
                         :initform
                         (common-lisp:error
                          ":anomalyinstanceid is required"))))
 (common-lisp:export
  (common-lisp:list 'submit-feedback-request 'make-submit-feedback-request))
 (common-lisp:defun make-submit-feedback-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type profiling-group-name comment
                     anomaly-instance-id)
   (common-lisp:apply #'common-lisp:make-instance 'submit-feedback-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          submit-feedback-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          submit-feedback-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comment))
      (common-lisp:list
       (common-lisp:cons "comment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          submit-feedback-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass submit-feedback-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'submit-feedback-response 'make-submit-feedback-response))
 (common-lisp:defun make-submit-feedback-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'submit-feedback-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          submit-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          submit-feedback-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          submit-feedback-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-keys () '(trivial-types:proper-list string))
 (common-lisp:defun |make-tag-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tags-map common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or profiling-group-arn common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tags-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tags-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype target-frame () '(trivial-types:proper-list string))
 (common-lisp:defun |make-target-frame|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype target-frames ()
   '(trivial-types:proper-list target-frame))
 (common-lisp:defun |make-target-frames|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-frame))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype thread-states () '(trivial-types:proper-list string))
 (common-lisp:defun |make-thread-states|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (codeguruprofiler-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass timestamp-structure common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %timestamp-structure-value :initform
                         (common-lisp:error ":value is required"))))
 (common-lisp:export
  (common-lisp:list 'timestamp-structure 'make-timestamp-structure))
 (common-lisp:defun make-timestamp-structure
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value)
   (common-lisp:apply #'common-lisp:make-instance 'timestamp-structure
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timestamp-structure))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timestamp-structure))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timestamp-structure))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype unprocessed-end-time-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-unprocessed-end-time-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :|tagKeys| :type
                         (common-lisp:or tag-keys common-lisp:null) :accessor
                         %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tagkeys is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or profiling-group-arn common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-profiling-group-request common-lisp:nil
                       ((profiling-group-name :initarg :|profilingGroupName|
                         :type
                         (common-lisp:or profiling-group-name common-lisp:null)
                         :accessor
                         %update-profiling-group-request-profiling-group-name
                         :initform
                         (common-lisp:error ":profilinggroupname is required"))
                        (agent-orchestration-config :initarg
                         :|agentOrchestrationConfig| :type
                         (common-lisp:or agent-orchestration-config
                                         common-lisp:null)
                         :accessor
                         %update-profiling-group-request-agent-orchestration-config
                         :initform
                         (common-lisp:error
                          ":agentorchestrationconfig is required"))))
 (common-lisp:export
  (common-lisp:list 'update-profiling-group-request
                    'make-update-profiling-group-request))
 (common-lisp:defun make-update-profiling-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profiling-group-name
                     agent-orchestration-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-profiling-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-profiling-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-profiling-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agent-orchestration-config))
      (common-lisp:list
       (common-lisp:cons "agentOrchestrationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-profiling-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-profiling-group-response common-lisp:nil
                       ((profiling-group :initarg :|profilingGroup| :type
                         (common-lisp:or profiling-group-description
                                         common-lisp:null)
                         :accessor
                         %update-profiling-group-response-profiling-group
                         :initform
                         (common-lisp:error ":profilinggroup is required"))))
 (common-lisp:export
  (common-lisp:list 'update-profiling-group-response
                    'make-update-profiling-group-response))
 (common-lisp:defun make-update-profiling-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key profiling-group)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-profiling-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-profiling-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-profiling-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiling-group))
      (common-lisp:list
       (common-lisp:cons "profilingGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-profiling-group-response))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'profiling-group))))
(common-lisp:progn
 (common-lisp:defclass user-feedback common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or feedback-type common-lisp:null)
                         :accessor %user-feedback-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export (common-lisp:list 'user-feedback 'make-user-feedback))
 (common-lisp:defun make-user-feedback
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type)
   (common-lisp:apply #'common-lisp:make-instance 'user-feedback
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-feedback))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-feedback))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-feedback))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (codeguruprofiler-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun add-notification-channels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channels profiling-group-name)
   (common-lisp:declare (common-lisp:ignorable channels profiling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-notification-channels-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/profilingGroups/~A/notificationConfiguration"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))))
        "AddNotificationChannels" "2019-07-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-notification-channels))
(common-lisp:progn
 (common-lisp:defun batch-get-frame-metric-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key end-time frame-metrics period
                     profiling-group-name start-time target-resolution)
   (common-lisp:declare
    (common-lisp:ignorable end-time frame-metrics period profiling-group-name
     start-time target-resolution))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-frame-metric-data-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/profilingGroups/~A/frames/-/metrics"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))))
        "BatchGetFrameMetricData" "2019-07-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-frame-metric-data))
(common-lisp:progn
 (common-lisp:defun configure-agent
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key fleet-instance-id metadata
                     profiling-group-name)
   (common-lisp:declare
    (common-lisp:ignorable fleet-instance-id metadata profiling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-configure-agent-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/profilingGroups/~A/configureAgent"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))))
        "ConfigureAgent" "2019-07-18"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'configure-agent))
(common-lisp:progn
 (common-lisp:defun create-profiling-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-orchestration-config client-token
                     compute-platform profiling-group-name tags)
   (common-lisp:declare
    (common-lisp:ignorable agent-orchestration-config client-token
     compute-platform profiling-group-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-profiling-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "POST"
        :rest-json "/profilingGroups" "CreateProfilingGroup" "2019-07-18"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'create-profiling-group))
(common-lisp:progn
 (common-lisp:defun delete-profiling-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profiling-group-name)
   (common-lisp:declare (common-lisp:ignorable profiling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-profiling-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "DELETE"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/profilingGroups/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))))
        "DeleteProfilingGroup" "2019-07-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-profiling-group))
(common-lisp:progn
 (common-lisp:defun describe-profiling-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profiling-group-name)
   (common-lisp:declare (common-lisp:ignorable profiling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-profiling-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/profilingGroups/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))))
        "DescribeProfilingGroup" "2019-07-18"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-profiling-group))
(common-lisp:progn
 (common-lisp:defun get-findings-report-account-summary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key daily-reports-only max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable daily-reports-only max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-findings-report-account-summary-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "GET"
        :rest-json "/internal/findingsReports"
        "GetFindingsReportAccountSummary" "2019-07-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-findings-report-account-summary))
(common-lisp:progn
 (common-lisp:defun get-notification-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profiling-group-name)
   (common-lisp:declare (common-lisp:ignorable profiling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-notification-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/profilingGroups/~A/notificationConfiguration"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))))
        "GetNotificationConfiguration" "2019-07-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-notification-configuration))
(common-lisp:progn
 (common-lisp:defun get-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key profiling-group-name)
   (common-lisp:declare (common-lisp:ignorable profiling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/profilingGroups/~A/policy"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))))
        "GetPolicy" "2019-07-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-policy))
(common-lisp:progn
 (common-lisp:defun get-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key accept end-time max-depth period
                     profiling-group-name start-time)
   (common-lisp:declare
    (common-lisp:ignorable accept end-time max-depth period
     profiling-group-name start-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/profilingGroups/~A/profile"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))))
        "GetProfile" "2019-07-18")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-profile))
(common-lisp:progn
 (common-lisp:defun get-recommendations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key end-time locale profiling-group-name
                     start-time)
   (common-lisp:declare
    (common-lisp:ignorable end-time locale profiling-group-name start-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-recommendations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/internal/profilingGroups/~A/recommendations"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))))
        "GetRecommendations" "2019-07-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-recommendations))
(common-lisp:progn
 (common-lisp:defun list-findings-reports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key daily-reports-only end-time max-results
                     next-token profiling-group-name start-time)
   (common-lisp:declare
    (common-lisp:ignorable daily-reports-only end-time max-results next-token
     profiling-group-name start-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-findings-reports-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/internal/profilingGroups/~A/findingsReports"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))))
        "ListFindingsReports" "2019-07-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-findings-reports))
(common-lisp:progn
 (common-lisp:defun list-profile-times
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key end-time max-results next-token order-by
                     period profiling-group-name start-time)
   (common-lisp:declare
    (common-lisp:ignorable end-time max-results next-token order-by period
     profiling-group-name start-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-profile-times-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/profilingGroups/~A/profileTimes"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))))
        "ListProfileTimes" "2019-07-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-profile-times))
(common-lisp:progn
 (common-lisp:defun list-profiling-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key include-description max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable include-description max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-profiling-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "GET"
        :rest-json "/profilingGroups" "ListProfilingGroups" "2019-07-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-profiling-groups))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "GET"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "ListTagsForResource" "2019-07-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun post-agent-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-profile content-type profile-token
                     profiling-group-name)
   (common-lisp:declare
    (common-lisp:ignorable agent-profile content-type profile-token
     profiling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-post-agent-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/profilingGroups/~A/agentProfile"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))))
        "PostAgentProfile" "2019-07-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'post-agent-profile))
(common-lisp:progn
 (common-lisp:defun put-permission
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-group principals
                     profiling-group-name revision-id)
   (common-lisp:declare
    (common-lisp:ignorable action-group principals profiling-group-name
     revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-permission-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "PUT"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/profilingGroups/~A/policy/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'action-group))))
        "PutPermission" "2019-07-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-permission))
(common-lisp:progn
 (common-lisp:defun remove-notification-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id profiling-group-name)
   (common-lisp:declare
    (common-lisp:ignorable channel-id profiling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-notification-channel-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "DELETE"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/profilingGroups/~A/notificationConfiguration/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'channel-id))))
        "RemoveNotificationChannel" "2019-07-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-notification-channel))
(common-lisp:progn
 (common-lisp:defun remove-permission
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-group profiling-group-name
                     revision-id)
   (common-lisp:declare
    (common-lisp:ignorable action-group profiling-group-name revision-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-permission-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "DELETE"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/profilingGroups/~A/policy/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'action-group))))
        "RemovePermission" "2019-07-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-permission))
(common-lisp:progn
 (common-lisp:defun submit-feedback
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key anomaly-instance-id comment
                     profiling-group-name type)
   (common-lisp:declare
    (common-lisp:ignorable anomaly-instance-id comment profiling-group-name
     type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-submit-feedback-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil
                              "/internal/profilingGroups/~A/anomalies/~A/feedback"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'anomaly-instance-id))))
        "SubmitFeedback" "2019-07-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'submit-feedback))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "POST"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "TagResource" "2019-07-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "DELETE"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/tags/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'resource-arn))))
        "UntagResource" "2019-07-18"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-profiling-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key agent-orchestration-config
                     profiling-group-name)
   (common-lisp:declare
    (common-lisp:ignorable agent-orchestration-config profiling-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-profiling-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'codeguruprofiler-request aws-sdk/generator/operation::input "PUT"
        :rest-json
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/profilingGroups/~A"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'profiling-group-name))))
        "UpdateProfilingGroup" "2019-07-18"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'update-profiling-group))
