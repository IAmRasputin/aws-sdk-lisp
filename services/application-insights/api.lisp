;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/application-insights/api
  (:use)
  (:nicknames #:aws/application-insights)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/application-insights/api)
(common-lisp:progn
 (common-lisp:define-condition application-insights-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'application-insights-error))
(common-lisp:progn
 (common-lisp:defclass application-insights-request
                       (aws-sdk/json-request:json-request) common-lisp:nil
                       (:default-initargs :service "application-insights"
                        :api-version "2018-11-25" :host-prefix
                        "applicationinsights" :signing-name
                        "applicationinsights" :global-host common-lisp:nil
                        :target-prefix "EC2WindowsBarleyService" :json-version
                        "1.1"))
 (common-lisp:export 'application-insights-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("BadRequestException" . bad-request-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("TagsAlreadyExistException" . tags-already-exist-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (application-insights-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (add-workload-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-workload-request-"))
   (resource-group-name (common-lisp:error ":resource-group-name is required")
    :type (common-lisp:or resource-group-name common-lisp:null))
   (component-name (common-lisp:error ":component-name is required") :type
    (common-lisp:or component-name common-lisp:null))
   (workload-configuration
    (common-lisp:error ":workload-configuration is required") :type
    (common-lisp:or workload-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-workload-request 'make-add-workload-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-workload-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-workload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workload-configuration))
      (common-lisp:list
       (common-lisp:cons "WorkloadConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-workload-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-workload-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-workload-response-"))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (workload-configuration common-lisp:nil :type
    (common-lisp:or workload-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-workload-response 'make-add-workload-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-workload-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-workload-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workload-configuration))
      (common-lisp:list
       (common-lisp:cons "WorkloadConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-workload-response))
   common-lisp:nil))
(common-lisp:deftype affected-resource () 'common-lisp:string)
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (application-component (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-component-"))
   (component-name common-lisp:nil :type
    (common-lisp:or component-name common-lisp:null))
   (component-remarks common-lisp:nil :type
    (common-lisp:or remarks common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (os-type common-lisp:nil :type (common-lisp:or os-type common-lisp:null))
   (tier common-lisp:nil :type (common-lisp:or tier common-lisp:null))
   (monitor common-lisp:nil :type (common-lisp:or monitor common-lisp:null))
   (detected-workload common-lisp:nil :type
    (common-lisp:or detected-workload common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-component 'make-application-component))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-component))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-component))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-remarks))
      (common-lisp:list
       (common-lisp:cons "ComponentRemarks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os-type))
      (common-lisp:list
       (common-lisp:cons "OsType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor))
      (common-lisp:list
       (common-lisp:cons "Monitor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detected-workload))
      (common-lisp:list
       (common-lisp:cons "DetectedWorkload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-component))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype application-component-list ()
   '(trivial-types:proper-list application-component))
 (common-lisp:defun make-application-component-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-component))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (application-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-info-"))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (resource-group-name common-lisp:nil :type
    (common-lisp:or resource-group-name common-lisp:null))
   (life-cycle common-lisp:nil :type
    (common-lisp:or life-cycle common-lisp:null))
   (ops-item-snstopic-arn common-lisp:nil :type
    (common-lisp:or ops-item-snstopic-arn common-lisp:null))
   (ops-center-enabled common-lisp:nil :type
    (common-lisp:or ops-center-enabled common-lisp:null))
   (cwemonitor-enabled common-lisp:nil :type
    (common-lisp:or cwemonitor-enabled common-lisp:null))
   (remarks common-lisp:nil :type (common-lisp:or remarks common-lisp:null))
   (auto-config-enabled common-lisp:nil :type
    (common-lisp:or auto-config-enabled common-lisp:null))
   (discovery-type common-lisp:nil :type
    (common-lisp:or discovery-type common-lisp:null))
   (attach-missing-permission common-lisp:nil :type
    (common-lisp:or attach-missing-permission common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-info 'make-application-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'life-cycle))
      (common-lisp:list
       (common-lisp:cons "LifeCycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ops-item-snstopic-arn))
      (common-lisp:list
       (common-lisp:cons "OpsItemSNSTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-center-enabled))
      (common-lisp:list
       (common-lisp:cons "OpsCenterEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cwemonitor-enabled))
      (common-lisp:list
       (common-lisp:cons "CWEMonitorEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remarks))
      (common-lisp:list
       (common-lisp:cons "Remarks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-config-enabled))
      (common-lisp:list
       (common-lisp:cons "AutoConfigEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'discovery-type))
      (common-lisp:list
       (common-lisp:cons "DiscoveryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attach-missing-permission))
      (common-lisp:list
       (common-lisp:cons "AttachMissingPermission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype application-info-list ()
   '(trivial-types:proper-list application-info))
 (common-lisp:defun make-application-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype attach-missing-permission () 'common-lisp:boolean)
(common-lisp:deftype auto-config-enabled () 'common-lisp:boolean)
(common-lisp:deftype auto-create () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (application-insights-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:deftype cwemonitor-enabled () 'common-lisp:boolean)
(common-lisp:deftype cloud-watch-event-detail-type () 'common-lisp:string)
(common-lisp:deftype cloud-watch-event-id () 'common-lisp:string)
(common-lisp:deftype cloud-watch-event-source () 'common-lisp:string)
(common-lisp:deftype code-deploy-application () 'common-lisp:string)
(common-lisp:deftype code-deploy-deployment-group () 'common-lisp:string)
(common-lisp:deftype code-deploy-deployment-id () 'common-lisp:string)
(common-lisp:deftype code-deploy-instance-group-id () 'common-lisp:string)
(common-lisp:deftype code-deploy-state () 'common-lisp:string)
(common-lisp:deftype component-configuration () 'common-lisp:string)
(common-lisp:deftype component-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (configuration-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-configuration-event-"))
   (resource-group-name common-lisp:nil :type
    (common-lisp:or resource-group-name common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (monitored-resource-arn common-lisp:nil :type
    (common-lisp:or configuration-event-monitored-resource-arn
                    common-lisp:null))
   (event-status common-lisp:nil :type
    (common-lisp:or configuration-event-status common-lisp:null))
   (event-resource-type common-lisp:nil :type
    (common-lisp:or configuration-event-resource-type common-lisp:null))
   (event-time common-lisp:nil :type
    (common-lisp:or configuration-event-time common-lisp:null))
   (event-detail common-lisp:nil :type
    (common-lisp:or configuration-event-detail common-lisp:null))
   (event-resource-name common-lisp:nil :type
    (common-lisp:or configuration-event-resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configuration-event 'make-configuration-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitored-resource-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoredResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-status))
      (common-lisp:list
       (common-lisp:cons "EventStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-resource-type))
      (common-lisp:list
       (common-lisp:cons "EventResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-time))
      (common-lisp:list
       (common-lisp:cons "EventTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-detail))
      (common-lisp:list
       (common-lisp:cons "EventDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-resource-name))
      (common-lisp:list
       (common-lisp:cons "EventResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration-event))
   common-lisp:nil))
(common-lisp:deftype configuration-event-detail () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype configuration-event-list ()
   '(trivial-types:proper-list configuration-event))
 (common-lisp:defun make-configuration-event-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list configuration-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configuration-event-monitored-resource-arn ()
  'common-lisp:string)
(common-lisp:deftype configuration-event-resource-name () 'common-lisp:string)
(common-lisp:deftype configuration-event-resource-type () 'common-lisp:string)
(common-lisp:deftype configuration-event-status () 'common-lisp:string)
(common-lisp:deftype configuration-event-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-application-request-"))
   (resource-group-name common-lisp:nil :type
    (common-lisp:or resource-group-name common-lisp:null))
   (ops-center-enabled common-lisp:nil :type
    (common-lisp:or ops-center-enabled common-lisp:null))
   (cwemonitor-enabled common-lisp:nil :type
    (common-lisp:or cwemonitor-enabled common-lisp:null))
   (ops-item-snstopic-arn common-lisp:nil :type
    (common-lisp:or ops-item-snstopic-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (auto-config-enabled common-lisp:nil :type
    (common-lisp:or auto-config-enabled common-lisp:null))
   (auto-create common-lisp:nil :type
    (common-lisp:or auto-create common-lisp:null))
   (grouping-type common-lisp:nil :type
    (common-lisp:or grouping-type common-lisp:null))
   (attach-missing-permission common-lisp:nil :type
    (common-lisp:or attach-missing-permission common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-application-request
                    'make-create-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-center-enabled))
      (common-lisp:list
       (common-lisp:cons "OpsCenterEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cwemonitor-enabled))
      (common-lisp:list
       (common-lisp:cons "CWEMonitorEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ops-item-snstopic-arn))
      (common-lisp:list
       (common-lisp:cons "OpsItemSNSTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-config-enabled))
      (common-lisp:list
       (common-lisp:cons "AutoConfigEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-create))
      (common-lisp:list
       (common-lisp:cons "AutoCreate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grouping-type))
      (common-lisp:list
       (common-lisp:cons "GroupingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attach-missing-permission))
      (common-lisp:list
       (common-lisp:cons "AttachMissingPermission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-application-response-"))
   (application-info common-lisp:nil :type
    (common-lisp:or application-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-application-response
                    'make-create-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-info))
      (common-lisp:list
       (common-lisp:cons "ApplicationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-component-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-component-request-"))
   (resource-group-name (common-lisp:error ":resource-group-name is required")
    :type (common-lisp:or resource-group-name common-lisp:null))
   (component-name (common-lisp:error ":component-name is required") :type
    (common-lisp:or custom-component-name common-lisp:null))
   (resource-list (common-lisp:error ":resource-list is required") :type
    (common-lisp:or resource-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-component-request 'make-create-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-list))
      (common-lisp:list
       (common-lisp:cons "ResourceList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-component-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-component-response-")))
 (common-lisp:export
  (common-lisp:list 'create-component-response
                    'make-create-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-log-pattern-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-log-pattern-request-"))
   (resource-group-name (common-lisp:error ":resource-group-name is required")
    :type (common-lisp:or resource-group-name common-lisp:null))
   (pattern-set-name (common-lisp:error ":pattern-set-name is required") :type
    (common-lisp:or log-pattern-set-name common-lisp:null))
   (pattern-name (common-lisp:error ":pattern-name is required") :type
    (common-lisp:or log-pattern-name common-lisp:null))
   (pattern (common-lisp:error ":pattern is required") :type
    (common-lisp:or log-pattern-regex common-lisp:null))
   (rank (common-lisp:error ":rank is required") :type
    (common-lisp:or log-pattern-rank common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-log-pattern-request
                    'make-create-log-pattern-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-log-pattern-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-log-pattern-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-set-name))
      (common-lisp:list
       (common-lisp:cons "PatternSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-name))
      (common-lisp:list
       (common-lisp:cons "PatternName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern))
      (common-lisp:list
       (common-lisp:cons "Pattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rank))
      (common-lisp:list
       (common-lisp:cons "Rank"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-log-pattern-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-log-pattern-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-log-pattern-response-"))
   (log-pattern common-lisp:nil :type
    (common-lisp:or log-pattern common-lisp:null))
   (resource-group-name common-lisp:nil :type
    (common-lisp:or resource-group-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-log-pattern-response
                    'make-create-log-pattern-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-log-pattern-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-log-pattern-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-pattern))
      (common-lisp:list
       (common-lisp:cons "LogPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-log-pattern-response))
   common-lisp:nil))
(common-lisp:deftype custom-component-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-application-request-"))
   (resource-group-name (common-lisp:error ":resource-group-name is required")
    :type (common-lisp:or resource-group-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-application-request
                    'make-delete-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-application-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-application-response
                    'make-delete-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-component-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-component-request-"))
   (resource-group-name (common-lisp:error ":resource-group-name is required")
    :type (common-lisp:or resource-group-name common-lisp:null))
   (component-name (common-lisp:error ":component-name is required") :type
    (common-lisp:or custom-component-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-component-request 'make-delete-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-component-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-component-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-component-response
                    'make-delete-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-log-pattern-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-log-pattern-request-"))
   (resource-group-name (common-lisp:error ":resource-group-name is required")
    :type (common-lisp:or resource-group-name common-lisp:null))
   (pattern-set-name (common-lisp:error ":pattern-set-name is required") :type
    (common-lisp:or log-pattern-set-name common-lisp:null))
   (pattern-name (common-lisp:error ":pattern-name is required") :type
    (common-lisp:or log-pattern-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-log-pattern-request
                    'make-delete-log-pattern-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-pattern-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-pattern-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-set-name))
      (common-lisp:list
       (common-lisp:cons "PatternSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-name))
      (common-lisp:list
       (common-lisp:cons "PatternName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-pattern-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-log-pattern-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-log-pattern-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-log-pattern-response
                    'make-delete-log-pattern-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-pattern-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-pattern-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-pattern-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-application-request-"))
   (resource-group-name (common-lisp:error ":resource-group-name is required")
    :type (common-lisp:or resource-group-name common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-application-request
                    'make-describe-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-application-response-"))
   (application-info common-lisp:nil :type
    (common-lisp:or application-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-application-response
                    'make-describe-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-info))
      (common-lisp:list
       (common-lisp:cons "ApplicationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-component-configuration-recommendation-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-component-configuration-recommendation-request-"))
   (resource-group-name (common-lisp:error ":resource-group-name is required")
    :type (common-lisp:or resource-group-name common-lisp:null))
   (component-name (common-lisp:error ":component-name is required") :type
    (common-lisp:or component-name common-lisp:null))
   (tier (common-lisp:error ":tier is required") :type
    (common-lisp:or tier common-lisp:null))
   (workload-name common-lisp:nil :type
    (common-lisp:or workload-name common-lisp:null))
   (recommendation-type common-lisp:nil :type
    (common-lisp:or recommendation-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-component-configuration-recommendation-request
                    'make-describe-component-configuration-recommendation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-configuration-recommendation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-configuration-recommendation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "WorkloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-type))
      (common-lisp:list
       (common-lisp:cons "RecommendationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-configuration-recommendation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-component-configuration-recommendation-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-component-configuration-recommendation-response-"))
   (component-configuration common-lisp:nil :type
    (common-lisp:or component-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-component-configuration-recommendation-response
                    'make-describe-component-configuration-recommendation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-configuration-recommendation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-configuration-recommendation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-configuration))
      (common-lisp:list
       (common-lisp:cons "ComponentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-configuration-recommendation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-component-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-component-configuration-request-"))
   (resource-group-name (common-lisp:error ":resource-group-name is required")
    :type (common-lisp:or resource-group-name common-lisp:null))
   (component-name (common-lisp:error ":component-name is required") :type
    (common-lisp:or component-name common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-component-configuration-request
                    'make-describe-component-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-component-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-component-configuration-response-"))
   (monitor common-lisp:nil :type (common-lisp:or monitor common-lisp:null))
   (tier common-lisp:nil :type (common-lisp:or tier common-lisp:null))
   (component-configuration common-lisp:nil :type
    (common-lisp:or component-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-component-configuration-response
                    'make-describe-component-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor))
      (common-lisp:list
       (common-lisp:cons "Monitor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-configuration))
      (common-lisp:list
       (common-lisp:cons "ComponentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-component-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-component-request-"))
   (resource-group-name (common-lisp:error ":resource-group-name is required")
    :type (common-lisp:or resource-group-name common-lisp:null))
   (component-name (common-lisp:error ":component-name is required") :type
    (common-lisp:or component-name common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-component-request
                    'make-describe-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-component-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-component-response-"))
   (application-component common-lisp:nil :type
    (common-lisp:or application-component common-lisp:null))
   (resource-list common-lisp:nil :type
    (common-lisp:or resource-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-component-response
                    'make-describe-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-component))
      (common-lisp:list
       (common-lisp:cons "ApplicationComponent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-list))
      (common-lisp:list
       (common-lisp:cons "ResourceList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-log-pattern-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-log-pattern-request-"))
   (resource-group-name (common-lisp:error ":resource-group-name is required")
    :type (common-lisp:or resource-group-name common-lisp:null))
   (pattern-set-name (common-lisp:error ":pattern-set-name is required") :type
    (common-lisp:or log-pattern-set-name common-lisp:null))
   (pattern-name (common-lisp:error ":pattern-name is required") :type
    (common-lisp:or log-pattern-name common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-log-pattern-request
                    'make-describe-log-pattern-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-pattern-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-pattern-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-set-name))
      (common-lisp:list
       (common-lisp:cons "PatternSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-name))
      (common-lisp:list
       (common-lisp:cons "PatternName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-pattern-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-log-pattern-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-log-pattern-response-"))
   (resource-group-name common-lisp:nil :type
    (common-lisp:or resource-group-name common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (log-pattern common-lisp:nil :type
    (common-lisp:or log-pattern common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-log-pattern-response
                    'make-describe-log-pattern-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-pattern-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-pattern-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-pattern))
      (common-lisp:list
       (common-lisp:cons "LogPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-pattern-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-observation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-observation-request-"))
   (observation-id (common-lisp:error ":observation-id is required") :type
    (common-lisp:or observation-id common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-observation-request
                    'make-describe-observation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-observation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-observation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'observation-id))
      (common-lisp:list
       (common-lisp:cons "ObservationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-observation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-observation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-observation-response-"))
   (observation common-lisp:nil :type
    (common-lisp:or observation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-observation-response
                    'make-describe-observation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-observation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-observation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'observation))
      (common-lisp:list
       (common-lisp:cons "Observation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-observation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-problem-observations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-problem-observations-request-"))
   (problem-id (common-lisp:error ":problem-id is required") :type
    (common-lisp:or problem-id common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-problem-observations-request
                    'make-describe-problem-observations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-problem-observations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-problem-observations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'problem-id))
      (common-lisp:list
       (common-lisp:cons "ProblemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-problem-observations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-problem-observations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-problem-observations-response-"))
   (related-observations common-lisp:nil :type
    (common-lisp:or related-observations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-problem-observations-response
                    'make-describe-problem-observations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-problem-observations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-problem-observations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'related-observations))
      (common-lisp:list
       (common-lisp:cons "RelatedObservations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-problem-observations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-problem-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-problem-request-"))
   (problem-id (common-lisp:error ":problem-id is required") :type
    (common-lisp:or problem-id common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-problem-request 'make-describe-problem-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-problem-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-problem-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'problem-id))
      (common-lisp:list
       (common-lisp:cons "ProblemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-problem-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-problem-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-problem-response-"))
   (problem common-lisp:nil :type (common-lisp:or problem common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-problem-response
                    'make-describe-problem-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-problem-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-problem-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'problem))
      (common-lisp:list
       (common-lisp:cons "Problem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-problem-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-workload-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-workload-request-"))
   (resource-group-name (common-lisp:error ":resource-group-name is required")
    :type (common-lisp:or resource-group-name common-lisp:null))
   (component-name (common-lisp:error ":component-name is required") :type
    (common-lisp:or component-name common-lisp:null))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-workload-request
                    'make-describe-workload-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workload-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workload-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-workload-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-workload-response-"))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (workload-remarks common-lisp:nil :type
    (common-lisp:or remarks common-lisp:null))
   (workload-configuration common-lisp:nil :type
    (common-lisp:or workload-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-workload-response
                    'make-describe-workload-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workload-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workload-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-remarks))
      (common-lisp:list
       (common-lisp:cons "WorkloadRemarks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workload-configuration))
      (common-lisp:list
       (common-lisp:cons "WorkloadConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workload-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype detected-workload () 'common-lisp:hash-table)
 (common-lisp:defun make-detected-workload
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype discovery-type () 'common-lisp:string)
(common-lisp:deftype ebs-cause () 'common-lisp:string)
(common-lisp:deftype ebs-event () 'common-lisp:string)
(common-lisp:deftype ebs-request-id () 'common-lisp:string)
(common-lisp:deftype ebs-result () 'common-lisp:string)
(common-lisp:deftype ec2state () 'common-lisp:string)
(common-lisp:deftype end-time () 'common-lisp:string)
(common-lisp:deftype error-msg () 'common-lisp:string)
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype feedback () 'common-lisp:hash-table)
 (common-lisp:defun make-feedback (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype feedback-key () 'common-lisp:string)
(common-lisp:deftype feedback-value () 'common-lisp:string)
(common-lisp:deftype grouping-type () 'common-lisp:string)
(common-lisp:deftype health-event-arn () 'common-lisp:string)
(common-lisp:deftype health-event-description () 'common-lisp:string)
(common-lisp:deftype health-event-type-category () 'common-lisp:string)
(common-lisp:deftype health-event-type-code () 'common-lisp:string)
(common-lisp:deftype health-service () 'common-lisp:string)
(common-lisp:deftype insights () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (application-insights-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype last-recurrence-time () 'common-lisp:string)
(common-lisp:deftype life-cycle () 'common-lisp:string)
(common-lisp:deftype line-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-applications-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-applications-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-entities common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-applications-request
                    'make-list-applications-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-applications-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-applications-response-"))
   (application-info-list common-lisp:nil :type
    (common-lisp:or application-info-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-applications-response
                    'make-list-applications-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-info-list))
      (common-lisp:list
       (common-lisp:cons "ApplicationInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-components-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-components-request-"))
   (resource-group-name (common-lisp:error ":resource-group-name is required")
    :type (common-lisp:or resource-group-name common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-entities common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-components-request 'make-list-components-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-components-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-components-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-components-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-components-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-components-response-"))
   (application-component-list common-lisp:nil :type
    (common-lisp:or application-component-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-components-response 'make-list-components-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-components-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-components-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-component-list))
      (common-lisp:list
       (common-lisp:cons "ApplicationComponentList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-components-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-configuration-history-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-configuration-history-request-"))
   (resource-group-name common-lisp:nil :type
    (common-lisp:or resource-group-name common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or start-time common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or end-time common-lisp:null))
   (event-status common-lisp:nil :type
    (common-lisp:or configuration-event-status common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-entities common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-configuration-history-request
                    'make-list-configuration-history-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-history-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-status))
      (common-lisp:list
       (common-lisp:cons "EventStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-history-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-configuration-history-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-configuration-history-response-"))
   (event-list common-lisp:nil :type
    (common-lisp:or configuration-event-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-configuration-history-response
                    'make-list-configuration-history-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-history-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-history-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-list))
      (common-lisp:list
       (common-lisp:cons "EventList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-history-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-log-pattern-sets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-log-pattern-sets-request-"))
   (resource-group-name (common-lisp:error ":resource-group-name is required")
    :type (common-lisp:or resource-group-name common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-entities common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-log-pattern-sets-request
                    'make-list-log-pattern-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-log-pattern-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-log-pattern-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-log-pattern-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-log-pattern-sets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-log-pattern-sets-response-"))
   (resource-group-name common-lisp:nil :type
    (common-lisp:or resource-group-name common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (log-pattern-sets common-lisp:nil :type
    (common-lisp:or log-pattern-set-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-log-pattern-sets-response
                    'make-list-log-pattern-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-log-pattern-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-log-pattern-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-pattern-sets))
      (common-lisp:list
       (common-lisp:cons "LogPatternSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-log-pattern-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-log-patterns-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-log-patterns-request-"))
   (resource-group-name (common-lisp:error ":resource-group-name is required")
    :type (common-lisp:or resource-group-name common-lisp:null))
   (pattern-set-name common-lisp:nil :type
    (common-lisp:or log-pattern-set-name common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-entities common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-log-patterns-request
                    'make-list-log-patterns-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-log-patterns-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-log-patterns-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-set-name))
      (common-lisp:list
       (common-lisp:cons "PatternSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-log-patterns-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-log-patterns-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-log-patterns-response-"))
   (resource-group-name common-lisp:nil :type
    (common-lisp:or resource-group-name common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (log-patterns common-lisp:nil :type
    (common-lisp:or log-pattern-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-log-patterns-response
                    'make-list-log-patterns-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-log-patterns-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-log-patterns-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-patterns))
      (common-lisp:list
       (common-lisp:cons "LogPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-log-patterns-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-problems-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-problems-request-"))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (resource-group-name common-lisp:nil :type
    (common-lisp:or resource-group-name common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or start-time common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or end-time common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-entities common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (component-name common-lisp:nil :type
    (common-lisp:or component-name common-lisp:null))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-problems-request 'make-list-problems-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-problems-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-problems-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-problems-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-problems-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-problems-response-"))
   (problem-list common-lisp:nil :type
    (common-lisp:or problem-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (resource-group-name common-lisp:nil :type
    (common-lisp:or resource-group-name common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-problems-response 'make-list-problems-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-problems-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-problems-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'problem-list))
      (common-lisp:list
       (common-lisp:cons "ProblemList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-problems-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-workloads-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-workloads-request-"))
   (resource-group-name (common-lisp:error ":resource-group-name is required")
    :type (common-lisp:or resource-group-name common-lisp:null))
   (component-name (common-lisp:error ":component-name is required") :type
    (common-lisp:or component-name common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-entities common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-workloads-request 'make-list-workloads-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workloads-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workloads-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workloads-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-workloads-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-workloads-response-"))
   (workload-list common-lisp:nil :type
    (common-lisp:or workload-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-workloads-response 'make-list-workloads-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workloads-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workloads-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-list))
      (common-lisp:list
       (common-lisp:cons "WorkloadList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workloads-response))
   common-lisp:nil))
(common-lisp:deftype log-filter () 'common-lisp:string)
(common-lisp:deftype log-group () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (log-pattern (:copier common-lisp:nil)
      (:conc-name "struct-shape-log-pattern-"))
   (pattern-set-name common-lisp:nil :type
    (common-lisp:or log-pattern-set-name common-lisp:null))
   (pattern-name common-lisp:nil :type
    (common-lisp:or log-pattern-name common-lisp:null))
   (pattern common-lisp:nil :type
    (common-lisp:or log-pattern-regex common-lisp:null))
   (rank common-lisp:nil :type
    (common-lisp:or log-pattern-rank common-lisp:null)))
 (common-lisp:export (common-lisp:list 'log-pattern 'make-log-pattern))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-pattern))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-pattern))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-set-name))
      (common-lisp:list
       (common-lisp:cons "PatternSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-name))
      (common-lisp:list
       (common-lisp:cons "PatternName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern))
      (common-lisp:list
       (common-lisp:cons "Pattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rank))
      (common-lisp:list
       (common-lisp:cons "Rank"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-pattern))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-pattern-list ()
   '(trivial-types:proper-list log-pattern))
 (common-lisp:defun make-log-pattern-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-pattern))
   aws-sdk/generator/shape::members))
(common-lisp:deftype log-pattern-name () 'common-lisp:string)
(common-lisp:deftype log-pattern-rank () 'common-lisp:integer)
(common-lisp:deftype log-pattern-regex () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype log-pattern-set-list ()
   '(trivial-types:proper-list log-pattern-set-name))
 (common-lisp:defun make-log-pattern-set-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-pattern-set-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype log-pattern-set-name () 'common-lisp:string)
(common-lisp:deftype log-text () 'common-lisp:string)
(common-lisp:deftype max-entities () 'common-lisp:integer)
(common-lisp:deftype meta-data-key () 'common-lisp:string)
(common-lisp:deftype meta-data-value () 'common-lisp:string)
(common-lisp:deftype metric-name () 'common-lisp:string)
(common-lisp:deftype metric-namespace () 'common-lisp:string)
(common-lisp:deftype monitor () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (observation (:copier common-lisp:nil)
      (:conc-name "struct-shape-observation-"))
   (id common-lisp:nil :type (common-lisp:or observation-id common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or start-time common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or end-time common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or source-type common-lisp:null))
   (source-arn common-lisp:nil :type
    (common-lisp:or source-arn common-lisp:null))
   (log-group common-lisp:nil :type
    (common-lisp:or log-group common-lisp:null))
   (line-time common-lisp:nil :type
    (common-lisp:or line-time common-lisp:null))
   (log-text common-lisp:nil :type (common-lisp:or log-text common-lisp:null))
   (log-filter common-lisp:nil :type
    (common-lisp:or log-filter common-lisp:null))
   (metric-namespace common-lisp:nil :type
    (common-lisp:or metric-namespace common-lisp:null))
   (metric-name common-lisp:nil :type
    (common-lisp:or metric-name common-lisp:null))
   (unit common-lisp:nil :type (common-lisp:or unit common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or value common-lisp:null))
   (cloud-watch-event-id common-lisp:nil :type
    (common-lisp:or cloud-watch-event-id common-lisp:null))
   (cloud-watch-event-source common-lisp:nil :type
    (common-lisp:or cloud-watch-event-source common-lisp:null))
   (cloud-watch-event-detail-type common-lisp:nil :type
    (common-lisp:or cloud-watch-event-detail-type common-lisp:null))
   (health-event-arn common-lisp:nil :type
    (common-lisp:or health-event-arn common-lisp:null))
   (health-service common-lisp:nil :type
    (common-lisp:or health-service common-lisp:null))
   (health-event-type-code common-lisp:nil :type
    (common-lisp:or health-event-type-code common-lisp:null))
   (health-event-type-category common-lisp:nil :type
    (common-lisp:or health-event-type-category common-lisp:null))
   (health-event-description common-lisp:nil :type
    (common-lisp:or health-event-description common-lisp:null))
   (code-deploy-deployment-id common-lisp:nil :type
    (common-lisp:or code-deploy-deployment-id common-lisp:null))
   (code-deploy-deployment-group common-lisp:nil :type
    (common-lisp:or code-deploy-deployment-group common-lisp:null))
   (code-deploy-state common-lisp:nil :type
    (common-lisp:or code-deploy-state common-lisp:null))
   (code-deploy-application common-lisp:nil :type
    (common-lisp:or code-deploy-application common-lisp:null))
   (code-deploy-instance-group-id common-lisp:nil :type
    (common-lisp:or code-deploy-instance-group-id common-lisp:null))
   (ec2state common-lisp:nil :type (common-lisp:or ec2state common-lisp:null))
   (rds-event-categories common-lisp:nil :type
    (common-lisp:or rds-event-categories common-lisp:null))
   (rds-event-message common-lisp:nil :type
    (common-lisp:or rds-event-message common-lisp:null))
   (s3event-name common-lisp:nil :type
    (common-lisp:or s3event-name common-lisp:null))
   (states-execution-arn common-lisp:nil :type
    (common-lisp:or states-execution-arn common-lisp:null))
   (states-arn common-lisp:nil :type
    (common-lisp:or states-arn common-lisp:null))
   (states-status common-lisp:nil :type
    (common-lisp:or states-status common-lisp:null))
   (states-input common-lisp:nil :type
    (common-lisp:or states-input common-lisp:null))
   (ebs-event common-lisp:nil :type
    (common-lisp:or ebs-event common-lisp:null))
   (ebs-result common-lisp:nil :type
    (common-lisp:or ebs-result common-lisp:null))
   (ebs-cause common-lisp:nil :type
    (common-lisp:or ebs-cause common-lisp:null))
   (ebs-request-id common-lisp:nil :type
    (common-lisp:or ebs-request-id common-lisp:null))
   (xray-fault-percent common-lisp:nil :type
    (common-lisp:or xray-fault-percent common-lisp:null))
   (xray-throttle-percent common-lisp:nil :type
    (common-lisp:or xray-throttle-percent common-lisp:null))
   (xray-error-percent common-lisp:nil :type
    (common-lisp:or xray-error-percent common-lisp:null))
   (xray-request-count common-lisp:nil :type
    (common-lisp:or xray-request-count common-lisp:null))
   (xray-request-average-latency common-lisp:nil :type
    (common-lisp:or xray-request-average-latency common-lisp:null))
   (xray-node-name common-lisp:nil :type
    (common-lisp:or xray-node-name common-lisp:null))
   (xray-node-type common-lisp:nil :type
    (common-lisp:or xray-node-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'observation 'make-observation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input observation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input observation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group))
      (common-lisp:list
       (common-lisp:cons "LogGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-time))
      (common-lisp:list
       (common-lisp:cons "LineTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-text))
      (common-lisp:list
       (common-lisp:cons "LogText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-filter))
      (common-lisp:list
       (common-lisp:cons "LogFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-namespace))
      (common-lisp:list
       (common-lisp:cons "MetricNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-event-id))
      (common-lisp:list
       (common-lisp:cons "CloudWatchEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-event-source))
      (common-lisp:list
       (common-lisp:cons "CloudWatchEventSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-event-detail-type))
      (common-lisp:list
       (common-lisp:cons "CloudWatchEventDetailType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-event-arn))
      (common-lisp:list
       (common-lisp:cons "HealthEventArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-service))
      (common-lisp:list
       (common-lisp:cons "HealthService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-event-type-code))
      (common-lisp:list
       (common-lisp:cons "HealthEventTypeCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-event-type-category))
      (common-lisp:list
       (common-lisp:cons "HealthEventTypeCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-event-description))
      (common-lisp:list
       (common-lisp:cons "HealthEventDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-deploy-deployment-id))
      (common-lisp:list
       (common-lisp:cons "CodeDeployDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-deploy-deployment-group))
      (common-lisp:list
       (common-lisp:cons "CodeDeployDeploymentGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-deploy-state))
      (common-lisp:list
       (common-lisp:cons "CodeDeployState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-deploy-application))
      (common-lisp:list
       (common-lisp:cons "CodeDeployApplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-deploy-instance-group-id))
      (common-lisp:list
       (common-lisp:cons "CodeDeployInstanceGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2state))
      (common-lisp:list
       (common-lisp:cons "Ec2State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rds-event-categories))
      (common-lisp:list
       (common-lisp:cons "RdsEventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rds-event-message))
      (common-lisp:list
       (common-lisp:cons "RdsEventMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3event-name))
      (common-lisp:list
       (common-lisp:cons "S3EventName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'states-execution-arn))
      (common-lisp:list
       (common-lisp:cons "StatesExecutionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'states-arn))
      (common-lisp:list
       (common-lisp:cons "StatesArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'states-status))
      (common-lisp:list
       (common-lisp:cons "StatesStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'states-input))
      (common-lisp:list
       (common-lisp:cons "StatesInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-event))
      (common-lisp:list
       (common-lisp:cons "EbsEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-result))
      (common-lisp:list
       (common-lisp:cons "EbsResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-cause))
      (common-lisp:list
       (common-lisp:cons "EbsCause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-request-id))
      (common-lisp:list
       (common-lisp:cons "EbsRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xray-fault-percent))
      (common-lisp:list
       (common-lisp:cons "XRayFaultPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xray-throttle-percent))
      (common-lisp:list
       (common-lisp:cons "XRayThrottlePercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xray-error-percent))
      (common-lisp:list
       (common-lisp:cons "XRayErrorPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xray-request-count))
      (common-lisp:list
       (common-lisp:cons "XRayRequestCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xray-request-average-latency))
      (common-lisp:list
       (common-lisp:cons "XRayRequestAverageLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xray-node-name))
      (common-lisp:list
       (common-lisp:cons "XRayNodeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xray-node-type))
      (common-lisp:list
       (common-lisp:cons "XRayNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input observation))
   common-lisp:nil))
(common-lisp:deftype observation-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype observation-list ()
   '(trivial-types:proper-list observation))
 (common-lisp:defun make-observation-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list observation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ops-center-enabled () 'common-lisp:boolean)
(common-lisp:deftype ops-item-snstopic-arn () 'common-lisp:string)
(common-lisp:deftype os-type () 'common-lisp:string)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (problem (:copier common-lisp:nil) (:conc-name "struct-shape-problem-"))
   (id common-lisp:nil :type (common-lisp:or problem-id common-lisp:null))
   (title common-lisp:nil :type (common-lisp:or title common-lisp:null))
   (insights common-lisp:nil :type (common-lisp:or insights common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status common-lisp:null))
   (affected-resource common-lisp:nil :type
    (common-lisp:or affected-resource common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or start-time common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or end-time common-lisp:null))
   (severity-level common-lisp:nil :type
    (common-lisp:or severity-level common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (resource-group-name common-lisp:nil :type
    (common-lisp:or resource-group-name common-lisp:null))
   (feedback common-lisp:nil :type (common-lisp:or feedback common-lisp:null))
   (recurring-count common-lisp:nil :type
    (common-lisp:or recurring-count common-lisp:null))
   (last-recurrence-time common-lisp:nil :type
    (common-lisp:or last-recurrence-time common-lisp:null))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null))
   (resolution-method common-lisp:nil :type
    (common-lisp:or resolution-method common-lisp:null)))
 (common-lisp:export (common-lisp:list 'problem 'make-problem))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input problem))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input problem))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insights))
      (common-lisp:list
       (common-lisp:cons "Insights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'affected-resource))
      (common-lisp:list
       (common-lisp:cons "AffectedResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-level))
      (common-lisp:list
       (common-lisp:cons "SeverityLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feedback))
      (common-lisp:list
       (common-lisp:cons "Feedback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurring-count))
      (common-lisp:list
       (common-lisp:cons "RecurringCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-recurrence-time))
      (common-lisp:list
       (common-lisp:cons "LastRecurrenceTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution-method))
      (common-lisp:list
       (common-lisp:cons "ResolutionMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input problem))
   common-lisp:nil))
(common-lisp:deftype problem-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype problem-list () '(trivial-types:proper-list problem))
 (common-lisp:defun make-problem-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list problem))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rds-event-categories () 'common-lisp:string)
(common-lisp:deftype rds-event-message () 'common-lisp:string)
(common-lisp:deftype recommendation-type () 'common-lisp:string)
(common-lisp:deftype recurring-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (related-observations (:copier common-lisp:nil)
      (:conc-name "struct-shape-related-observations-"))
   (observation-list common-lisp:nil :type
    (common-lisp:or observation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'related-observations 'make-related-observations))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input related-observations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input related-observations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'observation-list))
      (common-lisp:list
       (common-lisp:cons "ObservationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input related-observations))
   common-lisp:nil))
(common-lisp:deftype remarks () 'common-lisp:string)
(common-lisp:deftype remove-snstopic () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (remove-workload-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-workload-request-"))
   (resource-group-name (common-lisp:error ":resource-group-name is required")
    :type (common-lisp:or resource-group-name common-lisp:null))
   (component-name (common-lisp:error ":component-name is required") :type
    (common-lisp:or component-name common-lisp:null))
   (workload-id (common-lisp:error ":workload-id is required") :type
    (common-lisp:or workload-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-workload-request 'make-remove-workload-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-workload-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-workload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-workload-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-workload-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-workload-response-")))
 (common-lisp:export
  (common-lisp:list 'remove-workload-response 'make-remove-workload-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-workload-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-workload-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-workload-response))
   common-lisp:nil))
(common-lisp:deftype resolution-method () 'common-lisp:string)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:deftype resource-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (application-insights-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:deftype resource-list ()
   '(trivial-types:proper-list resource-arn))
 (common-lisp:defun make-resource-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (application-insights-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype s3event-name () 'common-lisp:string)
(common-lisp:deftype severity-level () 'common-lisp:string)
(common-lisp:deftype source-arn () 'common-lisp:string)
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:deftype start-time () 'common-lisp:string)
(common-lisp:deftype states-arn () 'common-lisp:string)
(common-lisp:deftype states-execution-arn () 'common-lisp:string)
(common-lisp:deftype states-input () 'common-lisp:string)
(common-lisp:deftype states-status () 'common-lisp:string)
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition tags-already-exist-exception
     (application-insights-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       tags-already-exist-exception-message)))
 (common-lisp:export
  (common-lisp:list 'tags-already-exist-exception
                    'tags-already-exist-exception-message)))
(common-lisp:deftype tier () 'common-lisp:string)
(common-lisp:deftype title () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (application-insights-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       too-many-tags-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message
                    'too-many-tags-exception-resource-name)))
(common-lisp:deftype unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-application-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-application-request-"))
   (resource-group-name (common-lisp:error ":resource-group-name is required")
    :type (common-lisp:or resource-group-name common-lisp:null))
   (ops-center-enabled common-lisp:nil :type
    (common-lisp:or ops-center-enabled common-lisp:null))
   (cwemonitor-enabled common-lisp:nil :type
    (common-lisp:or cwemonitor-enabled common-lisp:null))
   (ops-item-snstopic-arn common-lisp:nil :type
    (common-lisp:or ops-item-snstopic-arn common-lisp:null))
   (remove-snstopic common-lisp:nil :type
    (common-lisp:or remove-snstopic common-lisp:null))
   (auto-config-enabled common-lisp:nil :type
    (common-lisp:or auto-config-enabled common-lisp:null))
   (attach-missing-permission common-lisp:nil :type
    (common-lisp:or attach-missing-permission common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-application-request
                    'make-update-application-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-center-enabled))
      (common-lisp:list
       (common-lisp:cons "OpsCenterEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cwemonitor-enabled))
      (common-lisp:list
       (common-lisp:cons "CWEMonitorEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ops-item-snstopic-arn))
      (common-lisp:list
       (common-lisp:cons "OpsItemSNSTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-snstopic))
      (common-lisp:list
       (common-lisp:cons "RemoveSNSTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-config-enabled))
      (common-lisp:list
       (common-lisp:cons "AutoConfigEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attach-missing-permission))
      (common-lisp:list
       (common-lisp:cons "AttachMissingPermission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-application-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-application-response-"))
   (application-info common-lisp:nil :type
    (common-lisp:or application-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-application-response
                    'make-update-application-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-info))
      (common-lisp:list
       (common-lisp:cons "ApplicationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-component-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-component-configuration-request-"))
   (resource-group-name (common-lisp:error ":resource-group-name is required")
    :type (common-lisp:or resource-group-name common-lisp:null))
   (component-name (common-lisp:error ":component-name is required") :type
    (common-lisp:or component-name common-lisp:null))
   (monitor common-lisp:nil :type (common-lisp:or monitor common-lisp:null))
   (tier common-lisp:nil :type (common-lisp:or tier common-lisp:null))
   (component-configuration common-lisp:nil :type
    (common-lisp:or component-configuration common-lisp:null))
   (auto-config-enabled common-lisp:nil :type
    (common-lisp:or auto-config-enabled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-component-configuration-request
                    'make-update-component-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-component-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-component-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor))
      (common-lisp:list
       (common-lisp:cons "Monitor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-configuration))
      (common-lisp:list
       (common-lisp:cons "ComponentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-config-enabled))
      (common-lisp:list
       (common-lisp:cons "AutoConfigEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-component-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-component-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-component-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'update-component-configuration-response
                    'make-update-component-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-component-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-component-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-component-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-component-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-component-request-"))
   (resource-group-name (common-lisp:error ":resource-group-name is required")
    :type (common-lisp:or resource-group-name common-lisp:null))
   (component-name (common-lisp:error ":component-name is required") :type
    (common-lisp:or custom-component-name common-lisp:null))
   (new-component-name common-lisp:nil :type
    (common-lisp:or custom-component-name common-lisp:null))
   (resource-list common-lisp:nil :type
    (common-lisp:or resource-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-component-request 'make-update-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-component-name))
      (common-lisp:list
       (common-lisp:cons "NewComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-list))
      (common-lisp:list
       (common-lisp:cons "ResourceList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-component-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-component-response-")))
 (common-lisp:export
  (common-lisp:list 'update-component-response
                    'make-update-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-log-pattern-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-log-pattern-request-"))
   (resource-group-name (common-lisp:error ":resource-group-name is required")
    :type (common-lisp:or resource-group-name common-lisp:null))
   (pattern-set-name (common-lisp:error ":pattern-set-name is required") :type
    (common-lisp:or log-pattern-set-name common-lisp:null))
   (pattern-name (common-lisp:error ":pattern-name is required") :type
    (common-lisp:or log-pattern-name common-lisp:null))
   (pattern common-lisp:nil :type
    (common-lisp:or log-pattern-regex common-lisp:null))
   (rank common-lisp:nil :type
    (common-lisp:or log-pattern-rank common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-log-pattern-request
                    'make-update-log-pattern-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-log-pattern-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-log-pattern-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-set-name))
      (common-lisp:list
       (common-lisp:cons "PatternSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-name))
      (common-lisp:list
       (common-lisp:cons "PatternName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern))
      (common-lisp:list
       (common-lisp:cons "Pattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rank))
      (common-lisp:list
       (common-lisp:cons "Rank"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-log-pattern-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-log-pattern-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-log-pattern-response-"))
   (resource-group-name common-lisp:nil :type
    (common-lisp:or resource-group-name common-lisp:null))
   (log-pattern common-lisp:nil :type
    (common-lisp:or log-pattern common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-log-pattern-response
                    'make-update-log-pattern-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-log-pattern-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-log-pattern-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-pattern))
      (common-lisp:list
       (common-lisp:cons "LogPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-log-pattern-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-problem-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-problem-request-"))
   (problem-id (common-lisp:error ":problem-id is required") :type
    (common-lisp:or problem-id common-lisp:null))
   (update-status common-lisp:nil :type
    (common-lisp:or update-status common-lisp:null))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-problem-request 'make-update-problem-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-problem-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-problem-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'problem-id))
      (common-lisp:list
       (common-lisp:cons "ProblemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-status))
      (common-lisp:list
       (common-lisp:cons "UpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-problem-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-problem-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-problem-response-")))
 (common-lisp:export
  (common-lisp:list 'update-problem-response 'make-update-problem-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-problem-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-problem-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-problem-response))
   common-lisp:nil))
(common-lisp:deftype update-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-workload-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-workload-request-"))
   (resource-group-name (common-lisp:error ":resource-group-name is required")
    :type (common-lisp:or resource-group-name common-lisp:null))
   (component-name (common-lisp:error ":component-name is required") :type
    (common-lisp:or component-name common-lisp:null))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (workload-configuration
    (common-lisp:error ":workload-configuration is required") :type
    (common-lisp:or workload-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-workload-request 'make-update-workload-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workload-configuration))
      (common-lisp:list
       (common-lisp:cons "WorkloadConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-workload-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-workload-response-"))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (workload-configuration common-lisp:nil :type
    (common-lisp:or workload-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-workload-response 'make-update-workload-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workload-configuration))
      (common-lisp:list
       (common-lisp:cons "WorkloadConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workload-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (application-insights-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype value () 'common-lisp:double-float)
(common-lisp:deftype visibility () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (workload (:copier common-lisp:nil) (:conc-name "struct-shape-workload-"))
   (workload-id common-lisp:nil :type
    (common-lisp:or workload-id common-lisp:null))
   (component-name common-lisp:nil :type
    (common-lisp:or component-name common-lisp:null))
   (workload-name common-lisp:nil :type
    (common-lisp:or workload-name common-lisp:null))
   (tier common-lisp:nil :type (common-lisp:or tier common-lisp:null))
   (workload-remarks common-lisp:nil :type
    (common-lisp:or remarks common-lisp:null)))
 (common-lisp:export (common-lisp:list 'workload 'make-workload))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workload))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workload))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-id))
      (common-lisp:list
       (common-lisp:cons "WorkloadId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "WorkloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-remarks))
      (common-lisp:list
       (common-lisp:cons "WorkloadRemarks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workload))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workload-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-workload-configuration-"))
   (workload-name common-lisp:nil :type
    (common-lisp:or workload-name common-lisp:null))
   (tier common-lisp:nil :type (common-lisp:or tier common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or component-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workload-configuration 'make-workload-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workload-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workload-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workload-name))
      (common-lisp:list
       (common-lisp:cons "WorkloadName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration))
      (common-lisp:list
       (common-lisp:cons "Configuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workload-configuration))
   common-lisp:nil))
(common-lisp:deftype workload-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workload-list () '(trivial-types:proper-list workload))
 (common-lisp:defun make-workload-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workload))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype workload-meta-data () 'common-lisp:hash-table)
 (common-lisp:defun make-workload-meta-data
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype workload-name () 'common-lisp:string)
(common-lisp:deftype xray-error-percent () 'common-lisp:integer)
(common-lisp:deftype xray-fault-percent () 'common-lisp:integer)
(common-lisp:deftype xray-node-name () 'common-lisp:string)
(common-lisp:deftype xray-node-type () 'common-lisp:string)
(common-lisp:deftype xray-request-average-latency () 'common-lisp:integer)
(common-lisp:deftype xray-request-count () 'common-lisp:integer)
(common-lisp:deftype xray-throttle-percent () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defun add-workload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name component-name
                     workload-configuration)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name component-name
     workload-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-workload-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "AddWorkload"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-workload))
(common-lisp:progn
 (common-lisp:defun create-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name ops-center-enabled
                     cwemonitor-enabled ops-item-snstopic-arn tags
                     auto-config-enabled auto-create grouping-type
                     attach-missing-permission)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name ops-center-enabled
     cwemonitor-enabled ops-item-snstopic-arn tags auto-config-enabled
     auto-create grouping-type attach-missing-permission))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "CreateApplication"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-application))
(common-lisp:progn
 (common-lisp:defun create-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name component-name
                     resource-list)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name component-name resource-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "CreateComponent"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-component))
(common-lisp:progn
 (common-lisp:defun create-log-pattern
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name pattern-set-name
                     pattern-name pattern rank)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name pattern-set-name pattern-name
     pattern rank))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-log-pattern-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "CreateLogPattern"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-log-pattern))
(common-lisp:progn
 (common-lisp:defun delete-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name)
   (common-lisp:declare (common-lisp:ignorable resource-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteApplication"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-application))
(common-lisp:progn
 (common-lisp:defun delete-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name component-name)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name component-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteComponent"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-component))
(common-lisp:progn
 (common-lisp:defun delete-log-pattern
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name pattern-set-name
                     pattern-name)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name pattern-set-name pattern-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-log-pattern-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "DeleteLogPattern"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-log-pattern))
(common-lisp:progn
 (common-lisp:defun describe-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name account-id)
   (common-lisp:declare (common-lisp:ignorable resource-group-name account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeApplication"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-application))
(common-lisp:progn
 (common-lisp:defun describe-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name component-name
                     account-id)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name component-name account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeComponent"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-component))
(common-lisp:progn
 (common-lisp:defun describe-component-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name component-name
                     account-id)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name component-name account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-component-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeComponentConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-component-configuration))
(common-lisp:progn
 (common-lisp:defun describe-component-configuration-recommendation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name component-name tier
                     workload-name recommendation-type)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name component-name tier
     workload-name recommendation-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-component-configuration-recommendation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeComponentConfigurationRecommendation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-component-configuration-recommendation))
(common-lisp:progn
 (common-lisp:defun describe-log-pattern
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name pattern-set-name
                     pattern-name account-id)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name pattern-set-name pattern-name
     account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-log-pattern-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeLogPattern"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-log-pattern))
(common-lisp:progn
 (common-lisp:defun describe-observation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key observation-id account-id)
   (common-lisp:declare (common-lisp:ignorable observation-id account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-observation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeObservation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-observation))
(common-lisp:progn
 (common-lisp:defun describe-problem
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key problem-id account-id)
   (common-lisp:declare (common-lisp:ignorable problem-id account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-problem-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeProblem"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-problem))
(common-lisp:progn
 (common-lisp:defun describe-problem-observations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key problem-id account-id)
   (common-lisp:declare (common-lisp:ignorable problem-id account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-problem-observations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeProblemObservations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-problem-observations))
(common-lisp:progn
 (common-lisp:defun describe-workload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name component-name
                     workload-id account-id)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name component-name workload-id
     account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-workload-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "DescribeWorkload"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-workload))
(common-lisp:progn
 (common-lisp:defun list-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token account-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-applications-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "ListApplications"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-applications))
(common-lisp:progn
 (common-lisp:defun list-components
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name max-results
                     next-token account-id)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name max-results next-token
     account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-components-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "ListComponents"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-components))
(common-lisp:progn
 (common-lisp:defun list-configuration-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name start-time end-time
                     event-status max-results next-token account-id)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name start-time end-time event-status
     max-results next-token account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-configuration-history-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "ListConfigurationHistory"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-configuration-history))
(common-lisp:progn
 (common-lisp:defun list-log-pattern-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name max-results
                     next-token account-id)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name max-results next-token
     account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-log-pattern-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "ListLogPatternSets"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-log-pattern-sets))
(common-lisp:progn
 (common-lisp:defun list-log-patterns
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name pattern-set-name
                     max-results next-token account-id)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name pattern-set-name max-results
     next-token account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-log-patterns-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "ListLogPatterns"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-log-patterns))
(common-lisp:progn
 (common-lisp:defun list-problems
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-id resource-group-name start-time
                     end-time max-results next-token component-name visibility)
   (common-lisp:declare
    (common-lisp:ignorable account-id resource-group-name start-time end-time
     max-results next-token component-name visibility))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-problems-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "ListProblems"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-problems))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-workloads
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name component-name
                     max-results next-token account-id)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name component-name max-results
     next-token account-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-workloads-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "ListWorkloads"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-workloads))
(common-lisp:progn
 (common-lisp:defun remove-workload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name component-name
                     workload-id)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name component-name workload-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-workload-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "RemoveWorkload"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-workload))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name ops-center-enabled
                     cwemonitor-enabled ops-item-snstopic-arn remove-snstopic
                     auto-config-enabled attach-missing-permission)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name ops-center-enabled
     cwemonitor-enabled ops-item-snstopic-arn remove-snstopic
     auto-config-enabled attach-missing-permission))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateApplication"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-application))
(common-lisp:progn
 (common-lisp:defun update-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name component-name
                     new-component-name resource-list)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name component-name
     new-component-name resource-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateComponent"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-component))
(common-lisp:progn
 (common-lisp:defun update-component-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name component-name
                     monitor tier component-configuration auto-config-enabled)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name component-name monitor tier
     component-configuration auto-config-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-component-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateComponentConfiguration"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-component-configuration))
(common-lisp:progn
 (common-lisp:defun update-log-pattern
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name pattern-set-name
                     pattern-name pattern rank)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name pattern-set-name pattern-name
     pattern rank))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-log-pattern-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateLogPattern"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-log-pattern))
(common-lisp:progn
 (common-lisp:defun update-problem
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key problem-id update-status visibility)
   (common-lisp:declare
    (common-lisp:ignorable problem-id update-status visibility))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-problem-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateProblem"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-problem))
(common-lisp:progn
 (common-lisp:defun update-workload
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name component-name
                     workload-id workload-configuration)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name component-name workload-id
     workload-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-workload-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        "/" "UpdateWorkload"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-workload))
