;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/application-insights/api
  (:use)
  (:nicknames #:aws/application-insights)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/application-insights/api)
(common-lisp:progn
 (common-lisp:defclass application-insights-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "application-insights"
                        :protocol :json))
 (common-lisp:export 'application-insights-request))
(common-lisp:progn
 (common-lisp:define-condition application-insights-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'application-insights-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("BadRequestException" . bad-request-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("TagsAlreadyExistException" . tags-already-exist-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (application-insights-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype affected-resource () 'common-lisp:string)
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass application-component common-lisp:nil
                       ((detected-workload :initarg :detected-workload :type
                         (common-lisp:or detected-workload common-lisp:null)
                         :accessor %application-component-detected-workload
                         :initform common-lisp:nil)
                        (monitor :initarg :monitor :type
                         (common-lisp:or monitor common-lisp:null) :accessor
                         %application-component-monitor :initform
                         common-lisp:nil)
                        (tier :initarg :tier :type
                         (common-lisp:or tier common-lisp:null) :accessor
                         %application-component-tier :initform common-lisp:nil)
                        (os-type :initarg :os-type :type
                         (common-lisp:or os-type common-lisp:null) :accessor
                         %application-component-os-type :initform
                         common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %application-component-resource-type
                         :initform common-lisp:nil)
                        (component-remarks :initarg :component-remarks :type
                         (common-lisp:or remarks common-lisp:null) :accessor
                         %application-component-component-remarks :initform
                         common-lisp:nil)
                        (component-name :initarg :component-name :type
                         (common-lisp:or component-name common-lisp:null)
                         :accessor %application-component-component-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'application-component 'make-application-component))
 (common-lisp:defun make-application-component
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key detected-workload monitor tier os-type
                     resource-type component-remarks component-name)
   (common-lisp:apply #'common-lisp:make-instance 'application-component
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          application-component))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          application-component))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-remarks))
      (common-lisp:list
       (common-lisp:cons "ComponentRemarks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os-type))
      (common-lisp:list
       (common-lisp:cons "OsType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor))
      (common-lisp:list
       (common-lisp:cons "Monitor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detected-workload))
      (common-lisp:list
       (common-lisp:cons "DetectedWorkload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          application-component))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype application-component-list ()
   '(trivial-types:proper-list application-component))
 (common-lisp:defun |make-application-component-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-component))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass application-info common-lisp:nil
                       ((discovery-type :initarg :discovery-type :type
                         (common-lisp:or discovery-type common-lisp:null)
                         :accessor %application-info-discovery-type :initform
                         common-lisp:nil)
                        (auto-config-enabled :initarg :auto-config-enabled
                         :type
                         (common-lisp:or auto-config-enabled common-lisp:null)
                         :accessor %application-info-auto-config-enabled
                         :initform common-lisp:nil)
                        (remarks :initarg :remarks :type
                         (common-lisp:or remarks common-lisp:null) :accessor
                         %application-info-remarks :initform common-lisp:nil)
                        (cwemonitor-enabled :initarg :cwemonitor-enabled :type
                         (common-lisp:or cwemonitor-enabled common-lisp:null)
                         :accessor %application-info-cwemonitor-enabled
                         :initform common-lisp:nil)
                        (ops-center-enabled :initarg :ops-center-enabled :type
                         (common-lisp:or ops-center-enabled common-lisp:null)
                         :accessor %application-info-ops-center-enabled
                         :initform common-lisp:nil)
                        (ops-item-snstopic-arn :initarg :ops-item-snstopic-arn
                         :type
                         (common-lisp:or ops-item-snstopic-arn
                                         common-lisp:null)
                         :accessor %application-info-ops-item-snstopic-arn
                         :initform common-lisp:nil)
                        (life-cycle :initarg :life-cycle :type
                         (common-lisp:or life-cycle common-lisp:null) :accessor
                         %application-info-life-cycle :initform
                         common-lisp:nil)
                        (resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor %application-info-resource-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'application-info 'make-application-info))
 (common-lisp:defun make-application-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key discovery-type auto-config-enabled
                     remarks cwemonitor-enabled ops-center-enabled
                     ops-item-snstopic-arn life-cycle resource-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'application-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'life-cycle))
      (common-lisp:list
       (common-lisp:cons "LifeCycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ops-item-snstopic-arn))
      (common-lisp:list
       (common-lisp:cons "OpsItemSNSTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-center-enabled))
      (common-lisp:list
       (common-lisp:cons "OpsCenterEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cwemonitor-enabled))
      (common-lisp:list
       (common-lisp:cons "CWEMonitorEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remarks))
      (common-lisp:list
       (common-lisp:cons "Remarks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-config-enabled))
      (common-lisp:list
       (common-lisp:cons "AutoConfigEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'discovery-type))
      (common-lisp:list
       (common-lisp:cons "DiscoveryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype application-info-list ()
   '(trivial-types:proper-list application-info))
 (common-lisp:defun |make-application-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype auto-config-enabled () 'common-lisp:boolean)
(common-lisp:deftype auto-create () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (application-insights-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:deftype cwemonitor-enabled () 'common-lisp:boolean)
(common-lisp:deftype cloud-watch-event-detail-type () 'common-lisp:string)
(common-lisp:deftype cloud-watch-event-id () 'common-lisp:string)
(common-lisp:deftype cloud-watch-event-source () 'common-lisp:string)
(common-lisp:deftype code-deploy-application () 'common-lisp:string)
(common-lisp:deftype code-deploy-deployment-group () 'common-lisp:string)
(common-lisp:deftype code-deploy-deployment-id () 'common-lisp:string)
(common-lisp:deftype code-deploy-instance-group-id () 'common-lisp:string)
(common-lisp:deftype code-deploy-state () 'common-lisp:string)
(common-lisp:deftype component-configuration () 'common-lisp:string)
(common-lisp:deftype component-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass configuration-event common-lisp:nil
                       ((event-resource-name :initarg :event-resource-name
                         :type
                         (common-lisp:or configuration-event-resource-name
                                         common-lisp:null)
                         :accessor %configuration-event-event-resource-name
                         :initform common-lisp:nil)
                        (event-detail :initarg :event-detail :type
                         (common-lisp:or configuration-event-detail
                                         common-lisp:null)
                         :accessor %configuration-event-event-detail :initform
                         common-lisp:nil)
                        (event-time :initarg :event-time :type
                         (common-lisp:or configuration-event-time
                                         common-lisp:null)
                         :accessor %configuration-event-event-time :initform
                         common-lisp:nil)
                        (event-resource-type :initarg :event-resource-type
                         :type
                         (common-lisp:or configuration-event-resource-type
                                         common-lisp:null)
                         :accessor %configuration-event-event-resource-type
                         :initform common-lisp:nil)
                        (event-status :initarg :event-status :type
                         (common-lisp:or configuration-event-status
                                         common-lisp:null)
                         :accessor %configuration-event-event-status :initform
                         common-lisp:nil)
                        (monitored-resource-arn :initarg
                         :monitored-resource-arn :type
                         (common-lisp:or
                          configuration-event-monitored-resource-arn
                          common-lisp:null)
                         :accessor %configuration-event-monitored-resource-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'configuration-event 'make-configuration-event))
 (common-lisp:defun make-configuration-event
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-resource-name event-detail
                     event-time event-resource-type event-status
                     monitored-resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'configuration-event
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitored-resource-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoredResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-status))
      (common-lisp:list
       (common-lisp:cons "EventStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-resource-type))
      (common-lisp:list
       (common-lisp:cons "EventResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-time))
      (common-lisp:list
       (common-lisp:cons "EventTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-detail))
      (common-lisp:list
       (common-lisp:cons "EventDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-resource-name))
      (common-lisp:list
       (common-lisp:cons "EventResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration-event))
   common-lisp:nil))
(common-lisp:deftype configuration-event-detail () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype configuration-event-list ()
   '(trivial-types:proper-list configuration-event))
 (common-lisp:defun |make-configuration-event-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list configuration-event))
   aws-sdk/generator/shape::members))
(common-lisp:deftype configuration-event-monitored-resource-arn ()
  'common-lisp:string)
(common-lisp:deftype configuration-event-resource-name () 'common-lisp:string)
(common-lisp:deftype configuration-event-resource-type () 'common-lisp:string)
(common-lisp:deftype configuration-event-status () 'common-lisp:string)
(common-lisp:deftype configuration-event-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-application-request common-lisp:nil
                       ((grouping-type :initarg :grouping-type :type
                         (common-lisp:or grouping-type common-lisp:null)
                         :accessor %create-application-request-grouping-type
                         :initform common-lisp:nil)
                        (auto-create :initarg :auto-create :type
                         (common-lisp:or auto-create common-lisp:null)
                         :accessor %create-application-request-auto-create
                         :initform common-lisp:nil)
                        (auto-config-enabled :initarg :auto-config-enabled
                         :type
                         (common-lisp:or auto-config-enabled common-lisp:null)
                         :accessor
                         %create-application-request-auto-config-enabled
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-application-request-tags :initform
                         common-lisp:nil)
                        (ops-item-snstopic-arn :initarg :ops-item-snstopic-arn
                         :type
                         (common-lisp:or ops-item-snstopic-arn
                                         common-lisp:null)
                         :accessor
                         %create-application-request-ops-item-snstopic-arn
                         :initform common-lisp:nil)
                        (cwemonitor-enabled :initarg :cwemonitor-enabled :type
                         (common-lisp:or cwemonitor-enabled common-lisp:null)
                         :accessor
                         %create-application-request-cwemonitor-enabled
                         :initform common-lisp:nil)
                        (ops-center-enabled :initarg :ops-center-enabled :type
                         (common-lisp:or ops-center-enabled common-lisp:null)
                         :accessor
                         %create-application-request-ops-center-enabled
                         :initform common-lisp:nil)
                        (resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor
                         %create-application-request-resource-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-application-request
                    'make-create-application-request))
 (common-lisp:defun make-create-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key grouping-type auto-create
                     auto-config-enabled tags ops-item-snstopic-arn
                     cwemonitor-enabled ops-center-enabled resource-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-center-enabled))
      (common-lisp:list
       (common-lisp:cons "OpsCenterEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cwemonitor-enabled))
      (common-lisp:list
       (common-lisp:cons "CWEMonitorEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ops-item-snstopic-arn))
      (common-lisp:list
       (common-lisp:cons "OpsItemSNSTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-config-enabled))
      (common-lisp:list
       (common-lisp:cons "AutoConfigEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-create))
      (common-lisp:list
       (common-lisp:cons "AutoCreate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'grouping-type))
      (common-lisp:list
       (common-lisp:cons "GroupingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-application-response common-lisp:nil
                       ((application-info :initarg :application-info :type
                         (common-lisp:or application-info common-lisp:null)
                         :accessor
                         %create-application-response-application-info
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-application-response
                    'make-create-application-response))
 (common-lisp:defun make-create-application-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-info)
   (common-lisp:apply #'common-lisp:make-instance 'create-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-info))
      (common-lisp:list
       (common-lisp:cons "ApplicationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-component-request common-lisp:nil
                       ((resource-list :initarg :resource-list :type
                         (common-lisp:or resource-list common-lisp:null)
                         :accessor %create-component-request-resource-list
                         :initform
                         (common-lisp:error ":resource-list is required"))
                        (component-name :initarg :component-name :type
                         (common-lisp:or custom-component-name
                                         common-lisp:null)
                         :accessor %create-component-request-component-name
                         :initform
                         (common-lisp:error ":component-name is required"))
                        (resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor
                         %create-component-request-resource-group-name
                         :initform
                         (common-lisp:error
                          ":resource-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-component-request 'make-create-component-request))
 (common-lisp:defun make-create-component-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-list component-name
                     resource-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-component-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-list))
      (common-lisp:list
       (common-lisp:cons "ResourceList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-component-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'create-component-response
                    'make-create-component-response))
 (common-lisp:defun make-create-component-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'create-component-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-log-pattern-request common-lisp:nil
                       ((rank :initarg :rank :type
                         (common-lisp:or log-pattern-rank common-lisp:null)
                         :accessor %create-log-pattern-request-rank :initform
                         (common-lisp:error ":rank is required"))
                        (pattern :initarg :pattern :type
                         (common-lisp:or log-pattern-regex common-lisp:null)
                         :accessor %create-log-pattern-request-pattern
                         :initform (common-lisp:error ":pattern is required"))
                        (pattern-name :initarg :pattern-name :type
                         (common-lisp:or log-pattern-name common-lisp:null)
                         :accessor %create-log-pattern-request-pattern-name
                         :initform
                         (common-lisp:error ":pattern-name is required"))
                        (pattern-set-name :initarg :pattern-set-name :type
                         (common-lisp:or log-pattern-set-name common-lisp:null)
                         :accessor %create-log-pattern-request-pattern-set-name
                         :initform
                         (common-lisp:error ":pattern-set-name is required"))
                        (resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor
                         %create-log-pattern-request-resource-group-name
                         :initform
                         (common-lisp:error
                          ":resource-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-log-pattern-request
                    'make-create-log-pattern-request))
 (common-lisp:defun make-create-log-pattern-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rank pattern pattern-name
                     pattern-set-name resource-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-log-pattern-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-log-pattern-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-log-pattern-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-set-name))
      (common-lisp:list
       (common-lisp:cons "PatternSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-name))
      (common-lisp:list
       (common-lisp:cons "PatternName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern))
      (common-lisp:list
       (common-lisp:cons "Pattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rank))
      (common-lisp:list
       (common-lisp:cons "Rank"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-log-pattern-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-log-pattern-response common-lisp:nil
                       ((resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor
                         %create-log-pattern-response-resource-group-name
                         :initform common-lisp:nil)
                        (log-pattern :initarg :log-pattern :type
                         (common-lisp:or log-pattern common-lisp:null)
                         :accessor %create-log-pattern-response-log-pattern
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-log-pattern-response
                    'make-create-log-pattern-response))
 (common-lisp:defun make-create-log-pattern-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-group-name log-pattern)
   (common-lisp:apply #'common-lisp:make-instance 'create-log-pattern-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-log-pattern-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-log-pattern-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-pattern))
      (common-lisp:list
       (common-lisp:cons "LogPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-log-pattern-response))
   common-lisp:nil))
(common-lisp:deftype custom-component-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-application-request common-lisp:nil
                       ((resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor
                         %delete-application-request-resource-group-name
                         :initform
                         (common-lisp:error
                          ":resource-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-application-request
                    'make-delete-application-request))
 (common-lisp:defun make-delete-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-application-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-application-response
                    'make-delete-application-response))
 (common-lisp:defun make-delete-application-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-component-request common-lisp:nil
                       ((component-name :initarg :component-name :type
                         (common-lisp:or custom-component-name
                                         common-lisp:null)
                         :accessor %delete-component-request-component-name
                         :initform
                         (common-lisp:error ":component-name is required"))
                        (resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor
                         %delete-component-request-resource-group-name
                         :initform
                         (common-lisp:error
                          ":resource-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-component-request 'make-delete-component-request))
 (common-lisp:defun make-delete-component-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key component-name resource-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-component-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-component-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-component-response
                    'make-delete-component-response))
 (common-lisp:defun make-delete-component-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-component-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-log-pattern-request common-lisp:nil
                       ((pattern-name :initarg :pattern-name :type
                         (common-lisp:or log-pattern-name common-lisp:null)
                         :accessor %delete-log-pattern-request-pattern-name
                         :initform
                         (common-lisp:error ":pattern-name is required"))
                        (pattern-set-name :initarg :pattern-set-name :type
                         (common-lisp:or log-pattern-set-name common-lisp:null)
                         :accessor %delete-log-pattern-request-pattern-set-name
                         :initform
                         (common-lisp:error ":pattern-set-name is required"))
                        (resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor
                         %delete-log-pattern-request-resource-group-name
                         :initform
                         (common-lisp:error
                          ":resource-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-log-pattern-request
                    'make-delete-log-pattern-request))
 (common-lisp:defun make-delete-log-pattern-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pattern-name pattern-set-name
                     resource-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-log-pattern-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-pattern-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-pattern-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-set-name))
      (common-lisp:list
       (common-lisp:cons "PatternSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-name))
      (common-lisp:list
       (common-lisp:cons "PatternName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-pattern-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-log-pattern-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-log-pattern-response
                    'make-delete-log-pattern-response))
 (common-lisp:defun make-delete-log-pattern-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-log-pattern-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-pattern-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-pattern-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-log-pattern-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-application-request common-lisp:nil
                       ((resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor
                         %describe-application-request-resource-group-name
                         :initform
                         (common-lisp:error
                          ":resource-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-application-request
                    'make-describe-application-request))
 (common-lisp:defun make-describe-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-application-response common-lisp:nil
                       ((application-info :initarg :application-info :type
                         (common-lisp:or application-info common-lisp:null)
                         :accessor
                         %describe-application-response-application-info
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-application-response
                    'make-describe-application-response))
 (common-lisp:defun make-describe-application-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-info)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-info))
      (common-lisp:list
       (common-lisp:cons "ApplicationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-component-configuration-recommendation-request
                       common-lisp:nil
                       ((tier :initarg :tier :type
                         (common-lisp:or tier common-lisp:null) :accessor
                         %describe-component-configuration-recommendation-request-tier
                         :initform (common-lisp:error ":tier is required"))
                        (component-name :initarg :component-name :type
                         (common-lisp:or component-name common-lisp:null)
                         :accessor
                         %describe-component-configuration-recommendation-request-component-name
                         :initform
                         (common-lisp:error ":component-name is required"))
                        (resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor
                         %describe-component-configuration-recommendation-request-resource-group-name
                         :initform
                         (common-lisp:error
                          ":resource-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-component-configuration-recommendation-request
                    'make-describe-component-configuration-recommendation-request))
 (common-lisp:defun make-describe-component-configuration-recommendation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tier component-name resource-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-component-configuration-recommendation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-configuration-recommendation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-configuration-recommendation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-configuration-recommendation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-component-configuration-recommendation-response
                       common-lisp:nil
                       ((component-configuration :initarg
                         :component-configuration :type
                         (common-lisp:or component-configuration
                                         common-lisp:null)
                         :accessor
                         %describe-component-configuration-recommendation-response-component-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-component-configuration-recommendation-response
                    'make-describe-component-configuration-recommendation-response))
 (common-lisp:defun make-describe-component-configuration-recommendation-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key component-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-component-configuration-recommendation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-configuration-recommendation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-configuration-recommendation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-configuration))
      (common-lisp:list
       (common-lisp:cons "ComponentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-configuration-recommendation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-component-configuration-request common-lisp:nil
                       ((component-name :initarg :component-name :type
                         (common-lisp:or component-name common-lisp:null)
                         :accessor
                         %describe-component-configuration-request-component-name
                         :initform
                         (common-lisp:error ":component-name is required"))
                        (resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor
                         %describe-component-configuration-request-resource-group-name
                         :initform
                         (common-lisp:error
                          ":resource-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-component-configuration-request
                    'make-describe-component-configuration-request))
 (common-lisp:defun make-describe-component-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key component-name resource-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-component-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-component-configuration-response
                       common-lisp:nil
                       ((component-configuration :initarg
                         :component-configuration :type
                         (common-lisp:or component-configuration
                                         common-lisp:null)
                         :accessor
                         %describe-component-configuration-response-component-configuration
                         :initform common-lisp:nil)
                        (tier :initarg :tier :type
                         (common-lisp:or tier common-lisp:null) :accessor
                         %describe-component-configuration-response-tier
                         :initform common-lisp:nil)
                        (monitor :initarg :monitor :type
                         (common-lisp:or monitor common-lisp:null) :accessor
                         %describe-component-configuration-response-monitor
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-component-configuration-response
                    'make-describe-component-configuration-response))
 (common-lisp:defun make-describe-component-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key component-configuration tier monitor)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-component-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor))
      (common-lisp:list
       (common-lisp:cons "Monitor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-configuration))
      (common-lisp:list
       (common-lisp:cons "ComponentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-component-request common-lisp:nil
                       ((component-name :initarg :component-name :type
                         (common-lisp:or component-name common-lisp:null)
                         :accessor %describe-component-request-component-name
                         :initform
                         (common-lisp:error ":component-name is required"))
                        (resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor
                         %describe-component-request-resource-group-name
                         :initform
                         (common-lisp:error
                          ":resource-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-component-request
                    'make-describe-component-request))
 (common-lisp:defun make-describe-component-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key component-name resource-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-component-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-component-response common-lisp:nil
                       ((resource-list :initarg :resource-list :type
                         (common-lisp:or resource-list common-lisp:null)
                         :accessor %describe-component-response-resource-list
                         :initform common-lisp:nil)
                        (application-component :initarg :application-component
                         :type
                         (common-lisp:or application-component
                                         common-lisp:null)
                         :accessor
                         %describe-component-response-application-component
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-component-response
                    'make-describe-component-response))
 (common-lisp:defun make-describe-component-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-list application-component)
   (common-lisp:apply #'common-lisp:make-instance 'describe-component-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-component))
      (common-lisp:list
       (common-lisp:cons "ApplicationComponent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-list))
      (common-lisp:list
       (common-lisp:cons "ResourceList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-log-pattern-request common-lisp:nil
                       ((pattern-name :initarg :pattern-name :type
                         (common-lisp:or log-pattern-name common-lisp:null)
                         :accessor %describe-log-pattern-request-pattern-name
                         :initform
                         (common-lisp:error ":pattern-name is required"))
                        (pattern-set-name :initarg :pattern-set-name :type
                         (common-lisp:or log-pattern-set-name common-lisp:null)
                         :accessor
                         %describe-log-pattern-request-pattern-set-name
                         :initform
                         (common-lisp:error ":pattern-set-name is required"))
                        (resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor
                         %describe-log-pattern-request-resource-group-name
                         :initform
                         (common-lisp:error
                          ":resource-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-log-pattern-request
                    'make-describe-log-pattern-request))
 (common-lisp:defun make-describe-log-pattern-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pattern-name pattern-set-name
                     resource-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-log-pattern-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-pattern-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-pattern-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-set-name))
      (common-lisp:list
       (common-lisp:cons "PatternSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-name))
      (common-lisp:list
       (common-lisp:cons "PatternName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-pattern-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-log-pattern-response common-lisp:nil
                       ((log-pattern :initarg :log-pattern :type
                         (common-lisp:or log-pattern common-lisp:null)
                         :accessor %describe-log-pattern-response-log-pattern
                         :initform common-lisp:nil)
                        (resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor
                         %describe-log-pattern-response-resource-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-log-pattern-response
                    'make-describe-log-pattern-response))
 (common-lisp:defun make-describe-log-pattern-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-pattern resource-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-log-pattern-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-pattern-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-pattern-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-pattern))
      (common-lisp:list
       (common-lisp:cons "LogPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-log-pattern-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-observation-request common-lisp:nil
                       ((observation-id :initarg :observation-id :type
                         (common-lisp:or observation-id common-lisp:null)
                         :accessor %describe-observation-request-observation-id
                         :initform
                         (common-lisp:error ":observation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-observation-request
                    'make-describe-observation-request))
 (common-lisp:defun make-describe-observation-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key observation-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-observation-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-observation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-observation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'observation-id))
      (common-lisp:list
       (common-lisp:cons "ObservationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-observation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-observation-response common-lisp:nil
                       ((observation :initarg :observation :type
                         (common-lisp:or observation common-lisp:null)
                         :accessor %describe-observation-response-observation
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-observation-response
                    'make-describe-observation-response))
 (common-lisp:defun make-describe-observation-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key observation)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-observation-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-observation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-observation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'observation))
      (common-lisp:list
       (common-lisp:cons "Observation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-observation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-problem-observations-request common-lisp:nil
                       ((problem-id :initarg :problem-id :type
                         (common-lisp:or problem-id common-lisp:null) :accessor
                         %describe-problem-observations-request-problem-id
                         :initform
                         (common-lisp:error ":problem-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-problem-observations-request
                    'make-describe-problem-observations-request))
 (common-lisp:defun make-describe-problem-observations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key problem-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-problem-observations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-problem-observations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-problem-observations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'problem-id))
      (common-lisp:list
       (common-lisp:cons "ProblemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-problem-observations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-problem-observations-response common-lisp:nil
                       ((related-observations :initarg :related-observations
                         :type
                         (common-lisp:or related-observations common-lisp:null)
                         :accessor
                         %describe-problem-observations-response-related-observations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-problem-observations-response
                    'make-describe-problem-observations-response))
 (common-lisp:defun make-describe-problem-observations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key related-observations)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-problem-observations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-problem-observations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-problem-observations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'related-observations))
      (common-lisp:list
       (common-lisp:cons "RelatedObservations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-problem-observations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-problem-request common-lisp:nil
                       ((problem-id :initarg :problem-id :type
                         (common-lisp:or problem-id common-lisp:null) :accessor
                         %describe-problem-request-problem-id :initform
                         (common-lisp:error ":problem-id is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-problem-request 'make-describe-problem-request))
 (common-lisp:defun make-describe-problem-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key problem-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-problem-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-problem-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-problem-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'problem-id))
      (common-lisp:list
       (common-lisp:cons "ProblemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-problem-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-problem-response common-lisp:nil
                       ((problem :initarg :problem :type
                         (common-lisp:or problem common-lisp:null) :accessor
                         %describe-problem-response-problem :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-problem-response
                    'make-describe-problem-response))
 (common-lisp:defun make-describe-problem-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key problem)
   (common-lisp:apply #'common-lisp:make-instance 'describe-problem-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-problem-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-problem-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'problem))
      (common-lisp:list
       (common-lisp:cons "Problem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-problem-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype detected-workload () 'common-lisp:hash-table)
 (common-lisp:defun |make-detected-workload|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype discovery-type () 'common-lisp:string)
(common-lisp:deftype ebs-cause () 'common-lisp:string)
(common-lisp:deftype ebs-event () 'common-lisp:string)
(common-lisp:deftype ebs-request-id () 'common-lisp:string)
(common-lisp:deftype ebs-result () 'common-lisp:string)
(common-lisp:deftype ec2state () 'common-lisp:string)
(common-lisp:deftype end-time () 'common-lisp:string)
(common-lisp:deftype error-msg () 'common-lisp:string)
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype feedback () 'common-lisp:hash-table)
 (common-lisp:defun |make-feedback| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype feedback-key () 'common-lisp:string)
(common-lisp:deftype feedback-value () 'common-lisp:string)
(common-lisp:deftype grouping-type () 'common-lisp:string)
(common-lisp:deftype health-event-arn () 'common-lisp:string)
(common-lisp:deftype health-event-description () 'common-lisp:string)
(common-lisp:deftype health-event-type-category () 'common-lisp:string)
(common-lisp:deftype health-event-type-code () 'common-lisp:string)
(common-lisp:deftype health-service () 'common-lisp:string)
(common-lisp:deftype insights () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (application-insights-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype last-recurrence-time () 'common-lisp:string)
(common-lisp:deftype life-cycle () 'common-lisp:string)
(common-lisp:deftype line-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-applications-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-applications-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-entities common-lisp:null)
                         :accessor %list-applications-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-applications-request
                    'make-list-applications-request))
 (common-lisp:defun make-list-applications-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-applications-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-applications-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-applications-response-next-token
                         :initform common-lisp:nil)
                        (application-info-list :initarg :application-info-list
                         :type
                         (common-lisp:or application-info-list
                                         common-lisp:null)
                         :accessor
                         %list-applications-response-application-info-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-applications-response
                    'make-list-applications-response))
 (common-lisp:defun make-list-applications-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token application-info-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-applications-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-info-list))
      (common-lisp:list
       (common-lisp:cons "ApplicationInfoList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applications-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-components-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-components-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-entities common-lisp:null)
                         :accessor %list-components-request-max-results
                         :initform common-lisp:nil)
                        (resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor %list-components-request-resource-group-name
                         :initform
                         (common-lisp:error
                          ":resource-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-components-request 'make-list-components-request))
 (common-lisp:defun make-list-components-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     resource-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-components-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-components-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-components-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-components-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-components-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-components-response-next-token
                         :initform common-lisp:nil)
                        (application-component-list :initarg
                         :application-component-list :type
                         (common-lisp:or application-component-list
                                         common-lisp:null)
                         :accessor
                         %list-components-response-application-component-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-components-response 'make-list-components-response))
 (common-lisp:defun make-list-components-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token application-component-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-components-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-components-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-components-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-component-list))
      (common-lisp:list
       (common-lisp:cons "ApplicationComponentList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-components-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-configuration-history-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-configuration-history-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-entities common-lisp:null)
                         :accessor
                         %list-configuration-history-request-max-results
                         :initform common-lisp:nil)
                        (event-status :initarg :event-status :type
                         (common-lisp:or configuration-event-status
                                         common-lisp:null)
                         :accessor
                         %list-configuration-history-request-event-status
                         :initform common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or end-time common-lisp:null) :accessor
                         %list-configuration-history-request-end-time :initform
                         common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or start-time common-lisp:null) :accessor
                         %list-configuration-history-request-start-time
                         :initform common-lisp:nil)
                        (resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor
                         %list-configuration-history-request-resource-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-configuration-history-request
                    'make-list-configuration-history-request))
 (common-lisp:defun make-list-configuration-history-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results event-status
                     end-time start-time resource-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-configuration-history-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-history-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-status))
      (common-lisp:list
       (common-lisp:cons "EventStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-history-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-configuration-history-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-configuration-history-response-next-token
                         :initform common-lisp:nil)
                        (event-list :initarg :event-list :type
                         (common-lisp:or configuration-event-list
                                         common-lisp:null)
                         :accessor
                         %list-configuration-history-response-event-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-configuration-history-response
                    'make-list-configuration-history-response))
 (common-lisp:defun make-list-configuration-history-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token event-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-configuration-history-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-history-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-history-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-list))
      (common-lisp:list
       (common-lisp:cons "EventList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-configuration-history-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-log-pattern-sets-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-log-pattern-sets-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-entities common-lisp:null)
                         :accessor %list-log-pattern-sets-request-max-results
                         :initform common-lisp:nil)
                        (resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor
                         %list-log-pattern-sets-request-resource-group-name
                         :initform
                         (common-lisp:error
                          ":resource-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-log-pattern-sets-request
                    'make-list-log-pattern-sets-request))
 (common-lisp:defun make-list-log-pattern-sets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     resource-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-log-pattern-sets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-log-pattern-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-log-pattern-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-log-pattern-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-log-pattern-sets-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-log-pattern-sets-response-next-token
                         :initform common-lisp:nil)
                        (log-pattern-sets :initarg :log-pattern-sets :type
                         (common-lisp:or log-pattern-set-list common-lisp:null)
                         :accessor
                         %list-log-pattern-sets-response-log-pattern-sets
                         :initform common-lisp:nil)
                        (resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor
                         %list-log-pattern-sets-response-resource-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-log-pattern-sets-response
                    'make-list-log-pattern-sets-response))
 (common-lisp:defun make-list-log-pattern-sets-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token log-pattern-sets
                     resource-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-log-pattern-sets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-log-pattern-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-log-pattern-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-pattern-sets))
      (common-lisp:list
       (common-lisp:cons "LogPatternSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-log-pattern-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-log-patterns-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-log-patterns-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-entities common-lisp:null)
                         :accessor %list-log-patterns-request-max-results
                         :initform common-lisp:nil)
                        (pattern-set-name :initarg :pattern-set-name :type
                         (common-lisp:or log-pattern-set-name common-lisp:null)
                         :accessor %list-log-patterns-request-pattern-set-name
                         :initform common-lisp:nil)
                        (resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor
                         %list-log-patterns-request-resource-group-name
                         :initform
                         (common-lisp:error
                          ":resource-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-log-patterns-request
                    'make-list-log-patterns-request))
 (common-lisp:defun make-list-log-patterns-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results pattern-set-name
                     resource-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-log-patterns-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-log-patterns-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-log-patterns-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-set-name))
      (common-lisp:list
       (common-lisp:cons "PatternSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-log-patterns-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-log-patterns-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-log-patterns-response-next-token
                         :initform common-lisp:nil)
                        (log-patterns :initarg :log-patterns :type
                         (common-lisp:or log-pattern-list common-lisp:null)
                         :accessor %list-log-patterns-response-log-patterns
                         :initform common-lisp:nil)
                        (resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor
                         %list-log-patterns-response-resource-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-log-patterns-response
                    'make-list-log-patterns-response))
 (common-lisp:defun make-list-log-patterns-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token log-patterns
                     resource-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-log-patterns-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-log-patterns-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-log-patterns-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-patterns))
      (common-lisp:list
       (common-lisp:cons "LogPatterns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-log-patterns-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-problems-request common-lisp:nil
                       ((component-name :initarg :component-name :type
                         (common-lisp:or component-name common-lisp:null)
                         :accessor %list-problems-request-component-name
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-problems-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-entities common-lisp:null)
                         :accessor %list-problems-request-max-results :initform
                         common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or end-time common-lisp:null) :accessor
                         %list-problems-request-end-time :initform
                         common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or start-time common-lisp:null) :accessor
                         %list-problems-request-start-time :initform
                         common-lisp:nil)
                        (resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor %list-problems-request-resource-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-problems-request 'make-list-problems-request))
 (common-lisp:defun make-list-problems-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key component-name next-token max-results
                     end-time start-time resource-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-problems-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-problems-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-problems-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-problems-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-problems-response common-lisp:nil
                       ((resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor %list-problems-response-resource-group-name
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-problems-response-next-token :initform
                         common-lisp:nil)
                        (problem-list :initarg :problem-list :type
                         (common-lisp:or problem-list common-lisp:null)
                         :accessor %list-problems-response-problem-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-problems-response 'make-list-problems-response))
 (common-lisp:defun make-list-problems-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-group-name next-token
                     problem-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-problems-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-problems-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-problems-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'problem-list))
      (common-lisp:list
       (common-lisp:cons "ProblemList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-problems-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype log-filter () 'common-lisp:string)
(common-lisp:deftype log-group () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass log-pattern common-lisp:nil
                       ((rank :initarg :rank :type
                         (common-lisp:or log-pattern-rank common-lisp:null)
                         :accessor %log-pattern-rank :initform common-lisp:nil)
                        (pattern :initarg :pattern :type
                         (common-lisp:or log-pattern-regex common-lisp:null)
                         :accessor %log-pattern-pattern :initform
                         common-lisp:nil)
                        (pattern-name :initarg :pattern-name :type
                         (common-lisp:or log-pattern-name common-lisp:null)
                         :accessor %log-pattern-pattern-name :initform
                         common-lisp:nil)
                        (pattern-set-name :initarg :pattern-set-name :type
                         (common-lisp:or log-pattern-set-name common-lisp:null)
                         :accessor %log-pattern-pattern-set-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'log-pattern 'make-log-pattern))
 (common-lisp:defun make-log-pattern
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rank pattern pattern-name
                     pattern-set-name)
   (common-lisp:apply #'common-lisp:make-instance 'log-pattern
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-pattern))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-pattern))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-set-name))
      (common-lisp:list
       (common-lisp:cons "PatternSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-name))
      (common-lisp:list
       (common-lisp:cons "PatternName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern))
      (common-lisp:list
       (common-lisp:cons "Pattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rank))
      (common-lisp:list
       (common-lisp:cons "Rank"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-pattern))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-pattern-list ()
   '(trivial-types:proper-list log-pattern))
 (common-lisp:defun |make-log-pattern-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-pattern))
   aws-sdk/generator/shape::members))
(common-lisp:deftype log-pattern-name () 'common-lisp:string)
(common-lisp:deftype log-pattern-rank () 'common-lisp:integer)
(common-lisp:deftype log-pattern-regex () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype log-pattern-set-list ()
   '(trivial-types:proper-list log-pattern-set-name))
 (common-lisp:defun |make-log-pattern-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-pattern-set-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype log-pattern-set-name () 'common-lisp:string)
(common-lisp:deftype log-text () 'common-lisp:string)
(common-lisp:deftype max-entities () 'common-lisp:integer)
(common-lisp:deftype meta-data-key () 'common-lisp:string)
(common-lisp:deftype meta-data-value () 'common-lisp:string)
(common-lisp:deftype metric-name () 'common-lisp:string)
(common-lisp:deftype metric-namespace () 'common-lisp:string)
(common-lisp:deftype monitor () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass observation common-lisp:nil
                       ((xray-node-type :initarg :xray-node-type :type
                         (common-lisp:or xray-node-type common-lisp:null)
                         :accessor %observation-xray-node-type :initform
                         common-lisp:nil)
                        (xray-node-name :initarg :xray-node-name :type
                         (common-lisp:or xray-node-name common-lisp:null)
                         :accessor %observation-xray-node-name :initform
                         common-lisp:nil)
                        (xray-request-average-latency :initarg
                         :xray-request-average-latency :type
                         (common-lisp:or xray-request-average-latency
                                         common-lisp:null)
                         :accessor %observation-xray-request-average-latency
                         :initform common-lisp:nil)
                        (xray-request-count :initarg :xray-request-count :type
                         (common-lisp:or xray-request-count common-lisp:null)
                         :accessor %observation-xray-request-count :initform
                         common-lisp:nil)
                        (xray-error-percent :initarg :xray-error-percent :type
                         (common-lisp:or xray-error-percent common-lisp:null)
                         :accessor %observation-xray-error-percent :initform
                         common-lisp:nil)
                        (xray-throttle-percent :initarg :xray-throttle-percent
                         :type
                         (common-lisp:or xray-throttle-percent
                                         common-lisp:null)
                         :accessor %observation-xray-throttle-percent :initform
                         common-lisp:nil)
                        (xray-fault-percent :initarg :xray-fault-percent :type
                         (common-lisp:or xray-fault-percent common-lisp:null)
                         :accessor %observation-xray-fault-percent :initform
                         common-lisp:nil)
                        (ebs-request-id :initarg :ebs-request-id :type
                         (common-lisp:or ebs-request-id common-lisp:null)
                         :accessor %observation-ebs-request-id :initform
                         common-lisp:nil)
                        (ebs-cause :initarg :ebs-cause :type
                         (common-lisp:or ebs-cause common-lisp:null) :accessor
                         %observation-ebs-cause :initform common-lisp:nil)
                        (ebs-result :initarg :ebs-result :type
                         (common-lisp:or ebs-result common-lisp:null) :accessor
                         %observation-ebs-result :initform common-lisp:nil)
                        (ebs-event :initarg :ebs-event :type
                         (common-lisp:or ebs-event common-lisp:null) :accessor
                         %observation-ebs-event :initform common-lisp:nil)
                        (states-input :initarg :states-input :type
                         (common-lisp:or states-input common-lisp:null)
                         :accessor %observation-states-input :initform
                         common-lisp:nil)
                        (states-status :initarg :states-status :type
                         (common-lisp:or states-status common-lisp:null)
                         :accessor %observation-states-status :initform
                         common-lisp:nil)
                        (states-arn :initarg :states-arn :type
                         (common-lisp:or states-arn common-lisp:null) :accessor
                         %observation-states-arn :initform common-lisp:nil)
                        (states-execution-arn :initarg :states-execution-arn
                         :type
                         (common-lisp:or states-execution-arn common-lisp:null)
                         :accessor %observation-states-execution-arn :initform
                         common-lisp:nil)
                        (s3event-name :initarg :s3event-name :type
                         (common-lisp:or s3event-name common-lisp:null)
                         :accessor %observation-s3event-name :initform
                         common-lisp:nil)
                        (rds-event-message :initarg :rds-event-message :type
                         (common-lisp:or rds-event-message common-lisp:null)
                         :accessor %observation-rds-event-message :initform
                         common-lisp:nil)
                        (rds-event-categories :initarg :rds-event-categories
                         :type
                         (common-lisp:or rds-event-categories common-lisp:null)
                         :accessor %observation-rds-event-categories :initform
                         common-lisp:nil)
                        (ec2state :initarg :ec2state :type
                         (common-lisp:or ec2state common-lisp:null) :accessor
                         %observation-ec2state :initform common-lisp:nil)
                        (code-deploy-instance-group-id :initarg
                         :code-deploy-instance-group-id :type
                         (common-lisp:or code-deploy-instance-group-id
                                         common-lisp:null)
                         :accessor %observation-code-deploy-instance-group-id
                         :initform common-lisp:nil)
                        (code-deploy-application :initarg
                         :code-deploy-application :type
                         (common-lisp:or code-deploy-application
                                         common-lisp:null)
                         :accessor %observation-code-deploy-application
                         :initform common-lisp:nil)
                        (code-deploy-state :initarg :code-deploy-state :type
                         (common-lisp:or code-deploy-state common-lisp:null)
                         :accessor %observation-code-deploy-state :initform
                         common-lisp:nil)
                        (code-deploy-deployment-group :initarg
                         :code-deploy-deployment-group :type
                         (common-lisp:or code-deploy-deployment-group
                                         common-lisp:null)
                         :accessor %observation-code-deploy-deployment-group
                         :initform common-lisp:nil)
                        (code-deploy-deployment-id :initarg
                         :code-deploy-deployment-id :type
                         (common-lisp:or code-deploy-deployment-id
                                         common-lisp:null)
                         :accessor %observation-code-deploy-deployment-id
                         :initform common-lisp:nil)
                        (health-event-description :initarg
                         :health-event-description :type
                         (common-lisp:or health-event-description
                                         common-lisp:null)
                         :accessor %observation-health-event-description
                         :initform common-lisp:nil)
                        (health-event-type-category :initarg
                         :health-event-type-category :type
                         (common-lisp:or health-event-type-category
                                         common-lisp:null)
                         :accessor %observation-health-event-type-category
                         :initform common-lisp:nil)
                        (health-event-type-code :initarg
                         :health-event-type-code :type
                         (common-lisp:or health-event-type-code
                                         common-lisp:null)
                         :accessor %observation-health-event-type-code
                         :initform common-lisp:nil)
                        (health-service :initarg :health-service :type
                         (common-lisp:or health-service common-lisp:null)
                         :accessor %observation-health-service :initform
                         common-lisp:nil)
                        (health-event-arn :initarg :health-event-arn :type
                         (common-lisp:or health-event-arn common-lisp:null)
                         :accessor %observation-health-event-arn :initform
                         common-lisp:nil)
                        (cloud-watch-event-detail-type :initarg
                         :cloud-watch-event-detail-type :type
                         (common-lisp:or cloud-watch-event-detail-type
                                         common-lisp:null)
                         :accessor %observation-cloud-watch-event-detail-type
                         :initform common-lisp:nil)
                        (cloud-watch-event-source :initarg
                         :cloud-watch-event-source :type
                         (common-lisp:or cloud-watch-event-source
                                         common-lisp:null)
                         :accessor %observation-cloud-watch-event-source
                         :initform common-lisp:nil)
                        (cloud-watch-event-id :initarg :cloud-watch-event-id
                         :type
                         (common-lisp:or cloud-watch-event-id common-lisp:null)
                         :accessor %observation-cloud-watch-event-id :initform
                         common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or value common-lisp:null) :accessor
                         %observation-value :initform common-lisp:nil)
                        (unit :initarg :unit :type
                         (common-lisp:or unit common-lisp:null) :accessor
                         %observation-unit :initform common-lisp:nil)
                        (metric-name :initarg :metric-name :type
                         (common-lisp:or metric-name common-lisp:null)
                         :accessor %observation-metric-name :initform
                         common-lisp:nil)
                        (metric-namespace :initarg :metric-namespace :type
                         (common-lisp:or metric-namespace common-lisp:null)
                         :accessor %observation-metric-namespace :initform
                         common-lisp:nil)
                        (log-filter :initarg :log-filter :type
                         (common-lisp:or log-filter common-lisp:null) :accessor
                         %observation-log-filter :initform common-lisp:nil)
                        (log-text :initarg :log-text :type
                         (common-lisp:or log-text common-lisp:null) :accessor
                         %observation-log-text :initform common-lisp:nil)
                        (line-time :initarg :line-time :type
                         (common-lisp:or line-time common-lisp:null) :accessor
                         %observation-line-time :initform common-lisp:nil)
                        (log-group :initarg :log-group :type
                         (common-lisp:or log-group common-lisp:null) :accessor
                         %observation-log-group :initform common-lisp:nil)
                        (source-arn :initarg :source-arn :type
                         (common-lisp:or source-arn common-lisp:null) :accessor
                         %observation-source-arn :initform common-lisp:nil)
                        (source-type :initarg :source-type :type
                         (common-lisp:or source-type common-lisp:null)
                         :accessor %observation-source-type :initform
                         common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or end-time common-lisp:null) :accessor
                         %observation-end-time :initform common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or start-time common-lisp:null) :accessor
                         %observation-start-time :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or observation-id common-lisp:null)
                         :accessor %observation-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'observation 'make-observation))
 (common-lisp:defun make-observation
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key xray-node-type xray-node-name
                     xray-request-average-latency xray-request-count
                     xray-error-percent xray-throttle-percent
                     xray-fault-percent ebs-request-id ebs-cause ebs-result
                     ebs-event states-input states-status states-arn
                     states-execution-arn s3event-name rds-event-message
                     rds-event-categories ec2state
                     code-deploy-instance-group-id code-deploy-application
                     code-deploy-state code-deploy-deployment-group
                     code-deploy-deployment-id health-event-description
                     health-event-type-category health-event-type-code
                     health-service health-event-arn
                     cloud-watch-event-detail-type cloud-watch-event-source
                     cloud-watch-event-id value unit metric-name
                     metric-namespace log-filter log-text line-time log-group
                     source-arn source-type end-time start-time id)
   (common-lisp:apply #'common-lisp:make-instance 'observation
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input observation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input observation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-group))
      (common-lisp:list
       (common-lisp:cons "LogGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line-time))
      (common-lisp:list
       (common-lisp:cons "LineTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-text))
      (common-lisp:list
       (common-lisp:cons "LogText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-filter))
      (common-lisp:list
       (common-lisp:cons "LogFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-namespace))
      (common-lisp:list
       (common-lisp:cons "MetricNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-event-id))
      (common-lisp:list
       (common-lisp:cons "CloudWatchEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-event-source))
      (common-lisp:list
       (common-lisp:cons "CloudWatchEventSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-event-detail-type))
      (common-lisp:list
       (common-lisp:cons "CloudWatchEventDetailType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-event-arn))
      (common-lisp:list
       (common-lisp:cons "HealthEventArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-service))
      (common-lisp:list
       (common-lisp:cons "HealthService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-event-type-code))
      (common-lisp:list
       (common-lisp:cons "HealthEventTypeCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-event-type-category))
      (common-lisp:list
       (common-lisp:cons "HealthEventTypeCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-event-description))
      (common-lisp:list
       (common-lisp:cons "HealthEventDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-deploy-deployment-id))
      (common-lisp:list
       (common-lisp:cons "CodeDeployDeploymentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-deploy-deployment-group))
      (common-lisp:list
       (common-lisp:cons "CodeDeployDeploymentGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-deploy-state))
      (common-lisp:list
       (common-lisp:cons "CodeDeployState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-deploy-application))
      (common-lisp:list
       (common-lisp:cons "CodeDeployApplication"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-deploy-instance-group-id))
      (common-lisp:list
       (common-lisp:cons "CodeDeployInstanceGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ec2state))
      (common-lisp:list
       (common-lisp:cons "Ec2State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rds-event-categories))
      (common-lisp:list
       (common-lisp:cons "RdsEventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rds-event-message))
      (common-lisp:list
       (common-lisp:cons "RdsEventMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3event-name))
      (common-lisp:list
       (common-lisp:cons "S3EventName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'states-execution-arn))
      (common-lisp:list
       (common-lisp:cons "StatesExecutionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'states-arn))
      (common-lisp:list
       (common-lisp:cons "StatesArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'states-status))
      (common-lisp:list
       (common-lisp:cons "StatesStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'states-input))
      (common-lisp:list
       (common-lisp:cons "StatesInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-event))
      (common-lisp:list
       (common-lisp:cons "EbsEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-result))
      (common-lisp:list
       (common-lisp:cons "EbsResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-cause))
      (common-lisp:list
       (common-lisp:cons "EbsCause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebs-request-id))
      (common-lisp:list
       (common-lisp:cons "EbsRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xray-fault-percent))
      (common-lisp:list
       (common-lisp:cons "XRayFaultPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xray-throttle-percent))
      (common-lisp:list
       (common-lisp:cons "XRayThrottlePercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xray-error-percent))
      (common-lisp:list
       (common-lisp:cons "XRayErrorPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xray-request-count))
      (common-lisp:list
       (common-lisp:cons "XRayRequestCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'xray-request-average-latency))
      (common-lisp:list
       (common-lisp:cons "XRayRequestAverageLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xray-node-name))
      (common-lisp:list
       (common-lisp:cons "XRayNodeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xray-node-type))
      (common-lisp:list
       (common-lisp:cons "XRayNodeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input observation))
   common-lisp:nil))
(common-lisp:deftype observation-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype observation-list ()
   '(trivial-types:proper-list observation))
 (common-lisp:defun |make-observation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list observation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ops-center-enabled () 'common-lisp:boolean)
(common-lisp:deftype ops-item-snstopic-arn () 'common-lisp:string)
(common-lisp:deftype os-type () 'common-lisp:string)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass problem common-lisp:nil
                       ((last-recurrence-time :initarg :last-recurrence-time
                         :type
                         (common-lisp:or last-recurrence-time common-lisp:null)
                         :accessor %problem-last-recurrence-time :initform
                         common-lisp:nil)
                        (recurring-count :initarg :recurring-count :type
                         (common-lisp:or recurring-count common-lisp:null)
                         :accessor %problem-recurring-count :initform
                         common-lisp:nil)
                        (feedback :initarg :feedback :type
                         (common-lisp:or feedback common-lisp:null) :accessor
                         %problem-feedback :initform common-lisp:nil)
                        (resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor %problem-resource-group-name :initform
                         common-lisp:nil)
                        (severity-level :initarg :severity-level :type
                         (common-lisp:or severity-level common-lisp:null)
                         :accessor %problem-severity-level :initform
                         common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or end-time common-lisp:null) :accessor
                         %problem-end-time :initform common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or start-time common-lisp:null) :accessor
                         %problem-start-time :initform common-lisp:nil)
                        (affected-resource :initarg :affected-resource :type
                         (common-lisp:or affected-resource common-lisp:null)
                         :accessor %problem-affected-resource :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %problem-status :initform common-lisp:nil)
                        (insights :initarg :insights :type
                         (common-lisp:or insights common-lisp:null) :accessor
                         %problem-insights :initform common-lisp:nil)
                        (title :initarg :title :type
                         (common-lisp:or title common-lisp:null) :accessor
                         %problem-title :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or problem-id common-lisp:null) :accessor
                         %problem-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'problem 'make-problem))
 (common-lisp:defun make-problem
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-recurrence-time recurring-count
                     feedback resource-group-name severity-level end-time
                     start-time affected-resource status insights title id)
   (common-lisp:apply #'common-lisp:make-instance 'problem
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input problem))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input problem))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "Title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'insights))
      (common-lisp:list
       (common-lisp:cons "Insights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'affected-resource))
      (common-lisp:list
       (common-lisp:cons "AffectedResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-level))
      (common-lisp:list
       (common-lisp:cons "SeverityLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feedback))
      (common-lisp:list
       (common-lisp:cons "Feedback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurring-count))
      (common-lisp:list
       (common-lisp:cons "RecurringCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-recurrence-time))
      (common-lisp:list
       (common-lisp:cons "LastRecurrenceTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input problem))
   common-lisp:nil))
(common-lisp:deftype problem-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype problem-list () '(trivial-types:proper-list problem))
 (common-lisp:defun |make-problem-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list problem))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rds-event-categories () 'common-lisp:string)
(common-lisp:deftype rds-event-message () 'common-lisp:string)
(common-lisp:deftype recurring-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass related-observations common-lisp:nil
                       ((observation-list :initarg :observation-list :type
                         (common-lisp:or observation-list common-lisp:null)
                         :accessor %related-observations-observation-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'related-observations 'make-related-observations))
 (common-lisp:defun make-related-observations
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key observation-list)
   (common-lisp:apply #'common-lisp:make-instance 'related-observations
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input related-observations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input related-observations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'observation-list))
      (common-lisp:list
       (common-lisp:cons "ObservationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input related-observations))
   common-lisp:nil))
(common-lisp:deftype remarks () 'common-lisp:string)
(common-lisp:deftype remove-snstopic () 'common-lisp:boolean)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:deftype resource-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (application-insights-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:deftype resource-list ()
   '(trivial-types:proper-list resource-arn))
 (common-lisp:defun |make-resource-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (application-insights-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype s3event-name () 'common-lisp:string)
(common-lisp:deftype severity-level () 'common-lisp:string)
(common-lisp:deftype source-arn () 'common-lisp:string)
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:deftype start-time () 'common-lisp:string)
(common-lisp:deftype states-arn () 'common-lisp:string)
(common-lisp:deftype states-execution-arn () 'common-lisp:string)
(common-lisp:deftype states-input () 'common-lisp:string)
(common-lisp:deftype states-status () 'common-lisp:string)
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition tags-already-exist-exception
     (application-insights-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       tags-already-exist-exception-message)))
 (common-lisp:export
  (common-lisp:list 'tags-already-exist-exception
                    'tags-already-exist-exception-message)))
(common-lisp:deftype tier () 'common-lisp:string)
(common-lisp:deftype title () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (application-insights-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       too-many-tags-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message
                    'too-many-tags-exception-resource-name)))
(common-lisp:deftype unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-application-request common-lisp:nil
                       ((auto-config-enabled :initarg :auto-config-enabled
                         :type
                         (common-lisp:or auto-config-enabled common-lisp:null)
                         :accessor
                         %update-application-request-auto-config-enabled
                         :initform common-lisp:nil)
                        (remove-snstopic :initarg :remove-snstopic :type
                         (common-lisp:or remove-snstopic common-lisp:null)
                         :accessor %update-application-request-remove-snstopic
                         :initform common-lisp:nil)
                        (ops-item-snstopic-arn :initarg :ops-item-snstopic-arn
                         :type
                         (common-lisp:or ops-item-snstopic-arn
                                         common-lisp:null)
                         :accessor
                         %update-application-request-ops-item-snstopic-arn
                         :initform common-lisp:nil)
                        (cwemonitor-enabled :initarg :cwemonitor-enabled :type
                         (common-lisp:or cwemonitor-enabled common-lisp:null)
                         :accessor
                         %update-application-request-cwemonitor-enabled
                         :initform common-lisp:nil)
                        (ops-center-enabled :initarg :ops-center-enabled :type
                         (common-lisp:or ops-center-enabled common-lisp:null)
                         :accessor
                         %update-application-request-ops-center-enabled
                         :initform common-lisp:nil)
                        (resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor
                         %update-application-request-resource-group-name
                         :initform
                         (common-lisp:error
                          ":resource-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-application-request
                    'make-update-application-request))
 (common-lisp:defun make-update-application-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-config-enabled remove-snstopic
                     ops-item-snstopic-arn cwemonitor-enabled
                     ops-center-enabled resource-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-application-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ops-center-enabled))
      (common-lisp:list
       (common-lisp:cons "OpsCenterEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cwemonitor-enabled))
      (common-lisp:list
       (common-lisp:cons "CWEMonitorEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ops-item-snstopic-arn))
      (common-lisp:list
       (common-lisp:cons "OpsItemSNSTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remove-snstopic))
      (common-lisp:list
       (common-lisp:cons "RemoveSNSTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-config-enabled))
      (common-lisp:list
       (common-lisp:cons "AutoConfigEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-application-response common-lisp:nil
                       ((application-info :initarg :application-info :type
                         (common-lisp:or application-info common-lisp:null)
                         :accessor
                         %update-application-response-application-info
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-application-response
                    'make-update-application-response))
 (common-lisp:defun make-update-application-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key application-info)
   (common-lisp:apply #'common-lisp:make-instance 'update-application-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-info))
      (common-lisp:list
       (common-lisp:cons "ApplicationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-application-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-component-configuration-request common-lisp:nil
                       ((auto-config-enabled :initarg :auto-config-enabled
                         :type
                         (common-lisp:or auto-config-enabled common-lisp:null)
                         :accessor
                         %update-component-configuration-request-auto-config-enabled
                         :initform common-lisp:nil)
                        (component-configuration :initarg
                         :component-configuration :type
                         (common-lisp:or component-configuration
                                         common-lisp:null)
                         :accessor
                         %update-component-configuration-request-component-configuration
                         :initform common-lisp:nil)
                        (tier :initarg :tier :type
                         (common-lisp:or tier common-lisp:null) :accessor
                         %update-component-configuration-request-tier :initform
                         common-lisp:nil)
                        (monitor :initarg :monitor :type
                         (common-lisp:or monitor common-lisp:null) :accessor
                         %update-component-configuration-request-monitor
                         :initform common-lisp:nil)
                        (component-name :initarg :component-name :type
                         (common-lisp:or component-name common-lisp:null)
                         :accessor
                         %update-component-configuration-request-component-name
                         :initform
                         (common-lisp:error ":component-name is required"))
                        (resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor
                         %update-component-configuration-request-resource-group-name
                         :initform
                         (common-lisp:error
                          ":resource-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-component-configuration-request
                    'make-update-component-configuration-request))
 (common-lisp:defun make-update-component-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-config-enabled
                     component-configuration tier monitor component-name
                     resource-group-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-component-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-component-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-component-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitor))
      (common-lisp:list
       (common-lisp:cons "Monitor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'component-configuration))
      (common-lisp:list
       (common-lisp:cons "ComponentConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-config-enabled))
      (common-lisp:list
       (common-lisp:cons "AutoConfigEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-component-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-component-configuration-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-component-configuration-response
                    'make-update-component-configuration-response))
 (common-lisp:defun make-update-component-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-component-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-component-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-component-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-component-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-component-request common-lisp:nil
                       ((resource-list :initarg :resource-list :type
                         (common-lisp:or resource-list common-lisp:null)
                         :accessor %update-component-request-resource-list
                         :initform common-lisp:nil)
                        (new-component-name :initarg :new-component-name :type
                         (common-lisp:or custom-component-name
                                         common-lisp:null)
                         :accessor %update-component-request-new-component-name
                         :initform common-lisp:nil)
                        (component-name :initarg :component-name :type
                         (common-lisp:or custom-component-name
                                         common-lisp:null)
                         :accessor %update-component-request-component-name
                         :initform
                         (common-lisp:error ":component-name is required"))
                        (resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor
                         %update-component-request-resource-group-name
                         :initform
                         (common-lisp:error
                          ":resource-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-component-request 'make-update-component-request))
 (common-lisp:defun make-update-component-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-list new-component-name
                     component-name resource-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-component-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'component-name))
      (common-lisp:list
       (common-lisp:cons "ComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-component-name))
      (common-lisp:list
       (common-lisp:cons "NewComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-list))
      (common-lisp:list
       (common-lisp:cons "ResourceList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-component-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-component-response
                    'make-update-component-response))
 (common-lisp:defun make-update-component-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'update-component-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-log-pattern-request common-lisp:nil
                       ((rank :initarg :rank :type
                         (common-lisp:or log-pattern-rank common-lisp:null)
                         :accessor %update-log-pattern-request-rank :initform
                         common-lisp:nil)
                        (pattern :initarg :pattern :type
                         (common-lisp:or log-pattern-regex common-lisp:null)
                         :accessor %update-log-pattern-request-pattern
                         :initform common-lisp:nil)
                        (pattern-name :initarg :pattern-name :type
                         (common-lisp:or log-pattern-name common-lisp:null)
                         :accessor %update-log-pattern-request-pattern-name
                         :initform
                         (common-lisp:error ":pattern-name is required"))
                        (pattern-set-name :initarg :pattern-set-name :type
                         (common-lisp:or log-pattern-set-name common-lisp:null)
                         :accessor %update-log-pattern-request-pattern-set-name
                         :initform
                         (common-lisp:error ":pattern-set-name is required"))
                        (resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor
                         %update-log-pattern-request-resource-group-name
                         :initform
                         (common-lisp:error
                          ":resource-group-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-log-pattern-request
                    'make-update-log-pattern-request))
 (common-lisp:defun make-update-log-pattern-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rank pattern pattern-name
                     pattern-set-name resource-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-log-pattern-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-log-pattern-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-log-pattern-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-set-name))
      (common-lisp:list
       (common-lisp:cons "PatternSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern-name))
      (common-lisp:list
       (common-lisp:cons "PatternName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pattern))
      (common-lisp:list
       (common-lisp:cons "Pattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rank))
      (common-lisp:list
       (common-lisp:cons "Rank"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-log-pattern-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-log-pattern-response common-lisp:nil
                       ((log-pattern :initarg :log-pattern :type
                         (common-lisp:or log-pattern common-lisp:null)
                         :accessor %update-log-pattern-response-log-pattern
                         :initform common-lisp:nil)
                        (resource-group-name :initarg :resource-group-name
                         :type
                         (common-lisp:or resource-group-name common-lisp:null)
                         :accessor
                         %update-log-pattern-response-resource-group-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-log-pattern-response
                    'make-update-log-pattern-response))
 (common-lisp:defun make-update-log-pattern-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-pattern resource-group-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-log-pattern-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-log-pattern-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-log-pattern-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-name))
      (common-lisp:list
       (common-lisp:cons "ResourceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-pattern))
      (common-lisp:list
       (common-lisp:cons "LogPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-log-pattern-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (application-insights-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype value () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:deftype workload-meta-data () 'common-lisp:hash-table)
 (common-lisp:defun |make-workload-meta-data|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype xray-error-percent () 'common-lisp:integer)
(common-lisp:deftype xray-fault-percent () 'common-lisp:integer)
(common-lisp:deftype xray-node-name () 'common-lisp:string)
(common-lisp:deftype xray-node-type () 'common-lisp:string)
(common-lisp:deftype xray-request-average-latency () 'common-lisp:integer)
(common-lisp:deftype xray-request-count () 'common-lisp:integer)
(common-lisp:deftype xray-throttle-percent () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defun create-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name ops-center-enabled
                     cwemonitor-enabled ops-item-snstopic-arn tags
                     auto-config-enabled auto-create grouping-type)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name ops-center-enabled
     cwemonitor-enabled ops-item-snstopic-arn tags auto-config-enabled
     auto-create grouping-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateApplication" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-application))
(common-lisp:progn
 (common-lisp:defun create-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name component-name
                     resource-list)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name component-name resource-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateComponent" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-component))
(common-lisp:progn
 (common-lisp:defun create-log-pattern
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name pattern-set-name
                     pattern-name pattern rank)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name pattern-set-name pattern-name
     pattern rank))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-log-pattern-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateLogPattern" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-log-pattern))
(common-lisp:progn
 (common-lisp:defun delete-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name)
   (common-lisp:declare (common-lisp:ignorable resource-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteApplication" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-application))
(common-lisp:progn
 (common-lisp:defun delete-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name component-name)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name component-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteComponent" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-component))
(common-lisp:progn
 (common-lisp:defun delete-log-pattern
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name pattern-set-name
                     pattern-name)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name pattern-set-name pattern-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-log-pattern-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteLogPattern" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-log-pattern))
(common-lisp:progn
 (common-lisp:defun describe-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name)
   (common-lisp:declare (common-lisp:ignorable resource-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "DescribeApplication" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-application))
(common-lisp:progn
 (common-lisp:defun describe-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name component-name)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name component-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "DescribeComponent" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-component))
(common-lisp:progn
 (common-lisp:defun describe-component-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name component-name)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name component-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-component-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "DescribeComponentConfiguration" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-component-configuration))
(common-lisp:progn
 (common-lisp:defun describe-component-configuration-recommendation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name component-name tier)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name component-name tier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-component-configuration-recommendation-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "DescribeComponentConfigurationRecommendation" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-component-configuration-recommendation))
(common-lisp:progn
 (common-lisp:defun describe-log-pattern
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name pattern-set-name
                     pattern-name)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name pattern-set-name pattern-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-log-pattern-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "DescribeLogPattern" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-log-pattern))
(common-lisp:progn
 (common-lisp:defun describe-observation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key observation-id)
   (common-lisp:declare (common-lisp:ignorable observation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-observation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "DescribeObservation" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-observation))
(common-lisp:progn
 (common-lisp:defun describe-problem
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key problem-id)
   (common-lisp:declare (common-lisp:ignorable problem-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-problem-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "DescribeProblem" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-problem))
(common-lisp:progn
 (common-lisp:defun describe-problem-observations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key problem-id)
   (common-lisp:declare (common-lisp:ignorable problem-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-problem-observations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "DescribeProblemObservations" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-problem-observations))
(common-lisp:progn
 (common-lisp:defun list-applications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-applications-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListApplications" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-applications))
(common-lisp:progn
 (common-lisp:defun list-components
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-components-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListComponents" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-components))
(common-lisp:progn
 (common-lisp:defun list-configuration-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name start-time end-time
                     event-status max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name start-time end-time event-status
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-configuration-history-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListConfigurationHistory" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-configuration-history))
(common-lisp:progn
 (common-lisp:defun list-log-pattern-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-log-pattern-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListLogPatternSets" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-log-pattern-sets))
(common-lisp:progn
 (common-lisp:defun list-log-patterns
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name pattern-set-name
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name pattern-set-name max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-log-patterns-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListLogPatterns" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-log-patterns))
(common-lisp:progn
 (common-lisp:defun list-problems
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name start-time end-time
                     max-results next-token component-name)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name start-time end-time max-results
     next-token component-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-problems-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListProblems" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-problems))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "ListTagsForResource" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "TagResource" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "UntagResource" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-application
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name ops-center-enabled
                     cwemonitor-enabled ops-item-snstopic-arn remove-snstopic
                     auto-config-enabled)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name ops-center-enabled
     cwemonitor-enabled ops-item-snstopic-arn remove-snstopic
     auto-config-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-application-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "UpdateApplication" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-application))
(common-lisp:progn
 (common-lisp:defun update-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name component-name
                     new-component-name resource-list)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name component-name
     new-component-name resource-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "UpdateComponent" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-component))
(common-lisp:progn
 (common-lisp:defun update-component-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name component-name
                     monitor tier component-configuration auto-config-enabled)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name component-name monitor tier
     component-configuration auto-config-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-component-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "UpdateComponentConfiguration" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-component-configuration))
(common-lisp:progn
 (common-lisp:defun update-log-pattern
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-name pattern-set-name
                     pattern-name pattern rank)
   (common-lisp:declare
    (common-lisp:ignorable resource-group-name pattern-set-name pattern-name
     pattern rank))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-log-pattern-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'application-insights-request aws-sdk/generator/operation::input "POST"
        :json "/" "UpdateLogPattern" "2018-11-25"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-log-pattern))
