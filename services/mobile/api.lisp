;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/mobile/api
  (:use)
  (:nicknames #:aws/mobile)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/mobile/api)
(common-lisp:progn
 (common-lisp:defclass mobile-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "mobile" :protocol
                        :rest-json))
 (common-lisp:export 'mobile-request))
(common-lisp:progn
 (common-lisp:define-condition mobile-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'mobile-error))
(common-lisp:defvar *error-map*
  '(("AccountActionRequiredException" . account-action-required-exception)
    ("BadRequestException" . bad-request-exception)
    ("InternalFailureException" . internal-failure-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("NotFoundException" . not-found-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("TooManyRequestsException" . too-many-requests-exception)
    ("UnauthorizedException" . unauthorized-exception)))
(common-lisp:progn
 (common-lisp:define-condition account-action-required-exception
     (mobile-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       account-action-required-exception-message)))
 (common-lisp:export
  (common-lisp:list 'account-action-required-exception
                    'account-action-required-exception-message)))
(common-lisp:deftype attribute-key () 'common-lisp:string)
(common-lisp:deftype attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attributes () 'common-lisp:hash-table)
 (common-lisp:defun |make-attributes| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (mobile-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype bundle-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass bundle-details common-lisp:nil
                       ((available-platforms :initarg :|availablePlatforms|
                         :type (common-lisp:or platforms common-lisp:null)
                         :accessor %bundle-details-available-platforms
                         :initform common-lisp:nil)
                        (icon-url :initarg :|iconUrl| :type
                         (common-lisp:or icon-url common-lisp:null) :accessor
                         %bundle-details-icon-url :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or bundle-description common-lisp:null)
                         :accessor %bundle-details-description :initform
                         common-lisp:nil)
                        (version :initarg :|version| :type
                         (common-lisp:or bundle-version common-lisp:null)
                         :accessor %bundle-details-version :initform
                         common-lisp:nil)
                        (title :initarg :|title| :type
                         (common-lisp:or bundle-title common-lisp:null)
                         :accessor %bundle-details-title :initform
                         common-lisp:nil)
                        (bundle-id :initarg :|bundleId| :type
                         (common-lisp:or bundle-id common-lisp:null) :accessor
                         %bundle-details-bundle-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'bundle-details 'make-bundle-details))
 (common-lisp:defun make-bundle-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key available-platforms icon-url description
                     version title bundle-id)
   (common-lisp:apply #'common-lisp:make-instance 'bundle-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bundle-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bundle-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'icon-url))
      (common-lisp:list
       (common-lisp:cons "iconUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'available-platforms))
      (common-lisp:list
       (common-lisp:cons "availablePlatforms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bundle-details))
   common-lisp:nil))
(common-lisp:deftype bundle-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype bundle-list ()
   '(trivial-types:proper-list bundle-details))
 (common-lisp:defun |make-bundle-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bundle-details))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bundle-title () 'common-lisp:string)
(common-lisp:deftype bundle-version () 'common-lisp:string)
(common-lisp:deftype console-url () 'common-lisp:string)
(common-lisp:deftype contents ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defclass create-project-request common-lisp:nil
                       ((snapshot-id :initarg :|snapshotId| :type
                         (common-lisp:or snapshot-id common-lisp:null)
                         :accessor %create-project-request-snapshot-id
                         :initform common-lisp:nil)
                        (contents :initarg :|contents| :type
                         (common-lisp:or contents common-lisp:null) :accessor
                         %create-project-request-contents :initform
                         common-lisp:nil)
                        (region :initarg :|region| :type
                         (common-lisp:or project-region common-lisp:null)
                         :accessor %create-project-request-region :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor %create-project-request-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-project-request 'make-create-project-request))
 (common-lisp:defun make-create-project-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key snapshot-id contents region name)
   (common-lisp:apply #'common-lisp:make-instance 'create-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contents))
      (common-lisp:list
       (common-lisp:cons "contents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'contents))))
(common-lisp:progn
 (common-lisp:defclass create-project-result common-lisp:nil
                       ((details :initarg :|details| :type
                         (common-lisp:or project-details common-lisp:null)
                         :accessor %create-project-result-details :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-project-result 'make-create-project-result))
 (common-lisp:defun make-create-project-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key details)
   (common-lisp:apply #'common-lisp:make-instance 'create-project-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-result))
   common-lisp:nil))
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-project-request common-lisp:nil
                       ((project-id :initarg :|projectId| :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         %delete-project-request-project-id :initform
                         (common-lisp:error ":projectid is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-project-request 'make-delete-project-request))
 (common-lisp:defun make-delete-project-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key project-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-project-result common-lisp:nil
                       ((orphaned-resources :initarg :|orphanedResources| :type
                         (common-lisp:or resources common-lisp:null) :accessor
                         %delete-project-result-orphaned-resources :initform
                         common-lisp:nil)
                        (deleted-resources :initarg :|deletedResources| :type
                         (common-lisp:or resources common-lisp:null) :accessor
                         %delete-project-result-deleted-resources :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-project-result 'make-delete-project-result))
 (common-lisp:defun make-delete-project-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key orphaned-resources deleted-resources)
   (common-lisp:apply #'common-lisp:make-instance 'delete-project-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted-resources))
      (common-lisp:list
       (common-lisp:cons "deletedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'orphaned-resources))
      (common-lisp:list
       (common-lisp:cons "orphanedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bundle-request common-lisp:nil
                       ((bundle-id :initarg :|bundleId| :type
                         (common-lisp:or bundle-id common-lisp:null) :accessor
                         %describe-bundle-request-bundle-id :initform
                         (common-lisp:error ":bundleid is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-bundle-request 'make-describe-bundle-request))
 (common-lisp:defun make-describe-bundle-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bundle-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-bundle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bundle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bundle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bundle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-bundle-result common-lisp:nil
                       ((details :initarg :|details| :type
                         (common-lisp:or bundle-details common-lisp:null)
                         :accessor %describe-bundle-result-details :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-bundle-result 'make-describe-bundle-result))
 (common-lisp:defun make-describe-bundle-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key details)
   (common-lisp:apply #'common-lisp:make-instance 'describe-bundle-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bundle-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bundle-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bundle-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-project-request common-lisp:nil
                       ((sync-from-resources :initarg :|syncFromResources|
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %describe-project-request-sync-from-resources
                         :initform common-lisp:nil)
                        (project-id :initarg :|projectId| :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         %describe-project-request-project-id :initform
                         (common-lisp:error ":projectid is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-project-request 'make-describe-project-request))
 (common-lisp:defun make-describe-project-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sync-from-resources project-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-project-result common-lisp:nil
                       ((details :initarg :|details| :type
                         (common-lisp:or project-details common-lisp:null)
                         :accessor %describe-project-result-details :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-project-result 'make-describe-project-result))
 (common-lisp:defun make-describe-project-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key details)
   (common-lisp:apply #'common-lisp:make-instance 'describe-project-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-result))
   common-lisp:nil))
(common-lisp:deftype download-url () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass export-bundle-request common-lisp:nil
                       ((platform :initarg :|platform| :type
                         (common-lisp:or platform common-lisp:null) :accessor
                         %export-bundle-request-platform :initform
                         common-lisp:nil)
                        (project-id :initarg :|projectId| :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         %export-bundle-request-project-id :initform
                         common-lisp:nil)
                        (bundle-id :initarg :|bundleId| :type
                         (common-lisp:or bundle-id common-lisp:null) :accessor
                         %export-bundle-request-bundle-id :initform
                         (common-lisp:error ":bundleid is required"))))
 (common-lisp:export
  (common-lisp:list 'export-bundle-request 'make-export-bundle-request))
 (common-lisp:defun make-export-bundle-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key platform project-id bundle-id)
   (common-lisp:apply #'common-lisp:make-instance 'export-bundle-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-bundle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-bundle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-bundle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-bundle-result common-lisp:nil
                       ((download-url :initarg :|downloadUrl| :type
                         (common-lisp:or download-url common-lisp:null)
                         :accessor %export-bundle-result-download-url :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'export-bundle-result 'make-export-bundle-result))
 (common-lisp:defun make-export-bundle-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key download-url)
   (common-lisp:apply #'common-lisp:make-instance 'export-bundle-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input export-bundle-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input export-bundle-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'download-url))
      (common-lisp:list
       (common-lisp:cons "downloadUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input export-bundle-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-project-request common-lisp:nil
                       ((project-id :initarg :|projectId| :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         %export-project-request-project-id :initform
                         (common-lisp:error ":projectid is required"))))
 (common-lisp:export
  (common-lisp:list 'export-project-request 'make-export-project-request))
 (common-lisp:defun make-export-project-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key project-id)
   (common-lisp:apply #'common-lisp:make-instance 'export-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass export-project-result common-lisp:nil
                       ((snapshot-id :initarg :|snapshotId| :type
                         (common-lisp:or snapshot-id common-lisp:null)
                         :accessor %export-project-result-snapshot-id :initform
                         common-lisp:nil)
                        (share-url :initarg :|shareUrl| :type
                         (common-lisp:or share-url common-lisp:null) :accessor
                         %export-project-result-share-url :initform
                         common-lisp:nil)
                        (download-url :initarg :|downloadUrl| :type
                         (common-lisp:or download-url common-lisp:null)
                         :accessor %export-project-result-download-url
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'export-project-result 'make-export-project-result))
 (common-lisp:defun make-export-project-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key snapshot-id share-url download-url)
   (common-lisp:apply #'common-lisp:make-instance 'export-project-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-project-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-project-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'download-url))
      (common-lisp:list
       (common-lisp:cons "downloadUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-url))
      (common-lisp:list
       (common-lisp:cons "shareUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-id))
      (common-lisp:list
       (common-lisp:cons "snapshotId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-project-result))
   common-lisp:nil))
(common-lisp:deftype feature () 'common-lisp:string)
(common-lisp:deftype icon-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-failure-exception
     (mobile-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-failure-exception
                    'internal-failure-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (mobile-error)
     ((retry-after-seconds :initarg :|retryAfterSeconds| :initform
       common-lisp:nil :reader limit-exceeded-exception-retry-after-seconds)
      (message :initarg :|message| :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-retry-after-seconds
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass list-bundles-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-bundles-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-bundles-request-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-bundles-request 'make-list-bundles-request))
 (common-lisp:defun make-list-bundles-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-bundles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-bundles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-bundles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-bundles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-bundles-result common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-bundles-result-next-token :initform
                         common-lisp:nil)
                        (bundle-list :initarg :|bundleList| :type
                         (common-lisp:or bundle-list common-lisp:null)
                         :accessor %list-bundles-result-bundle-list :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-bundles-result 'make-list-bundles-result))
 (common-lisp:defun make-list-bundles-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token bundle-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-bundles-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-bundles-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-bundles-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-list))
      (common-lisp:list
       (common-lisp:cons "bundleList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-bundles-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-projects-request common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-projects-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-projects-request-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-projects-request 'make-list-projects-request))
 (common-lisp:defun make-list-projects-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-projects-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-projects-result common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-projects-result-next-token :initform
                         common-lisp:nil)
                        (projects :initarg :|projects| :type
                         (common-lisp:or project-summaries common-lisp:null)
                         :accessor %list-projects-result-projects :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-projects-result 'make-list-projects-result))
 (common-lisp:defun make-list-projects-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token projects)
   (common-lisp:apply #'common-lisp:make-instance 'list-projects-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-projects-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-projects-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'projects))
      (common-lisp:list
       (common-lisp:cons "projects"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-projects-result))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (mobile-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:deftype platform () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype platforms () '(trivial-types:proper-list platform))
 (common-lisp:defun |make-platforms|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list platform))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass project-details common-lisp:nil
                       ((resources :initarg :|resources| :type
                         (common-lisp:or resources common-lisp:null) :accessor
                         %project-details-resources :initform common-lisp:nil)
                        (console-url :initarg :|consoleUrl| :type
                         (common-lisp:or console-url common-lisp:null)
                         :accessor %project-details-console-url :initform
                         common-lisp:nil)
                        (last-updated-date :initarg :|lastUpdatedDate| :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %project-details-last-updated-date :initform
                         common-lisp:nil)
                        (created-date :initarg :|createdDate| :type
                         (common-lisp:or date common-lisp:null) :accessor
                         %project-details-created-date :initform
                         common-lisp:nil)
                        (state :initarg :|state| :type
                         (common-lisp:or project-state common-lisp:null)
                         :accessor %project-details-state :initform
                         common-lisp:nil)
                        (region :initarg :|region| :type
                         (common-lisp:or project-region common-lisp:null)
                         :accessor %project-details-region :initform
                         common-lisp:nil)
                        (project-id :initarg :|projectId| :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         %project-details-project-id :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor %project-details-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'project-details 'make-project-details))
 (common-lisp:defun make-project-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resources console-url last-updated-date
                     created-date state region project-id name)
   (common-lisp:apply #'common-lisp:make-instance 'project-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "createdDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'console-url))
      (common-lisp:list
       (common-lisp:cons "consoleUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-details))
   common-lisp:nil))
(common-lisp:deftype project-id () 'common-lisp:string)
(common-lisp:deftype project-name () 'common-lisp:string)
(common-lisp:deftype project-region () 'common-lisp:string)
(common-lisp:deftype project-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype project-summaries ()
   '(trivial-types:proper-list project-summary))
 (common-lisp:defun |make-project-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list project-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass project-summary common-lisp:nil
                       ((project-id :initarg :|projectId| :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         %project-summary-project-id :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or project-name common-lisp:null)
                         :accessor %project-summary-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'project-summary 'make-project-summary))
 (common-lisp:defun make-project-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key project-id name)
   (common-lisp:apply #'common-lisp:make-instance 'project-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resource common-lisp:nil
                       ((attributes :initarg :|attributes| :type
                         (common-lisp:or attributes common-lisp:null) :accessor
                         %resource-attributes :initform common-lisp:nil)
                        (feature :initarg :|feature| :type
                         (common-lisp:or feature common-lisp:null) :accessor
                         %resource-feature :initform common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %resource-arn :initform common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or resource-name common-lisp:null)
                         :accessor %resource-name :initform common-lisp:nil)
                        (type :initarg :|type| :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor %resource-type :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'resource 'make-resource))
 (common-lisp:defun make-resource
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attributes feature arn name type)
   (common-lisp:apply #'common-lisp:make-instance 'resource
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature))
      (common-lisp:list
       (common-lisp:cons "feature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource))
   common-lisp:nil))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resources () '(trivial-types:proper-list resource))
 (common-lisp:defun |make-resources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (mobile-error)
     ((retry-after-seconds :initarg :|retryAfterSeconds| :initform
       common-lisp:nil :reader
       service-unavailable-exception-retry-after-seconds)
      (message :initarg :|message| :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-retry-after-seconds
                    'service-unavailable-exception-message)))
(common-lisp:deftype share-url () 'common-lisp:string)
(common-lisp:deftype snapshot-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (mobile-error)
     ((retry-after-seconds :initarg :|retryAfterSeconds| :initform
       common-lisp:nil :reader too-many-requests-exception-retry-after-seconds)
      (message :initarg :|message| :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-retry-after-seconds
                    'too-many-requests-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unauthorized-exception
     (mobile-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       unauthorized-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-exception 'unauthorized-exception-message)))
(common-lisp:progn
 (common-lisp:defclass update-project-request common-lisp:nil
                       ((project-id :initarg :|projectId| :type
                         (common-lisp:or project-id common-lisp:null) :accessor
                         %update-project-request-project-id :initform
                         (common-lisp:error ":projectid is required"))
                        (contents :initarg :|contents| :type
                         (common-lisp:or contents common-lisp:null) :accessor
                         %update-project-request-contents :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-project-request 'make-update-project-request))
 (common-lisp:defun make-update-project-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key project-id contents)
   (common-lisp:apply #'common-lisp:make-instance 'update-project-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contents))
      (common-lisp:list
       (common-lisp:cons "contents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-project-request))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'contents))))
(common-lisp:progn
 (common-lisp:defclass update-project-result common-lisp:nil
                       ((details :initarg :|details| :type
                         (common-lisp:or project-details common-lisp:null)
                         :accessor %update-project-result-details :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-project-result 'make-update-project-result))
 (common-lisp:defun make-update-project-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key details)
   (common-lisp:apply #'common-lisp:make-instance 'update-project-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-project-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-project-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-project-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun create-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name region contents snapshot-id)
   (common-lisp:declare
    (common-lisp:ignorable name region contents snapshot-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mobile-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/projects"
                                                        "CreateProject"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-project))
(common-lisp:progn
 (common-lisp:defun delete-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-id)
   (common-lisp:declare (common-lisp:ignorable project-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mobile-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-id))))
                                                        "DeleteProject"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-project))
(common-lisp:progn
 (common-lisp:defun describe-bundle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bundle-id)
   (common-lisp:declare (common-lisp:ignorable bundle-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-bundle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mobile-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bundles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bundle-id))))
                                                        "DescribeBundle"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-bundle))
(common-lisp:progn
 (common-lisp:defun describe-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-id sync-from-resources)
   (common-lisp:declare (common-lisp:ignorable project-id sync-from-resources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mobile-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/project"
                                                        "DescribeProject"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-project))
(common-lisp:progn
 (common-lisp:defun export-bundle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bundle-id project-id platform)
   (common-lisp:declare (common-lisp:ignorable bundle-id project-id platform))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-export-bundle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mobile-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bundles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bundle-id))))
                                                        "ExportBundle"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'export-bundle))
(common-lisp:progn
 (common-lisp:defun export-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-id)
   (common-lisp:declare (common-lisp:ignorable project-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-export-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mobile-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/exports/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-id))))
                                                        "ExportProject"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'export-project))
(common-lisp:progn
 (common-lisp:defun list-bundles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-bundles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mobile-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/bundles"
                                                        "ListBundles"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-bundles))
(common-lisp:progn
 (common-lisp:defun list-projects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-projects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mobile-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/projects"
                                                        "ListProjects"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-projects))
(common-lisp:progn
 (common-lisp:defun update-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key contents project-id)
   (common-lisp:declare (common-lisp:ignorable contents project-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'mobile-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/update"
                                                        "UpdateProject"
                                                        "2017-07-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-project))
