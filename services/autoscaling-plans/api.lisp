;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/autoscaling-plans/api
  (:use)
  (:nicknames #:aws/autoscaling-plans)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/autoscaling-plans/api)
(common-lisp:progn
 (common-lisp:defclass autoscaling-plans-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "autoscaling-plans"
                        :protocol :json))
 (common-lisp:export 'autoscaling-plans-request))
(common-lisp:progn
 (common-lisp:define-condition autoscaling-plans-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'autoscaling-plans-error))
(common-lisp:defvar *error-map*
  '(("ConcurrentUpdateException" . concurrent-update-exception)
    ("InternalServiceException" . internal-service-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ObjectNotFoundException" . object-not-found-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defstruct
     (application-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-application-source-"))
   (cloud-formation-stack-arn common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null))
   (tag-filters common-lisp:nil :type
    (common-lisp:or tag-filters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'application-source 'make-application-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-formation-stack-arn))
      (common-lisp:list
       (common-lisp:cons "CloudFormationStackARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-filters))
      (common-lisp:list
       (common-lisp:cons "TagFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype application-sources ()
   '(trivial-types:proper-list application-source))
 (common-lisp:defun |make-application-sources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition concurrent-update-exception
     (autoscaling-plans-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-update-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-update-exception
                    'concurrent-update-exception-message)))
(common-lisp:deftype cooldown () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (create-scaling-plan-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-scaling-plan-request-"))
   (scaling-plan-name (common-lisp:error ":scaling-plan-name is required")
    :type (common-lisp:or scaling-plan-name common-lisp:null))
   (application-source (common-lisp:error ":application-source is required")
    :type (common-lisp:or application-source common-lisp:null))
   (scaling-instructions
    (common-lisp:error ":scaling-instructions is required") :type
    (common-lisp:or scaling-instructions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-scaling-plan-request
                    'make-create-scaling-plan-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-scaling-plan-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-scaling-plan-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-plan-name))
      (common-lisp:list
       (common-lisp:cons "ScalingPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-source))
      (common-lisp:list
       (common-lisp:cons "ApplicationSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-instructions))
      (common-lisp:list
       (common-lisp:cons "ScalingInstructions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-scaling-plan-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-scaling-plan-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-scaling-plan-response-"))
   (scaling-plan-version
    (common-lisp:error ":scaling-plan-version is required") :type
    (common-lisp:or scaling-plan-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-scaling-plan-response
                    'make-create-scaling-plan-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-scaling-plan-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-scaling-plan-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-plan-version))
      (common-lisp:list
       (common-lisp:cons "ScalingPlanVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-scaling-plan-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (customized-load-metric-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-customized-load-metric-specification-"))
   (metric-name (common-lisp:error ":metric-name is required") :type
    (common-lisp:or metric-name common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or metric-namespace common-lisp:null))
   (dimensions common-lisp:nil :type
    (common-lisp:or metric-dimensions common-lisp:null))
   (statistic (common-lisp:error ":statistic is required") :type
    (common-lisp:or metric-statistic common-lisp:null))
   (unit common-lisp:nil :type (common-lisp:or metric-unit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'customized-load-metric-specification
                    'make-customized-load-metric-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customized-load-metric-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customized-load-metric-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic))
      (common-lisp:list
       (common-lisp:cons "Statistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customized-load-metric-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (customized-scaling-metric-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-customized-scaling-metric-specification-"))
   (metric-name (common-lisp:error ":metric-name is required") :type
    (common-lisp:or metric-name common-lisp:null))
   (namespace (common-lisp:error ":namespace is required") :type
    (common-lisp:or metric-namespace common-lisp:null))
   (dimensions common-lisp:nil :type
    (common-lisp:or metric-dimensions common-lisp:null))
   (statistic (common-lisp:error ":statistic is required") :type
    (common-lisp:or metric-statistic common-lisp:null))
   (unit common-lisp:nil :type (common-lisp:or metric-unit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'customized-scaling-metric-specification
                    'make-customized-scaling-metric-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customized-scaling-metric-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customized-scaling-metric-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimensions))
      (common-lisp:list
       (common-lisp:cons "Dimensions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic))
      (common-lisp:list
       (common-lisp:cons "Statistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customized-scaling-metric-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (datapoint (:copier common-lisp:nil)
      (:conc-name "struct-shape-datapoint-"))
   (timestamp common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or metric-scale common-lisp:null)))
 (common-lisp:export (common-lisp:list 'datapoint 'make-datapoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input datapoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input datapoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input datapoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype datapoints () '(trivial-types:proper-list datapoint))
 (common-lisp:defun |make-datapoints|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list datapoint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-scaling-plan-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-scaling-plan-request-"))
   (scaling-plan-name (common-lisp:error ":scaling-plan-name is required")
    :type (common-lisp:or scaling-plan-name common-lisp:null))
   (scaling-plan-version
    (common-lisp:error ":scaling-plan-version is required") :type
    (common-lisp:or scaling-plan-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-scaling-plan-request
                    'make-delete-scaling-plan-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-scaling-plan-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-scaling-plan-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-plan-name))
      (common-lisp:list
       (common-lisp:cons "ScalingPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-plan-version))
      (common-lisp:list
       (common-lisp:cons "ScalingPlanVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-scaling-plan-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-scaling-plan-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-scaling-plan-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-scaling-plan-response
                    'make-delete-scaling-plan-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-scaling-plan-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-scaling-plan-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-scaling-plan-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-scaling-plan-resources-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-scaling-plan-resources-request-"))
   (scaling-plan-name (common-lisp:error ":scaling-plan-name is required")
    :type (common-lisp:or scaling-plan-name common-lisp:null))
   (scaling-plan-version
    (common-lisp:error ":scaling-plan-version is required") :type
    (common-lisp:or scaling-plan-version common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-scaling-plan-resources-request
                    'make-describe-scaling-plan-resources-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-plan-resources-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-plan-resources-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-plan-name))
      (common-lisp:list
       (common-lisp:cons "ScalingPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-plan-version))
      (common-lisp:list
       (common-lisp:cons "ScalingPlanVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-plan-resources-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-scaling-plan-resources-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-scaling-plan-resources-response-"))
   (scaling-plan-resources common-lisp:nil :type
    (common-lisp:or scaling-plan-resources common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-scaling-plan-resources-response
                    'make-describe-scaling-plan-resources-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-plan-resources-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-plan-resources-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-plan-resources))
      (common-lisp:list
       (common-lisp:cons "ScalingPlanResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-plan-resources-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-scaling-plans-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-scaling-plans-request-"))
   (scaling-plan-names common-lisp:nil :type
    (common-lisp:or scaling-plan-names common-lisp:null))
   (scaling-plan-version common-lisp:nil :type
    (common-lisp:or scaling-plan-version common-lisp:null))
   (application-sources common-lisp:nil :type
    (common-lisp:or application-sources common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-scaling-plans-request
                    'make-describe-scaling-plans-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-plans-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-plans-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-plan-names))
      (common-lisp:list
       (common-lisp:cons "ScalingPlanNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-plan-version))
      (common-lisp:list
       (common-lisp:cons "ScalingPlanVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-sources))
      (common-lisp:list
       (common-lisp:cons "ApplicationSources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-plans-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-scaling-plans-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-scaling-plans-response-"))
   (scaling-plans common-lisp:nil :type
    (common-lisp:or scaling-plans common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-scaling-plans-response
                    'make-describe-scaling-plans-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-plans-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-plans-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-plans))
      (common-lisp:list
       (common-lisp:cons "ScalingPlans"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-scaling-plans-response))
   common-lisp:nil))
(common-lisp:deftype disable-dynamic-scaling () 'common-lisp:boolean)
(common-lisp:deftype disable-scale-in () 'common-lisp:boolean)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype forecast-data-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-scaling-plan-resource-forecast-data-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-scaling-plan-resource-forecast-data-request-"))
   (scaling-plan-name (common-lisp:error ":scaling-plan-name is required")
    :type (common-lisp:or scaling-plan-name common-lisp:null))
   (scaling-plan-version
    (common-lisp:error ":scaling-plan-version is required") :type
    (common-lisp:or scaling-plan-version common-lisp:null))
   (service-namespace (common-lisp:error ":service-namespace is required")
    :type (common-lisp:or service-namespace common-lisp:null))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or xml-string common-lisp:null))
   (scalable-dimension (common-lisp:error ":scalable-dimension is required")
    :type (common-lisp:or scalable-dimension common-lisp:null))
   (forecast-data-type (common-lisp:error ":forecast-data-type is required")
    :type (common-lisp:or forecast-data-type common-lisp:null))
   (start-time (common-lisp:error ":start-time is required") :type
    (common-lisp:or timestamp-type common-lisp:null))
   (end-time (common-lisp:error ":end-time is required") :type
    (common-lisp:or timestamp-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-scaling-plan-resource-forecast-data-request
                    'make-get-scaling-plan-resource-forecast-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-scaling-plan-resource-forecast-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-scaling-plan-resource-forecast-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-plan-name))
      (common-lisp:list
       (common-lisp:cons "ScalingPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-plan-version))
      (common-lisp:list
       (common-lisp:cons "ScalingPlanVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespace))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalable-dimension))
      (common-lisp:list
       (common-lisp:cons "ScalableDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forecast-data-type))
      (common-lisp:list
       (common-lisp:cons "ForecastDataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-scaling-plan-resource-forecast-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-scaling-plan-resource-forecast-data-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-scaling-plan-resource-forecast-data-response-"))
   (datapoints (common-lisp:error ":datapoints is required") :type
    (common-lisp:or datapoints common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-scaling-plan-resource-forecast-data-response
                    'make-get-scaling-plan-resource-forecast-data-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-scaling-plan-resource-forecast-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-scaling-plan-resource-forecast-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datapoints))
      (common-lisp:list
       (common-lisp:cons "Datapoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-scaling-plan-resource-forecast-data-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-service-exception
     (autoscaling-plans-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-exception
                    'internal-service-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (autoscaling-plans-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-next-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'invalid-next-token-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (autoscaling-plans-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:deftype load-metric-type () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (metric-dimension (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-dimension-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or metric-dimension-name common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or metric-dimension-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metric-dimension 'make-metric-dimension))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-dimension))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-dimension))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-dimension))
   common-lisp:nil))
(common-lisp:deftype metric-dimension-name () 'common-lisp:string)
(common-lisp:deftype metric-dimension-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metric-dimensions ()
   '(trivial-types:proper-list metric-dimension))
 (common-lisp:defun |make-metric-dimensions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-dimension))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric-name () 'common-lisp:string)
(common-lisp:deftype metric-namespace () 'common-lisp:string)
(common-lisp:deftype metric-scale () 'common-lisp:double-float)
(common-lisp:deftype metric-statistic () 'common-lisp:string)
(common-lisp:deftype metric-unit () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition object-not-found-exception
     (autoscaling-plans-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       object-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'object-not-found-exception
                    'object-not-found-exception-message)))
(common-lisp:deftype policy-name () 'common-lisp:string)
(common-lisp:deftype policy-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (predefined-load-metric-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-predefined-load-metric-specification-"))
   (predefined-load-metric-type
    (common-lisp:error ":predefined-load-metric-type is required") :type
    (common-lisp:or load-metric-type common-lisp:null))
   (resource-label common-lisp:nil :type
    (common-lisp:or resource-label common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'predefined-load-metric-specification
                    'make-predefined-load-metric-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          predefined-load-metric-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          predefined-load-metric-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predefined-load-metric-type))
      (common-lisp:list
       (common-lisp:cons "PredefinedLoadMetricType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-label))
      (common-lisp:list
       (common-lisp:cons "ResourceLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          predefined-load-metric-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (predefined-scaling-metric-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-predefined-scaling-metric-specification-"))
   (predefined-scaling-metric-type
    (common-lisp:error ":predefined-scaling-metric-type is required") :type
    (common-lisp:or scaling-metric-type common-lisp:null))
   (resource-label common-lisp:nil :type
    (common-lisp:or resource-label common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'predefined-scaling-metric-specification
                    'make-predefined-scaling-metric-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          predefined-scaling-metric-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          predefined-scaling-metric-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predefined-scaling-metric-type))
      (common-lisp:list
       (common-lisp:cons "PredefinedScalingMetricType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-label))
      (common-lisp:list
       (common-lisp:cons "ResourceLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          predefined-scaling-metric-specification))
   common-lisp:nil))
(common-lisp:deftype predictive-scaling-max-capacity-behavior ()
  'common-lisp:string)
(common-lisp:deftype predictive-scaling-mode () 'common-lisp:string)
(common-lisp:deftype resource-capacity () 'common-lisp:integer)
(common-lisp:deftype resource-id-max-len1600 () 'common-lisp:string)
(common-lisp:deftype resource-label () 'common-lisp:string)
(common-lisp:deftype scalable-dimension () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (scaling-instruction (:copier common-lisp:nil)
      (:conc-name "struct-shape-scaling-instruction-"))
   (service-namespace (common-lisp:error ":service-namespace is required")
    :type (common-lisp:or service-namespace common-lisp:null))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id-max-len1600 common-lisp:null))
   (scalable-dimension (common-lisp:error ":scalable-dimension is required")
    :type (common-lisp:or scalable-dimension common-lisp:null))
   (min-capacity (common-lisp:error ":min-capacity is required") :type
    (common-lisp:or resource-capacity common-lisp:null))
   (max-capacity (common-lisp:error ":max-capacity is required") :type
    (common-lisp:or resource-capacity common-lisp:null))
   (target-tracking-configurations
    (common-lisp:error ":target-tracking-configurations is required") :type
    (common-lisp:or target-tracking-configurations common-lisp:null))
   (predefined-load-metric-specification common-lisp:nil :type
    (common-lisp:or predefined-load-metric-specification common-lisp:null))
   (customized-load-metric-specification common-lisp:nil :type
    (common-lisp:or customized-load-metric-specification common-lisp:null))
   (scheduled-action-buffer-time common-lisp:nil :type
    (common-lisp:or scheduled-action-buffer-time common-lisp:null))
   (predictive-scaling-max-capacity-behavior common-lisp:nil :type
    (common-lisp:or predictive-scaling-max-capacity-behavior common-lisp:null))
   (predictive-scaling-max-capacity-buffer common-lisp:nil :type
    (common-lisp:or resource-capacity common-lisp:null))
   (predictive-scaling-mode common-lisp:nil :type
    (common-lisp:or predictive-scaling-mode common-lisp:null))
   (scaling-policy-update-behavior common-lisp:nil :type
    (common-lisp:or scaling-policy-update-behavior common-lisp:null))
   (disable-dynamic-scaling common-lisp:nil :type
    (common-lisp:or disable-dynamic-scaling common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scaling-instruction 'make-scaling-instruction))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scaling-instruction))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scaling-instruction))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespace))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalable-dimension))
      (common-lisp:list
       (common-lisp:cons "ScalableDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-capacity))
      (common-lisp:list
       (common-lisp:cons "MinCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-capacity))
      (common-lisp:list
       (common-lisp:cons "MaxCapacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-tracking-configurations))
      (common-lisp:list
       (common-lisp:cons "TargetTrackingConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predefined-load-metric-specification))
      (common-lisp:list
       (common-lisp:cons "PredefinedLoadMetricSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customized-load-metric-specification))
      (common-lisp:list
       (common-lisp:cons "CustomizedLoadMetricSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-action-buffer-time))
      (common-lisp:list
       (common-lisp:cons "ScheduledActionBufferTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predictive-scaling-max-capacity-behavior))
      (common-lisp:list
       (common-lisp:cons "PredictiveScalingMaxCapacityBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predictive-scaling-max-capacity-buffer))
      (common-lisp:list
       (common-lisp:cons "PredictiveScalingMaxCapacityBuffer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predictive-scaling-mode))
      (common-lisp:list
       (common-lisp:cons "PredictiveScalingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-policy-update-behavior))
      (common-lisp:list
       (common-lisp:cons "ScalingPolicyUpdateBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-dynamic-scaling))
      (common-lisp:list
       (common-lisp:cons "DisableDynamicScaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scaling-instruction))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scaling-instructions ()
   '(trivial-types:proper-list scaling-instruction))
 (common-lisp:defun |make-scaling-instructions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scaling-instruction))
   aws-sdk/generator/shape::members))
(common-lisp:deftype scaling-metric-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (scaling-plan (:copier common-lisp:nil)
      (:conc-name "struct-shape-scaling-plan-"))
   (scaling-plan-name (common-lisp:error ":scaling-plan-name is required")
    :type (common-lisp:or scaling-plan-name common-lisp:null))
   (scaling-plan-version
    (common-lisp:error ":scaling-plan-version is required") :type
    (common-lisp:or scaling-plan-version common-lisp:null))
   (application-source (common-lisp:error ":application-source is required")
    :type (common-lisp:or application-source common-lisp:null))
   (scaling-instructions
    (common-lisp:error ":scaling-instructions is required") :type
    (common-lisp:or scaling-instructions common-lisp:null))
   (status-code (common-lisp:error ":status-code is required") :type
    (common-lisp:or scaling-plan-status-code common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null))
   (status-start-time common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'scaling-plan 'make-scaling-plan))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scaling-plan))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scaling-plan))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-plan-name))
      (common-lisp:list
       (common-lisp:cons "ScalingPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-plan-version))
      (common-lisp:list
       (common-lisp:cons "ScalingPlanVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-source))
      (common-lisp:list
       (common-lisp:cons "ApplicationSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-instructions))
      (common-lisp:list
       (common-lisp:cons "ScalingInstructions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "StatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-start-time))
      (common-lisp:list
       (common-lisp:cons "StatusStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scaling-plan))
   common-lisp:nil))
(common-lisp:deftype scaling-plan-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype scaling-plan-names ()
   '(trivial-types:proper-list scaling-plan-name))
 (common-lisp:defun |make-scaling-plan-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scaling-plan-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (scaling-plan-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-scaling-plan-resource-"))
   (scaling-plan-name (common-lisp:error ":scaling-plan-name is required")
    :type (common-lisp:or scaling-plan-name common-lisp:null))
   (scaling-plan-version
    (common-lisp:error ":scaling-plan-version is required") :type
    (common-lisp:or scaling-plan-version common-lisp:null))
   (service-namespace (common-lisp:error ":service-namespace is required")
    :type (common-lisp:or service-namespace common-lisp:null))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id-max-len1600 common-lisp:null))
   (scalable-dimension (common-lisp:error ":scalable-dimension is required")
    :type (common-lisp:or scalable-dimension common-lisp:null))
   (scaling-policies common-lisp:nil :type
    (common-lisp:or scaling-policies common-lisp:null))
   (scaling-status-code (common-lisp:error ":scaling-status-code is required")
    :type (common-lisp:or scaling-status-code common-lisp:null))
   (scaling-status-message common-lisp:nil :type
    (common-lisp:or xml-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scaling-plan-resource 'make-scaling-plan-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scaling-plan-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scaling-plan-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-plan-name))
      (common-lisp:list
       (common-lisp:cons "ScalingPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-plan-version))
      (common-lisp:list
       (common-lisp:cons "ScalingPlanVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespace))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scalable-dimension))
      (common-lisp:list
       (common-lisp:cons "ScalableDimension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-policies))
      (common-lisp:list
       (common-lisp:cons "ScalingPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-status-code))
      (common-lisp:list
       (common-lisp:cons "ScalingStatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-status-message))
      (common-lisp:list
       (common-lisp:cons "ScalingStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scaling-plan-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scaling-plan-resources ()
   '(trivial-types:proper-list scaling-plan-resource))
 (common-lisp:defun |make-scaling-plan-resources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scaling-plan-resource))
   aws-sdk/generator/shape::members))
(common-lisp:deftype scaling-plan-status-code () 'common-lisp:string)
(common-lisp:deftype scaling-plan-version () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype scaling-plans ()
   '(trivial-types:proper-list scaling-plan))
 (common-lisp:defun |make-scaling-plans|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scaling-plan))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype scaling-policies ()
   '(trivial-types:proper-list scaling-policy))
 (common-lisp:defun |make-scaling-policies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scaling-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (scaling-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-scaling-policy-"))
   (policy-name (common-lisp:error ":policy-name is required") :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-type (common-lisp:error ":policy-type is required") :type
    (common-lisp:or policy-type common-lisp:null))
   (target-tracking-configuration common-lisp:nil :type
    (common-lisp:or target-tracking-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'scaling-policy 'make-scaling-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scaling-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scaling-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "PolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-tracking-configuration))
      (common-lisp:list
       (common-lisp:cons "TargetTrackingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scaling-policy))
   common-lisp:nil))
(common-lisp:deftype scaling-policy-update-behavior () 'common-lisp:string)
(common-lisp:deftype scaling-status-code () 'common-lisp:string)
(common-lisp:deftype scheduled-action-buffer-time () 'common-lisp:integer)
(common-lisp:deftype service-namespace () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-filter-"))
   (key common-lisp:nil :type
    (common-lisp:or xml-string-max-len128 common-lisp:null))
   (values common-lisp:nil :type (common-lisp:or tag-values common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag-filter 'make-tag-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tag-filters () '(trivial-types:proper-list tag-filter))
 (common-lisp:defun |make-tag-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-values ()
   '(trivial-types:proper-list xml-string-max-len256))
 (common-lisp:defun |make-tag-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xml-string-max-len256))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (target-tracking-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-target-tracking-configuration-"))
   (predefined-scaling-metric-specification common-lisp:nil :type
    (common-lisp:or predefined-scaling-metric-specification common-lisp:null))
   (customized-scaling-metric-specification common-lisp:nil :type
    (common-lisp:or customized-scaling-metric-specification common-lisp:null))
   (target-value (common-lisp:error ":target-value is required") :type
    (common-lisp:or metric-scale common-lisp:null))
   (disable-scale-in common-lisp:nil :type
    (common-lisp:or disable-scale-in common-lisp:null))
   (scale-out-cooldown common-lisp:nil :type
    (common-lisp:or cooldown common-lisp:null))
   (scale-in-cooldown common-lisp:nil :type
    (common-lisp:or cooldown common-lisp:null))
   (estimated-instance-warmup common-lisp:nil :type
    (common-lisp:or cooldown common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'target-tracking-configuration
                    'make-target-tracking-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'predefined-scaling-metric-specification))
      (common-lisp:list
       (common-lisp:cons "PredefinedScalingMetricSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customized-scaling-metric-specification))
      (common-lisp:list
       (common-lisp:cons "CustomizedScalingMetricSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-value))
      (common-lisp:list
       (common-lisp:cons "TargetValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-scale-in))
      (common-lisp:list
       (common-lisp:cons "DisableScaleIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale-out-cooldown))
      (common-lisp:list
       (common-lisp:cons "ScaleOutCooldown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale-in-cooldown))
      (common-lisp:list
       (common-lisp:cons "ScaleInCooldown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-instance-warmup))
      (common-lisp:list
       (common-lisp:cons "EstimatedInstanceWarmup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          target-tracking-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-tracking-configurations ()
   '(trivial-types:proper-list target-tracking-configuration))
 (common-lisp:defun |make-target-tracking-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            target-tracking-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype timestamp-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-scaling-plan-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-scaling-plan-request-"))
   (scaling-plan-name (common-lisp:error ":scaling-plan-name is required")
    :type (common-lisp:or scaling-plan-name common-lisp:null))
   (scaling-plan-version
    (common-lisp:error ":scaling-plan-version is required") :type
    (common-lisp:or scaling-plan-version common-lisp:null))
   (application-source common-lisp:nil :type
    (common-lisp:or application-source common-lisp:null))
   (scaling-instructions common-lisp:nil :type
    (common-lisp:or scaling-instructions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-scaling-plan-request
                    'make-update-scaling-plan-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-scaling-plan-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-scaling-plan-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-plan-name))
      (common-lisp:list
       (common-lisp:cons "ScalingPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-plan-version))
      (common-lisp:list
       (common-lisp:cons "ScalingPlanVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'application-source))
      (common-lisp:list
       (common-lisp:cons "ApplicationSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scaling-instructions))
      (common-lisp:list
       (common-lisp:cons "ScalingInstructions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-scaling-plan-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-scaling-plan-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-scaling-plan-response-")))
 (common-lisp:export
  (common-lisp:list 'update-scaling-plan-response
                    'make-update-scaling-plan-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-scaling-plan-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-scaling-plan-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-scaling-plan-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (autoscaling-plans-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype xml-string () 'common-lisp:string)
(common-lisp:deftype xml-string-max-len128 () 'common-lisp:string)
(common-lisp:deftype xml-string-max-len256 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-scaling-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scaling-plan-name application-source
                     scaling-instructions)
   (common-lisp:declare
    (common-lisp:ignorable scaling-plan-name application-source
     scaling-instructions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-scaling-plan-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'autoscaling-plans-request aws-sdk/generator/operation::input "POST"
        :json "/" "CreateScalingPlan" "2018-01-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-scaling-plan))
(common-lisp:progn
 (common-lisp:defun delete-scaling-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scaling-plan-name scaling-plan-version)
   (common-lisp:declare
    (common-lisp:ignorable scaling-plan-name scaling-plan-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-scaling-plan-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'autoscaling-plans-request aws-sdk/generator/operation::input "POST"
        :json "/" "DeleteScalingPlan" "2018-01-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-scaling-plan))
(common-lisp:progn
 (common-lisp:defun describe-scaling-plan-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scaling-plan-name scaling-plan-version
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable scaling-plan-name scaling-plan-version max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-scaling-plan-resources-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'autoscaling-plans-request aws-sdk/generator/operation::input "POST"
        :json "/" "DescribeScalingPlanResources" "2018-01-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-scaling-plan-resources))
(common-lisp:progn
 (common-lisp:defun describe-scaling-plans
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scaling-plan-names scaling-plan-version
                     application-sources max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable scaling-plan-names scaling-plan-version
     application-sources max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-scaling-plans-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'autoscaling-plans-request aws-sdk/generator/operation::input "POST"
        :json "/" "DescribeScalingPlans" "2018-01-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-scaling-plans))
(common-lisp:progn
 (common-lisp:defun get-scaling-plan-resource-forecast-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scaling-plan-name scaling-plan-version
                     service-namespace resource-id scalable-dimension
                     forecast-data-type start-time end-time)
   (common-lisp:declare
    (common-lisp:ignorable scaling-plan-name scaling-plan-version
     service-namespace resource-id scalable-dimension forecast-data-type
     start-time end-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-scaling-plan-resource-forecast-data-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'autoscaling-plans-request aws-sdk/generator/operation::input "POST"
        :json "/" "GetScalingPlanResourceForecastData" "2018-01-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-scaling-plan-resource-forecast-data))
(common-lisp:progn
 (common-lisp:defun update-scaling-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scaling-plan-name scaling-plan-version
                     application-source scaling-instructions)
   (common-lisp:declare
    (common-lisp:ignorable scaling-plan-name scaling-plan-version
     application-source scaling-instructions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-scaling-plan-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'autoscaling-plans-request aws-sdk/generator/operation::input "POST"
        :json "/" "UpdateScalingPlan" "2018-01-06"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-scaling-plan))
