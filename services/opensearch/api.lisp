;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/opensearch/api
  (:use)
  (:nicknames #:aws/opensearch)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/opensearch/api)
(common-lisp:progn
 (common-lisp:defclass opensearch-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "opensearch" :protocol
                        :rest-json))
 (common-lisp:export 'opensearch-request))
(common-lisp:progn
 (common-lisp:define-condition opensearch-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'opensearch-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("BaseException" . base-exception)
    ("ConflictException" . conflict-exception)
    ("DisabledOperationException" . disabled-operation-exception)
    ("InternalException" . internal-exception)
    ("InvalidPaginationTokenException" . invalid-pagination-token-exception)
    ("InvalidTypeException" . invalid-type-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceAlreadyExistsException" . resource-already-exists-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("SlotNotAvailableException" . slot-not-available-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype awsaccount () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass awsdomain-information common-lisp:nil
                       ((region :initarg :region :type
                         (common-lisp:or region common-lisp:null) :accessor
                         %awsdomain-information-region :initform
                         common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %awsdomain-information-domain-name :initform
                         (common-lisp:error ":domain-name is required"))
                        (owner-id :initarg :owner-id :type
                         (common-lisp:or owner-id common-lisp:null) :accessor
                         %awsdomain-information-owner-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'awsdomain-information 'make-awsdomain-information))
 (common-lisp:defun make-awsdomain-information
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key region domain-name owner-id)
   (common-lisp:apply #'common-lisp:make-instance 'awsdomain-information
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          awsdomain-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          awsdomain-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          awsdomain-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-inbound-connection-request common-lisp:nil
                       ((connection-id :initarg :connection-id :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         %accept-inbound-connection-request-connection-id
                         :initform
                         (common-lisp:error ":connection-id is required"))))
 (common-lisp:export
  (common-lisp:list 'accept-inbound-connection-request
                    'make-accept-inbound-connection-request))
 (common-lisp:defun make-accept-inbound-connection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-inbound-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-inbound-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-inbound-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-inbound-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass accept-inbound-connection-response common-lisp:nil
                       ((connection :initarg :connection :type
                         (common-lisp:or inbound-connection common-lisp:null)
                         :accessor
                         %accept-inbound-connection-response-connection
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'accept-inbound-connection-response
                    'make-accept-inbound-connection-response))
 (common-lisp:defun make-accept-inbound-connection-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection)
   (common-lisp:apply #'common-lisp:make-instance
                      'accept-inbound-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-inbound-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-inbound-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection))
      (common-lisp:list
       (common-lisp:cons "Connection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-inbound-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (opensearch-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'access-denied-exception)))
(common-lisp:progn
 (common-lisp:defclass access-policies-status common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor %access-policies-status-status :initform
                         (common-lisp:error ":status is required"))
                        (options :initarg :options :type
                         (common-lisp:or policy-document common-lisp:null)
                         :accessor %access-policies-status-options :initform
                         (common-lisp:error ":options is required"))))
 (common-lisp:export
  (common-lisp:list 'access-policies-status 'make-access-policies-status))
 (common-lisp:defun make-access-policies-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status options)
   (common-lisp:apply #'common-lisp:make-instance 'access-policies-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-policies-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-policies-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-policies-status))
   common-lisp:nil))
(common-lisp:deftype action-severity () 'common-lisp:string)
(common-lisp:deftype action-status () 'common-lisp:string)
(common-lisp:deftype action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass add-tags-request common-lisp:nil
                       ((tag-list :initarg :tag-list :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %add-tags-request-tag-list :initform
                         (common-lisp:error ":tag-list is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %add-tags-request-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'add-tags-request 'make-add-tags-request))
 (common-lisp:defun make-add-tags-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-list arn)
   (common-lisp:apply #'common-lisp:make-instance 'add-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass additional-limit common-lisp:nil
                       ((limit-values :initarg :limit-values :type
                         (common-lisp:or limit-value-list common-lisp:null)
                         :accessor %additional-limit-limit-values :initform
                         common-lisp:nil)
                        (limit-name :initarg :limit-name :type
                         (common-lisp:or limit-name common-lisp:null) :accessor
                         %additional-limit-limit-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'additional-limit 'make-additional-limit))
 (common-lisp:defun make-additional-limit
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit-values limit-name)
   (common-lisp:apply #'common-lisp:make-instance 'additional-limit
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input additional-limit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input additional-limit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit-name))
      (common-lisp:list
       (common-lisp:cons "LimitName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit-values))
      (common-lisp:list
       (common-lisp:cons "LimitValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input additional-limit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype additional-limit-list ()
   '(trivial-types:proper-list additional-limit))
 (common-lisp:defun |make-additional-limit-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list additional-limit))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype advanced-options () 'common-lisp:hash-table)
 (common-lisp:defun |make-advanced-options|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass advanced-options-status common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor %advanced-options-status-status :initform
                         (common-lisp:error ":status is required"))
                        (options :initarg :options :type
                         (common-lisp:or advanced-options common-lisp:null)
                         :accessor %advanced-options-status-options :initform
                         (common-lisp:error ":options is required"))))
 (common-lisp:export
  (common-lisp:list 'advanced-options-status 'make-advanced-options-status))
 (common-lisp:defun make-advanced-options-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status options)
   (common-lisp:apply #'common-lisp:make-instance 'advanced-options-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          advanced-options-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          advanced-options-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          advanced-options-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass advanced-security-options common-lisp:nil
                       ((anonymous-auth-enabled :initarg
                         :anonymous-auth-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %advanced-security-options-anonymous-auth-enabled
                         :initform common-lisp:nil)
                        (anonymous-auth-disable-date :initarg
                         :anonymous-auth-disable-date :type
                         (common-lisp:or disable-timestamp common-lisp:null)
                         :accessor
                         %advanced-security-options-anonymous-auth-disable-date
                         :initform common-lisp:nil)
                        (samloptions :initarg :samloptions :type
                         (common-lisp:or samloptions-output common-lisp:null)
                         :accessor %advanced-security-options-samloptions
                         :initform common-lisp:nil)
                        (internal-user-database-enabled :initarg
                         :internal-user-database-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %advanced-security-options-internal-user-database-enabled
                         :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %advanced-security-options-enabled :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'advanced-security-options
                    'make-advanced-security-options))
 (common-lisp:defun make-advanced-security-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key anonymous-auth-enabled
                     anonymous-auth-disable-date samloptions
                     internal-user-database-enabled enabled)
   (common-lisp:apply #'common-lisp:make-instance 'advanced-security-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          advanced-security-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          advanced-security-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'internal-user-database-enabled))
      (common-lisp:list
       (common-lisp:cons "InternalUserDatabaseEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samloptions))
      (common-lisp:list
       (common-lisp:cons "SAMLOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anonymous-auth-disable-date))
      (common-lisp:list
       (common-lisp:cons "AnonymousAuthDisableDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anonymous-auth-enabled))
      (common-lisp:list
       (common-lisp:cons "AnonymousAuthEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          advanced-security-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass advanced-security-options-input common-lisp:nil
                       ((anonymous-auth-enabled :initarg
                         :anonymous-auth-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %advanced-security-options-input-anonymous-auth-enabled
                         :initform common-lisp:nil)
                        (samloptions :initarg :samloptions :type
                         (common-lisp:or samloptions-input common-lisp:null)
                         :accessor %advanced-security-options-input-samloptions
                         :initform common-lisp:nil)
                        (master-user-options :initarg :master-user-options
                         :type
                         (common-lisp:or master-user-options common-lisp:null)
                         :accessor
                         %advanced-security-options-input-master-user-options
                         :initform common-lisp:nil)
                        (internal-user-database-enabled :initarg
                         :internal-user-database-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %advanced-security-options-input-internal-user-database-enabled
                         :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %advanced-security-options-input-enabled :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'advanced-security-options-input
                    'make-advanced-security-options-input))
 (common-lisp:defun make-advanced-security-options-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key anonymous-auth-enabled samloptions
                     master-user-options internal-user-database-enabled
                     enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'advanced-security-options-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          advanced-security-options-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          advanced-security-options-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'internal-user-database-enabled))
      (common-lisp:list
       (common-lisp:cons "InternalUserDatabaseEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-user-options))
      (common-lisp:list
       (common-lisp:cons "MasterUserOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samloptions))
      (common-lisp:list
       (common-lisp:cons "SAMLOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'anonymous-auth-enabled))
      (common-lisp:list
       (common-lisp:cons "AnonymousAuthEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          advanced-security-options-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass advanced-security-options-status common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor %advanced-security-options-status-status
                         :initform (common-lisp:error ":status is required"))
                        (options :initarg :options :type
                         (common-lisp:or advanced-security-options
                                         common-lisp:null)
                         :accessor %advanced-security-options-status-options
                         :initform
                         (common-lisp:error ":options is required"))))
 (common-lisp:export
  (common-lisp:list 'advanced-security-options-status
                    'make-advanced-security-options-status))
 (common-lisp:defun make-advanced-security-options-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status options)
   (common-lisp:apply #'common-lisp:make-instance
                      'advanced-security-options-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          advanced-security-options-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          advanced-security-options-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          advanced-security-options-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-package-request common-lisp:nil
                       ((domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %associate-package-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))
                        (package-id :initarg :package-id :type
                         (common-lisp:or package-id common-lisp:null) :accessor
                         %associate-package-request-package-id :initform
                         (common-lisp:error ":package-id is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-package-request
                    'make-associate-package-request))
 (common-lisp:defun make-associate-package-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name package-id)
   (common-lisp:apply #'common-lisp:make-instance 'associate-package-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-package-response common-lisp:nil
                       ((domain-package-details :initarg
                         :domain-package-details :type
                         (common-lisp:or domain-package-details
                                         common-lisp:null)
                         :accessor
                         %associate-package-response-domain-package-details
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'associate-package-response
                    'make-associate-package-response))
 (common-lisp:defun make-associate-package-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-package-details)
   (common-lisp:apply #'common-lisp:make-instance 'associate-package-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-package-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-package-details))
      (common-lisp:list
       (common-lisp:cons "DomainPackageDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-package-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass authorize-vpc-endpoint-access-request common-lisp:nil
                       ((account :initarg :account :type
                         (common-lisp:or awsaccount common-lisp:null) :accessor
                         %authorize-vpc-endpoint-access-request-account
                         :initform (common-lisp:error ":account is required"))
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %authorize-vpc-endpoint-access-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'authorize-vpc-endpoint-access-request
                    'make-authorize-vpc-endpoint-access-request))
 (common-lisp:defun make-authorize-vpc-endpoint-access-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'authorize-vpc-endpoint-access-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorize-vpc-endpoint-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorize-vpc-endpoint-access-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorize-vpc-endpoint-access-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass authorize-vpc-endpoint-access-response common-lisp:nil
                       ((authorized-principal :initarg :authorized-principal
                         :type
                         (common-lisp:or authorized-principal common-lisp:null)
                         :accessor
                         %authorize-vpc-endpoint-access-response-authorized-principal
                         :initform
                         (common-lisp:error
                          ":authorized-principal is required"))))
 (common-lisp:export
  (common-lisp:list 'authorize-vpc-endpoint-access-response
                    'make-authorize-vpc-endpoint-access-response))
 (common-lisp:defun make-authorize-vpc-endpoint-access-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key authorized-principal)
   (common-lisp:apply #'common-lisp:make-instance
                      'authorize-vpc-endpoint-access-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authorize-vpc-endpoint-access-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authorize-vpc-endpoint-access-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-principal))
      (common-lisp:list
       (common-lisp:cons "AuthorizedPrincipal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authorize-vpc-endpoint-access-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass authorized-principal common-lisp:nil
                       ((principal :initarg :principal :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %authorized-principal-principal :initform
                         common-lisp:nil)
                        (principal-type :initarg :principal-type :type
                         (common-lisp:or principal-type common-lisp:null)
                         :accessor %authorized-principal-principal-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'authorized-principal 'make-authorized-principal))
 (common-lisp:defun make-authorized-principal
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key principal principal-type)
   (common-lisp:apply #'common-lisp:make-instance 'authorized-principal
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input authorized-principal))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input authorized-principal))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-type))
      (common-lisp:list
       (common-lisp:cons "PrincipalType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal))
      (common-lisp:list
       (common-lisp:cons "Principal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input authorized-principal))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype authorized-principal-list ()
   '(trivial-types:proper-list authorized-principal))
 (common-lisp:defun |make-authorized-principal-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list authorized-principal))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass auto-tune common-lisp:nil
                       ((auto-tune-details :initarg :auto-tune-details :type
                         (common-lisp:or auto-tune-details common-lisp:null)
                         :accessor %auto-tune-auto-tune-details :initform
                         common-lisp:nil)
                        (auto-tune-type :initarg :auto-tune-type :type
                         (common-lisp:or auto-tune-type common-lisp:null)
                         :accessor %auto-tune-auto-tune-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'auto-tune 'make-auto-tune))
 (common-lisp:defun make-auto-tune
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-tune-details auto-tune-type)
   (common-lisp:apply #'common-lisp:make-instance 'auto-tune
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-tune))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-tune))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-tune-type))
      (common-lisp:list
       (common-lisp:cons "AutoTuneType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-tune-details))
      (common-lisp:list
       (common-lisp:cons "AutoTuneDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-tune))
   common-lisp:nil))
(common-lisp:deftype auto-tune-date () 'common-lisp:string)
(common-lisp:deftype auto-tune-desired-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass auto-tune-details common-lisp:nil
                       ((scheduled-auto-tune-details :initarg
                         :scheduled-auto-tune-details :type
                         (common-lisp:or scheduled-auto-tune-details
                                         common-lisp:null)
                         :accessor
                         %auto-tune-details-scheduled-auto-tune-details
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'auto-tune-details 'make-auto-tune-details))
 (common-lisp:defun make-auto-tune-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scheduled-auto-tune-details)
   (common-lisp:apply #'common-lisp:make-instance 'auto-tune-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-tune-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-tune-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-auto-tune-details))
      (common-lisp:list
       (common-lisp:cons "ScheduledAutoTuneDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-tune-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auto-tune-list () '(trivial-types:proper-list auto-tune))
 (common-lisp:defun |make-auto-tune-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auto-tune))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass auto-tune-maintenance-schedule common-lisp:nil
                       ((cron-expression-for-recurrence :initarg
                         :cron-expression-for-recurrence :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %auto-tune-maintenance-schedule-cron-expression-for-recurrence
                         :initform common-lisp:nil)
                        (duration :initarg :duration :type
                         (common-lisp:or duration common-lisp:null) :accessor
                         %auto-tune-maintenance-schedule-duration :initform
                         common-lisp:nil)
                        (start-at :initarg :start-at :type
                         (common-lisp:or start-at common-lisp:null) :accessor
                         %auto-tune-maintenance-schedule-start-at :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'auto-tune-maintenance-schedule
                    'make-auto-tune-maintenance-schedule))
 (common-lisp:defun make-auto-tune-maintenance-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cron-expression-for-recurrence duration
                     start-at)
   (common-lisp:apply #'common-lisp:make-instance
                      'auto-tune-maintenance-schedule
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-tune-maintenance-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-tune-maintenance-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-at))
      (common-lisp:list
       (common-lisp:cons "StartAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cron-expression-for-recurrence))
      (common-lisp:list
       (common-lisp:cons "CronExpressionForRecurrence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-tune-maintenance-schedule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auto-tune-maintenance-schedule-list ()
   '(trivial-types:proper-list auto-tune-maintenance-schedule))
 (common-lisp:defun |make-auto-tune-maintenance-schedule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            auto-tune-maintenance-schedule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass auto-tune-options common-lisp:nil
                       ((use-off-peak-window :initarg :use-off-peak-window
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor %auto-tune-options-use-off-peak-window
                         :initform common-lisp:nil)
                        (maintenance-schedules :initarg :maintenance-schedules
                         :type
                         (common-lisp:or auto-tune-maintenance-schedule-list
                                         common-lisp:null)
                         :accessor %auto-tune-options-maintenance-schedules
                         :initform common-lisp:nil)
                        (rollback-on-disable :initarg :rollback-on-disable
                         :type
                         (common-lisp:or rollback-on-disable common-lisp:null)
                         :accessor %auto-tune-options-rollback-on-disable
                         :initform common-lisp:nil)
                        (desired-state :initarg :desired-state :type
                         (common-lisp:or auto-tune-desired-state
                                         common-lisp:null)
                         :accessor %auto-tune-options-desired-state :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'auto-tune-options 'make-auto-tune-options))
 (common-lisp:defun make-auto-tune-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key use-off-peak-window maintenance-schedules
                     rollback-on-disable desired-state)
   (common-lisp:apply #'common-lisp:make-instance 'auto-tune-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-tune-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-tune-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "DesiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollback-on-disable))
      (common-lisp:list
       (common-lisp:cons "RollbackOnDisable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-schedules))
      (common-lisp:list
       (common-lisp:cons "MaintenanceSchedules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-off-peak-window))
      (common-lisp:list
       (common-lisp:cons "UseOffPeakWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-tune-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass auto-tune-options-input common-lisp:nil
                       ((use-off-peak-window :initarg :use-off-peak-window
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor %auto-tune-options-input-use-off-peak-window
                         :initform common-lisp:nil)
                        (maintenance-schedules :initarg :maintenance-schedules
                         :type
                         (common-lisp:or auto-tune-maintenance-schedule-list
                                         common-lisp:null)
                         :accessor
                         %auto-tune-options-input-maintenance-schedules
                         :initform common-lisp:nil)
                        (desired-state :initarg :desired-state :type
                         (common-lisp:or auto-tune-desired-state
                                         common-lisp:null)
                         :accessor %auto-tune-options-input-desired-state
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'auto-tune-options-input 'make-auto-tune-options-input))
 (common-lisp:defun make-auto-tune-options-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key use-off-peak-window maintenance-schedules
                     desired-state)
   (common-lisp:apply #'common-lisp:make-instance 'auto-tune-options-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-tune-options-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-tune-options-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "DesiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-schedules))
      (common-lisp:list
       (common-lisp:cons "MaintenanceSchedules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-off-peak-window))
      (common-lisp:list
       (common-lisp:cons "UseOffPeakWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-tune-options-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass auto-tune-options-output common-lisp:nil
                       ((use-off-peak-window :initarg :use-off-peak-window
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %auto-tune-options-output-use-off-peak-window
                         :initform common-lisp:nil)
                        (error-message :initarg :error-message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %auto-tune-options-output-error-message :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or auto-tune-state common-lisp:null)
                         :accessor %auto-tune-options-output-state :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'auto-tune-options-output 'make-auto-tune-options-output))
 (common-lisp:defun make-auto-tune-options-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key use-off-peak-window error-message state)
   (common-lisp:apply #'common-lisp:make-instance 'auto-tune-options-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-tune-options-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-tune-options-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-off-peak-window))
      (common-lisp:list
       (common-lisp:cons "UseOffPeakWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-tune-options-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass auto-tune-options-status common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or auto-tune-status common-lisp:null)
                         :accessor %auto-tune-options-status-status :initform
                         common-lisp:nil)
                        (options :initarg :options :type
                         (common-lisp:or auto-tune-options common-lisp:null)
                         :accessor %auto-tune-options-status-options :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'auto-tune-options-status 'make-auto-tune-options-status))
 (common-lisp:defun make-auto-tune-options-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status options)
   (common-lisp:apply #'common-lisp:make-instance 'auto-tune-options-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-tune-options-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-tune-options-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-tune-options-status))
   common-lisp:nil))
(common-lisp:deftype auto-tune-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass auto-tune-status common-lisp:nil
                       ((pending-deletion :initarg :pending-deletion :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %auto-tune-status-pending-deletion :initform
                         common-lisp:nil)
                        (error-message :initarg :error-message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %auto-tune-status-error-message :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or auto-tune-state common-lisp:null)
                         :accessor %auto-tune-status-state :initform
                         (common-lisp:error ":state is required"))
                        (update-version :initarg :update-version :type
                         (common-lisp:or uint-value common-lisp:null) :accessor
                         %auto-tune-status-update-version :initform
                         common-lisp:nil)
                        (update-date :initarg :update-date :type
                         (common-lisp:or update-timestamp common-lisp:null)
                         :accessor %auto-tune-status-update-date :initform
                         (common-lisp:error ":update-date is required"))
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or update-timestamp common-lisp:null)
                         :accessor %auto-tune-status-creation-date :initform
                         (common-lisp:error ":creation-date is required"))))
 (common-lisp:export
  (common-lisp:list 'auto-tune-status 'make-auto-tune-status))
 (common-lisp:defun make-auto-tune-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pending-deletion error-message state
                     update-version update-date creation-date)
   (common-lisp:apply #'common-lisp:make-instance 'auto-tune-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-tune-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-tune-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date))
      (common-lisp:list
       (common-lisp:cons "UpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-version))
      (common-lisp:list
       (common-lisp:cons "UpdateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-deletion))
      (common-lisp:list
       (common-lisp:cons "PendingDeletion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-tune-status))
   common-lisp:nil))
(common-lisp:deftype auto-tune-type () 'common-lisp:string)
(common-lisp:deftype backend-role () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition base-exception
     (opensearch-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       base-exception-message)))
 (common-lisp:export
  (common-lisp:list 'base-exception 'base-exception-message)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass cancel-service-software-update-request common-lisp:nil
                       ((domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %cancel-service-software-update-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-service-software-update-request
                    'make-cancel-service-software-update-request))
 (common-lisp:defun make-cancel-service-software-update-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-service-software-update-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-software-update-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-software-update-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-software-update-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-service-software-update-response common-lisp:nil
                       ((service-software-options :initarg
                         :service-software-options :type
                         (common-lisp:or service-software-options
                                         common-lisp:null)
                         :accessor
                         %cancel-service-software-update-response-service-software-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cancel-service-software-update-response
                    'make-cancel-service-software-update-response))
 (common-lisp:defun make-cancel-service-software-update-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-software-options)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-service-software-update-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-software-update-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-software-update-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-software-options))
      (common-lisp:list
       (common-lisp:cons "ServiceSoftwareOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-service-software-update-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass change-progress-details common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or message common-lisp:null) :accessor
                         %change-progress-details-message :initform
                         common-lisp:nil)
                        (change-id :initarg :change-id :type
                         (common-lisp:or guid common-lisp:null) :accessor
                         %change-progress-details-change-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'change-progress-details 'make-change-progress-details))
 (common-lisp:defun make-change-progress-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message change-id)
   (common-lisp:apply #'common-lisp:make-instance 'change-progress-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          change-progress-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          change-progress-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-id))
      (common-lisp:list
       (common-lisp:cons "ChangeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          change-progress-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass change-progress-stage common-lisp:nil
                       ((last-updated :initarg :last-updated :type
                         (common-lisp:or last-updated common-lisp:null)
                         :accessor %change-progress-stage-last-updated
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %change-progress-stage-description :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or change-progress-stage-status
                                         common-lisp:null)
                         :accessor %change-progress-stage-status :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or change-progress-stage-name
                                         common-lisp:null)
                         :accessor %change-progress-stage-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'change-progress-stage 'make-change-progress-stage))
 (common-lisp:defun make-change-progress-stage
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-updated description status name)
   (common-lisp:apply #'common-lisp:make-instance 'change-progress-stage
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          change-progress-stage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          change-progress-stage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "LastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          change-progress-stage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype change-progress-stage-list ()
   '(trivial-types:proper-list change-progress-stage))
 (common-lisp:defun |make-change-progress-stage-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list change-progress-stage))
   aws-sdk/generator/shape::members))
(common-lisp:deftype change-progress-stage-name () 'common-lisp:string)
(common-lisp:deftype change-progress-stage-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass change-progress-status-details common-lisp:nil
                       ((change-progress-stages :initarg
                         :change-progress-stages :type
                         (common-lisp:or change-progress-stage-list
                                         common-lisp:null)
                         :accessor
                         %change-progress-status-details-change-progress-stages
                         :initform common-lisp:nil)
                        (total-number-of-stages :initarg
                         :total-number-of-stages :type
                         (common-lisp:or total-number-of-stages
                                         common-lisp:null)
                         :accessor
                         %change-progress-status-details-total-number-of-stages
                         :initform common-lisp:nil)
                        (completed-properties :initarg :completed-properties
                         :type (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %change-progress-status-details-completed-properties
                         :initform common-lisp:nil)
                        (pending-properties :initarg :pending-properties :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %change-progress-status-details-pending-properties
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or overall-change-status
                                         common-lisp:null)
                         :accessor %change-progress-status-details-status
                         :initform common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or update-timestamp common-lisp:null)
                         :accessor %change-progress-status-details-start-time
                         :initform common-lisp:nil)
                        (change-id :initarg :change-id :type
                         (common-lisp:or guid common-lisp:null) :accessor
                         %change-progress-status-details-change-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'change-progress-status-details
                    'make-change-progress-status-details))
 (common-lisp:defun make-change-progress-status-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key change-progress-stages
                     total-number-of-stages completed-properties
                     pending-properties status start-time change-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'change-progress-status-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          change-progress-status-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          change-progress-status-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-id))
      (common-lisp:list
       (common-lisp:cons "ChangeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-properties))
      (common-lisp:list
       (common-lisp:cons "PendingProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'completed-properties))
      (common-lisp:list
       (common-lisp:cons "CompletedProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-number-of-stages))
      (common-lisp:list
       (common-lisp:cons "TotalNumberOfStages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'change-progress-stages))
      (common-lisp:list
       (common-lisp:cons "ChangeProgressStages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          change-progress-status-details))
   common-lisp:nil))
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:deftype cloud-watch-logs-log-group-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cluster-config common-lisp:nil
                       ((cold-storage-options :initarg :cold-storage-options
                         :type
                         (common-lisp:or cold-storage-options common-lisp:null)
                         :accessor %cluster-config-cold-storage-options
                         :initform common-lisp:nil)
                        (warm-count :initarg :warm-count :type
                         (common-lisp:or integer-class common-lisp:null)
                         :accessor %cluster-config-warm-count :initform
                         common-lisp:nil)
                        (warm-type :initarg :warm-type :type
                         (common-lisp:or
                          open-search-warm-partition-instance-type
                          common-lisp:null)
                         :accessor %cluster-config-warm-type :initform
                         common-lisp:nil)
                        (warm-enabled :initarg :warm-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %cluster-config-warm-enabled :initform
                         common-lisp:nil)
                        (dedicated-master-count :initarg
                         :dedicated-master-count :type
                         (common-lisp:or integer-class common-lisp:null)
                         :accessor %cluster-config-dedicated-master-count
                         :initform common-lisp:nil)
                        (dedicated-master-type :initarg :dedicated-master-type
                         :type
                         (common-lisp:or open-search-partition-instance-type
                                         common-lisp:null)
                         :accessor %cluster-config-dedicated-master-type
                         :initform common-lisp:nil)
                        (zone-awareness-config :initarg :zone-awareness-config
                         :type
                         (common-lisp:or zone-awareness-config
                                         common-lisp:null)
                         :accessor %cluster-config-zone-awareness-config
                         :initform common-lisp:nil)
                        (zone-awareness-enabled :initarg
                         :zone-awareness-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %cluster-config-zone-awareness-enabled :initform
                         common-lisp:nil)
                        (dedicated-master-enabled :initarg
                         :dedicated-master-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %cluster-config-dedicated-master-enabled :initform
                         common-lisp:nil)
                        (instance-count :initarg :instance-count :type
                         (common-lisp:or integer-class common-lisp:null)
                         :accessor %cluster-config-instance-count :initform
                         common-lisp:nil)
                        (instance-type :initarg :instance-type :type
                         (common-lisp:or open-search-partition-instance-type
                                         common-lisp:null)
                         :accessor %cluster-config-instance-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'cluster-config 'make-cluster-config))
 (common-lisp:defun make-cluster-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cold-storage-options warm-count warm-type
                     warm-enabled dedicated-master-count dedicated-master-type
                     zone-awareness-config zone-awareness-enabled
                     dedicated-master-enabled instance-count instance-type)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cluster-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cluster-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-master-enabled))
      (common-lisp:list
       (common-lisp:cons "DedicatedMasterEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zone-awareness-enabled))
      (common-lisp:list
       (common-lisp:cons "ZoneAwarenessEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'zone-awareness-config))
      (common-lisp:list
       (common-lisp:cons "ZoneAwarenessConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-master-type))
      (common-lisp:list
       (common-lisp:cons "DedicatedMasterType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dedicated-master-count))
      (common-lisp:list
       (common-lisp:cons "DedicatedMasterCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warm-enabled))
      (common-lisp:list
       (common-lisp:cons "WarmEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warm-type))
      (common-lisp:list
       (common-lisp:cons "WarmType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warm-count))
      (common-lisp:list
       (common-lisp:cons "WarmCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cold-storage-options))
      (common-lisp:list
       (common-lisp:cons "ColdStorageOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cluster-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cluster-config-status common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor %cluster-config-status-status :initform
                         (common-lisp:error ":status is required"))
                        (options :initarg :options :type
                         (common-lisp:or cluster-config common-lisp:null)
                         :accessor %cluster-config-status-options :initform
                         (common-lisp:error ":options is required"))))
 (common-lisp:export
  (common-lisp:list 'cluster-config-status 'make-cluster-config-status))
 (common-lisp:defun make-cluster-config-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status options)
   (common-lisp:apply #'common-lisp:make-instance 'cluster-config-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cluster-config-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cluster-config-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cluster-config-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cognito-options common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %cognito-options-role-arn :initform common-lisp:nil)
                        (identity-pool-id :initarg :identity-pool-id :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor %cognito-options-identity-pool-id :initform
                         common-lisp:nil)
                        (user-pool-id :initarg :user-pool-id :type
                         (common-lisp:or user-pool-id common-lisp:null)
                         :accessor %cognito-options-user-pool-id :initform
                         common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %cognito-options-enabled :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'cognito-options 'make-cognito-options))
 (common-lisp:defun make-cognito-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn identity-pool-id user-pool-id
                     enabled)
   (common-lisp:apply #'common-lisp:make-instance 'cognito-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cognito-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cognito-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool-id))
      (common-lisp:list
       (common-lisp:cons "UserPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cognito-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cognito-options-status common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor %cognito-options-status-status :initform
                         (common-lisp:error ":status is required"))
                        (options :initarg :options :type
                         (common-lisp:or cognito-options common-lisp:null)
                         :accessor %cognito-options-status-options :initform
                         (common-lisp:error ":options is required"))))
 (common-lisp:export
  (common-lisp:list 'cognito-options-status 'make-cognito-options-status))
 (common-lisp:defun make-cognito-options-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status options)
   (common-lisp:apply #'common-lisp:make-instance 'cognito-options-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cognito-options-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cognito-options-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cognito-options-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cold-storage-options common-lisp:nil
                       ((enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %cold-storage-options-enabled :initform
                         (common-lisp:error ":enabled is required"))))
 (common-lisp:export
  (common-lisp:list 'cold-storage-options 'make-cold-storage-options))
 (common-lisp:defun make-cold-storage-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled)
   (common-lisp:apply #'common-lisp:make-instance 'cold-storage-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cold-storage-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cold-storage-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cold-storage-options))
   common-lisp:nil))
(common-lisp:deftype commit-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype compatible-versions-list ()
   '(trivial-types:proper-list compatible-versions-map))
 (common-lisp:defun |make-compatible-versions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compatible-versions-map))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass compatible-versions-map common-lisp:nil
                       ((target-versions :initarg :target-versions :type
                         (common-lisp:or version-list common-lisp:null)
                         :accessor %compatible-versions-map-target-versions
                         :initform common-lisp:nil)
                        (source-version :initarg :source-version :type
                         (common-lisp:or version-string common-lisp:null)
                         :accessor %compatible-versions-map-source-version
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'compatible-versions-map 'make-compatible-versions-map))
 (common-lisp:defun make-compatible-versions-map
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key target-versions source-version)
   (common-lisp:apply #'common-lisp:make-instance 'compatible-versions-map
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compatible-versions-map))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compatible-versions-map))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-version))
      (common-lisp:list
       (common-lisp:cons "SourceVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-versions))
      (common-lisp:list
       (common-lisp:cons "TargetVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compatible-versions-map))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (opensearch-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'conflict-exception)))
(common-lisp:deftype connection-alias () 'common-lisp:string)
(common-lisp:deftype connection-id () 'common-lisp:string)
(common-lisp:deftype connection-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass connection-properties common-lisp:nil
                       ((endpoint :initarg :endpoint :type
                         (common-lisp:or endpoint common-lisp:null) :accessor
                         %connection-properties-endpoint :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'connection-properties 'make-connection-properties))
 (common-lisp:defun make-connection-properties
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key endpoint)
   (common-lisp:apply #'common-lisp:make-instance 'connection-properties
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connection-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connection-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connection-properties))
   common-lisp:nil))
(common-lisp:deftype connection-status-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-domain-request common-lisp:nil
                       ((software-update-options :initarg
                         :software-update-options :type
                         (common-lisp:or software-update-options
                                         common-lisp:null)
                         :accessor
                         %create-domain-request-software-update-options
                         :initform common-lisp:nil)
                        (off-peak-window-options :initarg
                         :off-peak-window-options :type
                         (common-lisp:or off-peak-window-options
                                         common-lisp:null)
                         :accessor
                         %create-domain-request-off-peak-window-options
                         :initform common-lisp:nil)
                        (auto-tune-options :initarg :auto-tune-options :type
                         (common-lisp:or auto-tune-options-input
                                         common-lisp:null)
                         :accessor %create-domain-request-auto-tune-options
                         :initform common-lisp:nil)
                        (tag-list :initarg :tag-list :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-domain-request-tag-list :initform
                         common-lisp:nil)
                        (advanced-security-options :initarg
                         :advanced-security-options :type
                         (common-lisp:or advanced-security-options-input
                                         common-lisp:null)
                         :accessor
                         %create-domain-request-advanced-security-options
                         :initform common-lisp:nil)
                        (domain-endpoint-options :initarg
                         :domain-endpoint-options :type
                         (common-lisp:or domain-endpoint-options
                                         common-lisp:null)
                         :accessor
                         %create-domain-request-domain-endpoint-options
                         :initform common-lisp:nil)
                        (log-publishing-options :initarg
                         :log-publishing-options :type
                         (common-lisp:or log-publishing-options
                                         common-lisp:null)
                         :accessor
                         %create-domain-request-log-publishing-options
                         :initform common-lisp:nil)
                        (advanced-options :initarg :advanced-options :type
                         (common-lisp:or advanced-options common-lisp:null)
                         :accessor %create-domain-request-advanced-options
                         :initform common-lisp:nil)
                        (node-to-node-encryption-options :initarg
                         :node-to-node-encryption-options :type
                         (common-lisp:or node-to-node-encryption-options
                                         common-lisp:null)
                         :accessor
                         %create-domain-request-node-to-node-encryption-options
                         :initform common-lisp:nil)
                        (encryption-at-rest-options :initarg
                         :encryption-at-rest-options :type
                         (common-lisp:or encryption-at-rest-options
                                         common-lisp:null)
                         :accessor
                         %create-domain-request-encryption-at-rest-options
                         :initform common-lisp:nil)
                        (cognito-options :initarg :cognito-options :type
                         (common-lisp:or cognito-options common-lisp:null)
                         :accessor %create-domain-request-cognito-options
                         :initform common-lisp:nil)
                        (vpcoptions :initarg :vpcoptions :type
                         (common-lisp:or vpcoptions common-lisp:null) :accessor
                         %create-domain-request-vpcoptions :initform
                         common-lisp:nil)
                        (snapshot-options :initarg :snapshot-options :type
                         (common-lisp:or snapshot-options common-lisp:null)
                         :accessor %create-domain-request-snapshot-options
                         :initform common-lisp:nil)
                        (access-policies :initarg :access-policies :type
                         (common-lisp:or policy-document common-lisp:null)
                         :accessor %create-domain-request-access-policies
                         :initform common-lisp:nil)
                        (ebsoptions :initarg :ebsoptions :type
                         (common-lisp:or ebsoptions common-lisp:null) :accessor
                         %create-domain-request-ebsoptions :initform
                         common-lisp:nil)
                        (cluster-config :initarg :cluster-config :type
                         (common-lisp:or cluster-config common-lisp:null)
                         :accessor %create-domain-request-cluster-config
                         :initform common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or version-string common-lisp:null)
                         :accessor %create-domain-request-engine-version
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %create-domain-request-domain-name :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-domain-request 'make-create-domain-request))
 (common-lisp:defun make-create-domain-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key software-update-options
                     off-peak-window-options auto-tune-options tag-list
                     advanced-security-options domain-endpoint-options
                     log-publishing-options advanced-options
                     node-to-node-encryption-options encryption-at-rest-options
                     cognito-options vpcoptions snapshot-options
                     access-policies ebsoptions cluster-config engine-version
                     domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-config))
      (common-lisp:list
       (common-lisp:cons "ClusterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebsoptions))
      (common-lisp:list
       (common-lisp:cons "EBSOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policies))
      (common-lisp:list
       (common-lisp:cons "AccessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-options))
      (common-lisp:list
       (common-lisp:cons "SnapshotOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcoptions))
      (common-lisp:list
       (common-lisp:cons "VPCOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cognito-options))
      (common-lisp:list
       (common-lisp:cons "CognitoOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-at-rest-options))
      (common-lisp:list
       (common-lisp:cons "EncryptionAtRestOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-to-node-encryption-options))
      (common-lisp:list
       (common-lisp:cons "NodeToNodeEncryptionOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'advanced-options))
      (common-lisp:list
       (common-lisp:cons "AdvancedOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-publishing-options))
      (common-lisp:list
       (common-lisp:cons "LogPublishingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-endpoint-options))
      (common-lisp:list
       (common-lisp:cons "DomainEndpointOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-security-options))
      (common-lisp:list
       (common-lisp:cons "AdvancedSecurityOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-tune-options))
      (common-lisp:list
       (common-lisp:cons "AutoTuneOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'off-peak-window-options))
      (common-lisp:list
       (common-lisp:cons "OffPeakWindowOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'software-update-options))
      (common-lisp:list
       (common-lisp:cons "SoftwareUpdateOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-domain-response common-lisp:nil
                       ((domain-status :initarg :domain-status :type
                         (common-lisp:or domain-status common-lisp:null)
                         :accessor %create-domain-response-domain-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-domain-response 'make-create-domain-response))
 (common-lisp:defun make-create-domain-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-status)
   (common-lisp:apply #'common-lisp:make-instance 'create-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-status))
      (common-lisp:list
       (common-lisp:cons "DomainStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-outbound-connection-request common-lisp:nil
                       ((connection-mode :initarg :connection-mode :type
                         (common-lisp:or connection-mode common-lisp:null)
                         :accessor
                         %create-outbound-connection-request-connection-mode
                         :initform common-lisp:nil)
                        (connection-alias :initarg :connection-alias :type
                         (common-lisp:or connection-alias common-lisp:null)
                         :accessor
                         %create-outbound-connection-request-connection-alias
                         :initform
                         (common-lisp:error ":connection-alias is required"))
                        (remote-domain-info :initarg :remote-domain-info :type
                         (common-lisp:or domain-information-container
                                         common-lisp:null)
                         :accessor
                         %create-outbound-connection-request-remote-domain-info
                         :initform
                         (common-lisp:error ":remote-domain-info is required"))
                        (local-domain-info :initarg :local-domain-info :type
                         (common-lisp:or domain-information-container
                                         common-lisp:null)
                         :accessor
                         %create-outbound-connection-request-local-domain-info
                         :initform
                         (common-lisp:error
                          ":local-domain-info is required"))))
 (common-lisp:export
  (common-lisp:list 'create-outbound-connection-request
                    'make-create-outbound-connection-request))
 (common-lisp:defun make-create-outbound-connection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-mode connection-alias
                     remote-domain-info local-domain-info)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-outbound-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-outbound-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-outbound-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-domain-info))
      (common-lisp:list
       (common-lisp:cons "LocalDomainInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-domain-info))
      (common-lisp:list
       (common-lisp:cons "RemoteDomainInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-alias))
      (common-lisp:list
       (common-lisp:cons "ConnectionAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-mode))
      (common-lisp:list
       (common-lisp:cons "ConnectionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-outbound-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-outbound-connection-response common-lisp:nil
                       ((connection-properties :initarg :connection-properties
                         :type
                         (common-lisp:or connection-properties
                                         common-lisp:null)
                         :accessor
                         %create-outbound-connection-response-connection-properties
                         :initform common-lisp:nil)
                        (connection-mode :initarg :connection-mode :type
                         (common-lisp:or connection-mode common-lisp:null)
                         :accessor
                         %create-outbound-connection-response-connection-mode
                         :initform common-lisp:nil)
                        (connection-id :initarg :connection-id :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         %create-outbound-connection-response-connection-id
                         :initform common-lisp:nil)
                        (connection-status :initarg :connection-status :type
                         (common-lisp:or outbound-connection-status
                                         common-lisp:null)
                         :accessor
                         %create-outbound-connection-response-connection-status
                         :initform common-lisp:nil)
                        (connection-alias :initarg :connection-alias :type
                         (common-lisp:or connection-alias common-lisp:null)
                         :accessor
                         %create-outbound-connection-response-connection-alias
                         :initform common-lisp:nil)
                        (remote-domain-info :initarg :remote-domain-info :type
                         (common-lisp:or domain-information-container
                                         common-lisp:null)
                         :accessor
                         %create-outbound-connection-response-remote-domain-info
                         :initform common-lisp:nil)
                        (local-domain-info :initarg :local-domain-info :type
                         (common-lisp:or domain-information-container
                                         common-lisp:null)
                         :accessor
                         %create-outbound-connection-response-local-domain-info
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-outbound-connection-response
                    'make-create-outbound-connection-response))
 (common-lisp:defun make-create-outbound-connection-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-properties connection-mode
                     connection-id connection-status connection-alias
                     remote-domain-info local-domain-info)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-outbound-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-outbound-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-outbound-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-domain-info))
      (common-lisp:list
       (common-lisp:cons "LocalDomainInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-domain-info))
      (common-lisp:list
       (common-lisp:cons "RemoteDomainInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-alias))
      (common-lisp:list
       (common-lisp:cons "ConnectionAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-status))
      (common-lisp:list
       (common-lisp:cons "ConnectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "ConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-mode))
      (common-lisp:list
       (common-lisp:cons "ConnectionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-properties))
      (common-lisp:list
       (common-lisp:cons "ConnectionProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-outbound-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-package-request common-lisp:nil
                       ((package-source :initarg :package-source :type
                         (common-lisp:or package-source common-lisp:null)
                         :accessor %create-package-request-package-source
                         :initform
                         (common-lisp:error ":package-source is required"))
                        (package-description :initarg :package-description
                         :type
                         (common-lisp:or package-description common-lisp:null)
                         :accessor %create-package-request-package-description
                         :initform common-lisp:nil)
                        (package-type :initarg :package-type :type
                         (common-lisp:or package-type common-lisp:null)
                         :accessor %create-package-request-package-type
                         :initform
                         (common-lisp:error ":package-type is required"))
                        (package-name :initarg :package-name :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor %create-package-request-package-name
                         :initform
                         (common-lisp:error ":package-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-package-request 'make-create-package-request))
 (common-lisp:defun make-create-package-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key package-source package-description
                     package-type package-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-package-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-package-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "PackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-type))
      (common-lisp:list
       (common-lisp:cons "PackageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-description))
      (common-lisp:list
       (common-lisp:cons "PackageDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-source))
      (common-lisp:list
       (common-lisp:cons "PackageSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-package-response common-lisp:nil
                       ((package-details :initarg :package-details :type
                         (common-lisp:or package-details common-lisp:null)
                         :accessor %create-package-response-package-details
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-package-response 'make-create-package-response))
 (common-lisp:defun make-create-package-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key package-details)
   (common-lisp:apply #'common-lisp:make-instance 'create-package-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-package-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-details))
      (common-lisp:list
       (common-lisp:cons "PackageDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-package-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vpc-endpoint-request common-lisp:nil
                       ((client-token :initarg :client-token :type
                         (common-lisp:or client-token common-lisp:null)
                         :accessor %create-vpc-endpoint-request-client-token
                         :initform common-lisp:nil)
                        (vpc-options :initarg :vpc-options :type
                         (common-lisp:or vpcoptions common-lisp:null) :accessor
                         %create-vpc-endpoint-request-vpc-options :initform
                         (common-lisp:error ":vpc-options is required"))
                        (domain-arn :initarg :domain-arn :type
                         (common-lisp:or domain-arn common-lisp:null) :accessor
                         %create-vpc-endpoint-request-domain-arn :initform
                         (common-lisp:error ":domain-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-vpc-endpoint-request
                    'make-create-vpc-endpoint-request))
 (common-lisp:defun make-create-vpc-endpoint-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-token vpc-options domain-arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-vpc-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-arn))
      (common-lisp:list
       (common-lisp:cons "DomainArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-options))
      (common-lisp:list
       (common-lisp:cons "VpcOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vpc-endpoint-response common-lisp:nil
                       ((vpc-endpoint :initarg :vpc-endpoint :type
                         (common-lisp:or vpc-endpoint common-lisp:null)
                         :accessor %create-vpc-endpoint-response-vpc-endpoint
                         :initform
                         (common-lisp:error ":vpc-endpoint is required"))))
 (common-lisp:export
  (common-lisp:list 'create-vpc-endpoint-response
                    'make-create-vpc-endpoint-response))
 (common-lisp:defun make-create-vpc-endpoint-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-endpoint)
   (common-lisp:apply #'common-lisp:make-instance 'create-vpc-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint))
      (common-lisp:list
       (common-lisp:cons "VpcEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-endpoint-response))
   common-lisp:nil))
(common-lisp:deftype created-at () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-domain-request common-lisp:nil
                       ((domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %delete-domain-request-domain-name :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-domain-request 'make-delete-domain-request))
 (common-lisp:defun make-delete-domain-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-domain-response common-lisp:nil
                       ((domain-status :initarg :domain-status :type
                         (common-lisp:or domain-status common-lisp:null)
                         :accessor %delete-domain-response-domain-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-domain-response 'make-delete-domain-response))
 (common-lisp:defun make-delete-domain-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-status)
   (common-lisp:apply #'common-lisp:make-instance 'delete-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-status))
      (common-lisp:list
       (common-lisp:cons "DomainStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-inbound-connection-request common-lisp:nil
                       ((connection-id :initarg :connection-id :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         %delete-inbound-connection-request-connection-id
                         :initform
                         (common-lisp:error ":connection-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-inbound-connection-request
                    'make-delete-inbound-connection-request))
 (common-lisp:defun make-delete-inbound-connection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-inbound-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-inbound-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-inbound-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-inbound-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-inbound-connection-response common-lisp:nil
                       ((connection :initarg :connection :type
                         (common-lisp:or inbound-connection common-lisp:null)
                         :accessor
                         %delete-inbound-connection-response-connection
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-inbound-connection-response
                    'make-delete-inbound-connection-response))
 (common-lisp:defun make-delete-inbound-connection-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-inbound-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-inbound-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-inbound-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection))
      (common-lisp:list
       (common-lisp:cons "Connection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-inbound-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-outbound-connection-request common-lisp:nil
                       ((connection-id :initarg :connection-id :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         %delete-outbound-connection-request-connection-id
                         :initform
                         (common-lisp:error ":connection-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-outbound-connection-request
                    'make-delete-outbound-connection-request))
 (common-lisp:defun make-delete-outbound-connection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-outbound-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-outbound-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-outbound-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-outbound-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-outbound-connection-response common-lisp:nil
                       ((connection :initarg :connection :type
                         (common-lisp:or outbound-connection common-lisp:null)
                         :accessor
                         %delete-outbound-connection-response-connection
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-outbound-connection-response
                    'make-delete-outbound-connection-response))
 (common-lisp:defun make-delete-outbound-connection-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-outbound-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-outbound-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-outbound-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection))
      (common-lisp:list
       (common-lisp:cons "Connection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-outbound-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-package-request common-lisp:nil
                       ((package-id :initarg :package-id :type
                         (common-lisp:or package-id common-lisp:null) :accessor
                         %delete-package-request-package-id :initform
                         (common-lisp:error ":package-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-package-request 'make-delete-package-request))
 (common-lisp:defun make-delete-package-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key package-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-package-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-package-response common-lisp:nil
                       ((package-details :initarg :package-details :type
                         (common-lisp:or package-details common-lisp:null)
                         :accessor %delete-package-response-package-details
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-package-response 'make-delete-package-response))
 (common-lisp:defun make-delete-package-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key package-details)
   (common-lisp:apply #'common-lisp:make-instance 'delete-package-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-details))
      (common-lisp:list
       (common-lisp:cons "PackageDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-package-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vpc-endpoint-request common-lisp:nil
                       ((vpc-endpoint-id :initarg :vpc-endpoint-id :type
                         (common-lisp:or vpc-endpoint-id common-lisp:null)
                         :accessor %delete-vpc-endpoint-request-vpc-endpoint-id
                         :initform
                         (common-lisp:error ":vpc-endpoint-id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-vpc-endpoint-request
                    'make-delete-vpc-endpoint-request))
 (common-lisp:defun make-delete-vpc-endpoint-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-endpoint-id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-vpc-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vpc-endpoint-response common-lisp:nil
                       ((vpc-endpoint-summary :initarg :vpc-endpoint-summary
                         :type
                         (common-lisp:or vpc-endpoint-summary common-lisp:null)
                         :accessor
                         %delete-vpc-endpoint-response-vpc-endpoint-summary
                         :initform
                         (common-lisp:error
                          ":vpc-endpoint-summary is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-vpc-endpoint-response
                    'make-delete-vpc-endpoint-response))
 (common-lisp:defun make-delete-vpc-endpoint-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-endpoint-summary)
   (common-lisp:apply #'common-lisp:make-instance 'delete-vpc-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-endpoint-summary))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-endpoint-response))
   common-lisp:nil))
(common-lisp:deftype deployment-close-date-time-stamp () 'common-lisp:string)
(common-lisp:deftype deployment-status () 'common-lisp:string)
(common-lisp:deftype deployment-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass describe-domain-auto-tunes-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-domain-auto-tunes-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %describe-domain-auto-tunes-request-max-results
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %describe-domain-auto-tunes-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-domain-auto-tunes-request
                    'make-describe-domain-auto-tunes-request))
 (common-lisp:defun make-describe-domain-auto-tunes-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-domain-auto-tunes-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-auto-tunes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-auto-tunes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-auto-tunes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-domain-auto-tunes-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-domain-auto-tunes-response-next-token
                         :initform common-lisp:nil)
                        (auto-tunes :initarg :auto-tunes :type
                         (common-lisp:or auto-tune-list common-lisp:null)
                         :accessor
                         %describe-domain-auto-tunes-response-auto-tunes
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-domain-auto-tunes-response
                    'make-describe-domain-auto-tunes-response))
 (common-lisp:defun make-describe-domain-auto-tunes-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token auto-tunes)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-domain-auto-tunes-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-auto-tunes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-auto-tunes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-tunes))
      (common-lisp:list
       (common-lisp:cons "AutoTunes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-auto-tunes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-domain-change-progress-request common-lisp:nil
                       ((change-id :initarg :change-id :type
                         (common-lisp:or guid common-lisp:null) :accessor
                         %describe-domain-change-progress-request-change-id
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %describe-domain-change-progress-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-domain-change-progress-request
                    'make-describe-domain-change-progress-request))
 (common-lisp:defun make-describe-domain-change-progress-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key change-id domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-domain-change-progress-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-change-progress-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-change-progress-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-change-progress-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-domain-change-progress-response common-lisp:nil
                       ((change-progress-status :initarg
                         :change-progress-status :type
                         (common-lisp:or change-progress-status-details
                                         common-lisp:null)
                         :accessor
                         %describe-domain-change-progress-response-change-progress-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-domain-change-progress-response
                    'make-describe-domain-change-progress-response))
 (common-lisp:defun make-describe-domain-change-progress-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key change-progress-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-domain-change-progress-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-change-progress-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-change-progress-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'change-progress-status))
      (common-lisp:list
       (common-lisp:cons "ChangeProgressStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-change-progress-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-domain-config-request common-lisp:nil
                       ((domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %describe-domain-config-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-domain-config-request
                    'make-describe-domain-config-request))
 (common-lisp:defun make-describe-domain-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-domain-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-domain-config-response common-lisp:nil
                       ((domain-config :initarg :domain-config :type
                         (common-lisp:or domain-config common-lisp:null)
                         :accessor
                         %describe-domain-config-response-domain-config
                         :initform
                         (common-lisp:error ":domain-config is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-domain-config-response
                    'make-describe-domain-config-response))
 (common-lisp:defun make-describe-domain-config-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-domain-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-config))
      (common-lisp:list
       (common-lisp:cons "DomainConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-domain-request common-lisp:nil
                       ((domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %describe-domain-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-domain-request 'make-describe-domain-request))
 (common-lisp:defun make-describe-domain-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-domain-response common-lisp:nil
                       ((domain-status :initarg :domain-status :type
                         (common-lisp:or domain-status common-lisp:null)
                         :accessor %describe-domain-response-domain-status
                         :initform
                         (common-lisp:error ":domain-status is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-domain-response 'make-describe-domain-response))
 (common-lisp:defun make-describe-domain-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-status)
   (common-lisp:apply #'common-lisp:make-instance 'describe-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-status))
      (common-lisp:list
       (common-lisp:cons "DomainStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-domains-request common-lisp:nil
                       ((domain-names :initarg :domain-names :type
                         (common-lisp:or domain-name-list common-lisp:null)
                         :accessor %describe-domains-request-domain-names
                         :initform
                         (common-lisp:error ":domain-names is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-domains-request 'make-describe-domains-request))
 (common-lisp:defun make-describe-domains-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-names)
   (common-lisp:apply #'common-lisp:make-instance 'describe-domains-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domains-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-names))
      (common-lisp:list
       (common-lisp:cons "DomainNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domains-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-domains-response common-lisp:nil
                       ((domain-status-list :initarg :domain-status-list :type
                         (common-lisp:or domain-status-list common-lisp:null)
                         :accessor
                         %describe-domains-response-domain-status-list
                         :initform
                         (common-lisp:error
                          ":domain-status-list is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-domains-response
                    'make-describe-domains-response))
 (common-lisp:defun make-describe-domains-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-status-list)
   (common-lisp:apply #'common-lisp:make-instance 'describe-domains-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domains-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domains-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-status-list))
      (common-lisp:list
       (common-lisp:cons "DomainStatusList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domains-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dry-run-progress-request common-lisp:nil
                       ((load-dry-run-config :initarg :load-dry-run-config
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %describe-dry-run-progress-request-load-dry-run-config
                         :initform common-lisp:nil)
                        (dry-run-id :initarg :dry-run-id :type
                         (common-lisp:or guid common-lisp:null) :accessor
                         %describe-dry-run-progress-request-dry-run-id
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %describe-dry-run-progress-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-dry-run-progress-request
                    'make-describe-dry-run-progress-request))
 (common-lisp:defun make-describe-dry-run-progress-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key load-dry-run-config dry-run-id
                     domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dry-run-progress-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dry-run-progress-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dry-run-progress-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dry-run-progress-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-dry-run-progress-response common-lisp:nil
                       ((dry-run-results :initarg :dry-run-results :type
                         (common-lisp:or dry-run-results common-lisp:null)
                         :accessor
                         %describe-dry-run-progress-response-dry-run-results
                         :initform common-lisp:nil)
                        (dry-run-config :initarg :dry-run-config :type
                         (common-lisp:or domain-status common-lisp:null)
                         :accessor
                         %describe-dry-run-progress-response-dry-run-config
                         :initform common-lisp:nil)
                        (dry-run-progress-status :initarg
                         :dry-run-progress-status :type
                         (common-lisp:or dry-run-progress-status
                                         common-lisp:null)
                         :accessor
                         %describe-dry-run-progress-response-dry-run-progress-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-dry-run-progress-response
                    'make-describe-dry-run-progress-response))
 (common-lisp:defun make-describe-dry-run-progress-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dry-run-results dry-run-config
                     dry-run-progress-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-dry-run-progress-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dry-run-progress-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dry-run-progress-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dry-run-progress-status))
      (common-lisp:list
       (common-lisp:cons "DryRunProgressStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run-config))
      (common-lisp:list
       (common-lisp:cons "DryRunConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run-results))
      (common-lisp:list
       (common-lisp:cons "DryRunResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dry-run-progress-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-inbound-connections-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-inbound-connections-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %describe-inbound-connections-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         %describe-inbound-connections-request-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-inbound-connections-request
                    'make-describe-inbound-connections-request))
 (common-lisp:defun make-describe-inbound-connections-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-inbound-connections-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-connections-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-connections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-inbound-connections-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-inbound-connections-response-next-token
                         :initform common-lisp:nil)
                        (connections :initarg :connections :type
                         (common-lisp:or inbound-connections common-lisp:null)
                         :accessor
                         %describe-inbound-connections-response-connections
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-inbound-connections-response
                    'make-describe-inbound-connections-response))
 (common-lisp:defun make-describe-inbound-connections-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token connections)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-inbound-connections-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-connections-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-connections-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connections))
      (common-lisp:list
       (common-lisp:cons "Connections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-inbound-connections-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-instance-type-limits-request common-lisp:nil
                       ((engine-version :initarg :engine-version :type
                         (common-lisp:or version-string common-lisp:null)
                         :accessor
                         %describe-instance-type-limits-request-engine-version
                         :initform
                         (common-lisp:error ":engine-version is required"))
                        (instance-type :initarg :instance-type :type
                         (common-lisp:or open-search-partition-instance-type
                                         common-lisp:null)
                         :accessor
                         %describe-instance-type-limits-request-instance-type
                         :initform
                         (common-lisp:error ":instance-type is required"))
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %describe-instance-type-limits-request-domain-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-instance-type-limits-request
                    'make-describe-instance-type-limits-request))
 (common-lisp:defun make-describe-instance-type-limits-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key engine-version instance-type domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-instance-type-limits-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-type-limits-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-type-limits-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-type-limits-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-instance-type-limits-response common-lisp:nil
                       ((limits-by-role :initarg :limits-by-role :type
                         (common-lisp:or limits-by-role common-lisp:null)
                         :accessor
                         %describe-instance-type-limits-response-limits-by-role
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-instance-type-limits-response
                    'make-describe-instance-type-limits-response))
 (common-lisp:defun make-describe-instance-type-limits-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limits-by-role)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-instance-type-limits-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-type-limits-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-type-limits-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limits-by-role))
      (common-lisp:list
       (common-lisp:cons "LimitsByRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-instance-type-limits-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-outbound-connections-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-outbound-connections-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %describe-outbound-connections-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor
                         %describe-outbound-connections-request-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-outbound-connections-request
                    'make-describe-outbound-connections-request))
 (common-lisp:defun make-describe-outbound-connections-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-outbound-connections-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-outbound-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-outbound-connections-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-outbound-connections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-outbound-connections-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-outbound-connections-response-next-token
                         :initform common-lisp:nil)
                        (connections :initarg :connections :type
                         (common-lisp:or outbound-connections common-lisp:null)
                         :accessor
                         %describe-outbound-connections-response-connections
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-outbound-connections-response
                    'make-describe-outbound-connections-response))
 (common-lisp:defun make-describe-outbound-connections-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token connections)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-outbound-connections-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-outbound-connections-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-outbound-connections-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connections))
      (common-lisp:list
       (common-lisp:cons "Connections"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-outbound-connections-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-packages-filter common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or describe-packages-filter-values
                                         common-lisp:null)
                         :accessor %describe-packages-filter-value :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or describe-packages-filter-name
                                         common-lisp:null)
                         :accessor %describe-packages-filter-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-packages-filter 'make-describe-packages-filter))
 (common-lisp:defun make-describe-packages-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value name)
   (common-lisp:apply #'common-lisp:make-instance 'describe-packages-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-packages-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-packages-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-packages-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype describe-packages-filter-list ()
   '(trivial-types:proper-list describe-packages-filter))
 (common-lisp:defun |make-describe-packages-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            describe-packages-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype describe-packages-filter-name () 'common-lisp:string)
(common-lisp:deftype describe-packages-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype describe-packages-filter-values ()
   '(trivial-types:proper-list describe-packages-filter-value))
 (common-lisp:defun |make-describe-packages-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            describe-packages-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass describe-packages-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-packages-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %describe-packages-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or describe-packages-filter-list
                                         common-lisp:null)
                         :accessor %describe-packages-request-filters :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-packages-request
                    'make-describe-packages-request))
 (common-lisp:defun make-describe-packages-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filters)
   (common-lisp:apply #'common-lisp:make-instance 'describe-packages-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-packages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-packages-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-packages-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-packages-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-packages-response-next-token :initform
                         common-lisp:nil)
                        (package-details-list :initarg :package-details-list
                         :type
                         (common-lisp:or package-details-list common-lisp:null)
                         :accessor
                         %describe-packages-response-package-details-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-packages-response
                    'make-describe-packages-response))
 (common-lisp:defun make-describe-packages-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token package-details-list)
   (common-lisp:apply #'common-lisp:make-instance 'describe-packages-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-packages-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-packages-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'package-details-list))
      (common-lisp:list
       (common-lisp:cons "PackageDetailsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-packages-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-reserved-instance-offerings-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-reserved-instance-offerings-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %describe-reserved-instance-offerings-request-max-results
                         :initform common-lisp:nil)
                        (reserved-instance-offering-id :initarg
                         :reserved-instance-offering-id :type
                         (common-lisp:or guid common-lisp:null) :accessor
                         %describe-reserved-instance-offerings-request-reserved-instance-offering-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-instance-offerings-request
                    'make-describe-reserved-instance-offerings-request))
 (common-lisp:defun make-describe-reserved-instance-offerings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     reserved-instance-offering-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-reserved-instance-offerings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instance-offerings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instance-offerings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instance-offerings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-reserved-instance-offerings-response
                       common-lisp:nil
                       ((reserved-instance-offerings :initarg
                         :reserved-instance-offerings :type
                         (common-lisp:or reserved-instance-offering-list
                                         common-lisp:null)
                         :accessor
                         %describe-reserved-instance-offerings-response-reserved-instance-offerings
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-reserved-instance-offerings-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-instance-offerings-response
                    'make-describe-reserved-instance-offerings-response))
 (common-lisp:defun make-describe-reserved-instance-offerings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reserved-instance-offerings next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-reserved-instance-offerings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instance-offerings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instance-offerings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instance-offerings))
      (common-lisp:list
       (common-lisp:cons "ReservedInstanceOfferings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instance-offerings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-reserved-instances-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-reserved-instances-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %describe-reserved-instances-request-max-results
                         :initform common-lisp:nil)
                        (reserved-instance-id :initarg :reserved-instance-id
                         :type (common-lisp:or guid common-lisp:null) :accessor
                         %describe-reserved-instances-request-reserved-instance-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-instances-request
                    'make-describe-reserved-instances-request))
 (common-lisp:defun make-describe-reserved-instances-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results
                     reserved-instance-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-reserved-instances-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-reserved-instances-response common-lisp:nil
                       ((reserved-instances :initarg :reserved-instances :type
                         (common-lisp:or reserved-instance-list
                                         common-lisp:null)
                         :accessor
                         %describe-reserved-instances-response-reserved-instances
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-reserved-instances-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-reserved-instances-response
                    'make-describe-reserved-instances-response))
 (common-lisp:defun make-describe-reserved-instances-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reserved-instances next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-reserved-instances-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved-instances))
      (common-lisp:list
       (common-lisp:cons "ReservedInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reserved-instances-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-vpc-endpoints-request common-lisp:nil
                       ((vpc-endpoint-ids :initarg :vpc-endpoint-ids :type
                         (common-lisp:or vpc-endpoint-id-list common-lisp:null)
                         :accessor
                         %describe-vpc-endpoints-request-vpc-endpoint-ids
                         :initform
                         (common-lisp:error ":vpc-endpoint-ids is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-endpoints-request
                    'make-describe-vpc-endpoints-request))
 (common-lisp:defun make-describe-vpc-endpoints-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-endpoint-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-vpc-endpoints-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-endpoints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-ids))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-vpc-endpoints-response common-lisp:nil
                       ((vpc-endpoint-errors :initarg :vpc-endpoint-errors
                         :type
                         (common-lisp:or vpc-endpoint-error-list
                                         common-lisp:null)
                         :accessor
                         %describe-vpc-endpoints-response-vpc-endpoint-errors
                         :initform
                         (common-lisp:error
                          ":vpc-endpoint-errors is required"))
                        (vpc-endpoints :initarg :vpc-endpoints :type
                         (common-lisp:or vpc-endpoints common-lisp:null)
                         :accessor
                         %describe-vpc-endpoints-response-vpc-endpoints
                         :initform
                         (common-lisp:error ":vpc-endpoints is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-endpoints-response
                    'make-describe-vpc-endpoints-response))
 (common-lisp:defun make-describe-vpc-endpoints-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-endpoint-errors vpc-endpoints)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-vpc-endpoints-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-endpoints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-endpoints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoints))
      (common-lisp:list
       (common-lisp:cons "VpcEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-errors))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-endpoints-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype disable-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition disabled-operation-exception
     (opensearch-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'disabled-operation-exception)))
(common-lisp:progn
 (common-lisp:defclass dissociate-package-request common-lisp:nil
                       ((domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %dissociate-package-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))
                        (package-id :initarg :package-id :type
                         (common-lisp:or package-id common-lisp:null) :accessor
                         %dissociate-package-request-package-id :initform
                         (common-lisp:error ":package-id is required"))))
 (common-lisp:export
  (common-lisp:list 'dissociate-package-request
                    'make-dissociate-package-request))
 (common-lisp:defun make-dissociate-package-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name package-id)
   (common-lisp:apply #'common-lisp:make-instance 'dissociate-package-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dissociate-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dissociate-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dissociate-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dissociate-package-response common-lisp:nil
                       ((domain-package-details :initarg
                         :domain-package-details :type
                         (common-lisp:or domain-package-details
                                         common-lisp:null)
                         :accessor
                         %dissociate-package-response-domain-package-details
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'dissociate-package-response
                    'make-dissociate-package-response))
 (common-lisp:defun make-dissociate-package-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-package-details)
   (common-lisp:apply #'common-lisp:make-instance 'dissociate-package-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dissociate-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dissociate-package-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-package-details))
      (common-lisp:list
       (common-lisp:cons "DomainPackageDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dissociate-package-response))
   common-lisp:nil))
(common-lisp:deftype domain-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass domain-config common-lisp:nil
                       ((software-update-options :initarg
                         :software-update-options :type
                         (common-lisp:or software-update-options-status
                                         common-lisp:null)
                         :accessor %domain-config-software-update-options
                         :initform common-lisp:nil)
                        (off-peak-window-options :initarg
                         :off-peak-window-options :type
                         (common-lisp:or off-peak-window-options-status
                                         common-lisp:null)
                         :accessor %domain-config-off-peak-window-options
                         :initform common-lisp:nil)
                        (change-progress-details :initarg
                         :change-progress-details :type
                         (common-lisp:or change-progress-details
                                         common-lisp:null)
                         :accessor %domain-config-change-progress-details
                         :initform common-lisp:nil)
                        (auto-tune-options :initarg :auto-tune-options :type
                         (common-lisp:or auto-tune-options-status
                                         common-lisp:null)
                         :accessor %domain-config-auto-tune-options :initform
                         common-lisp:nil)
                        (advanced-security-options :initarg
                         :advanced-security-options :type
                         (common-lisp:or advanced-security-options-status
                                         common-lisp:null)
                         :accessor %domain-config-advanced-security-options
                         :initform common-lisp:nil)
                        (domain-endpoint-options :initarg
                         :domain-endpoint-options :type
                         (common-lisp:or domain-endpoint-options-status
                                         common-lisp:null)
                         :accessor %domain-config-domain-endpoint-options
                         :initform common-lisp:nil)
                        (log-publishing-options :initarg
                         :log-publishing-options :type
                         (common-lisp:or log-publishing-options-status
                                         common-lisp:null)
                         :accessor %domain-config-log-publishing-options
                         :initform common-lisp:nil)
                        (advanced-options :initarg :advanced-options :type
                         (common-lisp:or advanced-options-status
                                         common-lisp:null)
                         :accessor %domain-config-advanced-options :initform
                         common-lisp:nil)
                        (node-to-node-encryption-options :initarg
                         :node-to-node-encryption-options :type
                         (common-lisp:or node-to-node-encryption-options-status
                                         common-lisp:null)
                         :accessor
                         %domain-config-node-to-node-encryption-options
                         :initform common-lisp:nil)
                        (encryption-at-rest-options :initarg
                         :encryption-at-rest-options :type
                         (common-lisp:or encryption-at-rest-options-status
                                         common-lisp:null)
                         :accessor %domain-config-encryption-at-rest-options
                         :initform common-lisp:nil)
                        (cognito-options :initarg :cognito-options :type
                         (common-lisp:or cognito-options-status
                                         common-lisp:null)
                         :accessor %domain-config-cognito-options :initform
                         common-lisp:nil)
                        (vpcoptions :initarg :vpcoptions :type
                         (common-lisp:or vpcderived-info-status
                                         common-lisp:null)
                         :accessor %domain-config-vpcoptions :initform
                         common-lisp:nil)
                        (snapshot-options :initarg :snapshot-options :type
                         (common-lisp:or snapshot-options-status
                                         common-lisp:null)
                         :accessor %domain-config-snapshot-options :initform
                         common-lisp:nil)
                        (access-policies :initarg :access-policies :type
                         (common-lisp:or access-policies-status
                                         common-lisp:null)
                         :accessor %domain-config-access-policies :initform
                         common-lisp:nil)
                        (ebsoptions :initarg :ebsoptions :type
                         (common-lisp:or ebsoptions-status common-lisp:null)
                         :accessor %domain-config-ebsoptions :initform
                         common-lisp:nil)
                        (cluster-config :initarg :cluster-config :type
                         (common-lisp:or cluster-config-status
                                         common-lisp:null)
                         :accessor %domain-config-cluster-config :initform
                         common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or version-status common-lisp:null)
                         :accessor %domain-config-engine-version :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'domain-config 'make-domain-config))
 (common-lisp:defun make-domain-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key software-update-options
                     off-peak-window-options change-progress-details
                     auto-tune-options advanced-security-options
                     domain-endpoint-options log-publishing-options
                     advanced-options node-to-node-encryption-options
                     encryption-at-rest-options cognito-options vpcoptions
                     snapshot-options access-policies ebsoptions cluster-config
                     engine-version)
   (common-lisp:apply #'common-lisp:make-instance 'domain-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-config))
      (common-lisp:list
       (common-lisp:cons "ClusterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebsoptions))
      (common-lisp:list
       (common-lisp:cons "EBSOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policies))
      (common-lisp:list
       (common-lisp:cons "AccessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-options))
      (common-lisp:list
       (common-lisp:cons "SnapshotOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcoptions))
      (common-lisp:list
       (common-lisp:cons "VPCOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cognito-options))
      (common-lisp:list
       (common-lisp:cons "CognitoOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-at-rest-options))
      (common-lisp:list
       (common-lisp:cons "EncryptionAtRestOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-to-node-encryption-options))
      (common-lisp:list
       (common-lisp:cons "NodeToNodeEncryptionOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'advanced-options))
      (common-lisp:list
       (common-lisp:cons "AdvancedOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-publishing-options))
      (common-lisp:list
       (common-lisp:cons "LogPublishingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-endpoint-options))
      (common-lisp:list
       (common-lisp:cons "DomainEndpointOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-security-options))
      (common-lisp:list
       (common-lisp:cons "AdvancedSecurityOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-tune-options))
      (common-lisp:list
       (common-lisp:cons "AutoTuneOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'change-progress-details))
      (common-lisp:list
       (common-lisp:cons "ChangeProgressDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'off-peak-window-options))
      (common-lisp:list
       (common-lisp:cons "OffPeakWindowOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'software-update-options))
      (common-lisp:list
       (common-lisp:cons "SoftwareUpdateOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass domain-endpoint-options common-lisp:nil
                       ((custom-endpoint-certificate-arn :initarg
                         :custom-endpoint-certificate-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %domain-endpoint-options-custom-endpoint-certificate-arn
                         :initform common-lisp:nil)
                        (custom-endpoint :initarg :custom-endpoint :type
                         (common-lisp:or domain-name-fqdn common-lisp:null)
                         :accessor %domain-endpoint-options-custom-endpoint
                         :initform common-lisp:nil)
                        (custom-endpoint-enabled :initarg
                         :custom-endpoint-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %domain-endpoint-options-custom-endpoint-enabled
                         :initform common-lisp:nil)
                        (tlssecurity-policy :initarg :tlssecurity-policy :type
                         (common-lisp:or tlssecurity-policy common-lisp:null)
                         :accessor %domain-endpoint-options-tlssecurity-policy
                         :initform common-lisp:nil)
                        (enforce-https :initarg :enforce-https :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %domain-endpoint-options-enforce-https :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'domain-endpoint-options 'make-domain-endpoint-options))
 (common-lisp:defun make-domain-endpoint-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key custom-endpoint-certificate-arn
                     custom-endpoint custom-endpoint-enabled tlssecurity-policy
                     enforce-https)
   (common-lisp:apply #'common-lisp:make-instance 'domain-endpoint-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          domain-endpoint-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          domain-endpoint-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enforce-https))
      (common-lisp:list
       (common-lisp:cons "EnforceHTTPS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tlssecurity-policy))
      (common-lisp:list
       (common-lisp:cons "TLSSecurityPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-endpoint-enabled))
      (common-lisp:list
       (common-lisp:cons "CustomEndpointEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-endpoint))
      (common-lisp:list
       (common-lisp:cons "CustomEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'custom-endpoint-certificate-arn))
      (common-lisp:list
       (common-lisp:cons "CustomEndpointCertificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          domain-endpoint-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass domain-endpoint-options-status common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor %domain-endpoint-options-status-status
                         :initform (common-lisp:error ":status is required"))
                        (options :initarg :options :type
                         (common-lisp:or domain-endpoint-options
                                         common-lisp:null)
                         :accessor %domain-endpoint-options-status-options
                         :initform
                         (common-lisp:error ":options is required"))))
 (common-lisp:export
  (common-lisp:list 'domain-endpoint-options-status
                    'make-domain-endpoint-options-status))
 (common-lisp:defun make-domain-endpoint-options-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status options)
   (common-lisp:apply #'common-lisp:make-instance
                      'domain-endpoint-options-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          domain-endpoint-options-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          domain-endpoint-options-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          domain-endpoint-options-status))
   common-lisp:nil))
(common-lisp:deftype domain-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass domain-info common-lisp:nil
                       ((engine-type :initarg :engine-type :type
                         (common-lisp:or engine-type common-lisp:null)
                         :accessor %domain-info-engine-type :initform
                         common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %domain-info-domain-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'domain-info 'make-domain-info))
 (common-lisp:defun make-domain-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key engine-type domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'domain-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-type))
      (common-lisp:list
       (common-lisp:cons "EngineType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-info-list ()
   '(trivial-types:proper-list domain-info))
 (common-lisp:defun |make-domain-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass domain-information-container common-lisp:nil
                       ((awsdomain-information :initarg :awsdomain-information
                         :type
                         (common-lisp:or awsdomain-information
                                         common-lisp:null)
                         :accessor
                         %domain-information-container-awsdomain-information
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'domain-information-container
                    'make-domain-information-container))
 (common-lisp:defun make-domain-information-container
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key awsdomain-information)
   (common-lisp:apply #'common-lisp:make-instance 'domain-information-container
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          domain-information-container))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          domain-information-container))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'awsdomain-information))
      (common-lisp:list
       (common-lisp:cons "AWSDomainInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          domain-information-container))
   common-lisp:nil))
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:deftype domain-name-fqdn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype domain-name-list ()
   '(trivial-types:proper-list domain-name))
 (common-lisp:defun |make-domain-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass domain-package-details common-lisp:nil
                       ((error-details :initarg :error-details :type
                         (common-lisp:or error-details common-lisp:null)
                         :accessor %domain-package-details-error-details
                         :initform common-lisp:nil)
                        (reference-path :initarg :reference-path :type
                         (common-lisp:or reference-path common-lisp:null)
                         :accessor %domain-package-details-reference-path
                         :initform common-lisp:nil)
                        (package-version :initarg :package-version :type
                         (common-lisp:or package-version common-lisp:null)
                         :accessor %domain-package-details-package-version
                         :initform common-lisp:nil)
                        (domain-package-status :initarg :domain-package-status
                         :type
                         (common-lisp:or domain-package-status
                                         common-lisp:null)
                         :accessor
                         %domain-package-details-domain-package-status
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %domain-package-details-domain-name
                         :initform common-lisp:nil)
                        (last-updated :initarg :last-updated :type
                         (common-lisp:or last-updated common-lisp:null)
                         :accessor %domain-package-details-last-updated
                         :initform common-lisp:nil)
                        (package-type :initarg :package-type :type
                         (common-lisp:or package-type common-lisp:null)
                         :accessor %domain-package-details-package-type
                         :initform common-lisp:nil)
                        (package-name :initarg :package-name :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor %domain-package-details-package-name
                         :initform common-lisp:nil)
                        (package-id :initarg :package-id :type
                         (common-lisp:or package-id common-lisp:null) :accessor
                         %domain-package-details-package-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'domain-package-details 'make-domain-package-details))
 (common-lisp:defun make-domain-package-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-details reference-path
                     package-version domain-package-status domain-name
                     last-updated package-type package-name package-id)
   (common-lisp:apply #'common-lisp:make-instance 'domain-package-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          domain-package-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          domain-package-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-id))
      (common-lisp:list
       (common-lisp:cons "PackageID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "PackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-type))
      (common-lisp:list
       (common-lisp:cons "PackageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated))
      (common-lisp:list
       (common-lisp:cons "LastUpdated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-package-status))
      (common-lisp:list
       (common-lisp:cons "DomainPackageStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version))
      (common-lisp:list
       (common-lisp:cons "PackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reference-path))
      (common-lisp:list
       (common-lisp:cons "ReferencePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-details))
      (common-lisp:list
       (common-lisp:cons "ErrorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          domain-package-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-package-details-list ()
   '(trivial-types:proper-list domain-package-details))
 (common-lisp:defun |make-domain-package-details-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-package-details))
   aws-sdk/generator/shape::members))
(common-lisp:deftype domain-package-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass domain-status common-lisp:nil
                       ((software-update-options :initarg
                         :software-update-options :type
                         (common-lisp:or software-update-options
                                         common-lisp:null)
                         :accessor %domain-status-software-update-options
                         :initform common-lisp:nil)
                        (off-peak-window-options :initarg
                         :off-peak-window-options :type
                         (common-lisp:or off-peak-window-options
                                         common-lisp:null)
                         :accessor %domain-status-off-peak-window-options
                         :initform common-lisp:nil)
                        (change-progress-details :initarg
                         :change-progress-details :type
                         (common-lisp:or change-progress-details
                                         common-lisp:null)
                         :accessor %domain-status-change-progress-details
                         :initform common-lisp:nil)
                        (auto-tune-options :initarg :auto-tune-options :type
                         (common-lisp:or auto-tune-options-output
                                         common-lisp:null)
                         :accessor %domain-status-auto-tune-options :initform
                         common-lisp:nil)
                        (advanced-security-options :initarg
                         :advanced-security-options :type
                         (common-lisp:or advanced-security-options
                                         common-lisp:null)
                         :accessor %domain-status-advanced-security-options
                         :initform common-lisp:nil)
                        (domain-endpoint-options :initarg
                         :domain-endpoint-options :type
                         (common-lisp:or domain-endpoint-options
                                         common-lisp:null)
                         :accessor %domain-status-domain-endpoint-options
                         :initform common-lisp:nil)
                        (service-software-options :initarg
                         :service-software-options :type
                         (common-lisp:or service-software-options
                                         common-lisp:null)
                         :accessor %domain-status-service-software-options
                         :initform common-lisp:nil)
                        (log-publishing-options :initarg
                         :log-publishing-options :type
                         (common-lisp:or log-publishing-options
                                         common-lisp:null)
                         :accessor %domain-status-log-publishing-options
                         :initform common-lisp:nil)
                        (advanced-options :initarg :advanced-options :type
                         (common-lisp:or advanced-options common-lisp:null)
                         :accessor %domain-status-advanced-options :initform
                         common-lisp:nil)
                        (node-to-node-encryption-options :initarg
                         :node-to-node-encryption-options :type
                         (common-lisp:or node-to-node-encryption-options
                                         common-lisp:null)
                         :accessor
                         %domain-status-node-to-node-encryption-options
                         :initform common-lisp:nil)
                        (encryption-at-rest-options :initarg
                         :encryption-at-rest-options :type
                         (common-lisp:or encryption-at-rest-options
                                         common-lisp:null)
                         :accessor %domain-status-encryption-at-rest-options
                         :initform common-lisp:nil)
                        (cognito-options :initarg :cognito-options :type
                         (common-lisp:or cognito-options common-lisp:null)
                         :accessor %domain-status-cognito-options :initform
                         common-lisp:nil)
                        (vpcoptions :initarg :vpcoptions :type
                         (common-lisp:or vpcderived-info common-lisp:null)
                         :accessor %domain-status-vpcoptions :initform
                         common-lisp:nil)
                        (snapshot-options :initarg :snapshot-options :type
                         (common-lisp:or snapshot-options common-lisp:null)
                         :accessor %domain-status-snapshot-options :initform
                         common-lisp:nil)
                        (access-policies :initarg :access-policies :type
                         (common-lisp:or policy-document common-lisp:null)
                         :accessor %domain-status-access-policies :initform
                         common-lisp:nil)
                        (ebsoptions :initarg :ebsoptions :type
                         (common-lisp:or ebsoptions common-lisp:null) :accessor
                         %domain-status-ebsoptions :initform common-lisp:nil)
                        (cluster-config :initarg :cluster-config :type
                         (common-lisp:or cluster-config common-lisp:null)
                         :accessor %domain-status-cluster-config :initform
                         (common-lisp:error ":cluster-config is required"))
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or version-string common-lisp:null)
                         :accessor %domain-status-engine-version :initform
                         common-lisp:nil)
                        (upgrade-processing :initarg :upgrade-processing :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %domain-status-upgrade-processing :initform
                         common-lisp:nil)
                        (processing :initarg :processing :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %domain-status-processing :initform common-lisp:nil)
                        (endpoints :initarg :endpoints :type
                         (common-lisp:or endpoints-map common-lisp:null)
                         :accessor %domain-status-endpoints :initform
                         common-lisp:nil)
                        (endpoint :initarg :endpoint :type
                         (common-lisp:or service-url common-lisp:null)
                         :accessor %domain-status-endpoint :initform
                         common-lisp:nil)
                        (deleted :initarg :deleted :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %domain-status-deleted :initform common-lisp:nil)
                        (created :initarg :created :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %domain-status-created :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %domain-status-arn :initform
                         (common-lisp:error ":arn is required"))
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %domain-status-domain-name :initform
                         (common-lisp:error ":domain-name is required"))
                        (domain-id :initarg :domain-id :type
                         (common-lisp:or domain-id common-lisp:null) :accessor
                         %domain-status-domain-id :initform
                         (common-lisp:error ":domain-id is required"))))
 (common-lisp:export (common-lisp:list 'domain-status 'make-domain-status))
 (common-lisp:defun make-domain-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key software-update-options
                     off-peak-window-options change-progress-details
                     auto-tune-options advanced-security-options
                     domain-endpoint-options service-software-options
                     log-publishing-options advanced-options
                     node-to-node-encryption-options encryption-at-rest-options
                     cognito-options vpcoptions snapshot-options
                     access-policies ebsoptions cluster-config engine-version
                     upgrade-processing processing endpoints endpoint deleted
                     created arn domain-name domain-id)
   (common-lisp:apply #'common-lisp:make-instance 'domain-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "Created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted))
      (common-lisp:list
       (common-lisp:cons "Deleted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints))
      (common-lisp:list
       (common-lisp:cons "Endpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing))
      (common-lisp:list
       (common-lisp:cons "Processing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upgrade-processing))
      (common-lisp:list
       (common-lisp:cons "UpgradeProcessing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "EngineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-config))
      (common-lisp:list
       (common-lisp:cons "ClusterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebsoptions))
      (common-lisp:list
       (common-lisp:cons "EBSOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policies))
      (common-lisp:list
       (common-lisp:cons "AccessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-options))
      (common-lisp:list
       (common-lisp:cons "SnapshotOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcoptions))
      (common-lisp:list
       (common-lisp:cons "VPCOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cognito-options))
      (common-lisp:list
       (common-lisp:cons "CognitoOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-at-rest-options))
      (common-lisp:list
       (common-lisp:cons "EncryptionAtRestOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-to-node-encryption-options))
      (common-lisp:list
       (common-lisp:cons "NodeToNodeEncryptionOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'advanced-options))
      (common-lisp:list
       (common-lisp:cons "AdvancedOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-publishing-options))
      (common-lisp:list
       (common-lisp:cons "LogPublishingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-software-options))
      (common-lisp:list
       (common-lisp:cons "ServiceSoftwareOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-endpoint-options))
      (common-lisp:list
       (common-lisp:cons "DomainEndpointOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-security-options))
      (common-lisp:list
       (common-lisp:cons "AdvancedSecurityOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-tune-options))
      (common-lisp:list
       (common-lisp:cons "AutoTuneOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'change-progress-details))
      (common-lisp:list
       (common-lisp:cons "ChangeProgressDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'off-peak-window-options))
      (common-lisp:list
       (common-lisp:cons "OffPeakWindowOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'software-update-options))
      (common-lisp:list
       (common-lisp:cons "SoftwareUpdateOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-status-list ()
   '(trivial-types:proper-list domain-status))
 (common-lisp:defun |make-domain-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype dry-run () 'common-lisp:boolean)
(common-lisp:deftype dry-run-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dry-run-progress-status common-lisp:nil
                       ((validation-failures :initarg :validation-failures
                         :type
                         (common-lisp:or validation-failures common-lisp:null)
                         :accessor %dry-run-progress-status-validation-failures
                         :initform common-lisp:nil)
                        (update-date :initarg :update-date :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dry-run-progress-status-update-date :initform
                         (common-lisp:error ":update-date is required"))
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dry-run-progress-status-creation-date :initform
                         (common-lisp:error ":creation-date is required"))
                        (dry-run-status :initarg :dry-run-status :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %dry-run-progress-status-dry-run-status :initform
                         (common-lisp:error ":dry-run-status is required"))
                        (dry-run-id :initarg :dry-run-id :type
                         (common-lisp:or guid common-lisp:null) :accessor
                         %dry-run-progress-status-dry-run-id :initform
                         (common-lisp:error ":dry-run-id is required"))))
 (common-lisp:export
  (common-lisp:list 'dry-run-progress-status 'make-dry-run-progress-status))
 (common-lisp:defun make-dry-run-progress-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key validation-failures update-date
                     creation-date dry-run-status dry-run-id)
   (common-lisp:apply #'common-lisp:make-instance 'dry-run-progress-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dry-run-progress-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dry-run-progress-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run-id))
      (common-lisp:list
       (common-lisp:cons "DryRunId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run-status))
      (common-lisp:list
       (common-lisp:cons "DryRunStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date))
      (common-lisp:list
       (common-lisp:cons "UpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-failures))
      (common-lisp:list
       (common-lisp:cons "ValidationFailures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dry-run-progress-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass dry-run-results common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or message common-lisp:null) :accessor
                         %dry-run-results-message :initform common-lisp:nil)
                        (deployment-type :initarg :deployment-type :type
                         (common-lisp:or deployment-type common-lisp:null)
                         :accessor %dry-run-results-deployment-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'dry-run-results 'make-dry-run-results))
 (common-lisp:defun make-dry-run-results
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message deployment-type)
   (common-lisp:apply #'common-lisp:make-instance 'dry-run-results
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dry-run-results))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dry-run-results))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-type))
      (common-lisp:list
       (common-lisp:cons "DeploymentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dry-run-results))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass duration common-lisp:nil
                       ((unit :initarg :unit :type
                         (common-lisp:or time-unit common-lisp:null) :accessor
                         %duration-unit :initform common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or duration-value common-lisp:null)
                         :accessor %duration-value :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'duration 'make-duration))
 (common-lisp:defun make-duration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unit value)
   (common-lisp:apply #'common-lisp:make-instance 'duration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input duration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input duration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "Unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input duration))
   common-lisp:nil))
(common-lisp:deftype duration-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass ebsoptions common-lisp:nil
                       ((throughput :initarg :throughput :type
                         (common-lisp:or integer-class common-lisp:null)
                         :accessor %ebsoptions-throughput :initform
                         common-lisp:nil)
                        (iops :initarg :iops :type
                         (common-lisp:or integer-class common-lisp:null)
                         :accessor %ebsoptions-iops :initform common-lisp:nil)
                        (volume-size :initarg :volume-size :type
                         (common-lisp:or integer-class common-lisp:null)
                         :accessor %ebsoptions-volume-size :initform
                         common-lisp:nil)
                        (volume-type :initarg :volume-type :type
                         (common-lisp:or volume-type common-lisp:null)
                         :accessor %ebsoptions-volume-type :initform
                         common-lisp:nil)
                        (ebsenabled :initarg :ebsenabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %ebsoptions-ebsenabled :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'ebsoptions 'make-ebsoptions))
 (common-lisp:defun make-ebsoptions
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key throughput iops volume-size volume-type
                     ebsenabled)
   (common-lisp:apply #'common-lisp:make-instance 'ebsoptions
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ebsoptions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ebsoptions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebsenabled))
      (common-lisp:list
       (common-lisp:cons "EBSEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-type))
      (common-lisp:list
       (common-lisp:cons "VolumeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size))
      (common-lisp:list
       (common-lisp:cons "VolumeSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "Iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'throughput))
      (common-lisp:list
       (common-lisp:cons "Throughput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ebsoptions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ebsoptions-status common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor %ebsoptions-status-status :initform
                         (common-lisp:error ":status is required"))
                        (options :initarg :options :type
                         (common-lisp:or ebsoptions common-lisp:null) :accessor
                         %ebsoptions-status-options :initform
                         (common-lisp:error ":options is required"))))
 (common-lisp:export
  (common-lisp:list 'ebsoptions-status 'make-ebsoptions-status))
 (common-lisp:defun make-ebsoptions-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status options)
   (common-lisp:apply #'common-lisp:make-instance 'ebsoptions-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ebsoptions-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ebsoptions-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ebsoptions-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass encryption-at-rest-options common-lisp:nil
                       ((kms-key-id :initarg :kms-key-id :type
                         (common-lisp:or kms-key-id common-lisp:null) :accessor
                         %encryption-at-rest-options-kms-key-id :initform
                         common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %encryption-at-rest-options-enabled :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'encryption-at-rest-options
                    'make-encryption-at-rest-options))
 (common-lisp:defun make-encryption-at-rest-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key-id enabled)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-at-rest-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encryption-at-rest-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encryption-at-rest-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encryption-at-rest-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass encryption-at-rest-options-status common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor %encryption-at-rest-options-status-status
                         :initform (common-lisp:error ":status is required"))
                        (options :initarg :options :type
                         (common-lisp:or encryption-at-rest-options
                                         common-lisp:null)
                         :accessor %encryption-at-rest-options-status-options
                         :initform
                         (common-lisp:error ":options is required"))))
 (common-lisp:export
  (common-lisp:list 'encryption-at-rest-options-status
                    'make-encryption-at-rest-options-status))
 (common-lisp:defun make-encryption-at-rest-options-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status options)
   (common-lisp:apply #'common-lisp:make-instance
                      'encryption-at-rest-options-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encryption-at-rest-options-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encryption-at-rest-options-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encryption-at-rest-options-status))
   common-lisp:nil))
(common-lisp:deftype endpoint () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype endpoints-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-endpoints-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype engine-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error-details common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or error-message common-lisp:null)
                         :accessor %error-details-error-message :initform
                         common-lisp:nil)
                        (error-type :initarg :error-type :type
                         (common-lisp:or error-type common-lisp:null) :accessor
                         %error-details-error-type :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'error-details 'make-error-details))
 (common-lisp:defun make-error-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message error-type)
   (common-lisp:apply #'common-lisp:make-instance 'error-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-type))
      (common-lisp:list
       (common-lisp:cons "ErrorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-details))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype error-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or value-string-list common-lisp:null)
                         :accessor %filter-values :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or non-empty-string common-lisp:null)
                         :accessor %filter-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defun make-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype guid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-compatible-versions-request common-lisp:nil
                       ((domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %get-compatible-versions-request-domain-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-compatible-versions-request
                    'make-get-compatible-versions-request))
 (common-lisp:defun make-get-compatible-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-compatible-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-compatible-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-compatible-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-compatible-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-compatible-versions-response common-lisp:nil
                       ((compatible-versions :initarg :compatible-versions
                         :type
                         (common-lisp:or compatible-versions-list
                                         common-lisp:null)
                         :accessor
                         %get-compatible-versions-response-compatible-versions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-compatible-versions-response
                    'make-get-compatible-versions-response))
 (common-lisp:defun make-get-compatible-versions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key compatible-versions)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-compatible-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-compatible-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-compatible-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compatible-versions))
      (common-lisp:list
       (common-lisp:cons "CompatibleVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-compatible-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-package-version-history-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-package-version-history-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %get-package-version-history-request-max-results
                         :initform common-lisp:nil)
                        (package-id :initarg :package-id :type
                         (common-lisp:or package-id common-lisp:null) :accessor
                         %get-package-version-history-request-package-id
                         :initform
                         (common-lisp:error ":package-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-package-version-history-request
                    'make-get-package-version-history-request))
 (common-lisp:defun make-get-package-version-history-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results package-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-package-version-history-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-history-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-package-version-history-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-package-version-history-response-next-token
                         :initform common-lisp:nil)
                        (package-version-history-list :initarg
                         :package-version-history-list :type
                         (common-lisp:or package-version-history-list
                                         common-lisp:null)
                         :accessor
                         %get-package-version-history-response-package-version-history-list
                         :initform common-lisp:nil)
                        (package-id :initarg :package-id :type
                         (common-lisp:or package-id common-lisp:null) :accessor
                         %get-package-version-history-response-package-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-package-version-history-response
                    'make-get-package-version-history-response))
 (common-lisp:defun make-get-package-version-history-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token package-version-history-list
                     package-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-package-version-history-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-history-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-history-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-id))
      (common-lisp:list
       (common-lisp:cons "PackageID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'package-version-history-list))
      (common-lisp:list
       (common-lisp:cons "PackageVersionHistoryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-package-version-history-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-upgrade-history-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %get-upgrade-history-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %get-upgrade-history-request-max-results
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %get-upgrade-history-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-upgrade-history-request
                    'make-get-upgrade-history-request))
 (common-lisp:defun make-get-upgrade-history-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-upgrade-history-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-upgrade-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-upgrade-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-upgrade-history-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-upgrade-history-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %get-upgrade-history-response-next-token :initform
                         common-lisp:nil)
                        (upgrade-histories :initarg :upgrade-histories :type
                         (common-lisp:or upgrade-history-list common-lisp:null)
                         :accessor
                         %get-upgrade-history-response-upgrade-histories
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-upgrade-history-response
                    'make-get-upgrade-history-response))
 (common-lisp:defun make-get-upgrade-history-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token upgrade-histories)
   (common-lisp:apply #'common-lisp:make-instance 'get-upgrade-history-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-upgrade-history-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-upgrade-history-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upgrade-histories))
      (common-lisp:list
       (common-lisp:cons "UpgradeHistories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-upgrade-history-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-upgrade-status-request common-lisp:nil
                       ((domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %get-upgrade-status-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-upgrade-status-request
                    'make-get-upgrade-status-request))
 (common-lisp:defun make-get-upgrade-status-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'get-upgrade-status-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-upgrade-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-upgrade-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-upgrade-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-upgrade-status-response common-lisp:nil
                       ((upgrade-name :initarg :upgrade-name :type
                         (common-lisp:or upgrade-name common-lisp:null)
                         :accessor %get-upgrade-status-response-upgrade-name
                         :initform common-lisp:nil)
                        (step-status :initarg :step-status :type
                         (common-lisp:or upgrade-status common-lisp:null)
                         :accessor %get-upgrade-status-response-step-status
                         :initform common-lisp:nil)
                        (upgrade-step :initarg :upgrade-step :type
                         (common-lisp:or upgrade-step common-lisp:null)
                         :accessor %get-upgrade-status-response-upgrade-step
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-upgrade-status-response
                    'make-get-upgrade-status-response))
 (common-lisp:defun make-get-upgrade-status-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key upgrade-name step-status upgrade-step)
   (common-lisp:apply #'common-lisp:make-instance 'get-upgrade-status-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-upgrade-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-upgrade-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upgrade-step))
      (common-lisp:list
       (common-lisp:cons "UpgradeStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-status))
      (common-lisp:list
       (common-lisp:cons "StepStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upgrade-name))
      (common-lisp:list
       (common-lisp:cons "UpgradeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-upgrade-status-response))
   common-lisp:nil))
(common-lisp:deftype identity-pool-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass inbound-connection common-lisp:nil
                       ((connection-mode :initarg :connection-mode :type
                         (common-lisp:or connection-mode common-lisp:null)
                         :accessor %inbound-connection-connection-mode
                         :initform common-lisp:nil)
                        (connection-status :initarg :connection-status :type
                         (common-lisp:or inbound-connection-status
                                         common-lisp:null)
                         :accessor %inbound-connection-connection-status
                         :initform common-lisp:nil)
                        (connection-id :initarg :connection-id :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor %inbound-connection-connection-id :initform
                         common-lisp:nil)
                        (remote-domain-info :initarg :remote-domain-info :type
                         (common-lisp:or domain-information-container
                                         common-lisp:null)
                         :accessor %inbound-connection-remote-domain-info
                         :initform common-lisp:nil)
                        (local-domain-info :initarg :local-domain-info :type
                         (common-lisp:or domain-information-container
                                         common-lisp:null)
                         :accessor %inbound-connection-local-domain-info
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'inbound-connection 'make-inbound-connection))
 (common-lisp:defun make-inbound-connection
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-mode connection-status
                     connection-id remote-domain-info local-domain-info)
   (common-lisp:apply #'common-lisp:make-instance 'inbound-connection
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input inbound-connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input inbound-connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-domain-info))
      (common-lisp:list
       (common-lisp:cons "LocalDomainInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-domain-info))
      (common-lisp:list
       (common-lisp:cons "RemoteDomainInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "ConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-status))
      (common-lisp:list
       (common-lisp:cons "ConnectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-mode))
      (common-lisp:list
       (common-lisp:cons "ConnectionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input inbound-connection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass inbound-connection-status common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or connection-status-message
                                         common-lisp:null)
                         :accessor %inbound-connection-status-message :initform
                         common-lisp:nil)
                        (status-code :initarg :status-code :type
                         (common-lisp:or inbound-connection-status-code
                                         common-lisp:null)
                         :accessor %inbound-connection-status-status-code
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'inbound-connection-status
                    'make-inbound-connection-status))
 (common-lisp:defun make-inbound-connection-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message status-code)
   (common-lisp:apply #'common-lisp:make-instance 'inbound-connection-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inbound-connection-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inbound-connection-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "StatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inbound-connection-status))
   common-lisp:nil))
(common-lisp:deftype inbound-connection-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype inbound-connections ()
   '(trivial-types:proper-list inbound-connection))
 (common-lisp:defun |make-inbound-connections|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list inbound-connection))
   aws-sdk/generator/shape::members))
(common-lisp:deftype instance-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass instance-count-limits common-lisp:nil
                       ((maximum-instance-count :initarg
                         :maximum-instance-count :type
                         (common-lisp:or maximum-instance-count
                                         common-lisp:null)
                         :accessor
                         %instance-count-limits-maximum-instance-count
                         :initform common-lisp:nil)
                        (minimum-instance-count :initarg
                         :minimum-instance-count :type
                         (common-lisp:or minimum-instance-count
                                         common-lisp:null)
                         :accessor
                         %instance-count-limits-minimum-instance-count
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'instance-count-limits 'make-instance-count-limits))
 (common-lisp:defun make-instance-count-limits
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key maximum-instance-count
                     minimum-instance-count)
   (common-lisp:apply #'common-lisp:make-instance 'instance-count-limits
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-count-limits))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-count-limits))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-instance-count))
      (common-lisp:list
       (common-lisp:cons "MinimumInstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-instance-count))
      (common-lisp:list
       (common-lisp:cons "MaximumInstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-count-limits))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-limits common-lisp:nil
                       ((instance-count-limits :initarg :instance-count-limits
                         :type
                         (common-lisp:or instance-count-limits
                                         common-lisp:null)
                         :accessor %instance-limits-instance-count-limits
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'instance-limits 'make-instance-limits))
 (common-lisp:defun make-instance-limits
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-count-limits)
   (common-lisp:apply #'common-lisp:make-instance 'instance-limits
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-limits))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-limits))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-count-limits))
      (common-lisp:list
       (common-lisp:cons "InstanceCountLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-limits))
   common-lisp:nil))
(common-lisp:deftype instance-role () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-role-list ()
   '(trivial-types:proper-list instance-role))
 (common-lisp:defun |make-instance-role-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-role))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass instance-type-details common-lisp:nil
                       ((instance-role :initarg :instance-role :type
                         (common-lisp:or instance-role-list common-lisp:null)
                         :accessor %instance-type-details-instance-role
                         :initform common-lisp:nil)
                        (warm-enabled :initarg :warm-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %instance-type-details-warm-enabled :initform
                         common-lisp:nil)
                        (advanced-security-enabled :initarg
                         :advanced-security-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %instance-type-details-advanced-security-enabled
                         :initform common-lisp:nil)
                        (app-logs-enabled :initarg :app-logs-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %instance-type-details-app-logs-enabled :initform
                         common-lisp:nil)
                        (cognito-enabled :initarg :cognito-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %instance-type-details-cognito-enabled :initform
                         common-lisp:nil)
                        (encryption-enabled :initarg :encryption-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %instance-type-details-encryption-enabled :initform
                         common-lisp:nil)
                        (instance-type :initarg :instance-type :type
                         (common-lisp:or open-search-partition-instance-type
                                         common-lisp:null)
                         :accessor %instance-type-details-instance-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'instance-type-details 'make-instance-type-details))
 (common-lisp:defun make-instance-type-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-role warm-enabled
                     advanced-security-enabled app-logs-enabled cognito-enabled
                     encryption-enabled instance-type)
   (common-lisp:apply #'common-lisp:make-instance 'instance-type-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-type-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-type-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-enabled))
      (common-lisp:list
       (common-lisp:cons "EncryptionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cognito-enabled))
      (common-lisp:list
       (common-lisp:cons "CognitoEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-logs-enabled))
      (common-lisp:list
       (common-lisp:cons "AppLogsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-security-enabled))
      (common-lisp:list
       (common-lisp:cons "AdvancedSecurityEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warm-enabled))
      (common-lisp:list
       (common-lisp:cons "WarmEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-role))
      (common-lisp:list
       (common-lisp:cons "InstanceRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-type-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-type-details-list ()
   '(trivial-types:proper-list instance-type-details))
 (common-lisp:defun |make-instance-type-details-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-type-details))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:deftype integer-class () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-exception
     (opensearch-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'internal-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-pagination-token-exception
     (opensearch-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-pagination-token-exception)))
(common-lisp:progn
 (common-lisp:define-condition invalid-type-exception
     (opensearch-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'invalid-type-exception)))
(common-lisp:deftype issue () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype issues () '(trivial-types:proper-list issue))
 (common-lisp:defun |make-issues|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list issue))
   aws-sdk/generator/shape::members))
(common-lisp:deftype kms-key-id () 'common-lisp:string)
(common-lisp:deftype last-updated () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (opensearch-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'limit-exceeded-exception)))
(common-lisp:deftype limit-name () 'common-lisp:string)
(common-lisp:deftype limit-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype limit-value-list ()
   '(trivial-types:proper-list limit-value))
 (common-lisp:defun |make-limit-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list limit-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass limits common-lisp:nil
                       ((additional-limits :initarg :additional-limits :type
                         (common-lisp:or additional-limit-list
                                         common-lisp:null)
                         :accessor %limits-additional-limits :initform
                         common-lisp:nil)
                        (instance-limits :initarg :instance-limits :type
                         (common-lisp:or instance-limits common-lisp:null)
                         :accessor %limits-instance-limits :initform
                         common-lisp:nil)
                        (storage-types :initarg :storage-types :type
                         (common-lisp:or storage-type-list common-lisp:null)
                         :accessor %limits-storage-types :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'limits 'make-limits))
 (common-lisp:defun make-limits
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key additional-limits instance-limits
                     storage-types)
   (common-lisp:apply #'common-lisp:make-instance 'limits
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input limits))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input limits))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-types))
      (common-lisp:list
       (common-lisp:cons "StorageTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-limits))
      (common-lisp:list
       (common-lisp:cons "InstanceLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'additional-limits))
      (common-lisp:list
       (common-lisp:cons "AdditionalLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input limits))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype limits-by-role () 'common-lisp:hash-table)
 (common-lisp:defun |make-limits-by-role| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass list-domain-names-request common-lisp:nil
                       ((engine-type :initarg :engine-type :type
                         (common-lisp:or engine-type common-lisp:null)
                         :accessor %list-domain-names-request-engine-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-domain-names-request
                    'make-list-domain-names-request))
 (common-lisp:defun make-list-domain-names-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key engine-type)
   (common-lisp:apply #'common-lisp:make-instance 'list-domain-names-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-domain-names-response common-lisp:nil
                       ((domain-names :initarg :domain-names :type
                         (common-lisp:or domain-info-list common-lisp:null)
                         :accessor %list-domain-names-response-domain-names
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-domain-names-response
                    'make-list-domain-names-response))
 (common-lisp:defun make-list-domain-names-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-names)
   (common-lisp:apply #'common-lisp:make-instance 'list-domain-names-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-names))
      (common-lisp:list
       (common-lisp:cons "DomainNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-domain-names-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-domains-for-package-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-domains-for-package-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-domains-for-package-request-max-results
                         :initform common-lisp:nil)
                        (package-id :initarg :package-id :type
                         (common-lisp:or package-id common-lisp:null) :accessor
                         %list-domains-for-package-request-package-id :initform
                         (common-lisp:error ":package-id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-domains-for-package-request
                    'make-list-domains-for-package-request))
 (common-lisp:defun make-list-domains-for-package-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results package-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-domains-for-package-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-for-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-for-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-for-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-domains-for-package-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-domains-for-package-response-next-token
                         :initform common-lisp:nil)
                        (domain-package-details-list :initarg
                         :domain-package-details-list :type
                         (common-lisp:or domain-package-details-list
                                         common-lisp:null)
                         :accessor
                         %list-domains-for-package-response-domain-package-details-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-domains-for-package-response
                    'make-list-domains-for-package-response))
 (common-lisp:defun make-list-domains-for-package-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token domain-package-details-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-domains-for-package-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-for-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-for-package-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-package-details-list))
      (common-lisp:list
       (common-lisp:cons "DomainPackageDetailsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-for-package-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-instance-type-details-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-instance-type-details-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-instance-type-details-request-max-results
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %list-instance-type-details-request-domain-name
                         :initform common-lisp:nil)
                        (engine-version :initarg :engine-version :type
                         (common-lisp:or version-string common-lisp:null)
                         :accessor
                         %list-instance-type-details-request-engine-version
                         :initform
                         (common-lisp:error ":engine-version is required"))))
 (common-lisp:export
  (common-lisp:list 'list-instance-type-details-request
                    'make-list-instance-type-details-request))
 (common-lisp:defun make-list-instance-type-details-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results domain-name
                     engine-version)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-instance-type-details-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-type-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-type-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-type-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-instance-type-details-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-instance-type-details-response-next-token
                         :initform common-lisp:nil)
                        (instance-type-details :initarg :instance-type-details
                         :type
                         (common-lisp:or instance-type-details-list
                                         common-lisp:null)
                         :accessor
                         %list-instance-type-details-response-instance-type-details
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-instance-type-details-response
                    'make-list-instance-type-details-response))
 (common-lisp:defun make-list-instance-type-details-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token instance-type-details)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-instance-type-details-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-type-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-type-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-type-details))
      (common-lisp:list
       (common-lisp:cons "InstanceTypeDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-type-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-packages-for-domain-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-packages-for-domain-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-packages-for-domain-request-max-results
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %list-packages-for-domain-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-packages-for-domain-request
                    'make-list-packages-for-domain-request))
 (common-lisp:defun make-list-packages-for-domain-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-packages-for-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-for-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-for-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-for-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-packages-for-domain-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-packages-for-domain-response-next-token
                         :initform common-lisp:nil)
                        (domain-package-details-list :initarg
                         :domain-package-details-list :type
                         (common-lisp:or domain-package-details-list
                                         common-lisp:null)
                         :accessor
                         %list-packages-for-domain-response-domain-package-details-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-packages-for-domain-response
                    'make-list-packages-for-domain-response))
 (common-lisp:defun make-list-packages-for-domain-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token domain-package-details-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-packages-for-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-for-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-for-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-package-details-list))
      (common-lisp:list
       (common-lisp:cons "DomainPackageDetailsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-packages-for-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-scheduled-actions-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-scheduled-actions-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-scheduled-actions-request-max-results
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %list-scheduled-actions-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-scheduled-actions-request
                    'make-list-scheduled-actions-request))
 (common-lisp:defun make-list-scheduled-actions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-scheduled-actions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-actions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-actions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-actions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-scheduled-actions-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-scheduled-actions-response-next-token :initform
                         common-lisp:nil)
                        (scheduled-actions :initarg :scheduled-actions :type
                         (common-lisp:or scheduled-actions-list
                                         common-lisp:null)
                         :accessor
                         %list-scheduled-actions-response-scheduled-actions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-scheduled-actions-response
                    'make-list-scheduled-actions-response))
 (common-lisp:defun make-list-scheduled-actions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token scheduled-actions)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-scheduled-actions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-actions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-actions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-actions))
      (common-lisp:list
       (common-lisp:cons "ScheduledActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-scheduled-actions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-request common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-tags-request-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-request 'make-list-tags-request))
 (common-lisp:defun make-list-tags-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-response common-lisp:nil
                       ((tag-list :initarg :tag-list :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-response-tag-list :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-response 'make-list-tags-response))
 (common-lisp:defun make-list-tags-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-tags-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-versions-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-versions-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-versions-request-max-results :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-versions-request 'make-list-versions-request))
 (common-lisp:defun make-list-versions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-versions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-versions-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-versions-response-next-token :initform
                         common-lisp:nil)
                        (versions :initarg :versions :type
                         (common-lisp:or version-list common-lisp:null)
                         :accessor %list-versions-response-versions :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-versions-response 'make-list-versions-response))
 (common-lisp:defun make-list-versions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token versions)
   (common-lisp:apply #'common-lisp:make-instance 'list-versions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "Versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vpc-endpoint-access-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-vpc-endpoint-access-request-next-token :initform
                         common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %list-vpc-endpoint-access-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-vpc-endpoint-access-request
                    'make-list-vpc-endpoint-access-request))
 (common-lisp:defun make-list-vpc-endpoint-access-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-vpc-endpoint-access-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoint-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoint-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoint-access-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vpc-endpoint-access-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-vpc-endpoint-access-response-next-token
                         :initform
                         (common-lisp:error ":next-token is required"))
                        (authorized-principal-list :initarg
                         :authorized-principal-list :type
                         (common-lisp:or authorized-principal-list
                                         common-lisp:null)
                         :accessor
                         %list-vpc-endpoint-access-response-authorized-principal-list
                         :initform
                         (common-lisp:error
                          ":authorized-principal-list is required"))))
 (common-lisp:export
  (common-lisp:list 'list-vpc-endpoint-access-response
                    'make-list-vpc-endpoint-access-response))
 (common-lisp:defun make-list-vpc-endpoint-access-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token authorized-principal-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-vpc-endpoint-access-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoint-access-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoint-access-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorized-principal-list))
      (common-lisp:list
       (common-lisp:cons "AuthorizedPrincipalList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoint-access-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vpc-endpoints-for-domain-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-vpc-endpoints-for-domain-request-next-token
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %list-vpc-endpoints-for-domain-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-vpc-endpoints-for-domain-request
                    'make-list-vpc-endpoints-for-domain-request))
 (common-lisp:defun make-list-vpc-endpoints-for-domain-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-vpc-endpoints-for-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoints-for-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoints-for-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoints-for-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vpc-endpoints-for-domain-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-vpc-endpoints-for-domain-response-next-token
                         :initform
                         (common-lisp:error ":next-token is required"))
                        (vpc-endpoint-summary-list :initarg
                         :vpc-endpoint-summary-list :type
                         (common-lisp:or vpc-endpoint-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-vpc-endpoints-for-domain-response-vpc-endpoint-summary-list
                         :initform
                         (common-lisp:error
                          ":vpc-endpoint-summary-list is required"))))
 (common-lisp:export
  (common-lisp:list 'list-vpc-endpoints-for-domain-response
                    'make-list-vpc-endpoints-for-domain-response))
 (common-lisp:defun make-list-vpc-endpoints-for-domain-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token vpc-endpoint-summary-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-vpc-endpoints-for-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoints-for-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoints-for-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-endpoint-summary-list))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoints-for-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vpc-endpoints-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-vpc-endpoints-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-vpc-endpoints-request
                    'make-list-vpc-endpoints-request))
 (common-lisp:defun make-list-vpc-endpoints-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-vpc-endpoints-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vpc-endpoints-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-vpc-endpoints-response-next-token :initform
                         (common-lisp:error ":next-token is required"))
                        (vpc-endpoint-summary-list :initarg
                         :vpc-endpoint-summary-list :type
                         (common-lisp:or vpc-endpoint-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-vpc-endpoints-response-vpc-endpoint-summary-list
                         :initform
                         (common-lisp:error
                          ":vpc-endpoint-summary-list is required"))))
 (common-lisp:export
  (common-lisp:list 'list-vpc-endpoints-response
                    'make-list-vpc-endpoints-response))
 (common-lisp:defun make-list-vpc-endpoints-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token vpc-endpoint-summary-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-vpc-endpoints-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-endpoint-summary-list))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-endpoints-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass log-publishing-option common-lisp:nil
                       ((enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %log-publishing-option-enabled :initform
                         common-lisp:nil)
                        (cloud-watch-logs-log-group-arn :initarg
                         :cloud-watch-logs-log-group-arn :type
                         (common-lisp:or cloud-watch-logs-log-group-arn
                                         common-lisp:null)
                         :accessor
                         %log-publishing-option-cloud-watch-logs-log-group-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'log-publishing-option 'make-log-publishing-option))
 (common-lisp:defun make-log-publishing-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled cloud-watch-logs-log-group-arn)
   (common-lisp:apply #'common-lisp:make-instance 'log-publishing-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          log-publishing-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          log-publishing-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-watch-logs-log-group-arn))
      (common-lisp:list
       (common-lisp:cons "CloudWatchLogsLogGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          log-publishing-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-publishing-options () 'common-lisp:hash-table)
 (common-lisp:defun |make-log-publishing-options|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass log-publishing-options-status common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor %log-publishing-options-status-status
                         :initform common-lisp:nil)
                        (options :initarg :options :type
                         (common-lisp:or log-publishing-options
                                         common-lisp:null)
                         :accessor %log-publishing-options-status-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'log-publishing-options-status
                    'make-log-publishing-options-status))
 (common-lisp:defun make-log-publishing-options-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status options)
   (common-lisp:apply #'common-lisp:make-instance
                      'log-publishing-options-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          log-publishing-options-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          log-publishing-options-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          log-publishing-options-status))
   common-lisp:nil))
(common-lisp:deftype log-type () 'common-lisp:string)
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass master-user-options common-lisp:nil
                       ((master-user-password :initarg :master-user-password
                         :type (common-lisp:or password common-lisp:null)
                         :accessor %master-user-options-master-user-password
                         :initform common-lisp:nil)
                        (master-user-name :initarg :master-user-name :type
                         (common-lisp:or username common-lisp:null) :accessor
                         %master-user-options-master-user-name :initform
                         common-lisp:nil)
                        (master-user-arn :initarg :master-user-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %master-user-options-master-user-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'master-user-options 'make-master-user-options))
 (common-lisp:defun make-master-user-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key master-user-password master-user-name
                     master-user-arn)
   (common-lisp:apply #'common-lisp:make-instance 'master-user-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input master-user-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input master-user-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-user-arn))
      (common-lisp:list
       (common-lisp:cons "MasterUserARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-user-name))
      (common-lisp:list
       (common-lisp:cons "MasterUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "MasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input master-user-options))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype maximum-instance-count () 'common-lisp:integer)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:deftype minimum-instance-count () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass node-to-node-encryption-options common-lisp:nil
                       ((enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %node-to-node-encryption-options-enabled :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'node-to-node-encryption-options
                    'make-node-to-node-encryption-options))
 (common-lisp:defun make-node-to-node-encryption-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'node-to-node-encryption-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-to-node-encryption-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-to-node-encryption-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-to-node-encryption-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass node-to-node-encryption-options-status common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor
                         %node-to-node-encryption-options-status-status
                         :initform (common-lisp:error ":status is required"))
                        (options :initarg :options :type
                         (common-lisp:or node-to-node-encryption-options
                                         common-lisp:null)
                         :accessor
                         %node-to-node-encryption-options-status-options
                         :initform
                         (common-lisp:error ":options is required"))))
 (common-lisp:export
  (common-lisp:list 'node-to-node-encryption-options-status
                    'make-node-to-node-encryption-options-status))
 (common-lisp:defun make-node-to-node-encryption-options-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status options)
   (common-lisp:apply #'common-lisp:make-instance
                      'node-to-node-encryption-options-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          node-to-node-encryption-options-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          node-to-node-encryption-options-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          node-to-node-encryption-options-status))
   common-lisp:nil))
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass off-peak-window common-lisp:nil
                       ((window-start-time :initarg :window-start-time :type
                         (common-lisp:or window-start-time common-lisp:null)
                         :accessor %off-peak-window-window-start-time :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'off-peak-window 'make-off-peak-window))
 (common-lisp:defun make-off-peak-window
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key window-start-time)
   (common-lisp:apply #'common-lisp:make-instance 'off-peak-window
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input off-peak-window))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input off-peak-window))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window-start-time))
      (common-lisp:list
       (common-lisp:cons "WindowStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input off-peak-window))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass off-peak-window-options common-lisp:nil
                       ((off-peak-window :initarg :off-peak-window :type
                         (common-lisp:or off-peak-window common-lisp:null)
                         :accessor %off-peak-window-options-off-peak-window
                         :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %off-peak-window-options-enabled :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'off-peak-window-options 'make-off-peak-window-options))
 (common-lisp:defun make-off-peak-window-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key off-peak-window enabled)
   (common-lisp:apply #'common-lisp:make-instance 'off-peak-window-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          off-peak-window-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          off-peak-window-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'off-peak-window))
      (common-lisp:list
       (common-lisp:cons "OffPeakWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          off-peak-window-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass off-peak-window-options-status common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor %off-peak-window-options-status-status
                         :initform common-lisp:nil)
                        (options :initarg :options :type
                         (common-lisp:or off-peak-window-options
                                         common-lisp:null)
                         :accessor %off-peak-window-options-status-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'off-peak-window-options-status
                    'make-off-peak-window-options-status))
 (common-lisp:defun make-off-peak-window-options-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status options)
   (common-lisp:apply #'common-lisp:make-instance
                      'off-peak-window-options-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          off-peak-window-options-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          off-peak-window-options-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          off-peak-window-options-status))
   common-lisp:nil))
(common-lisp:deftype open-search-partition-instance-type () 'common-lisp:string)
(common-lisp:deftype open-search-warm-partition-instance-type ()
  'common-lisp:string)
(common-lisp:deftype option-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass option-status common-lisp:nil
                       ((pending-deletion :initarg :pending-deletion :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %option-status-pending-deletion :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or option-state common-lisp:null)
                         :accessor %option-status-state :initform
                         (common-lisp:error ":state is required"))
                        (update-version :initarg :update-version :type
                         (common-lisp:or uint-value common-lisp:null) :accessor
                         %option-status-update-version :initform
                         common-lisp:nil)
                        (update-date :initarg :update-date :type
                         (common-lisp:or update-timestamp common-lisp:null)
                         :accessor %option-status-update-date :initform
                         (common-lisp:error ":update-date is required"))
                        (creation-date :initarg :creation-date :type
                         (common-lisp:or update-timestamp common-lisp:null)
                         :accessor %option-status-creation-date :initform
                         (common-lisp:error ":creation-date is required"))))
 (common-lisp:export (common-lisp:list 'option-status 'make-option-status))
 (common-lisp:defun make-option-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key pending-deletion state update-version
                     update-date creation-date)
   (common-lisp:apply #'common-lisp:make-instance 'option-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input option-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input option-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "CreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date))
      (common-lisp:list
       (common-lisp:cons "UpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-version))
      (common-lisp:list
       (common-lisp:cons "UpdateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-deletion))
      (common-lisp:list
       (common-lisp:cons "PendingDeletion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input option-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass outbound-connection common-lisp:nil
                       ((connection-properties :initarg :connection-properties
                         :type
                         (common-lisp:or connection-properties
                                         common-lisp:null)
                         :accessor %outbound-connection-connection-properties
                         :initform common-lisp:nil)
                        (connection-mode :initarg :connection-mode :type
                         (common-lisp:or connection-mode common-lisp:null)
                         :accessor %outbound-connection-connection-mode
                         :initform common-lisp:nil)
                        (connection-status :initarg :connection-status :type
                         (common-lisp:or outbound-connection-status
                                         common-lisp:null)
                         :accessor %outbound-connection-connection-status
                         :initform common-lisp:nil)
                        (connection-alias :initarg :connection-alias :type
                         (common-lisp:or connection-alias common-lisp:null)
                         :accessor %outbound-connection-connection-alias
                         :initform common-lisp:nil)
                        (connection-id :initarg :connection-id :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor %outbound-connection-connection-id :initform
                         common-lisp:nil)
                        (remote-domain-info :initarg :remote-domain-info :type
                         (common-lisp:or domain-information-container
                                         common-lisp:null)
                         :accessor %outbound-connection-remote-domain-info
                         :initform common-lisp:nil)
                        (local-domain-info :initarg :local-domain-info :type
                         (common-lisp:or domain-information-container
                                         common-lisp:null)
                         :accessor %outbound-connection-local-domain-info
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'outbound-connection 'make-outbound-connection))
 (common-lisp:defun make-outbound-connection
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-properties connection-mode
                     connection-status connection-alias connection-id
                     remote-domain-info local-domain-info)
   (common-lisp:apply #'common-lisp:make-instance 'outbound-connection
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input outbound-connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input outbound-connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-domain-info))
      (common-lisp:list
       (common-lisp:cons "LocalDomainInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remote-domain-info))
      (common-lisp:list
       (common-lisp:cons "RemoteDomainInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-id))
      (common-lisp:list
       (common-lisp:cons "ConnectionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-alias))
      (common-lisp:list
       (common-lisp:cons "ConnectionAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-status))
      (common-lisp:list
       (common-lisp:cons "ConnectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-mode))
      (common-lisp:list
       (common-lisp:cons "ConnectionMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-properties))
      (common-lisp:list
       (common-lisp:cons "ConnectionProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input outbound-connection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass outbound-connection-status common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or connection-status-message
                                         common-lisp:null)
                         :accessor %outbound-connection-status-message
                         :initform common-lisp:nil)
                        (status-code :initarg :status-code :type
                         (common-lisp:or outbound-connection-status-code
                                         common-lisp:null)
                         :accessor %outbound-connection-status-status-code
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'outbound-connection-status
                    'make-outbound-connection-status))
 (common-lisp:defun make-outbound-connection-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message status-code)
   (common-lisp:apply #'common-lisp:make-instance 'outbound-connection-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          outbound-connection-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          outbound-connection-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-code))
      (common-lisp:list
       (common-lisp:cons "StatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          outbound-connection-status))
   common-lisp:nil))
(common-lisp:deftype outbound-connection-status-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype outbound-connections ()
   '(trivial-types:proper-list outbound-connection))
 (common-lisp:defun |make-outbound-connections|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list outbound-connection))
   aws-sdk/generator/shape::members))
(common-lisp:deftype overall-change-status () 'common-lisp:string)
(common-lisp:deftype owner-id () 'common-lisp:string)
(common-lisp:deftype package-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass package-details common-lisp:nil
                       ((error-details :initarg :error-details :type
                         (common-lisp:or error-details common-lisp:null)
                         :accessor %package-details-error-details :initform
                         common-lisp:nil)
                        (available-package-version :initarg
                         :available-package-version :type
                         (common-lisp:or package-version common-lisp:null)
                         :accessor %package-details-available-package-version
                         :initform common-lisp:nil)
                        (last-updated-at :initarg :last-updated-at :type
                         (common-lisp:or last-updated common-lisp:null)
                         :accessor %package-details-last-updated-at :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %package-details-created-at :initform common-lisp:nil)
                        (package-status :initarg :package-status :type
                         (common-lisp:or package-status common-lisp:null)
                         :accessor %package-details-package-status :initform
                         common-lisp:nil)
                        (package-description :initarg :package-description
                         :type
                         (common-lisp:or package-description common-lisp:null)
                         :accessor %package-details-package-description
                         :initform common-lisp:nil)
                        (package-type :initarg :package-type :type
                         (common-lisp:or package-type common-lisp:null)
                         :accessor %package-details-package-type :initform
                         common-lisp:nil)
                        (package-name :initarg :package-name :type
                         (common-lisp:or package-name common-lisp:null)
                         :accessor %package-details-package-name :initform
                         common-lisp:nil)
                        (package-id :initarg :package-id :type
                         (common-lisp:or package-id common-lisp:null) :accessor
                         %package-details-package-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'package-details 'make-package-details))
 (common-lisp:defun make-package-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-details available-package-version
                     last-updated-at created-at package-status
                     package-description package-type package-name package-id)
   (common-lisp:apply #'common-lisp:make-instance 'package-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input package-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input package-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-id))
      (common-lisp:list
       (common-lisp:cons "PackageID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-name))
      (common-lisp:list
       (common-lisp:cons "PackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-type))
      (common-lisp:list
       (common-lisp:cons "PackageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-description))
      (common-lisp:list
       (common-lisp:cons "PackageDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-status))
      (common-lisp:list
       (common-lisp:cons "PackageStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-at))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'available-package-version))
      (common-lisp:list
       (common-lisp:cons "AvailablePackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-details))
      (common-lisp:list
       (common-lisp:cons "ErrorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input package-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype package-details-list ()
   '(trivial-types:proper-list package-details))
 (common-lisp:defun |make-package-details-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list package-details))
   aws-sdk/generator/shape::members))
(common-lisp:deftype package-id () 'common-lisp:string)
(common-lisp:deftype package-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass package-source common-lisp:nil
                       ((s3key :initarg :s3key :type
                         (common-lisp:or s3key common-lisp:null) :accessor
                         %package-source-s3key :initform common-lisp:nil)
                        (s3bucket-name :initarg :s3bucket-name :type
                         (common-lisp:or s3bucket-name common-lisp:null)
                         :accessor %package-source-s3bucket-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'package-source 'make-package-source))
 (common-lisp:defun make-package-source
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key s3key s3bucket-name)
   (common-lisp:apply #'common-lisp:make-instance 'package-source
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input package-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input package-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3key))
      (common-lisp:list
       (common-lisp:cons "S3Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input package-source))
   common-lisp:nil))
(common-lisp:deftype package-status () 'common-lisp:string)
(common-lisp:deftype package-type () 'common-lisp:string)
(common-lisp:deftype package-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass package-version-history common-lisp:nil
                       ((created-at :initarg :created-at :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %package-version-history-created-at :initform
                         common-lisp:nil)
                        (commit-message :initarg :commit-message :type
                         (common-lisp:or commit-message common-lisp:null)
                         :accessor %package-version-history-commit-message
                         :initform common-lisp:nil)
                        (package-version :initarg :package-version :type
                         (common-lisp:or package-version common-lisp:null)
                         :accessor %package-version-history-package-version
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'package-version-history 'make-package-version-history))
 (common-lisp:defun make-package-version-history
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-at commit-message
                     package-version)
   (common-lisp:apply #'common-lisp:make-instance 'package-version-history
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          package-version-history))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          package-version-history))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version))
      (common-lisp:list
       (common-lisp:cons "PackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-message))
      (common-lisp:list
       (common-lisp:cons "CommitMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          package-version-history))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype package-version-history-list ()
   '(trivial-types:proper-list package-version-history))
 (common-lisp:defun |make-package-version-history-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list package-version-history))
   aws-sdk/generator/shape::members))
(common-lisp:deftype password () 'common-lisp:string)
(common-lisp:deftype policy-document () 'common-lisp:string)
(common-lisp:deftype principal-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass purchase-reserved-instance-offering-request
                       common-lisp:nil
                       ((instance-count :initarg :instance-count :type
                         (common-lisp:or instance-count common-lisp:null)
                         :accessor
                         %purchase-reserved-instance-offering-request-instance-count
                         :initform common-lisp:nil)
                        (reservation-name :initarg :reservation-name :type
                         (common-lisp:or reservation-token common-lisp:null)
                         :accessor
                         %purchase-reserved-instance-offering-request-reservation-name
                         :initform
                         (common-lisp:error ":reservation-name is required"))
                        (reserved-instance-offering-id :initarg
                         :reserved-instance-offering-id :type
                         (common-lisp:or guid common-lisp:null) :accessor
                         %purchase-reserved-instance-offering-request-reserved-instance-offering-id
                         :initform
                         (common-lisp:error
                          ":reserved-instance-offering-id is required"))))
 (common-lisp:export
  (common-lisp:list 'purchase-reserved-instance-offering-request
                    'make-purchase-reserved-instance-offering-request))
 (common-lisp:defun make-purchase-reserved-instance-offering-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-count reservation-name
                     reserved-instance-offering-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'purchase-reserved-instance-offering-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-instance-offering-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-instance-offering-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instance-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedInstanceOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-name))
      (common-lisp:list
       (common-lisp:cons "ReservationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-instance-offering-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass purchase-reserved-instance-offering-response
                       common-lisp:nil
                       ((reservation-name :initarg :reservation-name :type
                         (common-lisp:or reservation-token common-lisp:null)
                         :accessor
                         %purchase-reserved-instance-offering-response-reservation-name
                         :initform common-lisp:nil)
                        (reserved-instance-id :initarg :reserved-instance-id
                         :type (common-lisp:or guid common-lisp:null) :accessor
                         %purchase-reserved-instance-offering-response-reserved-instance-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'purchase-reserved-instance-offering-response
                    'make-purchase-reserved-instance-offering-response))
 (common-lisp:defun make-purchase-reserved-instance-offering-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key reservation-name reserved-instance-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'purchase-reserved-instance-offering-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-instance-offering-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-instance-offering-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instance-id))
      (common-lisp:list
       (common-lisp:cons "ReservedInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-name))
      (common-lisp:list
       (common-lisp:cons "ReservationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-reserved-instance-offering-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass recurring-charge common-lisp:nil
                       ((recurring-charge-frequency :initarg
                         :recurring-charge-frequency :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %recurring-charge-recurring-charge-frequency :initform
                         common-lisp:nil)
                        (recurring-charge-amount :initarg
                         :recurring-charge-amount :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %recurring-charge-recurring-charge-amount :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'recurring-charge 'make-recurring-charge))
 (common-lisp:defun make-recurring-charge
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recurring-charge-frequency
                     recurring-charge-amount)
   (common-lisp:apply #'common-lisp:make-instance 'recurring-charge
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input recurring-charge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input recurring-charge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recurring-charge-amount))
      (common-lisp:list
       (common-lisp:cons "RecurringChargeAmount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recurring-charge-frequency))
      (common-lisp:list
       (common-lisp:cons "RecurringChargeFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input recurring-charge))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recurring-charge-list ()
   '(trivial-types:proper-list recurring-charge))
 (common-lisp:defun |make-recurring-charge-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list recurring-charge))
   aws-sdk/generator/shape::members))
(common-lisp:deftype reference-path () 'common-lisp:string)
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reject-inbound-connection-request common-lisp:nil
                       ((connection-id :initarg :connection-id :type
                         (common-lisp:or connection-id common-lisp:null)
                         :accessor
                         %reject-inbound-connection-request-connection-id
                         :initform
                         (common-lisp:error ":connection-id is required"))))
 (common-lisp:export
  (common-lisp:list 'reject-inbound-connection-request
                    'make-reject-inbound-connection-request))
 (common-lisp:defun make-reject-inbound-connection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'reject-inbound-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-inbound-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-inbound-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-inbound-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reject-inbound-connection-response common-lisp:nil
                       ((connection :initarg :connection :type
                         (common-lisp:or inbound-connection common-lisp:null)
                         :accessor
                         %reject-inbound-connection-response-connection
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'reject-inbound-connection-response
                    'make-reject-inbound-connection-response))
 (common-lisp:defun make-reject-inbound-connection-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection)
   (common-lisp:apply #'common-lisp:make-instance
                      'reject-inbound-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-inbound-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-inbound-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection))
      (common-lisp:list
       (common-lisp:cons "Connection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-inbound-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-tags-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %remove-tags-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (arn :initarg :arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %remove-tags-request-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-tags-request 'make-remove-tags-request))
 (common-lisp:defun make-remove-tags-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys arn)
   (common-lisp:apply #'common-lisp:make-instance 'remove-tags-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remove-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remove-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "ARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remove-tags-request))
   common-lisp:nil))
(common-lisp:deftype reservation-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass reserved-instance common-lisp:nil
                       ((recurring-charges :initarg :recurring-charges :type
                         (common-lisp:or recurring-charge-list
                                         common-lisp:null)
                         :accessor %reserved-instance-recurring-charges
                         :initform common-lisp:nil)
                        (payment-option :initarg :payment-option :type
                         (common-lisp:or reserved-instance-payment-option
                                         common-lisp:null)
                         :accessor %reserved-instance-payment-option :initform
                         common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %reserved-instance-state :initform common-lisp:nil)
                        (instance-count :initarg :instance-count :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %reserved-instance-instance-count :initform
                         common-lisp:nil)
                        (currency-code :initarg :currency-code :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %reserved-instance-currency-code :initform
                         common-lisp:nil)
                        (usage-price :initarg :usage-price :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %reserved-instance-usage-price :initform
                         common-lisp:nil)
                        (fixed-price :initarg :fixed-price :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %reserved-instance-fixed-price :initform
                         common-lisp:nil)
                        (duration :initarg :duration :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %reserved-instance-duration :initform common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or update-timestamp common-lisp:null)
                         :accessor %reserved-instance-start-time :initform
                         common-lisp:nil)
                        (instance-type :initarg :instance-type :type
                         (common-lisp:or open-search-partition-instance-type
                                         common-lisp:null)
                         :accessor %reserved-instance-instance-type :initform
                         common-lisp:nil)
                        (reserved-instance-offering-id :initarg
                         :reserved-instance-offering-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %reserved-instance-reserved-instance-offering-id
                         :initform common-lisp:nil)
                        (billing-subscription-id :initarg
                         :billing-subscription-id :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %reserved-instance-billing-subscription-id :initform
                         common-lisp:nil)
                        (reserved-instance-id :initarg :reserved-instance-id
                         :type (common-lisp:or guid common-lisp:null) :accessor
                         %reserved-instance-reserved-instance-id :initform
                         common-lisp:nil)
                        (reservation-name :initarg :reservation-name :type
                         (common-lisp:or reservation-token common-lisp:null)
                         :accessor %reserved-instance-reservation-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'reserved-instance 'make-reserved-instance))
 (common-lisp:defun make-reserved-instance
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recurring-charges payment-option state
                     instance-count currency-code usage-price fixed-price
                     duration start-time instance-type
                     reserved-instance-offering-id billing-subscription-id
                     reserved-instance-id reservation-name)
   (common-lisp:apply #'common-lisp:make-instance 'reserved-instance
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reserved-instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reserved-instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-name))
      (common-lisp:list
       (common-lisp:cons "ReservationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instance-id))
      (common-lisp:list
       (common-lisp:cons "ReservedInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'billing-subscription-id))
      (common-lisp:list
       (common-lisp:cons "BillingSubscriptionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instance-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedInstanceOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "PaymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurring-charges))
      (common-lisp:list
       (common-lisp:cons "RecurringCharges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reserved-instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reserved-instance-list ()
   '(trivial-types:proper-list reserved-instance))
 (common-lisp:defun |make-reserved-instance-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reserved-instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass reserved-instance-offering common-lisp:nil
                       ((recurring-charges :initarg :recurring-charges :type
                         (common-lisp:or recurring-charge-list
                                         common-lisp:null)
                         :accessor
                         %reserved-instance-offering-recurring-charges
                         :initform common-lisp:nil)
                        (payment-option :initarg :payment-option :type
                         (common-lisp:or reserved-instance-payment-option
                                         common-lisp:null)
                         :accessor %reserved-instance-offering-payment-option
                         :initform common-lisp:nil)
                        (currency-code :initarg :currency-code :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %reserved-instance-offering-currency-code :initform
                         common-lisp:nil)
                        (usage-price :initarg :usage-price :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %reserved-instance-offering-usage-price :initform
                         common-lisp:nil)
                        (fixed-price :initarg :fixed-price :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %reserved-instance-offering-fixed-price :initform
                         common-lisp:nil)
                        (duration :initarg :duration :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %reserved-instance-offering-duration :initform
                         common-lisp:nil)
                        (instance-type :initarg :instance-type :type
                         (common-lisp:or open-search-partition-instance-type
                                         common-lisp:null)
                         :accessor %reserved-instance-offering-instance-type
                         :initform common-lisp:nil)
                        (reserved-instance-offering-id :initarg
                         :reserved-instance-offering-id :type
                         (common-lisp:or guid common-lisp:null) :accessor
                         %reserved-instance-offering-reserved-instance-offering-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'reserved-instance-offering
                    'make-reserved-instance-offering))
 (common-lisp:defun make-reserved-instance-offering
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key recurring-charges payment-option
                     currency-code usage-price fixed-price duration
                     instance-type reserved-instance-offering-id)
   (common-lisp:apply #'common-lisp:make-instance 'reserved-instance-offering
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instance-offering))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instance-offering))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reserved-instance-offering-id))
      (common-lisp:list
       (common-lisp:cons "ReservedInstanceOfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payment-option))
      (common-lisp:list
       (common-lisp:cons "PaymentOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recurring-charges))
      (common-lisp:list
       (common-lisp:cons "RecurringCharges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reserved-instance-offering))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype reserved-instance-offering-list ()
   '(trivial-types:proper-list reserved-instance-offering))
 (common-lisp:defun |make-reserved-instance-offering-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            reserved-instance-offering))
   aws-sdk/generator/shape::members))
(common-lisp:deftype reserved-instance-payment-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-exception
     (opensearch-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-already-exists-exception)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (opensearch-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'resource-not-found-exception)))
(common-lisp:progn
 (common-lisp:defclass revoke-vpc-endpoint-access-request common-lisp:nil
                       ((account :initarg :account :type
                         (common-lisp:or awsaccount common-lisp:null) :accessor
                         %revoke-vpc-endpoint-access-request-account :initform
                         (common-lisp:error ":account is required"))
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %revoke-vpc-endpoint-access-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'revoke-vpc-endpoint-access-request
                    'make-revoke-vpc-endpoint-access-request))
 (common-lisp:defun make-revoke-vpc-endpoint-access-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'revoke-vpc-endpoint-access-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-vpc-endpoint-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-vpc-endpoint-access-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account))
      (common-lisp:list
       (common-lisp:cons "Account"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-vpc-endpoint-access-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass revoke-vpc-endpoint-access-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'revoke-vpc-endpoint-access-response
                    'make-revoke-vpc-endpoint-access-response))
 (common-lisp:defun make-revoke-vpc-endpoint-access-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'revoke-vpc-endpoint-access-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          revoke-vpc-endpoint-access-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          revoke-vpc-endpoint-access-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          revoke-vpc-endpoint-access-response))
   common-lisp:nil))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype rollback-on-disable () 'common-lisp:string)
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:deftype s3key () 'common-lisp:string)
(common-lisp:deftype samlentity-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass samlidp common-lisp:nil
                       ((entity-id :initarg :entity-id :type
                         (common-lisp:or samlentity-id common-lisp:null)
                         :accessor %samlidp-entity-id :initform
                         (common-lisp:error ":entity-id is required"))
                        (metadata-content :initarg :metadata-content :type
                         (common-lisp:or samlmetadata common-lisp:null)
                         :accessor %samlidp-metadata-content :initform
                         (common-lisp:error ":metadata-content is required"))))
 (common-lisp:export (common-lisp:list 'samlidp 'make-samlidp))
 (common-lisp:defun make-samlidp
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key entity-id metadata-content)
   (common-lisp:apply #'common-lisp:make-instance 'samlidp
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input samlidp))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input samlidp))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-content))
      (common-lisp:list
       (common-lisp:cons "MetadataContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input samlidp))
   common-lisp:nil))
(common-lisp:deftype samlmetadata () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass samloptions-input common-lisp:nil
                       ((session-timeout-minutes :initarg
                         :session-timeout-minutes :type
                         (common-lisp:or integer-class common-lisp:null)
                         :accessor %samloptions-input-session-timeout-minutes
                         :initform common-lisp:nil)
                        (roles-key :initarg :roles-key :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %samloptions-input-roles-key :initform
                         common-lisp:nil)
                        (subject-key :initarg :subject-key :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %samloptions-input-subject-key :initform
                         common-lisp:nil)
                        (master-backend-role :initarg :master-backend-role
                         :type (common-lisp:or backend-role common-lisp:null)
                         :accessor %samloptions-input-master-backend-role
                         :initform common-lisp:nil)
                        (master-user-name :initarg :master-user-name :type
                         (common-lisp:or username common-lisp:null) :accessor
                         %samloptions-input-master-user-name :initform
                         common-lisp:nil)
                        (idp :initarg :idp :type
                         (common-lisp:or samlidp common-lisp:null) :accessor
                         %samloptions-input-idp :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %samloptions-input-enabled :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'samloptions-input 'make-samloptions-input))
 (common-lisp:defun make-samloptions-input
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-timeout-minutes roles-key
                     subject-key master-backend-role master-user-name idp
                     enabled)
   (common-lisp:apply #'common-lisp:make-instance 'samloptions-input
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input samloptions-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input samloptions-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idp))
      (common-lisp:list
       (common-lisp:cons "Idp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-user-name))
      (common-lisp:list
       (common-lisp:cons "MasterUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-backend-role))
      (common-lisp:list
       (common-lisp:cons "MasterBackendRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject-key))
      (common-lisp:list
       (common-lisp:cons "SubjectKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles-key))
      (common-lisp:list
       (common-lisp:cons "RolesKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "SessionTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input samloptions-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass samloptions-output common-lisp:nil
                       ((session-timeout-minutes :initarg
                         :session-timeout-minutes :type
                         (common-lisp:or integer-class common-lisp:null)
                         :accessor %samloptions-output-session-timeout-minutes
                         :initform common-lisp:nil)
                        (roles-key :initarg :roles-key :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %samloptions-output-roles-key :initform
                         common-lisp:nil)
                        (subject-key :initarg :subject-key :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %samloptions-output-subject-key :initform
                         common-lisp:nil)
                        (idp :initarg :idp :type
                         (common-lisp:or samlidp common-lisp:null) :accessor
                         %samloptions-output-idp :initform common-lisp:nil)
                        (enabled :initarg :enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %samloptions-output-enabled :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'samloptions-output 'make-samloptions-output))
 (common-lisp:defun make-samloptions-output
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key session-timeout-minutes roles-key
                     subject-key idp enabled)
   (common-lisp:apply #'common-lisp:make-instance 'samloptions-output
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input samloptions-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input samloptions-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'idp))
      (common-lisp:list
       (common-lisp:cons "Idp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject-key))
      (common-lisp:list
       (common-lisp:cons "SubjectKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles-key))
      (common-lisp:list
       (common-lisp:cons "RolesKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-timeout-minutes))
      (common-lisp:list
       (common-lisp:cons "SessionTimeoutMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input samloptions-output))
   common-lisp:nil))
(common-lisp:deftype schedule-at () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scheduled-action common-lisp:nil
                       ((cancellable :initarg :cancellable :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %scheduled-action-cancellable :initform
                         common-lisp:nil)
                        (mandatory :initarg :mandatory :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %scheduled-action-mandatory :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or action-status common-lisp:null)
                         :accessor %scheduled-action-status :initform
                         common-lisp:nil)
                        (scheduled-by :initarg :scheduled-by :type
                         (common-lisp:or scheduled-by common-lisp:null)
                         :accessor %scheduled-action-scheduled-by :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %scheduled-action-description :initform
                         common-lisp:nil)
                        (scheduled-time :initarg :scheduled-time :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %scheduled-action-scheduled-time :initform
                         (common-lisp:error ":scheduled-time is required"))
                        (severity :initarg :severity :type
                         (common-lisp:or action-severity common-lisp:null)
                         :accessor %scheduled-action-severity :initform
                         (common-lisp:error ":severity is required"))
                        (type :initarg :type :type
                         (common-lisp:or action-type common-lisp:null)
                         :accessor %scheduled-action-type :initform
                         (common-lisp:error ":type is required"))
                        (id :initarg :id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %scheduled-action-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'scheduled-action 'make-scheduled-action))
 (common-lisp:defun make-scheduled-action
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cancellable mandatory status scheduled-by
                     description scheduled-time severity type id)
   (common-lisp:apply #'common-lisp:make-instance 'scheduled-action
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scheduled-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scheduled-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-time))
      (common-lisp:list
       (common-lisp:cons "ScheduledTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-by))
      (common-lisp:list
       (common-lisp:cons "ScheduledBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mandatory))
      (common-lisp:list
       (common-lisp:cons "Mandatory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cancellable))
      (common-lisp:list
       (common-lisp:cons "Cancellable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scheduled-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scheduled-actions-list ()
   '(trivial-types:proper-list scheduled-action))
 (common-lisp:defun |make-scheduled-actions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scheduled-action))
   aws-sdk/generator/shape::members))
(common-lisp:deftype scheduled-auto-tune-action-type () 'common-lisp:string)
(common-lisp:deftype scheduled-auto-tune-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scheduled-auto-tune-details common-lisp:nil
                       ((severity :initarg :severity :type
                         (common-lisp:or scheduled-auto-tune-severity-type
                                         common-lisp:null)
                         :accessor %scheduled-auto-tune-details-severity
                         :initform common-lisp:nil)
                        (action :initarg :action :type
                         (common-lisp:or scheduled-auto-tune-description
                                         common-lisp:null)
                         :accessor %scheduled-auto-tune-details-action
                         :initform common-lisp:nil)
                        (action-type :initarg :action-type :type
                         (common-lisp:or scheduled-auto-tune-action-type
                                         common-lisp:null)
                         :accessor %scheduled-auto-tune-details-action-type
                         :initform common-lisp:nil)
                        (date :initarg :date :type
                         (common-lisp:or auto-tune-date common-lisp:null)
                         :accessor %scheduled-auto-tune-details-date :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'scheduled-auto-tune-details
                    'make-scheduled-auto-tune-details))
 (common-lisp:defun make-scheduled-auto-tune-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key severity action action-type date)
   (common-lisp:apply #'common-lisp:make-instance 'scheduled-auto-tune-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-auto-tune-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-auto-tune-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "Date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "ActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "Severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scheduled-auto-tune-details))
   common-lisp:nil))
(common-lisp:deftype scheduled-auto-tune-severity-type () 'common-lisp:string)
(common-lisp:deftype scheduled-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass service-software-options common-lisp:nil
                       ((optional-deployment :initarg :optional-deployment
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %service-software-options-optional-deployment
                         :initform common-lisp:nil)
                        (automated-update-date :initarg :automated-update-date
                         :type
                         (common-lisp:or deployment-close-date-time-stamp
                                         common-lisp:null)
                         :accessor
                         %service-software-options-automated-update-date
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-software-options-description :initform
                         common-lisp:nil)
                        (update-status :initarg :update-status :type
                         (common-lisp:or deployment-status common-lisp:null)
                         :accessor %service-software-options-update-status
                         :initform common-lisp:nil)
                        (cancellable :initarg :cancellable :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %service-software-options-cancellable :initform
                         common-lisp:nil)
                        (update-available :initarg :update-available :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %service-software-options-update-available :initform
                         common-lisp:nil)
                        (new-version :initarg :new-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-software-options-new-version :initform
                         common-lisp:nil)
                        (current-version :initarg :current-version :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-software-options-current-version :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'service-software-options 'make-service-software-options))
 (common-lisp:defun make-service-software-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key optional-deployment automated-update-date
                     description update-status cancellable update-available
                     new-version current-version)
   (common-lisp:apply #'common-lisp:make-instance 'service-software-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-software-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-software-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-version))
      (common-lisp:list
       (common-lisp:cons "NewVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-available))
      (common-lisp:list
       (common-lisp:cons "UpdateAvailable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cancellable))
      (common-lisp:list
       (common-lisp:cons "Cancellable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-status))
      (common-lisp:list
       (common-lisp:cons "UpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-update-date))
      (common-lisp:list
       (common-lisp:cons "AutomatedUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'optional-deployment))
      (common-lisp:list
       (common-lisp:cons "OptionalDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-software-options))
   common-lisp:nil))
(common-lisp:deftype service-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype slot-list () '(trivial-types:proper-list long))
 (common-lisp:defun |make-slot-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list long))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition slot-not-available-exception
     (opensearch-error)
     ((slot-suggestions :initarg :slot-suggestions :initform common-lisp:nil
       :reader slot-not-available-exception-slot-suggestions)))
 (common-lisp:export
  (common-lisp:list 'slot-not-available-exception
                    'slot-not-available-exception-slot-suggestions)))
(common-lisp:progn
 (common-lisp:defclass snapshot-options common-lisp:nil
                       ((automated-snapshot-start-hour :initarg
                         :automated-snapshot-start-hour :type
                         (common-lisp:or integer-class common-lisp:null)
                         :accessor
                         %snapshot-options-automated-snapshot-start-hour
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'snapshot-options 'make-snapshot-options))
 (common-lisp:defun make-snapshot-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key automated-snapshot-start-hour)
   (common-lisp:apply #'common-lisp:make-instance 'snapshot-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input snapshot-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input snapshot-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automated-snapshot-start-hour))
      (common-lisp:list
       (common-lisp:cons "AutomatedSnapshotStartHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input snapshot-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass snapshot-options-status common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor %snapshot-options-status-status :initform
                         (common-lisp:error ":status is required"))
                        (options :initarg :options :type
                         (common-lisp:or snapshot-options common-lisp:null)
                         :accessor %snapshot-options-status-options :initform
                         (common-lisp:error ":options is required"))))
 (common-lisp:export
  (common-lisp:list 'snapshot-options-status 'make-snapshot-options-status))
 (common-lisp:defun make-snapshot-options-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status options)
   (common-lisp:apply #'common-lisp:make-instance 'snapshot-options-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-options-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-options-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          snapshot-options-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass software-update-options common-lisp:nil
                       ((auto-software-update-enabled :initarg
                         :auto-software-update-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %software-update-options-auto-software-update-enabled
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'software-update-options 'make-software-update-options))
 (common-lisp:defun make-software-update-options
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-software-update-enabled)
   (common-lisp:apply #'common-lisp:make-instance 'software-update-options
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          software-update-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          software-update-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-software-update-enabled))
      (common-lisp:list
       (common-lisp:cons "AutoSoftwareUpdateEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          software-update-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass software-update-options-status common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor %software-update-options-status-status
                         :initform common-lisp:nil)
                        (options :initarg :options :type
                         (common-lisp:or software-update-options
                                         common-lisp:null)
                         :accessor %software-update-options-status-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'software-update-options-status
                    'make-software-update-options-status))
 (common-lisp:defun make-software-update-options-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status options)
   (common-lisp:apply #'common-lisp:make-instance
                      'software-update-options-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          software-update-options-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          software-update-options-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          software-update-options-status))
   common-lisp:nil))
(common-lisp:deftype start-at () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-service-software-update-request common-lisp:nil
                       ((desired-start-time :initarg :desired-start-time :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %start-service-software-update-request-desired-start-time
                         :initform common-lisp:nil)
                        (schedule-at :initarg :schedule-at :type
                         (common-lisp:or schedule-at common-lisp:null)
                         :accessor
                         %start-service-software-update-request-schedule-at
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %start-service-software-update-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'start-service-software-update-request
                    'make-start-service-software-update-request))
 (common-lisp:defun make-start-service-software-update-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key desired-start-time schedule-at
                     domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-service-software-update-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-service-software-update-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-service-software-update-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-at))
      (common-lisp:list
       (common-lisp:cons "ScheduleAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-start-time))
      (common-lisp:list
       (common-lisp:cons "DesiredStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-service-software-update-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-service-software-update-response common-lisp:nil
                       ((service-software-options :initarg
                         :service-software-options :type
                         (common-lisp:or service-software-options
                                         common-lisp:null)
                         :accessor
                         %start-service-software-update-response-service-software-options
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-service-software-update-response
                    'make-start-service-software-update-response))
 (common-lisp:defun make-start-service-software-update-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-software-options)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-service-software-update-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-service-software-update-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-service-software-update-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-software-options))
      (common-lisp:list
       (common-lisp:cons "ServiceSoftwareOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-service-software-update-response))
   common-lisp:nil))
(common-lisp:deftype start-time-hours () 'common-lisp:integer)
(common-lisp:deftype start-time-minutes () 'common-lisp:integer)
(common-lisp:deftype start-timestamp () 'common-lisp:string)
(common-lisp:deftype storage-sub-type-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass storage-type common-lisp:nil
                       ((storage-type-limits :initarg :storage-type-limits
                         :type
                         (common-lisp:or storage-type-limit-list
                                         common-lisp:null)
                         :accessor %storage-type-storage-type-limits :initform
                         common-lisp:nil)
                        (storage-sub-type-name :initarg :storage-sub-type-name
                         :type
                         (common-lisp:or storage-sub-type-name
                                         common-lisp:null)
                         :accessor %storage-type-storage-sub-type-name
                         :initform common-lisp:nil)
                        (storage-type-name :initarg :storage-type-name :type
                         (common-lisp:or storage-type-name common-lisp:null)
                         :accessor %storage-type-storage-type-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'storage-type 'make-storage-type))
 (common-lisp:defun make-storage-type
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key storage-type-limits storage-sub-type-name
                     storage-type-name)
   (common-lisp:apply #'common-lisp:make-instance 'storage-type
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input storage-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input storage-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type-name))
      (common-lisp:list
       (common-lisp:cons "StorageTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-sub-type-name))
      (common-lisp:list
       (common-lisp:cons "StorageSubTypeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type-limits))
      (common-lisp:list
       (common-lisp:cons "StorageTypeLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input storage-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass storage-type-limit common-lisp:nil
                       ((limit-values :initarg :limit-values :type
                         (common-lisp:or limit-value-list common-lisp:null)
                         :accessor %storage-type-limit-limit-values :initform
                         common-lisp:nil)
                        (limit-name :initarg :limit-name :type
                         (common-lisp:or limit-name common-lisp:null) :accessor
                         %storage-type-limit-limit-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'storage-type-limit 'make-storage-type-limit))
 (common-lisp:defun make-storage-type-limit
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key limit-values limit-name)
   (common-lisp:apply #'common-lisp:make-instance 'storage-type-limit
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input storage-type-limit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input storage-type-limit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit-name))
      (common-lisp:list
       (common-lisp:cons "LimitName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit-values))
      (common-lisp:list
       (common-lisp:cons "LimitValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input storage-type-limit))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype storage-type-limit-list ()
   '(trivial-types:proper-list storage-type-limit))
 (common-lisp:defun |make-storage-type-limit-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list storage-type-limit))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype storage-type-list ()
   '(trivial-types:proper-list storage-type))
 (common-lisp:defun |make-storage-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list storage-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype storage-type-name () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tlssecurity-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype time-unit () 'common-lisp:string)
(common-lisp:deftype total-number-of-stages () 'common-lisp:integer)
(common-lisp:deftype uint-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass update-domain-config-request common-lisp:nil
                       ((software-update-options :initarg
                         :software-update-options :type
                         (common-lisp:or software-update-options
                                         common-lisp:null)
                         :accessor
                         %update-domain-config-request-software-update-options
                         :initform common-lisp:nil)
                        (off-peak-window-options :initarg
                         :off-peak-window-options :type
                         (common-lisp:or off-peak-window-options
                                         common-lisp:null)
                         :accessor
                         %update-domain-config-request-off-peak-window-options
                         :initform common-lisp:nil)
                        (dry-run-mode :initarg :dry-run-mode :type
                         (common-lisp:or dry-run-mode common-lisp:null)
                         :accessor %update-domain-config-request-dry-run-mode
                         :initform common-lisp:nil)
                        (dry-run :initarg :dry-run :type
                         (common-lisp:or dry-run common-lisp:null) :accessor
                         %update-domain-config-request-dry-run :initform
                         common-lisp:nil)
                        (auto-tune-options :initarg :auto-tune-options :type
                         (common-lisp:or auto-tune-options common-lisp:null)
                         :accessor
                         %update-domain-config-request-auto-tune-options
                         :initform common-lisp:nil)
                        (advanced-security-options :initarg
                         :advanced-security-options :type
                         (common-lisp:or advanced-security-options-input
                                         common-lisp:null)
                         :accessor
                         %update-domain-config-request-advanced-security-options
                         :initform common-lisp:nil)
                        (node-to-node-encryption-options :initarg
                         :node-to-node-encryption-options :type
                         (common-lisp:or node-to-node-encryption-options
                                         common-lisp:null)
                         :accessor
                         %update-domain-config-request-node-to-node-encryption-options
                         :initform common-lisp:nil)
                        (domain-endpoint-options :initarg
                         :domain-endpoint-options :type
                         (common-lisp:or domain-endpoint-options
                                         common-lisp:null)
                         :accessor
                         %update-domain-config-request-domain-endpoint-options
                         :initform common-lisp:nil)
                        (encryption-at-rest-options :initarg
                         :encryption-at-rest-options :type
                         (common-lisp:or encryption-at-rest-options
                                         common-lisp:null)
                         :accessor
                         %update-domain-config-request-encryption-at-rest-options
                         :initform common-lisp:nil)
                        (log-publishing-options :initarg
                         :log-publishing-options :type
                         (common-lisp:or log-publishing-options
                                         common-lisp:null)
                         :accessor
                         %update-domain-config-request-log-publishing-options
                         :initform common-lisp:nil)
                        (access-policies :initarg :access-policies :type
                         (common-lisp:or policy-document common-lisp:null)
                         :accessor
                         %update-domain-config-request-access-policies
                         :initform common-lisp:nil)
                        (advanced-options :initarg :advanced-options :type
                         (common-lisp:or advanced-options common-lisp:null)
                         :accessor
                         %update-domain-config-request-advanced-options
                         :initform common-lisp:nil)
                        (cognito-options :initarg :cognito-options :type
                         (common-lisp:or cognito-options common-lisp:null)
                         :accessor
                         %update-domain-config-request-cognito-options
                         :initform common-lisp:nil)
                        (vpcoptions :initarg :vpcoptions :type
                         (common-lisp:or vpcoptions common-lisp:null) :accessor
                         %update-domain-config-request-vpcoptions :initform
                         common-lisp:nil)
                        (snapshot-options :initarg :snapshot-options :type
                         (common-lisp:or snapshot-options common-lisp:null)
                         :accessor
                         %update-domain-config-request-snapshot-options
                         :initform common-lisp:nil)
                        (ebsoptions :initarg :ebsoptions :type
                         (common-lisp:or ebsoptions common-lisp:null) :accessor
                         %update-domain-config-request-ebsoptions :initform
                         common-lisp:nil)
                        (cluster-config :initarg :cluster-config :type
                         (common-lisp:or cluster-config common-lisp:null)
                         :accessor %update-domain-config-request-cluster-config
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %update-domain-config-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-domain-config-request
                    'make-update-domain-config-request))
 (common-lisp:defun make-update-domain-config-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key software-update-options
                     off-peak-window-options dry-run-mode dry-run
                     auto-tune-options advanced-security-options
                     node-to-node-encryption-options domain-endpoint-options
                     encryption-at-rest-options log-publishing-options
                     access-policies advanced-options cognito-options
                     vpcoptions snapshot-options ebsoptions cluster-config
                     domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'update-domain-config-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-config))
      (common-lisp:list
       (common-lisp:cons "ClusterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebsoptions))
      (common-lisp:list
       (common-lisp:cons "EBSOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snapshot-options))
      (common-lisp:list
       (common-lisp:cons "SnapshotOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcoptions))
      (common-lisp:list
       (common-lisp:cons "VPCOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cognito-options))
      (common-lisp:list
       (common-lisp:cons "CognitoOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'advanced-options))
      (common-lisp:list
       (common-lisp:cons "AdvancedOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policies))
      (common-lisp:list
       (common-lisp:cons "AccessPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-publishing-options))
      (common-lisp:list
       (common-lisp:cons "LogPublishingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-at-rest-options))
      (common-lisp:list
       (common-lisp:cons "EncryptionAtRestOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-endpoint-options))
      (common-lisp:list
       (common-lisp:cons "DomainEndpointOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'node-to-node-encryption-options))
      (common-lisp:list
       (common-lisp:cons "NodeToNodeEncryptionOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'advanced-security-options))
      (common-lisp:list
       (common-lisp:cons "AdvancedSecurityOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-tune-options))
      (common-lisp:list
       (common-lisp:cons "AutoTuneOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run-mode))
      (common-lisp:list
       (common-lisp:cons "DryRunMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'off-peak-window-options))
      (common-lisp:list
       (common-lisp:cons "OffPeakWindowOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'software-update-options))
      (common-lisp:list
       (common-lisp:cons "SoftwareUpdateOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-domain-config-response common-lisp:nil
                       ((dry-run-progress-status :initarg
                         :dry-run-progress-status :type
                         (common-lisp:or dry-run-progress-status
                                         common-lisp:null)
                         :accessor
                         %update-domain-config-response-dry-run-progress-status
                         :initform common-lisp:nil)
                        (dry-run-results :initarg :dry-run-results :type
                         (common-lisp:or dry-run-results common-lisp:null)
                         :accessor
                         %update-domain-config-response-dry-run-results
                         :initform common-lisp:nil)
                        (domain-config :initarg :domain-config :type
                         (common-lisp:or domain-config common-lisp:null)
                         :accessor %update-domain-config-response-domain-config
                         :initform
                         (common-lisp:error ":domain-config is required"))))
 (common-lisp:export
  (common-lisp:list 'update-domain-config-response
                    'make-update-domain-config-response))
 (common-lisp:defun make-update-domain-config-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dry-run-progress-status dry-run-results
                     domain-config)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-domain-config-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-config))
      (common-lisp:list
       (common-lisp:cons "DomainConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run-results))
      (common-lisp:list
       (common-lisp:cons "DryRunResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dry-run-progress-status))
      (common-lisp:list
       (common-lisp:cons "DryRunProgressStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-package-request common-lisp:nil
                       ((commit-message :initarg :commit-message :type
                         (common-lisp:or commit-message common-lisp:null)
                         :accessor %update-package-request-commit-message
                         :initform common-lisp:nil)
                        (package-description :initarg :package-description
                         :type
                         (common-lisp:or package-description common-lisp:null)
                         :accessor %update-package-request-package-description
                         :initform common-lisp:nil)
                        (package-source :initarg :package-source :type
                         (common-lisp:or package-source common-lisp:null)
                         :accessor %update-package-request-package-source
                         :initform
                         (common-lisp:error ":package-source is required"))
                        (package-id :initarg :package-id :type
                         (common-lisp:or package-id common-lisp:null) :accessor
                         %update-package-request-package-id :initform
                         (common-lisp:error ":package-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-package-request 'make-update-package-request))
 (common-lisp:defun make-update-package-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key commit-message package-description
                     package-source package-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-package-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-package-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-package-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-id))
      (common-lisp:list
       (common-lisp:cons "PackageID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-source))
      (common-lisp:list
       (common-lisp:cons "PackageSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-description))
      (common-lisp:list
       (common-lisp:cons "PackageDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-message))
      (common-lisp:list
       (common-lisp:cons "CommitMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-package-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-package-response common-lisp:nil
                       ((package-details :initarg :package-details :type
                         (common-lisp:or package-details common-lisp:null)
                         :accessor %update-package-response-package-details
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-package-response 'make-update-package-response))
 (common-lisp:defun make-update-package-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key package-details)
   (common-lisp:apply #'common-lisp:make-instance 'update-package-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-package-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-package-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-details))
      (common-lisp:list
       (common-lisp:cons "PackageDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-package-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-scheduled-action-request common-lisp:nil
                       ((desired-start-time :initarg :desired-start-time :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %update-scheduled-action-request-desired-start-time
                         :initform common-lisp:nil)
                        (schedule-at :initarg :schedule-at :type
                         (common-lisp:or schedule-at common-lisp:null)
                         :accessor %update-scheduled-action-request-schedule-at
                         :initform
                         (common-lisp:error ":schedule-at is required"))
                        (action-type :initarg :action-type :type
                         (common-lisp:or action-type common-lisp:null)
                         :accessor %update-scheduled-action-request-action-type
                         :initform
                         (common-lisp:error ":action-type is required"))
                        (action-id :initarg :action-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %update-scheduled-action-request-action-id :initform
                         (common-lisp:error ":action-id is required"))
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %update-scheduled-action-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-scheduled-action-request
                    'make-update-scheduled-action-request))
 (common-lisp:defun make-update-scheduled-action-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key desired-start-time schedule-at
                     action-type action-id domain-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-scheduled-action-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-id))
      (common-lisp:list
       (common-lisp:cons "ActionID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "ActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-at))
      (common-lisp:list
       (common-lisp:cons "ScheduleAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-start-time))
      (common-lisp:list
       (common-lisp:cons "DesiredStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-scheduled-action-response common-lisp:nil
                       ((scheduled-action :initarg :scheduled-action :type
                         (common-lisp:or scheduled-action common-lisp:null)
                         :accessor
                         %update-scheduled-action-response-scheduled-action
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-scheduled-action-response
                    'make-update-scheduled-action-response))
 (common-lisp:defun make-update-scheduled-action-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key scheduled-action)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-scheduled-action-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-action-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-action))
      (common-lisp:list
       (common-lisp:cons "ScheduledAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-scheduled-action-response))
   common-lisp:nil))
(common-lisp:deftype update-timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-vpc-endpoint-request common-lisp:nil
                       ((vpc-options :initarg :vpc-options :type
                         (common-lisp:or vpcoptions common-lisp:null) :accessor
                         %update-vpc-endpoint-request-vpc-options :initform
                         (common-lisp:error ":vpc-options is required"))
                        (vpc-endpoint-id :initarg :vpc-endpoint-id :type
                         (common-lisp:or vpc-endpoint-id common-lisp:null)
                         :accessor %update-vpc-endpoint-request-vpc-endpoint-id
                         :initform
                         (common-lisp:error ":vpc-endpoint-id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-vpc-endpoint-request
                    'make-update-vpc-endpoint-request))
 (common-lisp:defun make-update-vpc-endpoint-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-options vpc-endpoint-id)
   (common-lisp:apply #'common-lisp:make-instance 'update-vpc-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-options))
      (common-lisp:list
       (common-lisp:cons "VpcOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-vpc-endpoint-response common-lisp:nil
                       ((vpc-endpoint :initarg :vpc-endpoint :type
                         (common-lisp:or vpc-endpoint common-lisp:null)
                         :accessor %update-vpc-endpoint-response-vpc-endpoint
                         :initform
                         (common-lisp:error ":vpc-endpoint is required"))))
 (common-lisp:export
  (common-lisp:list 'update-vpc-endpoint-response
                    'make-update-vpc-endpoint-response))
 (common-lisp:defun make-update-vpc-endpoint-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-endpoint)
   (common-lisp:apply #'common-lisp:make-instance 'update-vpc-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint))
      (common-lisp:list
       (common-lisp:cons "VpcEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upgrade-domain-request common-lisp:nil
                       ((advanced-options :initarg :advanced-options :type
                         (common-lisp:or advanced-options common-lisp:null)
                         :accessor %upgrade-domain-request-advanced-options
                         :initform common-lisp:nil)
                        (perform-check-only :initarg :perform-check-only :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %upgrade-domain-request-perform-check-only :initform
                         common-lisp:nil)
                        (target-version :initarg :target-version :type
                         (common-lisp:or version-string common-lisp:null)
                         :accessor %upgrade-domain-request-target-version
                         :initform
                         (common-lisp:error ":target-version is required"))
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %upgrade-domain-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export
  (common-lisp:list 'upgrade-domain-request 'make-upgrade-domain-request))
 (common-lisp:defun make-upgrade-domain-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key advanced-options perform-check-only
                     target-version domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'upgrade-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-version))
      (common-lisp:list
       (common-lisp:cons "TargetVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'perform-check-only))
      (common-lisp:list
       (common-lisp:cons "PerformCheckOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'advanced-options))
      (common-lisp:list
       (common-lisp:cons "AdvancedOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upgrade-domain-response common-lisp:nil
                       ((change-progress-details :initarg
                         :change-progress-details :type
                         (common-lisp:or change-progress-details
                                         common-lisp:null)
                         :accessor
                         %upgrade-domain-response-change-progress-details
                         :initform common-lisp:nil)
                        (advanced-options :initarg :advanced-options :type
                         (common-lisp:or advanced-options common-lisp:null)
                         :accessor %upgrade-domain-response-advanced-options
                         :initform common-lisp:nil)
                        (perform-check-only :initarg :perform-check-only :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %upgrade-domain-response-perform-check-only :initform
                         common-lisp:nil)
                        (target-version :initarg :target-version :type
                         (common-lisp:or version-string common-lisp:null)
                         :accessor %upgrade-domain-response-target-version
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %upgrade-domain-response-domain-name
                         :initform common-lisp:nil)
                        (upgrade-id :initarg :upgrade-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %upgrade-domain-response-upgrade-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'upgrade-domain-response 'make-upgrade-domain-response))
 (common-lisp:defun make-upgrade-domain-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key change-progress-details advanced-options
                     perform-check-only target-version domain-name upgrade-id)
   (common-lisp:apply #'common-lisp:make-instance 'upgrade-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upgrade-id))
      (common-lisp:list
       (common-lisp:cons "UpgradeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-version))
      (common-lisp:list
       (common-lisp:cons "TargetVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'perform-check-only))
      (common-lisp:list
       (common-lisp:cons "PerformCheckOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'advanced-options))
      (common-lisp:list
       (common-lisp:cons "AdvancedOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'change-progress-details))
      (common-lisp:list
       (common-lisp:cons "ChangeProgressDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass upgrade-history common-lisp:nil
                       ((steps-list :initarg :steps-list :type
                         (common-lisp:or upgrade-steps-list common-lisp:null)
                         :accessor %upgrade-history-steps-list :initform
                         common-lisp:nil)
                        (upgrade-status :initarg :upgrade-status :type
                         (common-lisp:or upgrade-status common-lisp:null)
                         :accessor %upgrade-history-upgrade-status :initform
                         common-lisp:nil)
                        (start-timestamp :initarg :start-timestamp :type
                         (common-lisp:or start-timestamp common-lisp:null)
                         :accessor %upgrade-history-start-timestamp :initform
                         common-lisp:nil)
                        (upgrade-name :initarg :upgrade-name :type
                         (common-lisp:or upgrade-name common-lisp:null)
                         :accessor %upgrade-history-upgrade-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'upgrade-history 'make-upgrade-history))
 (common-lisp:defun make-upgrade-history
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key steps-list upgrade-status start-timestamp
                     upgrade-name)
   (common-lisp:apply #'common-lisp:make-instance 'upgrade-history
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upgrade-history))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upgrade-history))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upgrade-name))
      (common-lisp:list
       (common-lisp:cons "UpgradeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-timestamp))
      (common-lisp:list
       (common-lisp:cons "StartTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upgrade-status))
      (common-lisp:list
       (common-lisp:cons "UpgradeStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'steps-list))
      (common-lisp:list
       (common-lisp:cons "StepsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upgrade-history))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype upgrade-history-list ()
   '(trivial-types:proper-list upgrade-history))
 (common-lisp:defun |make-upgrade-history-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list upgrade-history))
   aws-sdk/generator/shape::members))
(common-lisp:deftype upgrade-name () 'common-lisp:string)
(common-lisp:deftype upgrade-status () 'common-lisp:string)
(common-lisp:deftype upgrade-step () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass upgrade-step-item common-lisp:nil
                       ((progress-percent :initarg :progress-percent :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %upgrade-step-item-progress-percent :initform
                         common-lisp:nil)
                        (issues :initarg :issues :type
                         (common-lisp:or issues common-lisp:null) :accessor
                         %upgrade-step-item-issues :initform common-lisp:nil)
                        (upgrade-step-status :initarg :upgrade-step-status
                         :type (common-lisp:or upgrade-status common-lisp:null)
                         :accessor %upgrade-step-item-upgrade-step-status
                         :initform common-lisp:nil)
                        (upgrade-step :initarg :upgrade-step :type
                         (common-lisp:or upgrade-step common-lisp:null)
                         :accessor %upgrade-step-item-upgrade-step :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'upgrade-step-item 'make-upgrade-step-item))
 (common-lisp:defun make-upgrade-step-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key progress-percent issues
                     upgrade-step-status upgrade-step)
   (common-lisp:apply #'common-lisp:make-instance 'upgrade-step-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upgrade-step-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upgrade-step-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upgrade-step))
      (common-lisp:list
       (common-lisp:cons "UpgradeStep"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upgrade-step-status))
      (common-lisp:list
       (common-lisp:cons "UpgradeStepStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issues))
      (common-lisp:list
       (common-lisp:cons "Issues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress-percent))
      (common-lisp:list
       (common-lisp:cons "ProgressPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upgrade-step-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype upgrade-steps-list ()
   '(trivial-types:proper-list upgrade-step-item))
 (common-lisp:defun |make-upgrade-steps-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list upgrade-step-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-pool-id () 'common-lisp:string)
(common-lisp:deftype username () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vpcderived-info common-lisp:nil
                       ((security-group-ids :initarg :security-group-ids :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %vpcderived-info-security-group-ids
                         :initform common-lisp:nil)
                        (availability-zones :initarg :availability-zones :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %vpcderived-info-availability-zones
                         :initform common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %vpcderived-info-subnet-ids :initform
                         common-lisp:nil)
                        (vpcid :initarg :vpcid :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %vpcderived-info-vpcid :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'vpcderived-info 'make-vpcderived-info))
 (common-lisp:defun make-vpcderived-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-group-ids availability-zones
                     subnet-ids vpcid)
   (common-lisp:apply #'common-lisp:make-instance 'vpcderived-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpcderived-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpcderived-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcid))
      (common-lisp:list
       (common-lisp:cons "VPCId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpcderived-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpcderived-info-status common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor %vpcderived-info-status-status :initform
                         (common-lisp:error ":status is required"))
                        (options :initarg :options :type
                         (common-lisp:or vpcderived-info common-lisp:null)
                         :accessor %vpcderived-info-status-options :initform
                         (common-lisp:error ":options is required"))))
 (common-lisp:export
  (common-lisp:list 'vpcderived-info-status 'make-vpcderived-info-status))
 (common-lisp:defun make-vpcderived-info-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status options)
   (common-lisp:apply #'common-lisp:make-instance 'vpcderived-info-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpcderived-info-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpcderived-info-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpcderived-info-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpcoptions common-lisp:nil
                       ((security-group-ids :initarg :security-group-ids :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %vpcoptions-security-group-ids :initform
                         common-lisp:nil)
                        (subnet-ids :initarg :subnet-ids :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %vpcoptions-subnet-ids :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'vpcoptions 'make-vpcoptions))
 (common-lisp:defun make-vpcoptions
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-group-ids subnet-ids)
   (common-lisp:apply #'common-lisp:make-instance 'vpcoptions
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpcoptions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpcoptions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpcoptions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (opensearch-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'validation-exception)))
(common-lisp:progn
 (common-lisp:defclass validation-failure common-lisp:nil
                       ((message :initarg :message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %validation-failure-message :initform common-lisp:nil)
                        (code :initarg :code :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %validation-failure-code :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'validation-failure 'make-validation-failure))
 (common-lisp:defun make-validation-failure
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message code)
   (common-lisp:apply #'common-lisp:make-instance 'validation-failure
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input validation-failure))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input validation-failure))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input validation-failure))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-failures ()
   '(trivial-types:proper-list validation-failure))
 (common-lisp:defun |make-validation-failures|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list validation-failure))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype value-string-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-value-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype version-list ()
   '(trivial-types:proper-list version-string))
 (common-lisp:defun |make-version-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list version-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass version-status common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or option-status common-lisp:null)
                         :accessor %version-status-status :initform
                         (common-lisp:error ":status is required"))
                        (options :initarg :options :type
                         (common-lisp:or version-string common-lisp:null)
                         :accessor %version-status-options :initform
                         (common-lisp:error ":options is required"))))
 (common-lisp:export (common-lisp:list 'version-status 'make-version-status))
 (common-lisp:defun make-version-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status options)
   (common-lisp:apply #'common-lisp:make-instance 'version-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input version-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input version-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "Options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input version-status))
   common-lisp:nil))
(common-lisp:deftype version-string () 'common-lisp:string)
(common-lisp:deftype volume-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vpc-endpoint common-lisp:nil
                       ((endpoint :initarg :endpoint :type
                         (common-lisp:or endpoint common-lisp:null) :accessor
                         %vpc-endpoint-endpoint :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or vpc-endpoint-status common-lisp:null)
                         :accessor %vpc-endpoint-status :initform
                         common-lisp:nil)
                        (vpc-options :initarg :vpc-options :type
                         (common-lisp:or vpcderived-info common-lisp:null)
                         :accessor %vpc-endpoint-vpc-options :initform
                         common-lisp:nil)
                        (domain-arn :initarg :domain-arn :type
                         (common-lisp:or domain-arn common-lisp:null) :accessor
                         %vpc-endpoint-domain-arn :initform common-lisp:nil)
                        (vpc-endpoint-owner :initarg :vpc-endpoint-owner :type
                         (common-lisp:or awsaccount common-lisp:null) :accessor
                         %vpc-endpoint-vpc-endpoint-owner :initform
                         common-lisp:nil)
                        (vpc-endpoint-id :initarg :vpc-endpoint-id :type
                         (common-lisp:or vpc-endpoint-id common-lisp:null)
                         :accessor %vpc-endpoint-vpc-endpoint-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'vpc-endpoint 'make-vpc-endpoint))
 (common-lisp:defun make-vpc-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key endpoint status vpc-options domain-arn
                     vpc-endpoint-owner vpc-endpoint-id)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-endpoint
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-owner))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-arn))
      (common-lisp:list
       (common-lisp:cons "DomainArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-options))
      (common-lisp:list
       (common-lisp:cons "VpcOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-endpoint-error common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %vpc-endpoint-error-error-message :initform
                         common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or vpc-endpoint-error-code
                                         common-lisp:null)
                         :accessor %vpc-endpoint-error-error-code :initform
                         common-lisp:nil)
                        (vpc-endpoint-id :initarg :vpc-endpoint-id :type
                         (common-lisp:or vpc-endpoint-id common-lisp:null)
                         :accessor %vpc-endpoint-error-vpc-endpoint-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vpc-endpoint-error 'make-vpc-endpoint-error))
 (common-lisp:defun make-vpc-endpoint-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message error-code vpc-endpoint-id)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-endpoint-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-endpoint-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-endpoint-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-endpoint-error))
   common-lisp:nil))
(common-lisp:deftype vpc-endpoint-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vpc-endpoint-error-list ()
   '(trivial-types:proper-list vpc-endpoint-error))
 (common-lisp:defun |make-vpc-endpoint-error-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-endpoint-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype vpc-endpoint-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vpc-endpoint-id-list ()
   '(trivial-types:proper-list vpc-endpoint-id))
 (common-lisp:defun |make-vpc-endpoint-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-endpoint-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype vpc-endpoint-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vpc-endpoint-summary common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or vpc-endpoint-status common-lisp:null)
                         :accessor %vpc-endpoint-summary-status :initform
                         common-lisp:nil)
                        (domain-arn :initarg :domain-arn :type
                         (common-lisp:or domain-arn common-lisp:null) :accessor
                         %vpc-endpoint-summary-domain-arn :initform
                         common-lisp:nil)
                        (vpc-endpoint-owner :initarg :vpc-endpoint-owner :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %vpc-endpoint-summary-vpc-endpoint-owner :initform
                         common-lisp:nil)
                        (vpc-endpoint-id :initarg :vpc-endpoint-id :type
                         (common-lisp:or vpc-endpoint-id common-lisp:null)
                         :accessor %vpc-endpoint-summary-vpc-endpoint-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vpc-endpoint-summary 'make-vpc-endpoint-summary))
 (common-lisp:defun make-vpc-endpoint-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status domain-arn vpc-endpoint-owner
                     vpc-endpoint-id)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-endpoint-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-endpoint-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-endpoint-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-owner))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-arn))
      (common-lisp:list
       (common-lisp:cons "DomainArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-endpoint-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-endpoint-summary-list ()
   '(trivial-types:proper-list vpc-endpoint-summary))
 (common-lisp:defun |make-vpc-endpoint-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-endpoint-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype vpc-endpoints ()
   '(trivial-types:proper-list vpc-endpoint))
 (common-lisp:defun |make-vpc-endpoints|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass window-start-time common-lisp:nil
                       ((minutes :initarg :minutes :type
                         (common-lisp:or start-time-minutes common-lisp:null)
                         :accessor %window-start-time-minutes :initform
                         (common-lisp:error ":minutes is required"))
                        (hours :initarg :hours :type
                         (common-lisp:or start-time-hours common-lisp:null)
                         :accessor %window-start-time-hours :initform
                         (common-lisp:error ":hours is required"))))
 (common-lisp:export
  (common-lisp:list 'window-start-time 'make-window-start-time))
 (common-lisp:defun make-window-start-time
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key minutes hours)
   (common-lisp:apply #'common-lisp:make-instance 'window-start-time
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input window-start-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input window-start-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hours))
      (common-lisp:list
       (common-lisp:cons "Hours"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minutes))
      (common-lisp:list
       (common-lisp:cons "Minutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input window-start-time))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass zone-awareness-config common-lisp:nil
                       ((availability-zone-count :initarg
                         :availability-zone-count :type
                         (common-lisp:or integer-class common-lisp:null)
                         :accessor
                         %zone-awareness-config-availability-zone-count
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'zone-awareness-config 'make-zone-awareness-config))
 (common-lisp:defun make-zone-awareness-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key availability-zone-count)
   (common-lisp:apply #'common-lisp:make-instance 'zone-awareness-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          zone-awareness-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          zone-awareness-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-zone-count))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZoneCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          zone-awareness-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun accept-inbound-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id)
   (common-lisp:declare (common-lisp:ignorable connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-accept-inbound-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/opensearch/cc/inboundConnection/~A/accept"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'connection-id))))
                                                        "AcceptInboundConnection"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'accept-inbound-connection))
(common-lisp:progn
 (common-lisp:defun add-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn tag-list)
   (common-lisp:declare (common-lisp:ignorable arn tag-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2021-01-01/tags"
                                                        "AddTags"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-tags))
(common-lisp:progn
 (common-lisp:defun associate-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-id domain-name)
   (common-lisp:declare (common-lisp:ignorable package-id domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/packages/associate/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "AssociatePackage"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-package))
(common-lisp:progn
 (common-lisp:defun authorize-vpc-endpoint-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name account)
   (common-lisp:declare (common-lisp:ignorable domain-name account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-authorize-vpc-endpoint-access-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/opensearch/domain/~A/authorizeVpcEndpointAccess"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "AuthorizeVpcEndpointAccess"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'authorize-vpc-endpoint-access))
(common-lisp:progn
 (common-lisp:defun cancel-service-software-update
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-service-software-update-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2021-01-01/opensearch/serviceSoftwareUpdate/cancel"
                                                        "CancelServiceSoftwareUpdate"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-service-software-update))
(common-lisp:progn
 (common-lisp:defun create-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name engine-version cluster-config
                     ebsoptions access-policies snapshot-options vpcoptions
                     cognito-options encryption-at-rest-options
                     node-to-node-encryption-options advanced-options
                     log-publishing-options domain-endpoint-options
                     advanced-security-options tag-list auto-tune-options
                     off-peak-window-options software-update-options)
   (common-lisp:declare
    (common-lisp:ignorable domain-name engine-version cluster-config ebsoptions
     access-policies snapshot-options vpcoptions cognito-options
     encryption-at-rest-options node-to-node-encryption-options
     advanced-options log-publishing-options domain-endpoint-options
     advanced-security-options tag-list auto-tune-options
     off-peak-window-options software-update-options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2021-01-01/opensearch/domain"
                                                        "CreateDomain"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-domain))
(common-lisp:progn
 (common-lisp:defun create-outbound-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key local-domain-info remote-domain-info
                     connection-alias connection-mode)
   (common-lisp:declare
    (common-lisp:ignorable local-domain-info remote-domain-info
     connection-alias connection-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-outbound-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2021-01-01/opensearch/cc/outboundConnection"
                                                        "CreateOutboundConnection"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-outbound-connection))
(common-lisp:progn
 (common-lisp:defun create-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-name package-type
                     package-description package-source)
   (common-lisp:declare
    (common-lisp:ignorable package-name package-type package-description
     package-source))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2021-01-01/packages"
                                                        "CreatePackage"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-package))
(common-lisp:progn
 (common-lisp:defun create-vpc-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-arn vpc-options client-token)
   (common-lisp:declare
    (common-lisp:ignorable domain-arn vpc-options client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-vpc-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2021-01-01/opensearch/vpcEndpoints"
                                                        "CreateVpcEndpoint"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-vpc-endpoint))
(common-lisp:progn
 (common-lisp:defun delete-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/opensearch/domain/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "DeleteDomain"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-domain))
(common-lisp:progn
 (common-lisp:defun delete-inbound-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id)
   (common-lisp:declare (common-lisp:ignorable connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-inbound-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/opensearch/cc/inboundConnection/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'connection-id))))
                                                        "DeleteInboundConnection"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-inbound-connection))
(common-lisp:progn
 (common-lisp:defun delete-outbound-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id)
   (common-lisp:declare (common-lisp:ignorable connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-outbound-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/opensearch/cc/outboundConnection/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'connection-id))))
                                                        "DeleteOutboundConnection"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-outbound-connection))
(common-lisp:progn
 (common-lisp:defun delete-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-id)
   (common-lisp:declare (common-lisp:ignorable package-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/packages/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-id))))
                                                        "DeletePackage"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-package))
(common-lisp:progn
 (common-lisp:defun delete-vpc-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpc-endpoint-id)
   (common-lisp:declare (common-lisp:ignorable vpc-endpoint-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-vpc-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/opensearch/vpcEndpoints/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'vpc-endpoint-id))))
                                                        "DeleteVpcEndpoint"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-vpc-endpoint))
(common-lisp:progn
 (common-lisp:defun describe-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/opensearch/domain/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "DescribeDomain"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-domain))
(common-lisp:progn
 (common-lisp:defun describe-domain-auto-tunes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable domain-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-domain-auto-tunes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/opensearch/domain/~A/autoTunes"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "DescribeDomainAutoTunes"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-domain-auto-tunes))
(common-lisp:progn
 (common-lisp:defun describe-domain-change-progress
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name change-id)
   (common-lisp:declare (common-lisp:ignorable domain-name change-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-domain-change-progress-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/opensearch/domain/~A/progress"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "DescribeDomainChangeProgress"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-domain-change-progress))
(common-lisp:progn
 (common-lisp:defun describe-domain-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-domain-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/opensearch/domain/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "DescribeDomainConfig"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-domain-config))
(common-lisp:progn
 (common-lisp:defun describe-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-names)
   (common-lisp:declare (common-lisp:ignorable domain-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-domains-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2021-01-01/opensearch/domain-info"
                                                        "DescribeDomains"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-domains))
(common-lisp:progn
 (common-lisp:defun describe-dry-run-progress
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name dry-run-id
                     load-dry-run-config)
   (common-lisp:declare
    (common-lisp:ignorable domain-name dry-run-id load-dry-run-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-dry-run-progress-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/opensearch/domain/~A/dryRun"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "DescribeDryRunProgress"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-dry-run-progress))
(common-lisp:progn
 (common-lisp:defun describe-inbound-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-inbound-connections-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2021-01-01/opensearch/cc/inboundConnection/search"
                                                        "DescribeInboundConnections"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-inbound-connections))
(common-lisp:progn
 (common-lisp:defun describe-instance-type-limits
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name instance-type engine-version)
   (common-lisp:declare
    (common-lisp:ignorable domain-name instance-type engine-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-instance-type-limits-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/opensearch/instanceTypeLimits/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'engine-version))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'instance-type))))
                                                        "DescribeInstanceTypeLimits"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-instance-type-limits))
(common-lisp:progn
 (common-lisp:defun describe-outbound-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-outbound-connections-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2021-01-01/opensearch/cc/outboundConnection/search"
                                                        "DescribeOutboundConnections"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-outbound-connections))
(common-lisp:progn
 (common-lisp:defun describe-packages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filters max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-packages-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2021-01-01/packages/describe"
                                                        "DescribePackages"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-packages))
(common-lisp:progn
 (common-lisp:defun describe-reserved-instance-offerings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-instance-offering-id max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable reserved-instance-offering-id max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-reserved-instance-offerings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/2021-01-01/opensearch/reservedInstanceOfferings"
                                                        "DescribeReservedInstanceOfferings"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-reserved-instance-offerings))
(common-lisp:progn
 (common-lisp:defun describe-reserved-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-instance-id max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable reserved-instance-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-reserved-instances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/2021-01-01/opensearch/reservedInstances"
                                                        "DescribeReservedInstances"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-reserved-instances))
(common-lisp:progn
 (common-lisp:defun describe-vpc-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpc-endpoint-ids)
   (common-lisp:declare (common-lisp:ignorable vpc-endpoint-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-vpc-endpoints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2021-01-01/opensearch/vpcEndpoints/describe"
                                                        "DescribeVpcEndpoints"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-vpc-endpoints))
(common-lisp:progn
 (common-lisp:defun dissociate-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-id domain-name)
   (common-lisp:declare (common-lisp:ignorable package-id domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-dissociate-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/packages/dissociate/~A/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "DissociatePackage"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'dissociate-package))
(common-lisp:progn
 (common-lisp:defun get-compatible-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-compatible-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/2021-01-01/opensearch/compatibleVersions"
                                                        "GetCompatibleVersions"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-compatible-versions))
(common-lisp:progn
 (common-lisp:defun get-package-version-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable package-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-package-version-history-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/packages/~A/history"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-id))))
                                                        "GetPackageVersionHistory"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-package-version-history))
(common-lisp:progn
 (common-lisp:defun get-upgrade-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable domain-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-upgrade-history-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/opensearch/upgradeDomain/~A/history"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "GetUpgradeHistory"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-upgrade-history))
(common-lisp:progn
 (common-lisp:defun get-upgrade-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-upgrade-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/opensearch/upgradeDomain/~A/status"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "GetUpgradeStatus"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-upgrade-status))
(common-lisp:progn
 (common-lisp:defun list-domain-names
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine-type)
   (common-lisp:declare (common-lisp:ignorable engine-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-domain-names-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/2021-01-01/domain"
                                                        "ListDomainNames"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-domain-names))
(common-lisp:progn
 (common-lisp:defun list-domains-for-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable package-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-domains-for-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/packages/~A/domains"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'package-id))))
                                                        "ListDomainsForPackage"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-domains-for-package))
(common-lisp:progn
 (common-lisp:defun list-instance-type-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key engine-version domain-name max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable engine-version domain-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-instance-type-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/opensearch/instanceTypeDetails/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'engine-version))))
                                                        "ListInstanceTypeDetails"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-instance-type-details))
(common-lisp:progn
 (common-lisp:defun list-packages-for-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable domain-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-packages-for-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/domain/~A/packages"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "ListPackagesForDomain"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-packages-for-domain))
(common-lisp:progn
 (common-lisp:defun list-scheduled-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable domain-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-scheduled-actions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/opensearch/domain/~A/scheduledActions"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "ListScheduledActions"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-scheduled-actions))
(common-lisp:progn
 (common-lisp:defun list-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/2021-01-01/tags/"
                                                        "ListTags"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags))
(common-lisp:progn
 (common-lisp:defun list-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/2021-01-01/opensearch/versions"
                                                        "ListVersions"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-versions))
(common-lisp:progn
 (common-lisp:defun list-vpc-endpoint-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name next-token)
   (common-lisp:declare (common-lisp:ignorable domain-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-vpc-endpoint-access-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/opensearch/domain/~A/listVpcEndpointAccess"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "ListVpcEndpointAccess"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-vpc-endpoint-access))
(common-lisp:progn
 (common-lisp:defun list-vpc-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-vpc-endpoints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/2021-01-01/opensearch/vpcEndpoints"
                                                        "ListVpcEndpoints"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-vpc-endpoints))
(common-lisp:progn
 (common-lisp:defun list-vpc-endpoints-for-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name next-token)
   (common-lisp:declare (common-lisp:ignorable domain-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-vpc-endpoints-for-domain-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/opensearch/domain/~A/vpcEndpoints"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "ListVpcEndpointsForDomain"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-vpc-endpoints-for-domain))
(common-lisp:progn
 (common-lisp:defun purchase-reserved-instance-offering
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reserved-instance-offering-id
                     reservation-name instance-count)
   (common-lisp:declare
    (common-lisp:ignorable reserved-instance-offering-id reservation-name
     instance-count))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-purchase-reserved-instance-offering-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2021-01-01/opensearch/purchaseReservedInstanceOffering"
                                                        "PurchaseReservedInstanceOffering"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'purchase-reserved-instance-offering))
(common-lisp:progn
 (common-lisp:defun reject-inbound-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id)
   (common-lisp:declare (common-lisp:ignorable connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reject-inbound-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/opensearch/cc/inboundConnection/~A/reject"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'connection-id))))
                                                        "RejectInboundConnection"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reject-inbound-connection))
(common-lisp:progn
 (common-lisp:defun remove-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2021-01-01/tags-removal"
                                                        "RemoveTags"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-tags))
(common-lisp:progn
 (common-lisp:defun revoke-vpc-endpoint-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name account)
   (common-lisp:declare (common-lisp:ignorable domain-name account))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-revoke-vpc-endpoint-access-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/opensearch/domain/~A/revokeVpcEndpointAccess"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "RevokeVpcEndpointAccess"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'revoke-vpc-endpoint-access))
(common-lisp:progn
 (common-lisp:defun start-service-software-update
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name schedule-at
                     desired-start-time)
   (common-lisp:declare
    (common-lisp:ignorable domain-name schedule-at desired-start-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-service-software-update-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2021-01-01/opensearch/serviceSoftwareUpdate/start"
                                                        "StartServiceSoftwareUpdate"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-service-software-update))
(common-lisp:progn
 (common-lisp:defun update-domain-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name cluster-config ebsoptions
                     snapshot-options vpcoptions cognito-options
                     advanced-options access-policies log-publishing-options
                     encryption-at-rest-options domain-endpoint-options
                     node-to-node-encryption-options advanced-security-options
                     auto-tune-options dry-run dry-run-mode
                     off-peak-window-options software-update-options)
   (common-lisp:declare
    (common-lisp:ignorable domain-name cluster-config ebsoptions
     snapshot-options vpcoptions cognito-options advanced-options
     access-policies log-publishing-options encryption-at-rest-options
     domain-endpoint-options node-to-node-encryption-options
     advanced-security-options auto-tune-options dry-run dry-run-mode
     off-peak-window-options software-update-options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-domain-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/opensearch/domain/~A/config"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "UpdateDomainConfig"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-domain-config))
(common-lisp:progn
 (common-lisp:defun update-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key package-id package-source
                     package-description commit-message)
   (common-lisp:declare
    (common-lisp:ignorable package-id package-source package-description
     commit-message))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-package-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2021-01-01/packages/update"
                                                        "UpdatePackage"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-package))
(common-lisp:progn
 (common-lisp:defun update-scheduled-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name action-id action-type
                     schedule-at desired-start-time)
   (common-lisp:declare
    (common-lisp:ignorable domain-name action-id action-type schedule-at
     desired-start-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-scheduled-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/2021-01-01/opensearch/domain/~A/scheduledAction/update"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'domain-name))))
                                                        "UpdateScheduledAction"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-scheduled-action))
(common-lisp:progn
 (common-lisp:defun update-vpc-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpc-endpoint-id vpc-options)
   (common-lisp:declare (common-lisp:ignorable vpc-endpoint-id vpc-options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-vpc-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2021-01-01/opensearch/vpcEndpoints/update"
                                                        "UpdateVpcEndpoint"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-vpc-endpoint))
(common-lisp:progn
 (common-lisp:defun upgrade-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name target-version
                     perform-check-only advanced-options)
   (common-lisp:declare
    (common-lisp:ignorable domain-name target-version perform-check-only
     advanced-options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-upgrade-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'opensearch-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/2021-01-01/opensearch/upgradeDomain"
                                                        "UpgradeDomain"
                                                        "2021-01-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'upgrade-domain))
