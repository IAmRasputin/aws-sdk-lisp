;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/clouddirectory/api
  (:use)
  (:nicknames #:aws/clouddirectory)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/clouddirectory/api)
(common-lisp:progn
 (common-lisp:defclass clouddirectory-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "clouddirectory"))
 (common-lisp:export 'clouddirectory-request))
(common-lisp:progn
 (common-lisp:define-condition clouddirectory-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'clouddirectory-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("BatchWriteException" . batch-write-exception)
    ("CannotListParentOfRootException" . cannot-list-parent-of-root-exception)
    ("DirectoryAlreadyExistsException" . directory-already-exists-exception)
    ("DirectoryDeletedException" . directory-deleted-exception)
    ("DirectoryNotDisabledException" . directory-not-disabled-exception)
    ("DirectoryNotEnabledException" . directory-not-enabled-exception)
    ("FacetAlreadyExistsException" . facet-already-exists-exception)
    ("FacetInUseException" . facet-in-use-exception)
    ("FacetNotFoundException" . facet-not-found-exception)
    ("FacetValidationException" . facet-validation-exception)
    ("IncompatibleSchemaException" . incompatible-schema-exception)
    ("IndexedAttributeMissingException" . indexed-attribute-missing-exception)
    ("InternalServiceException" . internal-service-exception)
    ("InvalidArnException" . invalid-arn-exception)
    ("InvalidAttachmentException" . invalid-attachment-exception)
    ("InvalidFacetUpdateException" . invalid-facet-update-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("InvalidRuleException" . invalid-rule-exception)
    ("InvalidSchemaDocException" . invalid-schema-doc-exception)
    ("InvalidTaggingRequestException" . invalid-tagging-request-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("LinkNameAlreadyInUseException" . link-name-already-in-use-exception)
    ("NotIndexException" . not-index-exception)
    ("NotNodeException" . not-node-exception)
    ("NotPolicyException" . not-policy-exception)
    ("ObjectAlreadyDetachedException" . object-already-detached-exception)
    ("ObjectNotDetachedException" . object-not-detached-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("RetryableConflictException" . retryable-conflict-exception)
    ("SchemaAlreadyExistsException" . schema-already-exists-exception)
    ("SchemaAlreadyPublishedException" . schema-already-published-exception)
    ("StillContainsLinksException" . still-contains-links-exception)
    ("UnsupportedIndexTypeException" . unsupported-index-type-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (add-facet-to-object-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-facet-to-object-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (schema-facet (common-lisp:error ":schema-facet is required") :type
    (common-lisp:or schema-facet common-lisp:null))
   (object-attribute-list common-lisp:nil :type
    (common-lisp:or attribute-key-and-value-list common-lisp:null))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-facet-to-object-request
                    'make-add-facet-to-object-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-facet-to-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-facet-to-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-facet))
      (common-lisp:list
       (common-lisp:cons "SchemaFacet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-attribute-list))
      (common-lisp:list
       (common-lisp:cons "ObjectAttributeList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-facet-to-object-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-facet-to-object-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-facet-to-object-response-")))
 (common-lisp:export
  (common-lisp:list 'add-facet-to-object-response
                    'make-add-facet-to-object-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-facet-to-object-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-facet-to-object-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-facet-to-object-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (apply-schema-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-apply-schema-request-"))
   (published-schema-arn
    (common-lisp:error ":published-schema-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'apply-schema-request 'make-apply-schema-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input apply-schema-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input apply-schema-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'published-schema-arn))
      (common-lisp:list
       (common-lisp:cons "PublishedSchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input apply-schema-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (apply-schema-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-apply-schema-response-"))
   (applied-schema-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (directory-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'apply-schema-response 'make-apply-schema-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          apply-schema-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          apply-schema-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applied-schema-arn))
      (common-lisp:list
       (common-lisp:cons "AppliedSchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:list
       (common-lisp:cons "DirectoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          apply-schema-response))
   common-lisp:nil))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype arns () '(trivial-types:proper-list arn))
 (common-lisp:defun |make-arns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-object-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-object-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (parent-reference (common-lisp:error ":parent-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (child-reference (common-lisp:error ":child-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (link-name (common-lisp:error ":link-name is required") :type
    (common-lisp:or link-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-object-request 'make-attach-object-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-reference))
      (common-lisp:list
       (common-lisp:cons "ParentReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-reference))
      (common-lisp:list
       (common-lisp:cons "ChildReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-name))
      (common-lisp:list
       (common-lisp:cons "LinkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-object-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-object-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-object-response-"))
   (attached-object-identifier common-lisp:nil :type
    (common-lisp:or object-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-object-response 'make-attach-object-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-object-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-object-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attached-object-identifier))
      (common-lisp:list
       (common-lisp:cons "AttachedObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-object-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-policy-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (policy-reference (common-lisp:error ":policy-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-policy-request 'make-attach-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-reference))
      (common-lisp:list
       (common-lisp:cons "PolicyReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-policy-response-")))
 (common-lisp:export
  (common-lisp:list 'attach-policy-response 'make-attach-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-to-index-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-to-index-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (index-reference (common-lisp:error ":index-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (target-reference (common-lisp:error ":target-reference is required") :type
    (common-lisp:or object-reference common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-to-index-request 'make-attach-to-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-to-index-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-to-index-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-reference))
      (common-lisp:list
       (common-lisp:cons "IndexReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-reference))
      (common-lisp:list
       (common-lisp:cons "TargetReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-to-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-to-index-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-to-index-response-"))
   (attached-object-identifier common-lisp:nil :type
    (common-lisp:or object-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-to-index-response 'make-attach-to-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-to-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-to-index-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attached-object-identifier))
      (common-lisp:list
       (common-lisp:cons "AttachedObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-to-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-typed-link-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-typed-link-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (source-object-reference
    (common-lisp:error ":source-object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (target-object-reference
    (common-lisp:error ":target-object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (typed-link-facet (common-lisp:error ":typed-link-facet is required") :type
    (common-lisp:or typed-link-schema-and-facet-name common-lisp:null))
   (attributes (common-lisp:error ":attributes is required") :type
    (common-lisp:or attribute-name-and-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-typed-link-request
                    'make-attach-typed-link-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-typed-link-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-typed-link-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-object-reference))
      (common-lisp:list
       (common-lisp:cons "SourceObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-object-reference))
      (common-lisp:list
       (common-lisp:cons "TargetObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'typed-link-facet))
      (common-lisp:list
       (common-lisp:cons "TypedLinkFacet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-typed-link-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-typed-link-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-typed-link-response-"))
   (typed-link-specifier common-lisp:nil :type
    (common-lisp:or typed-link-specifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-typed-link-response
                    'make-attach-typed-link-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-typed-link-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-typed-link-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'typed-link-specifier))
      (common-lisp:list
       (common-lisp:cons "TypedLinkSpecifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-typed-link-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attribute-key (:copier common-lisp:nil)
      (:conc-name "struct-shape-attribute-key-"))
   (schema-arn (common-lisp:error ":schema-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (facet-name (common-lisp:error ":facet-name is required") :type
    (common-lisp:or facet-name common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or attribute-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'attribute-key 'make-attribute-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facet-name))
      (common-lisp:list
       (common-lisp:cons "FacetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attribute-key-and-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-attribute-key-and-value-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or attribute-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or typed-attribute-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attribute-key-and-value 'make-attribute-key-and-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attribute-key-and-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attribute-key-and-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attribute-key-and-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype attribute-key-and-value-list ()
   '(trivial-types:proper-list attribute-key-and-value))
 (common-lisp:defun |make-attribute-key-and-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-key-and-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype attribute-key-list ()
   '(trivial-types:proper-list attribute-key))
 (common-lisp:defun |make-attribute-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-key))
   aws-sdk/generator/shape::members))
(common-lisp:deftype attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (attribute-name-and-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-attribute-name-and-value-"))
   (attribute-name (common-lisp:error ":attribute-name is required") :type
    (common-lisp:or attribute-name common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or typed-attribute-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attribute-name-and-value 'make-attribute-name-and-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attribute-name-and-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attribute-name-and-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attribute-name-and-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype attribute-name-and-value-list ()
   '(trivial-types:proper-list attribute-name-and-value))
 (common-lisp:defun |make-attribute-name-and-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            attribute-name-and-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype attribute-name-list ()
   '(trivial-types:proper-list attribute-name))
 (common-lisp:defun |make-attribute-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-add-facet-to-object (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-add-facet-to-object-"))
   (schema-facet (common-lisp:error ":schema-facet is required") :type
    (common-lisp:or schema-facet common-lisp:null))
   (object-attribute-list
    (common-lisp:error ":object-attribute-list is required") :type
    (common-lisp:or attribute-key-and-value-list common-lisp:null))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-add-facet-to-object
                    'make-batch-add-facet-to-object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-add-facet-to-object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-add-facet-to-object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-facet))
      (common-lisp:list
       (common-lisp:cons "SchemaFacet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-attribute-list))
      (common-lisp:list
       (common-lisp:cons "ObjectAttributeList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-add-facet-to-object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-add-facet-to-object-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-add-facet-to-object-response-")))
 (common-lisp:export
  (common-lisp:list 'batch-add-facet-to-object-response
                    'make-batch-add-facet-to-object-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-add-facet-to-object-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-add-facet-to-object-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-add-facet-to-object-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-attach-object (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-attach-object-"))
   (parent-reference (common-lisp:error ":parent-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (child-reference (common-lisp:error ":child-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (link-name (common-lisp:error ":link-name is required") :type
    (common-lisp:or link-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-attach-object 'make-batch-attach-object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-attach-object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-attach-object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-reference))
      (common-lisp:list
       (common-lisp:cons "ParentReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-reference))
      (common-lisp:list
       (common-lisp:cons "ChildReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-name))
      (common-lisp:list
       (common-lisp:cons "LinkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-attach-object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-attach-object-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-attach-object-response-"))
   (attached-object-identifier common-lisp:nil :type
    (common-lisp:or object-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-attach-object-response
                    'make-batch-attach-object-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-attach-object-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-attach-object-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attached-object-identifier))
      (common-lisp:list
       (common-lisp:cons "attachedObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-attach-object-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-attach-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-attach-policy-"))
   (policy-reference (common-lisp:error ":policy-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-attach-policy 'make-batch-attach-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-attach-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-attach-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-reference))
      (common-lisp:list
       (common-lisp:cons "PolicyReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-attach-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-attach-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-attach-policy-response-")))
 (common-lisp:export
  (common-lisp:list 'batch-attach-policy-response
                    'make-batch-attach-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-attach-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-attach-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-attach-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-attach-to-index (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-attach-to-index-"))
   (index-reference (common-lisp:error ":index-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (target-reference (common-lisp:error ":target-reference is required") :type
    (common-lisp:or object-reference common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-attach-to-index 'make-batch-attach-to-index))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-attach-to-index))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-attach-to-index))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-reference))
      (common-lisp:list
       (common-lisp:cons "IndexReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-reference))
      (common-lisp:list
       (common-lisp:cons "TargetReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-attach-to-index))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-attach-to-index-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-attach-to-index-response-"))
   (attached-object-identifier common-lisp:nil :type
    (common-lisp:or object-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-attach-to-index-response
                    'make-batch-attach-to-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-attach-to-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-attach-to-index-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attached-object-identifier))
      (common-lisp:list
       (common-lisp:cons "AttachedObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-attach-to-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-attach-typed-link (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-attach-typed-link-"))
   (source-object-reference
    (common-lisp:error ":source-object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (target-object-reference
    (common-lisp:error ":target-object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (typed-link-facet (common-lisp:error ":typed-link-facet is required") :type
    (common-lisp:or typed-link-schema-and-facet-name common-lisp:null))
   (attributes (common-lisp:error ":attributes is required") :type
    (common-lisp:or attribute-name-and-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-attach-typed-link 'make-batch-attach-typed-link))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-attach-typed-link))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-attach-typed-link))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-object-reference))
      (common-lisp:list
       (common-lisp:cons "SourceObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-object-reference))
      (common-lisp:list
       (common-lisp:cons "TargetObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'typed-link-facet))
      (common-lisp:list
       (common-lisp:cons "TypedLinkFacet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-attach-typed-link))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-attach-typed-link-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-attach-typed-link-response-"))
   (typed-link-specifier common-lisp:nil :type
    (common-lisp:or typed-link-specifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-attach-typed-link-response
                    'make-batch-attach-typed-link-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-attach-typed-link-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-attach-typed-link-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'typed-link-specifier))
      (common-lisp:list
       (common-lisp:cons "TypedLinkSpecifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-attach-typed-link-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-create-index (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-create-index-"))
   (ordered-indexed-attribute-list
    (common-lisp:error ":ordered-indexed-attribute-list is required") :type
    (common-lisp:or attribute-key-list common-lisp:null))
   (is-unique (common-lisp:error ":is-unique is required") :type
    (common-lisp:or bool common-lisp:null))
   (parent-reference common-lisp:nil :type
    (common-lisp:or object-reference common-lisp:null))
   (link-name common-lisp:nil :type
    (common-lisp:or link-name common-lisp:null))
   (batch-reference-name common-lisp:nil :type
    (common-lisp:or batch-reference-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-create-index 'make-batch-create-index))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-create-index))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-create-index))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ordered-indexed-attribute-list))
      (common-lisp:list
       (common-lisp:cons "OrderedIndexedAttributeList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-unique))
      (common-lisp:list
       (common-lisp:cons "IsUnique"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-reference))
      (common-lisp:list
       (common-lisp:cons "ParentReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-name))
      (common-lisp:list
       (common-lisp:cons "LinkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-reference-name))
      (common-lisp:list
       (common-lisp:cons "BatchReferenceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-create-index))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-create-index-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-create-index-response-"))
   (object-identifier common-lisp:nil :type
    (common-lisp:or object-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-create-index-response
                    'make-batch-create-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-index-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-identifier))
      (common-lisp:list
       (common-lisp:cons "ObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-create-object (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-create-object-"))
   (schema-facet (common-lisp:error ":schema-facet is required") :type
    (common-lisp:or schema-facet-list common-lisp:null))
   (object-attribute-list
    (common-lisp:error ":object-attribute-list is required") :type
    (common-lisp:or attribute-key-and-value-list common-lisp:null))
   (parent-reference common-lisp:nil :type
    (common-lisp:or object-reference common-lisp:null))
   (link-name common-lisp:nil :type
    (common-lisp:or link-name common-lisp:null))
   (batch-reference-name common-lisp:nil :type
    (common-lisp:or batch-reference-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-create-object 'make-batch-create-object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-create-object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-create-object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-facet))
      (common-lisp:list
       (common-lisp:cons "SchemaFacet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-attribute-list))
      (common-lisp:list
       (common-lisp:cons "ObjectAttributeList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-reference))
      (common-lisp:list
       (common-lisp:cons "ParentReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-name))
      (common-lisp:list
       (common-lisp:cons "LinkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-reference-name))
      (common-lisp:list
       (common-lisp:cons "BatchReferenceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-create-object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-create-object-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-create-object-response-"))
   (object-identifier common-lisp:nil :type
    (common-lisp:or object-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-create-object-response
                    'make-batch-create-object-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-object-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-object-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-identifier))
      (common-lisp:list
       (common-lisp:cons "ObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-object-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-object (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-object-"))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-object 'make-batch-delete-object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-delete-object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-delete-object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-delete-object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-object-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-object-response-")))
 (common-lisp:export
  (common-lisp:list 'batch-delete-object-response
                    'make-batch-delete-object-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-object-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-object-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-object-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-detach-from-index (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-detach-from-index-"))
   (index-reference (common-lisp:error ":index-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (target-reference (common-lisp:error ":target-reference is required") :type
    (common-lisp:or object-reference common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-detach-from-index 'make-batch-detach-from-index))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-detach-from-index))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-detach-from-index))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-reference))
      (common-lisp:list
       (common-lisp:cons "IndexReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-reference))
      (common-lisp:list
       (common-lisp:cons "TargetReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-detach-from-index))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-detach-from-index-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-detach-from-index-response-"))
   (detached-object-identifier common-lisp:nil :type
    (common-lisp:or object-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-detach-from-index-response
                    'make-batch-detach-from-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-detach-from-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-detach-from-index-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detached-object-identifier))
      (common-lisp:list
       (common-lisp:cons "DetachedObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-detach-from-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-detach-object (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-detach-object-"))
   (parent-reference (common-lisp:error ":parent-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (link-name (common-lisp:error ":link-name is required") :type
    (common-lisp:or link-name common-lisp:null))
   (batch-reference-name common-lisp:nil :type
    (common-lisp:or batch-reference-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-detach-object 'make-batch-detach-object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-detach-object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-detach-object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-reference))
      (common-lisp:list
       (common-lisp:cons "ParentReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-name))
      (common-lisp:list
       (common-lisp:cons "LinkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-reference-name))
      (common-lisp:list
       (common-lisp:cons "BatchReferenceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-detach-object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-detach-object-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-detach-object-response-"))
   (detached-object-identifier common-lisp:nil :type
    (common-lisp:or object-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-detach-object-response
                    'make-batch-detach-object-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-detach-object-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-detach-object-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detached-object-identifier))
      (common-lisp:list
       (common-lisp:cons "detachedObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-detach-object-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-detach-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-detach-policy-"))
   (policy-reference (common-lisp:error ":policy-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-detach-policy 'make-batch-detach-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-detach-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-detach-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-reference))
      (common-lisp:list
       (common-lisp:cons "PolicyReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-detach-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-detach-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-detach-policy-response-")))
 (common-lisp:export
  (common-lisp:list 'batch-detach-policy-response
                    'make-batch-detach-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-detach-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-detach-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-detach-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-detach-typed-link (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-detach-typed-link-"))
   (typed-link-specifier
    (common-lisp:error ":typed-link-specifier is required") :type
    (common-lisp:or typed-link-specifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-detach-typed-link 'make-batch-detach-typed-link))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-detach-typed-link))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-detach-typed-link))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'typed-link-specifier))
      (common-lisp:list
       (common-lisp:cons "TypedLinkSpecifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-detach-typed-link))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-detach-typed-link-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-detach-typed-link-response-")))
 (common-lisp:export
  (common-lisp:list 'batch-detach-typed-link-response
                    'make-batch-detach-typed-link-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-detach-typed-link-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-detach-typed-link-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-detach-typed-link-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-link-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-link-attributes-"))
   (typed-link-specifier
    (common-lisp:error ":typed-link-specifier is required") :type
    (common-lisp:or typed-link-specifier common-lisp:null))
   (attribute-names (common-lisp:error ":attribute-names is required") :type
    (common-lisp:or attribute-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-link-attributes
                    'make-batch-get-link-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-link-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-link-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'typed-link-specifier))
      (common-lisp:list
       (common-lisp:cons "TypedLinkSpecifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-names))
      (common-lisp:list
       (common-lisp:cons "AttributeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-link-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-link-attributes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-link-attributes-response-"))
   (attributes common-lisp:nil :type
    (common-lisp:or attribute-key-and-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-link-attributes-response
                    'make-batch-get-link-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-link-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-link-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-link-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-object-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-object-attributes-"))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (schema-facet (common-lisp:error ":schema-facet is required") :type
    (common-lisp:or schema-facet common-lisp:null))
   (attribute-names (common-lisp:error ":attribute-names is required") :type
    (common-lisp:or attribute-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-object-attributes
                    'make-batch-get-object-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-object-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-object-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-facet))
      (common-lisp:list
       (common-lisp:cons "SchemaFacet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-names))
      (common-lisp:list
       (common-lisp:cons "AttributeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-object-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-object-attributes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-object-attributes-response-"))
   (attributes common-lisp:nil :type
    (common-lisp:or attribute-key-and-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-object-attributes-response
                    'make-batch-get-object-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-object-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-object-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-object-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-object-information (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-object-information-"))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-object-information
                    'make-batch-get-object-information))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-object-information))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-object-information))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-object-information))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-object-information-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-object-information-response-"))
   (schema-facets common-lisp:nil :type
    (common-lisp:or schema-facet-list common-lisp:null))
   (object-identifier common-lisp:nil :type
    (common-lisp:or object-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-object-information-response
                    'make-batch-get-object-information-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-object-information-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-object-information-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-facets))
      (common-lisp:list
       (common-lisp:cons "SchemaFacets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-identifier))
      (common-lisp:list
       (common-lisp:cons "ObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-object-information-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-list-attached-indices (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-list-attached-indices-"))
   (target-reference (common-lisp:error ":target-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-list-attached-indices
                    'make-batch-list-attached-indices))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-attached-indices))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-attached-indices))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-reference))
      (common-lisp:list
       (common-lisp:cons "TargetReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-attached-indices))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-list-attached-indices-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-list-attached-indices-response-"))
   (index-attachments common-lisp:nil :type
    (common-lisp:or index-attachment-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-list-attached-indices-response
                    'make-batch-list-attached-indices-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-attached-indices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-attached-indices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-attachments))
      (common-lisp:list
       (common-lisp:cons "IndexAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-attached-indices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-list-incoming-typed-links (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-list-incoming-typed-links-"))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (filter-attribute-ranges common-lisp:nil :type
    (common-lisp:or typed-link-attribute-range-list common-lisp:null))
   (filter-typed-link common-lisp:nil :type
    (common-lisp:or typed-link-schema-and-facet-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-list-incoming-typed-links
                    'make-batch-list-incoming-typed-links))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-incoming-typed-links))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-incoming-typed-links))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'filter-attribute-ranges))
      (common-lisp:list
       (common-lisp:cons "FilterAttributeRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-typed-link))
      (common-lisp:list
       (common-lisp:cons "FilterTypedLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-incoming-typed-links))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-list-incoming-typed-links-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-list-incoming-typed-links-response-"))
   (link-specifiers common-lisp:nil :type
    (common-lisp:or typed-link-specifier-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-list-incoming-typed-links-response
                    'make-batch-list-incoming-typed-links-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-incoming-typed-links-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-incoming-typed-links-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-specifiers))
      (common-lisp:list
       (common-lisp:cons "LinkSpecifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-incoming-typed-links-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-list-index (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-list-index-"))
   (ranges-on-indexed-values common-lisp:nil :type
    (common-lisp:or object-attribute-range-list common-lisp:null))
   (index-reference (common-lisp:error ":index-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-list-index 'make-batch-list-index))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-list-index))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-list-index))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ranges-on-indexed-values))
      (common-lisp:list
       (common-lisp:cons "RangesOnIndexedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-reference))
      (common-lisp:list
       (common-lisp:cons "IndexReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-list-index))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-list-index-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-list-index-response-"))
   (index-attachments common-lisp:nil :type
    (common-lisp:or index-attachment-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-list-index-response
                    'make-batch-list-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-index-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-attachments))
      (common-lisp:list
       (common-lisp:cons "IndexAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-list-object-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-list-object-attributes-"))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null))
   (facet-filter common-lisp:nil :type
    (common-lisp:or schema-facet common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-list-object-attributes
                    'make-batch-list-object-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facet-filter))
      (common-lisp:list
       (common-lisp:cons "FacetFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-list-object-attributes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-list-object-attributes-response-"))
   (attributes common-lisp:nil :type
    (common-lisp:or attribute-key-and-value-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-list-object-attributes-response
                    'make-batch-list-object-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-list-object-children (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-list-object-children-"))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-list-object-children
                    'make-batch-list-object-children))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-children))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-children))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-children))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-list-object-children-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-list-object-children-response-"))
   (children common-lisp:nil :type
    (common-lisp:or link-name-to-object-identifier-map common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-list-object-children-response
                    'make-batch-list-object-children-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-children-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-children-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'children))
      (common-lisp:list
       (common-lisp:cons "Children"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-children-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-list-object-parent-paths (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-list-object-parent-paths-"))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-list-object-parent-paths
                    'make-batch-list-object-parent-paths))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-parent-paths))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-parent-paths))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-parent-paths))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-list-object-parent-paths-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-list-object-parent-paths-response-"))
   (path-to-object-identifiers-list common-lisp:nil :type
    (common-lisp:or path-to-object-identifiers-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-list-object-parent-paths-response
                    'make-batch-list-object-parent-paths-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-parent-paths-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-parent-paths-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'path-to-object-identifiers-list))
      (common-lisp:list
       (common-lisp:cons "PathToObjectIdentifiersList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-parent-paths-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-list-object-parents (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-list-object-parents-"))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-list-object-parents
                    'make-batch-list-object-parents))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-parents))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-parents))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-parents))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-list-object-parents-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-list-object-parents-response-"))
   (parent-links common-lisp:nil :type
    (common-lisp:or object-identifier-and-link-name-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-list-object-parents-response
                    'make-batch-list-object-parents-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-parents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-parents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-links))
      (common-lisp:list
       (common-lisp:cons "ParentLinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-parents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-list-object-policies (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-list-object-policies-"))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-list-object-policies
                    'make-batch-list-object-policies))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-policies))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-policies))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-policies))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-list-object-policies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-list-object-policies-response-"))
   (attached-policy-ids common-lisp:nil :type
    (common-lisp:or object-identifier-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-list-object-policies-response
                    'make-batch-list-object-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attached-policy-ids))
      (common-lisp:list
       (common-lisp:cons "AttachedPolicyIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-object-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-list-outgoing-typed-links (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-list-outgoing-typed-links-"))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (filter-attribute-ranges common-lisp:nil :type
    (common-lisp:or typed-link-attribute-range-list common-lisp:null))
   (filter-typed-link common-lisp:nil :type
    (common-lisp:or typed-link-schema-and-facet-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-list-outgoing-typed-links
                    'make-batch-list-outgoing-typed-links))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-outgoing-typed-links))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-outgoing-typed-links))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'filter-attribute-ranges))
      (common-lisp:list
       (common-lisp:cons "FilterAttributeRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-typed-link))
      (common-lisp:list
       (common-lisp:cons "FilterTypedLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-outgoing-typed-links))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-list-outgoing-typed-links-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-list-outgoing-typed-links-response-"))
   (typed-link-specifiers common-lisp:nil :type
    (common-lisp:or typed-link-specifier-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-list-outgoing-typed-links-response
                    'make-batch-list-outgoing-typed-links-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-outgoing-typed-links-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-outgoing-typed-links-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'typed-link-specifiers))
      (common-lisp:list
       (common-lisp:cons "TypedLinkSpecifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-outgoing-typed-links-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-list-policy-attachments (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-list-policy-attachments-"))
   (policy-reference (common-lisp:error ":policy-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-list-policy-attachments
                    'make-batch-list-policy-attachments))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-policy-attachments))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-policy-attachments))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-reference))
      (common-lisp:list
       (common-lisp:cons "PolicyReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-policy-attachments))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-list-policy-attachments-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-list-policy-attachments-response-"))
   (object-identifiers common-lisp:nil :type
    (common-lisp:or object-identifier-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-list-policy-attachments-response
                    'make-batch-list-policy-attachments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-policy-attachments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-policy-attachments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-identifiers))
      (common-lisp:list
       (common-lisp:cons "ObjectIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-list-policy-attachments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-lookup-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-lookup-policy-"))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-lookup-policy 'make-batch-lookup-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-lookup-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-lookup-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-lookup-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-lookup-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-lookup-policy-response-"))
   (policy-to-path-list common-lisp:nil :type
    (common-lisp:or policy-to-path-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-lookup-policy-response
                    'make-batch-lookup-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-lookup-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-lookup-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-to-path-list))
      (common-lisp:list
       (common-lisp:cons "PolicyToPathList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-lookup-policy-response))
   common-lisp:nil))
(common-lisp:deftype batch-operation-index () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (batch-read-exception (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-read-exception-"))
   (type common-lisp:nil :type
    (common-lisp:or batch-read-exception-type common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or exception-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-read-exception 'make-batch-read-exception))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-read-exception))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-read-exception))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-read-exception))
   common-lisp:nil))
(common-lisp:deftype batch-read-exception-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (batch-read-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-read-operation-"))
   (list-object-attributes common-lisp:nil :type
    (common-lisp:or batch-list-object-attributes common-lisp:null))
   (list-object-children common-lisp:nil :type
    (common-lisp:or batch-list-object-children common-lisp:null))
   (list-attached-indices common-lisp:nil :type
    (common-lisp:or batch-list-attached-indices common-lisp:null))
   (list-object-parent-paths common-lisp:nil :type
    (common-lisp:or batch-list-object-parent-paths common-lisp:null))
   (get-object-information common-lisp:nil :type
    (common-lisp:or batch-get-object-information common-lisp:null))
   (get-object-attributes common-lisp:nil :type
    (common-lisp:or batch-get-object-attributes common-lisp:null))
   (list-object-parents common-lisp:nil :type
    (common-lisp:or batch-list-object-parents common-lisp:null))
   (list-object-policies common-lisp:nil :type
    (common-lisp:or batch-list-object-policies common-lisp:null))
   (list-policy-attachments common-lisp:nil :type
    (common-lisp:or batch-list-policy-attachments common-lisp:null))
   (lookup-policy common-lisp:nil :type
    (common-lisp:or batch-lookup-policy common-lisp:null))
   (list-index common-lisp:nil :type
    (common-lisp:or batch-list-index common-lisp:null))
   (list-outgoing-typed-links common-lisp:nil :type
    (common-lisp:or batch-list-outgoing-typed-links common-lisp:null))
   (list-incoming-typed-links common-lisp:nil :type
    (common-lisp:or batch-list-incoming-typed-links common-lisp:null))
   (get-link-attributes common-lisp:nil :type
    (common-lisp:or batch-get-link-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-read-operation 'make-batch-read-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-read-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-read-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-object-attributes))
      (common-lisp:list
       (common-lisp:cons "ListObjectAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-object-children))
      (common-lisp:list
       (common-lisp:cons "ListObjectChildren"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-attached-indices))
      (common-lisp:list
       (common-lisp:cons "ListAttachedIndices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-object-parent-paths))
      (common-lisp:list
       (common-lisp:cons "ListObjectParentPaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'get-object-information))
      (common-lisp:list
       (common-lisp:cons "GetObjectInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'get-object-attributes))
      (common-lisp:list
       (common-lisp:cons "GetObjectAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-object-parents))
      (common-lisp:list
       (common-lisp:cons "ListObjectParents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-object-policies))
      (common-lisp:list
       (common-lisp:cons "ListObjectPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-policy-attachments))
      (common-lisp:list
       (common-lisp:cons "ListPolicyAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lookup-policy))
      (common-lisp:list
       (common-lisp:cons "LookupPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-index))
      (common-lisp:list
       (common-lisp:cons "ListIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-outgoing-typed-links))
      (common-lisp:list
       (common-lisp:cons "ListOutgoingTypedLinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-incoming-typed-links))
      (common-lisp:list
       (common-lisp:cons "ListIncomingTypedLinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'get-link-attributes))
      (common-lisp:list
       (common-lisp:cons "GetLinkAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-read-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-read-operation-list ()
   '(trivial-types:proper-list batch-read-operation))
 (common-lisp:defun |make-batch-read-operation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list batch-read-operation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-read-operation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-read-operation-response-"))
   (successful-response common-lisp:nil :type
    (common-lisp:or batch-read-successful-response common-lisp:null))
   (exception-response common-lisp:nil :type
    (common-lisp:or batch-read-exception common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-read-operation-response
                    'make-batch-read-operation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-read-operation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-read-operation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful-response))
      (common-lisp:list
       (common-lisp:cons "SuccessfulResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exception-response))
      (common-lisp:list
       (common-lisp:cons "ExceptionResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-read-operation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-read-operation-response-list ()
   '(trivial-types:proper-list batch-read-operation-response))
 (common-lisp:defun |make-batch-read-operation-response-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-read-operation-response))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-read-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-read-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (operations (common-lisp:error ":operations is required") :type
    (common-lisp:or batch-read-operation-list common-lisp:null))
   (consistency-level common-lisp:nil :type
    (common-lisp:or consistency-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-read-request 'make-batch-read-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-read-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consistency-level))
      (common-lisp:cons "x-amz-consistency-level"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-read-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "Operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-read-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-read-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-read-response-"))
   (responses common-lisp:nil :type
    (common-lisp:or batch-read-operation-response-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-read-response 'make-batch-read-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-read-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-read-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'responses))
      (common-lisp:list
       (common-lisp:cons "Responses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-read-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-read-successful-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-read-successful-response-"))
   (list-object-attributes common-lisp:nil :type
    (common-lisp:or batch-list-object-attributes-response common-lisp:null))
   (list-object-children common-lisp:nil :type
    (common-lisp:or batch-list-object-children-response common-lisp:null))
   (get-object-information common-lisp:nil :type
    (common-lisp:or batch-get-object-information-response common-lisp:null))
   (get-object-attributes common-lisp:nil :type
    (common-lisp:or batch-get-object-attributes-response common-lisp:null))
   (list-attached-indices common-lisp:nil :type
    (common-lisp:or batch-list-attached-indices-response common-lisp:null))
   (list-object-parent-paths common-lisp:nil :type
    (common-lisp:or batch-list-object-parent-paths-response common-lisp:null))
   (list-object-policies common-lisp:nil :type
    (common-lisp:or batch-list-object-policies-response common-lisp:null))
   (list-policy-attachments common-lisp:nil :type
    (common-lisp:or batch-list-policy-attachments-response common-lisp:null))
   (lookup-policy common-lisp:nil :type
    (common-lisp:or batch-lookup-policy-response common-lisp:null))
   (list-index common-lisp:nil :type
    (common-lisp:or batch-list-index-response common-lisp:null))
   (list-outgoing-typed-links common-lisp:nil :type
    (common-lisp:or batch-list-outgoing-typed-links-response common-lisp:null))
   (list-incoming-typed-links common-lisp:nil :type
    (common-lisp:or batch-list-incoming-typed-links-response common-lisp:null))
   (get-link-attributes common-lisp:nil :type
    (common-lisp:or batch-get-link-attributes-response common-lisp:null))
   (list-object-parents common-lisp:nil :type
    (common-lisp:or batch-list-object-parents-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-read-successful-response
                    'make-batch-read-successful-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-read-successful-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-read-successful-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-object-attributes))
      (common-lisp:list
       (common-lisp:cons "ListObjectAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-object-children))
      (common-lisp:list
       (common-lisp:cons "ListObjectChildren"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'get-object-information))
      (common-lisp:list
       (common-lisp:cons "GetObjectInformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'get-object-attributes))
      (common-lisp:list
       (common-lisp:cons "GetObjectAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-attached-indices))
      (common-lisp:list
       (common-lisp:cons "ListAttachedIndices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-object-parent-paths))
      (common-lisp:list
       (common-lisp:cons "ListObjectParentPaths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-object-policies))
      (common-lisp:list
       (common-lisp:cons "ListObjectPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-policy-attachments))
      (common-lisp:list
       (common-lisp:cons "ListPolicyAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lookup-policy))
      (common-lisp:list
       (common-lisp:cons "LookupPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-index))
      (common-lisp:list
       (common-lisp:cons "ListIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-outgoing-typed-links))
      (common-lisp:list
       (common-lisp:cons "ListOutgoingTypedLinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'list-incoming-typed-links))
      (common-lisp:list
       (common-lisp:cons "ListIncomingTypedLinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'get-link-attributes))
      (common-lisp:list
       (common-lisp:cons "GetLinkAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'list-object-parents))
      (common-lisp:list
       (common-lisp:cons "ListObjectParents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-read-successful-response))
   common-lisp:nil))
(common-lisp:deftype batch-reference-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (batch-remove-facet-from-object (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-remove-facet-from-object-"))
   (schema-facet (common-lisp:error ":schema-facet is required") :type
    (common-lisp:or schema-facet common-lisp:null))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-remove-facet-from-object
                    'make-batch-remove-facet-from-object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-remove-facet-from-object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-remove-facet-from-object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-facet))
      (common-lisp:list
       (common-lisp:cons "SchemaFacet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-remove-facet-from-object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-remove-facet-from-object-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-remove-facet-from-object-response-")))
 (common-lisp:export
  (common-lisp:list 'batch-remove-facet-from-object-response
                    'make-batch-remove-facet-from-object-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-remove-facet-from-object-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-remove-facet-from-object-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-remove-facet-from-object-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-update-link-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-update-link-attributes-"))
   (typed-link-specifier
    (common-lisp:error ":typed-link-specifier is required") :type
    (common-lisp:or typed-link-specifier common-lisp:null))
   (attribute-updates (common-lisp:error ":attribute-updates is required")
    :type (common-lisp:or link-attribute-update-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-update-link-attributes
                    'make-batch-update-link-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-link-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-link-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'typed-link-specifier))
      (common-lisp:list
       (common-lisp:cons "TypedLinkSpecifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-updates))
      (common-lisp:list
       (common-lisp:cons "AttributeUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-link-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-update-link-attributes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-update-link-attributes-response-")))
 (common-lisp:export
  (common-lisp:list 'batch-update-link-attributes-response
                    'make-batch-update-link-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-link-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-link-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-link-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-update-object-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-update-object-attributes-"))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (attribute-updates (common-lisp:error ":attribute-updates is required")
    :type (common-lisp:or object-attribute-update-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-update-object-attributes
                    'make-batch-update-object-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-object-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-object-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-updates))
      (common-lisp:list
       (common-lisp:cons "AttributeUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-object-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-update-object-attributes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-update-object-attributes-response-"))
   (object-identifier common-lisp:nil :type
    (common-lisp:or object-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-update-object-attributes-response
                    'make-batch-update-object-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-object-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-object-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-identifier))
      (common-lisp:list
       (common-lisp:cons "ObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-object-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition batch-write-exception
     (clouddirectory-error)
     ((index :initarg :index :initform common-lisp:nil :reader
       batch-write-exception-index)
      (type :initarg :type :initform common-lisp:nil :reader
       batch-write-exception-type)
      (message :initarg :message :initform common-lisp:nil :reader
       batch-write-exception-message)))
 (common-lisp:export
  (common-lisp:list 'batch-write-exception 'batch-write-exception-index
                    'batch-write-exception-type
                    'batch-write-exception-message)))
(common-lisp:deftype batch-write-exception-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (batch-write-operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-write-operation-"))
   (create-object common-lisp:nil :type
    (common-lisp:or batch-create-object common-lisp:null))
   (attach-object common-lisp:nil :type
    (common-lisp:or batch-attach-object common-lisp:null))
   (detach-object common-lisp:nil :type
    (common-lisp:or batch-detach-object common-lisp:null))
   (update-object-attributes common-lisp:nil :type
    (common-lisp:or batch-update-object-attributes common-lisp:null))
   (delete-object common-lisp:nil :type
    (common-lisp:or batch-delete-object common-lisp:null))
   (add-facet-to-object common-lisp:nil :type
    (common-lisp:or batch-add-facet-to-object common-lisp:null))
   (remove-facet-from-object common-lisp:nil :type
    (common-lisp:or batch-remove-facet-from-object common-lisp:null))
   (attach-policy common-lisp:nil :type
    (common-lisp:or batch-attach-policy common-lisp:null))
   (detach-policy common-lisp:nil :type
    (common-lisp:or batch-detach-policy common-lisp:null))
   (create-index common-lisp:nil :type
    (common-lisp:or batch-create-index common-lisp:null))
   (attach-to-index common-lisp:nil :type
    (common-lisp:or batch-attach-to-index common-lisp:null))
   (detach-from-index common-lisp:nil :type
    (common-lisp:or batch-detach-from-index common-lisp:null))
   (attach-typed-link common-lisp:nil :type
    (common-lisp:or batch-attach-typed-link common-lisp:null))
   (detach-typed-link common-lisp:nil :type
    (common-lisp:or batch-detach-typed-link common-lisp:null))
   (update-link-attributes common-lisp:nil :type
    (common-lisp:or batch-update-link-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-write-operation 'make-batch-write-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-write-operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-write-operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-object))
      (common-lisp:list
       (common-lisp:cons "CreateObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attach-object))
      (common-lisp:list
       (common-lisp:cons "AttachObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detach-object))
      (common-lisp:list
       (common-lisp:cons "DetachObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-object-attributes))
      (common-lisp:list
       (common-lisp:cons "UpdateObjectAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-object))
      (common-lisp:list
       (common-lisp:cons "DeleteObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-facet-to-object))
      (common-lisp:list
       (common-lisp:cons "AddFacetToObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-facet-from-object))
      (common-lisp:list
       (common-lisp:cons "RemoveFacetFromObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attach-policy))
      (common-lisp:list
       (common-lisp:cons "AttachPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detach-policy))
      (common-lisp:list
       (common-lisp:cons "DetachPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-index))
      (common-lisp:list
       (common-lisp:cons "CreateIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attach-to-index))
      (common-lisp:list
       (common-lisp:cons "AttachToIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detach-from-index))
      (common-lisp:list
       (common-lisp:cons "DetachFromIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attach-typed-link))
      (common-lisp:list
       (common-lisp:cons "AttachTypedLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detach-typed-link))
      (common-lisp:list
       (common-lisp:cons "DetachTypedLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-link-attributes))
      (common-lisp:list
       (common-lisp:cons "UpdateLinkAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-write-operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-write-operation-list ()
   '(trivial-types:proper-list batch-write-operation))
 (common-lisp:defun |make-batch-write-operation-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list batch-write-operation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-write-operation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-write-operation-response-"))
   (create-object common-lisp:nil :type
    (common-lisp:or batch-create-object-response common-lisp:null))
   (attach-object common-lisp:nil :type
    (common-lisp:or batch-attach-object-response common-lisp:null))
   (detach-object common-lisp:nil :type
    (common-lisp:or batch-detach-object-response common-lisp:null))
   (update-object-attributes common-lisp:nil :type
    (common-lisp:or batch-update-object-attributes-response common-lisp:null))
   (delete-object common-lisp:nil :type
    (common-lisp:or batch-delete-object-response common-lisp:null))
   (add-facet-to-object common-lisp:nil :type
    (common-lisp:or batch-add-facet-to-object-response common-lisp:null))
   (remove-facet-from-object common-lisp:nil :type
    (common-lisp:or batch-remove-facet-from-object-response common-lisp:null))
   (attach-policy common-lisp:nil :type
    (common-lisp:or batch-attach-policy-response common-lisp:null))
   (detach-policy common-lisp:nil :type
    (common-lisp:or batch-detach-policy-response common-lisp:null))
   (create-index common-lisp:nil :type
    (common-lisp:or batch-create-index-response common-lisp:null))
   (attach-to-index common-lisp:nil :type
    (common-lisp:or batch-attach-to-index-response common-lisp:null))
   (detach-from-index common-lisp:nil :type
    (common-lisp:or batch-detach-from-index-response common-lisp:null))
   (attach-typed-link common-lisp:nil :type
    (common-lisp:or batch-attach-typed-link-response common-lisp:null))
   (detach-typed-link common-lisp:nil :type
    (common-lisp:or batch-detach-typed-link-response common-lisp:null))
   (update-link-attributes common-lisp:nil :type
    (common-lisp:or batch-update-link-attributes-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-write-operation-response
                    'make-batch-write-operation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-write-operation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-write-operation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-object))
      (common-lisp:list
       (common-lisp:cons "CreateObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attach-object))
      (common-lisp:list
       (common-lisp:cons "AttachObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detach-object))
      (common-lisp:list
       (common-lisp:cons "DetachObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-object-attributes))
      (common-lisp:list
       (common-lisp:cons "UpdateObjectAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-object))
      (common-lisp:list
       (common-lisp:cons "DeleteObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-facet-to-object))
      (common-lisp:list
       (common-lisp:cons "AddFacetToObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'remove-facet-from-object))
      (common-lisp:list
       (common-lisp:cons "RemoveFacetFromObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attach-policy))
      (common-lisp:list
       (common-lisp:cons "AttachPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detach-policy))
      (common-lisp:list
       (common-lisp:cons "DetachPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-index))
      (common-lisp:list
       (common-lisp:cons "CreateIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attach-to-index))
      (common-lisp:list
       (common-lisp:cons "AttachToIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detach-from-index))
      (common-lisp:list
       (common-lisp:cons "DetachFromIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attach-typed-link))
      (common-lisp:list
       (common-lisp:cons "AttachTypedLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'detach-typed-link))
      (common-lisp:list
       (common-lisp:cons "DetachTypedLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'update-link-attributes))
      (common-lisp:list
       (common-lisp:cons "UpdateLinkAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-write-operation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-write-operation-response-list ()
   '(trivial-types:proper-list batch-write-operation-response))
 (common-lisp:defun |make-batch-write-operation-response-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-write-operation-response))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-write-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-write-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (operations (common-lisp:error ":operations is required") :type
    (common-lisp:or batch-write-operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-write-request 'make-batch-write-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-write-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-write-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "Operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-write-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-write-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-write-response-"))
   (responses common-lisp:nil :type
    (common-lisp:or batch-write-operation-response-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-write-response 'make-batch-write-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-write-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-write-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'responses))
      (common-lisp:list
       (common-lisp:cons "Responses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-write-response))
   common-lisp:nil))
(common-lisp:deftype binary-attribute-value ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype bool () 'common-lisp:boolean)
(common-lisp:deftype boolean-attribute-value () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition cannot-list-parent-of-root-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       cannot-list-parent-of-root-exception-message)))
 (common-lisp:export
  (common-lisp:list 'cannot-list-parent-of-root-exception
                    'cannot-list-parent-of-root-exception-message)))
(common-lisp:deftype consistency-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-directory-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-directory-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or directory-name common-lisp:null))
   (schema-arn (common-lisp:error ":schema-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-directory-request 'make-create-directory-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-directory-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-directory-response-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or directory-arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or directory-name common-lisp:null))
   (object-identifier (common-lisp:error ":object-identifier is required")
    :type (common-lisp:or object-identifier common-lisp:null))
   (applied-schema-arn (common-lisp:error ":applied-schema-arn is required")
    :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-directory-response
                    'make-create-directory-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:list
       (common-lisp:cons "DirectoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-identifier))
      (common-lisp:list
       (common-lisp:cons "ObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applied-schema-arn))
      (common-lisp:list
       (common-lisp:cons "AppliedSchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-directory-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-facet-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-facet-request-"))
   (schema-arn (common-lisp:error ":schema-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or facet-name common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or facet-attribute-list common-lisp:null))
   (object-type common-lisp:nil :type
    (common-lisp:or object-type common-lisp:null))
   (facet-style common-lisp:nil :type
    (common-lisp:or facet-style common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-facet-request 'make-create-facet-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-facet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-facet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type))
      (common-lisp:list
       (common-lisp:cons "ObjectType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facet-style))
      (common-lisp:list
       (common-lisp:cons "FacetStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-facet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-facet-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-facet-response-")))
 (common-lisp:export
  (common-lisp:list 'create-facet-response 'make-create-facet-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-facet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-facet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-facet-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-index-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-index-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (ordered-indexed-attribute-list
    (common-lisp:error ":ordered-indexed-attribute-list is required") :type
    (common-lisp:or attribute-key-list common-lisp:null))
   (is-unique (common-lisp:error ":is-unique is required") :type
    (common-lisp:or bool common-lisp:null))
   (parent-reference common-lisp:nil :type
    (common-lisp:or object-reference common-lisp:null))
   (link-name common-lisp:nil :type
    (common-lisp:or link-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-index-request 'make-create-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-index-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-index-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ordered-indexed-attribute-list))
      (common-lisp:list
       (common-lisp:cons "OrderedIndexedAttributeList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-unique))
      (common-lisp:list
       (common-lisp:cons "IsUnique"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-reference))
      (common-lisp:list
       (common-lisp:cons "ParentReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-name))
      (common-lisp:list
       (common-lisp:cons "LinkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-index-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-index-response-"))
   (object-identifier common-lisp:nil :type
    (common-lisp:or object-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-index-response 'make-create-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-index-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-identifier))
      (common-lisp:list
       (common-lisp:cons "ObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-object-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-object-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (schema-facets (common-lisp:error ":schema-facets is required") :type
    (common-lisp:or schema-facet-list common-lisp:null))
   (object-attribute-list common-lisp:nil :type
    (common-lisp:or attribute-key-and-value-list common-lisp:null))
   (parent-reference common-lisp:nil :type
    (common-lisp:or object-reference common-lisp:null))
   (link-name common-lisp:nil :type
    (common-lisp:or link-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-object-request 'make-create-object-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-facets))
      (common-lisp:list
       (common-lisp:cons "SchemaFacets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-attribute-list))
      (common-lisp:list
       (common-lisp:cons "ObjectAttributeList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-reference))
      (common-lisp:list
       (common-lisp:cons "ParentReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-name))
      (common-lisp:list
       (common-lisp:cons "LinkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-object-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-object-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-object-response-"))
   (object-identifier common-lisp:nil :type
    (common-lisp:or object-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-object-response 'make-create-object-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-object-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-object-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-identifier))
      (common-lisp:list
       (common-lisp:cons "ObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-object-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-schema-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-schema-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or schema-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-schema-request 'make-create-schema-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-schema-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-schema-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-schema-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-schema-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-schema-response-"))
   (schema-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-schema-response 'make-create-schema-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-schema-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-schema-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-schema-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-typed-link-facet-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-typed-link-facet-request-"))
   (schema-arn (common-lisp:error ":schema-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (facet (common-lisp:error ":facet is required") :type
    (common-lisp:or typed-link-facet common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-typed-link-facet-request
                    'make-create-typed-link-facet-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-typed-link-facet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-typed-link-facet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facet))
      (common-lisp:list
       (common-lisp:cons "Facet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-typed-link-facet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-typed-link-facet-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-typed-link-facet-response-")))
 (common-lisp:export
  (common-lisp:list 'create-typed-link-facet-response
                    'make-create-typed-link-facet-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-typed-link-facet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-typed-link-facet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-typed-link-facet-response))
   common-lisp:nil))
(common-lisp:deftype date () 'common-lisp:string)
(common-lisp:deftype datetime-attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-directory-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-directory-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-directory-request 'make-delete-directory-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-directory-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-directory-response-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-directory-response
                    'make-delete-directory-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:list
       (common-lisp:cons "DirectoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-directory-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-facet-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-facet-request-"))
   (schema-arn (common-lisp:error ":schema-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or facet-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-facet-request 'make-delete-facet-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-facet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-facet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-facet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-facet-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-facet-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-facet-response 'make-delete-facet-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-facet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-facet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-facet-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-object-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-object-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-object-request 'make-delete-object-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-object-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-object-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-object-response 'make-delete-object-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-object-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-schema-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-schema-request-"))
   (schema-arn (common-lisp:error ":schema-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-schema-request 'make-delete-schema-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-schema-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-schema-response-"))
   (schema-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-schema-response 'make-delete-schema-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-schema-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-typed-link-facet-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-typed-link-facet-request-"))
   (schema-arn (common-lisp:error ":schema-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or typed-link-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-typed-link-facet-request
                    'make-delete-typed-link-facet-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-typed-link-facet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-typed-link-facet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-typed-link-facet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-typed-link-facet-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-typed-link-facet-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-typed-link-facet-response
                    'make-delete-typed-link-facet-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-typed-link-facet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-typed-link-facet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-typed-link-facet-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-from-index-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-from-index-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (index-reference (common-lisp:error ":index-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (target-reference (common-lisp:error ":target-reference is required") :type
    (common-lisp:or object-reference common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-from-index-request
                    'make-detach-from-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-from-index-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-from-index-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-reference))
      (common-lisp:list
       (common-lisp:cons "IndexReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-reference))
      (common-lisp:list
       (common-lisp:cons "TargetReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-from-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-from-index-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-from-index-response-"))
   (detached-object-identifier common-lisp:nil :type
    (common-lisp:or object-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-from-index-response
                    'make-detach-from-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-from-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-from-index-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detached-object-identifier))
      (common-lisp:list
       (common-lisp:cons "DetachedObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-from-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-object-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-object-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (parent-reference (common-lisp:error ":parent-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (link-name (common-lisp:error ":link-name is required") :type
    (common-lisp:or link-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-object-request 'make-detach-object-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-reference))
      (common-lisp:list
       (common-lisp:cons "ParentReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-name))
      (common-lisp:list
       (common-lisp:cons "LinkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-object-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-object-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-object-response-"))
   (detached-object-identifier common-lisp:nil :type
    (common-lisp:or object-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-object-response 'make-detach-object-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-object-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-object-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'detached-object-identifier))
      (common-lisp:list
       (common-lisp:cons "DetachedObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-object-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-policy-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (policy-reference (common-lisp:error ":policy-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-policy-request 'make-detach-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-reference))
      (common-lisp:list
       (common-lisp:cons "PolicyReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-policy-response-")))
 (common-lisp:export
  (common-lisp:list 'detach-policy-response 'make-detach-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-typed-link-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-typed-link-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (typed-link-specifier
    (common-lisp:error ":typed-link-specifier is required") :type
    (common-lisp:or typed-link-specifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-typed-link-request
                    'make-detach-typed-link-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-typed-link-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-typed-link-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'typed-link-specifier))
      (common-lisp:list
       (common-lisp:cons "TypedLinkSpecifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-typed-link-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (directory (:copier common-lisp:nil)
      (:conc-name "struct-shape-directory-"))
   (name common-lisp:nil :type
    (common-lisp:or directory-name common-lisp:null))
   (directory-arn common-lisp:nil :type
    (common-lisp:or directory-arn common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or directory-state common-lisp:null))
   (creation-date-time common-lisp:nil :type
    (common-lisp:or date common-lisp:null)))
 (common-lisp:export (common-lisp:list 'directory 'make-directory))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input directory))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input directory))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:list
       (common-lisp:cons "DirectoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "CreationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input directory))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition directory-already-exists-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       directory-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'directory-already-exists-exception
                    'directory-already-exists-exception-message)))
(common-lisp:deftype directory-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition directory-deleted-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       directory-deleted-exception-message)))
 (common-lisp:export
  (common-lisp:list 'directory-deleted-exception
                    'directory-deleted-exception-message)))
(common-lisp:progn
 (common-lisp:deftype directory-list () '(trivial-types:proper-list directory))
 (common-lisp:defun |make-directory-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list directory))
   aws-sdk/generator/shape::members))
(common-lisp:deftype directory-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition directory-not-disabled-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       directory-not-disabled-exception-message)))
 (common-lisp:export
  (common-lisp:list 'directory-not-disabled-exception
                    'directory-not-disabled-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition directory-not-enabled-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       directory-not-enabled-exception-message)))
 (common-lisp:export
  (common-lisp:list 'directory-not-enabled-exception
                    'directory-not-enabled-exception-message)))
(common-lisp:deftype directory-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (disable-directory-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-directory-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-directory-request
                    'make-disable-directory-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-directory-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-directory-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-directory-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-directory-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-directory-response-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-directory-response
                    'make-disable-directory-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-directory-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-directory-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:list
       (common-lisp:cons "DirectoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-directory-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-directory-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-directory-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-directory-request 'make-enable-directory-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-directory-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-directory-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-directory-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-directory-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-directory-response-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-directory-response
                    'make-enable-directory-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-directory-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-directory-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:list
       (common-lisp:cons "DirectoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-directory-response))
   common-lisp:nil))
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (facet (:copier common-lisp:nil) (:conc-name "struct-shape-facet-"))
   (name common-lisp:nil :type (common-lisp:or facet-name common-lisp:null))
   (object-type common-lisp:nil :type
    (common-lisp:or object-type common-lisp:null))
   (facet-style common-lisp:nil :type
    (common-lisp:or facet-style common-lisp:null)))
 (common-lisp:export (common-lisp:list 'facet 'make-facet))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input facet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input facet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type))
      (common-lisp:list
       (common-lisp:cons "ObjectType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facet-style))
      (common-lisp:list
       (common-lisp:cons "FacetStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input facet))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition facet-already-exists-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       facet-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'facet-already-exists-exception
                    'facet-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (facet-attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-facet-attribute-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or attribute-name common-lisp:null))
   (attribute-definition common-lisp:nil :type
    (common-lisp:or facet-attribute-definition common-lisp:null))
   (attribute-reference common-lisp:nil :type
    (common-lisp:or facet-attribute-reference common-lisp:null))
   (required-behavior common-lisp:nil :type
    (common-lisp:or required-attribute-behavior common-lisp:null)))
 (common-lisp:export (common-lisp:list 'facet-attribute 'make-facet-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input facet-attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input facet-attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attribute-definition))
      (common-lisp:list
       (common-lisp:cons "AttributeDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-reference))
      (common-lisp:list
       (common-lisp:cons "AttributeReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required-behavior))
      (common-lisp:list
       (common-lisp:cons "RequiredBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input facet-attribute))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (facet-attribute-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-facet-attribute-definition-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or facet-attribute-type common-lisp:null))
   (default-value common-lisp:nil :type
    (common-lisp:or typed-attribute-value common-lisp:null))
   (is-immutable common-lisp:nil :type (common-lisp:or bool common-lisp:null))
   (rules common-lisp:nil :type (common-lisp:or rule-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'facet-attribute-definition
                    'make-facet-attribute-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          facet-attribute-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          facet-attribute-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-immutable))
      (common-lisp:list
       (common-lisp:cons "IsImmutable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          facet-attribute-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype facet-attribute-list ()
   '(trivial-types:proper-list facet-attribute))
 (common-lisp:defun |make-facet-attribute-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list facet-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (facet-attribute-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-facet-attribute-reference-"))
   (target-facet-name (common-lisp:error ":target-facet-name is required")
    :type (common-lisp:or facet-name common-lisp:null))
   (target-attribute-name
    (common-lisp:error ":target-attribute-name is required") :type
    (common-lisp:or attribute-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'facet-attribute-reference
                    'make-facet-attribute-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          facet-attribute-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          facet-attribute-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-facet-name))
      (common-lisp:list
       (common-lisp:cons "TargetFacetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-attribute-name))
      (common-lisp:list
       (common-lisp:cons "TargetAttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          facet-attribute-reference))
   common-lisp:nil))
(common-lisp:deftype facet-attribute-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (facet-attribute-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-facet-attribute-update-"))
   (attribute common-lisp:nil :type
    (common-lisp:or facet-attribute common-lisp:null))
   (action common-lisp:nil :type
    (common-lisp:or update-action-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'facet-attribute-update 'make-facet-attribute-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          facet-attribute-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          facet-attribute-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "Attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          facet-attribute-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype facet-attribute-update-list ()
   '(trivial-types:proper-list facet-attribute-update))
 (common-lisp:defun |make-facet-attribute-update-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list facet-attribute-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition facet-in-use-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       facet-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'facet-in-use-exception 'facet-in-use-exception-message)))
(common-lisp:deftype facet-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype facet-name-list ()
   '(trivial-types:proper-list facet-name))
 (common-lisp:defun |make-facet-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list facet-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition facet-not-found-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       facet-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'facet-not-found-exception
                    'facet-not-found-exception-message)))
(common-lisp:deftype facet-style () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition facet-validation-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       facet-validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'facet-validation-exception
                    'facet-validation-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-applied-schema-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-applied-schema-version-request-"))
   (schema-arn (common-lisp:error ":schema-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-applied-schema-version-request
                    'make-get-applied-schema-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-applied-schema-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-applied-schema-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-applied-schema-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-applied-schema-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-applied-schema-version-response-"))
   (applied-schema-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-applied-schema-version-response
                    'make-get-applied-schema-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-applied-schema-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-applied-schema-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applied-schema-arn))
      (common-lisp:list
       (common-lisp:cons "AppliedSchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-applied-schema-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-directory-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-directory-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or directory-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-directory-request 'make-get-directory-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-directory-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-directory-response-"))
   (directory (common-lisp:error ":directory is required") :type
    (common-lisp:or directory common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-directory-response 'make-get-directory-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory))
      (common-lisp:list
       (common-lisp:cons "Directory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-directory-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-facet-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-facet-request-"))
   (schema-arn (common-lisp:error ":schema-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or facet-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-facet-request 'make-get-facet-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-facet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-facet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-facet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-facet-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-facet-response-"))
   (facet common-lisp:nil :type (common-lisp:or facet common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-facet-response 'make-get-facet-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-facet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-facet-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facet))
      (common-lisp:list
       (common-lisp:cons "Facet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-facet-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-link-attributes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-link-attributes-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (typed-link-specifier
    (common-lisp:error ":typed-link-specifier is required") :type
    (common-lisp:or typed-link-specifier common-lisp:null))
   (attribute-names (common-lisp:error ":attribute-names is required") :type
    (common-lisp:or attribute-name-list common-lisp:null))
   (consistency-level common-lisp:nil :type
    (common-lisp:or consistency-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-link-attributes-request
                    'make-get-link-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-link-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-link-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'typed-link-specifier))
      (common-lisp:list
       (common-lisp:cons "TypedLinkSpecifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-names))
      (common-lisp:list
       (common-lisp:cons "AttributeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consistency-level))
      (common-lisp:list
       (common-lisp:cons "ConsistencyLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-link-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-link-attributes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-link-attributes-response-"))
   (attributes common-lisp:nil :type
    (common-lisp:or attribute-key-and-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-link-attributes-response
                    'make-get-link-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-link-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-link-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-link-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-object-attributes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-object-attributes-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (consistency-level common-lisp:nil :type
    (common-lisp:or consistency-level common-lisp:null))
   (schema-facet (common-lisp:error ":schema-facet is required") :type
    (common-lisp:or schema-facet common-lisp:null))
   (attribute-names (common-lisp:error ":attribute-names is required") :type
    (common-lisp:or attribute-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-object-attributes-request
                    'make-get-object-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consistency-level))
      (common-lisp:cons "x-amz-consistency-level"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-facet))
      (common-lisp:list
       (common-lisp:cons "SchemaFacet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-names))
      (common-lisp:list
       (common-lisp:cons "AttributeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-object-attributes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-object-attributes-response-"))
   (attributes common-lisp:nil :type
    (common-lisp:or attribute-key-and-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-object-attributes-response
                    'make-get-object-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-object-information-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-object-information-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (consistency-level common-lisp:nil :type
    (common-lisp:or consistency-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-object-information-request
                    'make-get-object-information-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-information-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consistency-level))
      (common-lisp:cons "x-amz-consistency-level"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-information-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-information-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-object-information-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-object-information-response-"))
   (schema-facets common-lisp:nil :type
    (common-lisp:or schema-facet-list common-lisp:null))
   (object-identifier common-lisp:nil :type
    (common-lisp:or object-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-object-information-response
                    'make-get-object-information-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-object-information-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-object-information-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-facets))
      (common-lisp:list
       (common-lisp:cons "SchemaFacets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-identifier))
      (common-lisp:list
       (common-lisp:cons "ObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-object-information-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-schema-as-json-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-schema-as-json-request-"))
   (schema-arn (common-lisp:error ":schema-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-schema-as-json-request
                    'make-get-schema-as-json-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-as-json-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-as-json-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-as-json-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-schema-as-json-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-schema-as-json-response-"))
   (name common-lisp:nil :type (common-lisp:or schema-name common-lisp:null))
   (document common-lisp:nil :type
    (common-lisp:or schema-json-document common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-schema-as-json-response
                    'make-get-schema-as-json-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-as-json-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-as-json-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "Document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-schema-as-json-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-typed-link-facet-information-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-typed-link-facet-information-request-"))
   (schema-arn (common-lisp:error ":schema-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or typed-link-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-typed-link-facet-information-request
                    'make-get-typed-link-facet-information-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-typed-link-facet-information-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-typed-link-facet-information-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-typed-link-facet-information-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-typed-link-facet-information-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-typed-link-facet-information-response-"))
   (identity-attribute-order common-lisp:nil :type
    (common-lisp:or attribute-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-typed-link-facet-information-response
                    'make-get-typed-link-facet-information-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-typed-link-facet-information-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-typed-link-facet-information-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-attribute-order))
      (common-lisp:list
       (common-lisp:cons "IdentityAttributeOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-typed-link-facet-information-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition incompatible-schema-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       incompatible-schema-exception-message)))
 (common-lisp:export
  (common-lisp:list 'incompatible-schema-exception
                    'incompatible-schema-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (index-attachment (:copier common-lisp:nil)
      (:conc-name "struct-shape-index-attachment-"))
   (indexed-attributes common-lisp:nil :type
    (common-lisp:or attribute-key-and-value-list common-lisp:null))
   (object-identifier common-lisp:nil :type
    (common-lisp:or object-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'index-attachment 'make-index-attachment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input index-attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input index-attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'indexed-attributes))
      (common-lisp:list
       (common-lisp:cons "IndexedAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-identifier))
      (common-lisp:list
       (common-lisp:cons "ObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input index-attachment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype index-attachment-list ()
   '(trivial-types:proper-list index-attachment))
 (common-lisp:defun |make-index-attachment-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list index-attachment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition indexed-attribute-missing-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       indexed-attribute-missing-exception-message)))
 (common-lisp:export
  (common-lisp:list 'indexed-attribute-missing-exception
                    'indexed-attribute-missing-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition internal-service-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-exception
                    'internal-service-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-arn-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-arn-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-arn-exception 'invalid-arn-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-attachment-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-attachment-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-attachment-exception
                    'invalid-attachment-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-facet-update-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-facet-update-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-facet-update-exception
                    'invalid-facet-update-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-next-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'invalid-next-token-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-rule-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-rule-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-rule-exception 'invalid-rule-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-schema-doc-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-schema-doc-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-schema-doc-exception
                    'invalid-schema-doc-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-tagging-request-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-tagging-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-tagging-request-exception
                    'invalid-tagging-request-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (link-attribute-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-link-attribute-action-"))
   (attribute-action-type common-lisp:nil :type
    (common-lisp:or update-action-type common-lisp:null))
   (attribute-update-value common-lisp:nil :type
    (common-lisp:or typed-attribute-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'link-attribute-action 'make-link-attribute-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          link-attribute-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          link-attribute-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attribute-action-type))
      (common-lisp:list
       (common-lisp:cons "AttributeActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attribute-update-value))
      (common-lisp:list
       (common-lisp:cons "AttributeUpdateValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          link-attribute-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (link-attribute-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-link-attribute-update-"))
   (attribute-key common-lisp:nil :type
    (common-lisp:or attribute-key common-lisp:null))
   (attribute-action common-lisp:nil :type
    (common-lisp:or link-attribute-action common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'link-attribute-update 'make-link-attribute-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          link-attribute-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          link-attribute-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-key))
      (common-lisp:list
       (common-lisp:cons "AttributeKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-action))
      (common-lisp:list
       (common-lisp:cons "AttributeAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          link-attribute-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype link-attribute-update-list ()
   '(trivial-types:proper-list link-attribute-update))
 (common-lisp:defun |make-link-attribute-update-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list link-attribute-update))
   aws-sdk/generator/shape::members))
(common-lisp:deftype link-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition link-name-already-in-use-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       link-name-already-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'link-name-already-in-use-exception
                    'link-name-already-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:deftype link-name-to-object-identifier-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-link-name-to-object-identifier-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-applied-schema-arns-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-applied-schema-arns-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (schema-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-applied-schema-arns-request
                    'make-list-applied-schema-arns-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applied-schema-arns-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applied-schema-arns-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:list
       (common-lisp:cons "DirectoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applied-schema-arns-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-applied-schema-arns-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-applied-schema-arns-response-"))
   (schema-arns common-lisp:nil :type (common-lisp:or arns common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-applied-schema-arns-response
                    'make-list-applied-schema-arns-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-applied-schema-arns-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-applied-schema-arns-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arns))
      (common-lisp:list
       (common-lisp:cons "SchemaArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-applied-schema-arns-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-attached-indices-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-attached-indices-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (target-reference (common-lisp:error ":target-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null))
   (consistency-level common-lisp:nil :type
    (common-lisp:or consistency-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-attached-indices-request
                    'make-list-attached-indices-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-indices-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consistency-level))
      (common-lisp:cons "x-amz-consistency-level"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-indices-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-reference))
      (common-lisp:list
       (common-lisp:cons "TargetReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-indices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-attached-indices-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-attached-indices-response-"))
   (index-attachments common-lisp:nil :type
    (common-lisp:or index-attachment-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-attached-indices-response
                    'make-list-attached-indices-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-indices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-indices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-attachments))
      (common-lisp:list
       (common-lisp:cons "IndexAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-indices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-development-schema-arns-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-development-schema-arns-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-development-schema-arns-request
                    'make-list-development-schema-arns-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-development-schema-arns-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-development-schema-arns-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-development-schema-arns-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-development-schema-arns-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-development-schema-arns-response-"))
   (schema-arns common-lisp:nil :type (common-lisp:or arns common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-development-schema-arns-response
                    'make-list-development-schema-arns-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-development-schema-arns-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-development-schema-arns-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arns))
      (common-lisp:list
       (common-lisp:cons "SchemaArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-development-schema-arns-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-directories-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-directories-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or directory-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-directories-request 'make-list-directories-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-directories-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-directories-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-directories-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-directories-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-directories-response-"))
   (directories (common-lisp:error ":directories is required") :type
    (common-lisp:or directory-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-directories-response
                    'make-list-directories-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-directories-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-directories-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directories))
      (common-lisp:list
       (common-lisp:cons "Directories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-directories-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-facet-attributes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-facet-attributes-request-"))
   (schema-arn (common-lisp:error ":schema-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or facet-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-facet-attributes-request
                    'make-list-facet-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-facet-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-facet-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-facet-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-facet-attributes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-facet-attributes-response-"))
   (attributes common-lisp:nil :type
    (common-lisp:or facet-attribute-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-facet-attributes-response
                    'make-list-facet-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-facet-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-facet-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-facet-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-facet-names-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-facet-names-request-"))
   (schema-arn (common-lisp:error ":schema-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-facet-names-request 'make-list-facet-names-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-facet-names-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-facet-names-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-facet-names-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-facet-names-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-facet-names-response-"))
   (facet-names common-lisp:nil :type
    (common-lisp:or facet-name-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-facet-names-response
                    'make-list-facet-names-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-facet-names-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-facet-names-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facet-names))
      (common-lisp:list
       (common-lisp:cons "FacetNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-facet-names-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-incoming-typed-links-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-incoming-typed-links-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (filter-attribute-ranges common-lisp:nil :type
    (common-lisp:or typed-link-attribute-range-list common-lisp:null))
   (filter-typed-link common-lisp:nil :type
    (common-lisp:or typed-link-schema-and-facet-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null))
   (consistency-level common-lisp:nil :type
    (common-lisp:or consistency-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-incoming-typed-links-request
                    'make-list-incoming-typed-links-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-incoming-typed-links-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-incoming-typed-links-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'filter-attribute-ranges))
      (common-lisp:list
       (common-lisp:cons "FilterAttributeRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-typed-link))
      (common-lisp:list
       (common-lisp:cons "FilterTypedLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consistency-level))
      (common-lisp:list
       (common-lisp:cons "ConsistencyLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-incoming-typed-links-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-incoming-typed-links-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-incoming-typed-links-response-"))
   (link-specifiers common-lisp:nil :type
    (common-lisp:or typed-link-specifier-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-incoming-typed-links-response
                    'make-list-incoming-typed-links-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-incoming-typed-links-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-incoming-typed-links-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-specifiers))
      (common-lisp:list
       (common-lisp:cons "LinkSpecifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-incoming-typed-links-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-index-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-index-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (ranges-on-indexed-values common-lisp:nil :type
    (common-lisp:or object-attribute-range-list common-lisp:null))
   (index-reference (common-lisp:error ":index-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (consistency-level common-lisp:nil :type
    (common-lisp:or consistency-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-index-request 'make-list-index-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-index-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consistency-level))
      (common-lisp:cons "x-amz-consistency-level"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-index-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ranges-on-indexed-values))
      (common-lisp:list
       (common-lisp:cons "RangesOnIndexedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-reference))
      (common-lisp:list
       (common-lisp:cons "IndexReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-index-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-index-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-index-response-"))
   (index-attachments common-lisp:nil :type
    (common-lisp:or index-attachment-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-index-response 'make-list-index-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-index-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-index-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-attachments))
      (common-lisp:list
       (common-lisp:cons "IndexAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-index-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-managed-schema-arns-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-managed-schema-arns-request-"))
   (schema-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-managed-schema-arns-request
                    'make-list-managed-schema-arns-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-schema-arns-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-schema-arns-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-schema-arns-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-managed-schema-arns-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-managed-schema-arns-response-"))
   (schema-arns common-lisp:nil :type (common-lisp:or arns common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-managed-schema-arns-response
                    'make-list-managed-schema-arns-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-schema-arns-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-schema-arns-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arns))
      (common-lisp:list
       (common-lisp:cons "SchemaArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-managed-schema-arns-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-object-attributes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-object-attributes-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null))
   (consistency-level common-lisp:nil :type
    (common-lisp:or consistency-level common-lisp:null))
   (facet-filter common-lisp:nil :type
    (common-lisp:or schema-facet common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-object-attributes-request
                    'make-list-object-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-object-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consistency-level))
      (common-lisp:cons "x-amz-consistency-level"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-object-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facet-filter))
      (common-lisp:list
       (common-lisp:cons "FacetFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-object-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-object-attributes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-object-attributes-response-"))
   (attributes common-lisp:nil :type
    (common-lisp:or attribute-key-and-value-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-object-attributes-response
                    'make-list-object-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-object-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-object-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-object-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-object-children-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-object-children-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null))
   (consistency-level common-lisp:nil :type
    (common-lisp:or consistency-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-object-children-request
                    'make-list-object-children-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-object-children-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consistency-level))
      (common-lisp:cons "x-amz-consistency-level"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-object-children-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-object-children-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-object-children-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-object-children-response-"))
   (children common-lisp:nil :type
    (common-lisp:or link-name-to-object-identifier-map common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-object-children-response
                    'make-list-object-children-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-object-children-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-object-children-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'children))
      (common-lisp:list
       (common-lisp:cons "Children"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-object-children-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-object-parent-paths-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-object-parent-paths-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-object-parent-paths-request
                    'make-list-object-parent-paths-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-object-parent-paths-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-object-parent-paths-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-object-parent-paths-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-object-parent-paths-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-object-parent-paths-response-"))
   (path-to-object-identifiers-list common-lisp:nil :type
    (common-lisp:or path-to-object-identifiers-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-object-parent-paths-response
                    'make-list-object-parent-paths-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-object-parent-paths-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-object-parent-paths-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'path-to-object-identifiers-list))
      (common-lisp:list
       (common-lisp:cons "PathToObjectIdentifiersList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-object-parent-paths-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-object-parents-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-object-parents-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null))
   (consistency-level common-lisp:nil :type
    (common-lisp:or consistency-level common-lisp:null))
   (include-all-links-to-each-parent common-lisp:nil :type
    (common-lisp:or bool common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-object-parents-request
                    'make-list-object-parents-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-object-parents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consistency-level))
      (common-lisp:cons "x-amz-consistency-level"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-object-parents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-all-links-to-each-parent))
      (common-lisp:list
       (common-lisp:cons "IncludeAllLinksToEachParent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-object-parents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-object-parents-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-object-parents-response-"))
   (parents common-lisp:nil :type
    (common-lisp:or object-identifier-to-link-name-map common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (parent-links common-lisp:nil :type
    (common-lisp:or object-identifier-and-link-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-object-parents-response
                    'make-list-object-parents-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-object-parents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-object-parents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parents))
      (common-lisp:list
       (common-lisp:cons "Parents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-links))
      (common-lisp:list
       (common-lisp:cons "ParentLinks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-object-parents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-object-policies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-object-policies-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null))
   (consistency-level common-lisp:nil :type
    (common-lisp:or consistency-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-object-policies-request
                    'make-list-object-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-object-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consistency-level))
      (common-lisp:cons "x-amz-consistency-level"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-object-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-object-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-object-policies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-object-policies-response-"))
   (attached-policy-ids common-lisp:nil :type
    (common-lisp:or object-identifier-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-object-policies-response
                    'make-list-object-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-object-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-object-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attached-policy-ids))
      (common-lisp:list
       (common-lisp:cons "AttachedPolicyIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-object-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-outgoing-typed-links-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-outgoing-typed-links-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (filter-attribute-ranges common-lisp:nil :type
    (common-lisp:or typed-link-attribute-range-list common-lisp:null))
   (filter-typed-link common-lisp:nil :type
    (common-lisp:or typed-link-schema-and-facet-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null))
   (consistency-level common-lisp:nil :type
    (common-lisp:or consistency-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-outgoing-typed-links-request
                    'make-list-outgoing-typed-links-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-outgoing-typed-links-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-outgoing-typed-links-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'filter-attribute-ranges))
      (common-lisp:list
       (common-lisp:cons "FilterAttributeRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-typed-link))
      (common-lisp:list
       (common-lisp:cons "FilterTypedLink"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consistency-level))
      (common-lisp:list
       (common-lisp:cons "ConsistencyLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-outgoing-typed-links-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-outgoing-typed-links-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-outgoing-typed-links-response-"))
   (typed-link-specifiers common-lisp:nil :type
    (common-lisp:or typed-link-specifier-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-outgoing-typed-links-response
                    'make-list-outgoing-typed-links-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-outgoing-typed-links-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-outgoing-typed-links-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'typed-link-specifiers))
      (common-lisp:list
       (common-lisp:cons "TypedLinkSpecifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-outgoing-typed-links-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policy-attachments-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policy-attachments-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (policy-reference (common-lisp:error ":policy-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null))
   (consistency-level common-lisp:nil :type
    (common-lisp:or consistency-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policy-attachments-request
                    'make-list-policy-attachments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-attachments-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consistency-level))
      (common-lisp:cons "x-amz-consistency-level"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-attachments-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-reference))
      (common-lisp:list
       (common-lisp:cons "PolicyReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-attachments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policy-attachments-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policy-attachments-response-"))
   (object-identifiers common-lisp:nil :type
    (common-lisp:or object-identifier-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policy-attachments-response
                    'make-list-policy-attachments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-attachments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-attachments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-identifiers))
      (common-lisp:list
       (common-lisp:cons "ObjectIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-attachments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-published-schema-arns-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-published-schema-arns-request-"))
   (schema-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-published-schema-arns-request
                    'make-list-published-schema-arns-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-published-schema-arns-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-published-schema-arns-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-published-schema-arns-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-published-schema-arns-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-published-schema-arns-response-"))
   (schema-arns common-lisp:nil :type (common-lisp:or arns common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-published-schema-arns-response
                    'make-list-published-schema-arns-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-published-schema-arns-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-published-schema-arns-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arns))
      (common-lisp:list
       (common-lisp:cons "SchemaArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-published-schema-arns-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or tags-number-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-typed-link-facet-attributes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-typed-link-facet-attributes-request-"))
   (schema-arn (common-lisp:error ":schema-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or typed-link-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-typed-link-facet-attributes-request
                    'make-list-typed-link-facet-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-typed-link-facet-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-typed-link-facet-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-typed-link-facet-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-typed-link-facet-attributes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-typed-link-facet-attributes-response-"))
   (attributes common-lisp:nil :type
    (common-lisp:or typed-link-attribute-definition-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-typed-link-facet-attributes-response
                    'make-list-typed-link-facet-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-typed-link-facet-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-typed-link-facet-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-typed-link-facet-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-typed-link-facet-names-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-typed-link-facet-names-request-"))
   (schema-arn (common-lisp:error ":schema-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-typed-link-facet-names-request
                    'make-list-typed-link-facet-names-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-typed-link-facet-names-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-typed-link-facet-names-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-typed-link-facet-names-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-typed-link-facet-names-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-typed-link-facet-names-response-"))
   (facet-names common-lisp:nil :type
    (common-lisp:or typed-link-name-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-typed-link-facet-names-response
                    'make-list-typed-link-facet-names-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-typed-link-facet-names-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-typed-link-facet-names-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facet-names))
      (common-lisp:list
       (common-lisp:cons "FacetNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-typed-link-facet-names-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lookup-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-lookup-policy-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or number-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lookup-policy-request 'make-lookup-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lookup-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lookup-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lookup-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (lookup-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-lookup-policy-response-"))
   (policy-to-path-list common-lisp:nil :type
    (common-lisp:or policy-to-path-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lookup-policy-response 'make-lookup-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lookup-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lookup-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-to-path-list))
      (common-lisp:list
       (common-lisp:cons "PolicyToPathList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lookup-policy-response))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-index-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-index-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-index-exception 'not-index-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition not-node-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-node-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-node-exception 'not-node-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition not-policy-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-policy-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-policy-exception 'not-policy-exception-message)))
(common-lisp:deftype number-attribute-value () 'common-lisp:string)
(common-lisp:deftype number-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition object-already-detached-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       object-already-detached-exception-message)))
 (common-lisp:export
  (common-lisp:list 'object-already-detached-exception
                    'object-already-detached-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (object-attribute-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-object-attribute-action-"))
   (object-attribute-action-type common-lisp:nil :type
    (common-lisp:or update-action-type common-lisp:null))
   (object-attribute-update-value common-lisp:nil :type
    (common-lisp:or typed-attribute-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'object-attribute-action 'make-object-attribute-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-attribute-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-attribute-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-attribute-action-type))
      (common-lisp:list
       (common-lisp:cons "ObjectAttributeActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-attribute-update-value))
      (common-lisp:list
       (common-lisp:cons "ObjectAttributeUpdateValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-attribute-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (object-attribute-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-object-attribute-range-"))
   (attribute-key common-lisp:nil :type
    (common-lisp:or attribute-key common-lisp:null))
   (range common-lisp:nil :type
    (common-lisp:or typed-attribute-value-range common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'object-attribute-range 'make-object-attribute-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-attribute-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-attribute-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-key))
      (common-lisp:list
       (common-lisp:cons "AttributeKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:list
       (common-lisp:cons "Range"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-attribute-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype object-attribute-range-list ()
   '(trivial-types:proper-list object-attribute-range))
 (common-lisp:defun |make-object-attribute-range-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list object-attribute-range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (object-attribute-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-object-attribute-update-"))
   (object-attribute-key common-lisp:nil :type
    (common-lisp:or attribute-key common-lisp:null))
   (object-attribute-action common-lisp:nil :type
    (common-lisp:or object-attribute-action common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'object-attribute-update 'make-object-attribute-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-attribute-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-attribute-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-attribute-key))
      (common-lisp:list
       (common-lisp:cons "ObjectAttributeKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-attribute-action))
      (common-lisp:list
       (common-lisp:cons "ObjectAttributeAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-attribute-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype object-attribute-update-list ()
   '(trivial-types:proper-list object-attribute-update))
 (common-lisp:defun |make-object-attribute-update-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list object-attribute-update))
   aws-sdk/generator/shape::members))
(common-lisp:deftype object-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype object-identifier-and-link-name-list ()
   '(trivial-types:proper-list object-identifier-and-link-name-tuple))
 (common-lisp:defun |make-object-identifier-and-link-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            object-identifier-and-link-name-tuple))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (object-identifier-and-link-name-tuple (:copier common-lisp:nil)
      (:conc-name "struct-shape-object-identifier-and-link-name-tuple-"))
   (object-identifier common-lisp:nil :type
    (common-lisp:or object-identifier common-lisp:null))
   (link-name common-lisp:nil :type
    (common-lisp:or link-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'object-identifier-and-link-name-tuple
                    'make-object-identifier-and-link-name-tuple))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          object-identifier-and-link-name-tuple))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          object-identifier-and-link-name-tuple))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-identifier))
      (common-lisp:list
       (common-lisp:cons "ObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'link-name))
      (common-lisp:list
       (common-lisp:cons "LinkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          object-identifier-and-link-name-tuple))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype object-identifier-list ()
   '(trivial-types:proper-list object-identifier))
 (common-lisp:defun |make-object-identifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list object-identifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype object-identifier-to-link-name-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-object-identifier-to-link-name-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition object-not-detached-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       object-not-detached-exception-message)))
 (common-lisp:export
  (common-lisp:list 'object-not-detached-exception
                    'object-not-detached-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (object-reference (:copier common-lisp:nil)
      (:conc-name "struct-shape-object-reference-"))
   (selector common-lisp:nil :type
    (common-lisp:or selector-object-reference common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'object-reference 'make-object-reference))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input object-reference))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input object-reference))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selector))
      (common-lisp:list
       (common-lisp:cons "Selector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input object-reference))
   common-lisp:nil))
(common-lisp:deftype object-type () 'common-lisp:string)
(common-lisp:deftype path-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (path-to-object-identifiers (:copier common-lisp:nil)
      (:conc-name "struct-shape-path-to-object-identifiers-"))
   (path common-lisp:nil :type (common-lisp:or path-string common-lisp:null))
   (object-identifiers common-lisp:nil :type
    (common-lisp:or object-identifier-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'path-to-object-identifiers
                    'make-path-to-object-identifiers))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          path-to-object-identifiers))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          path-to-object-identifiers))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-identifiers))
      (common-lisp:list
       (common-lisp:cons "ObjectIdentifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          path-to-object-identifiers))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype path-to-object-identifiers-list ()
   '(trivial-types:proper-list path-to-object-identifiers))
 (common-lisp:defun |make-path-to-object-identifiers-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            path-to-object-identifiers))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (policy-attachment (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-attachment-"))
   (policy-id common-lisp:nil :type
    (common-lisp:or object-identifier common-lisp:null))
   (object-identifier common-lisp:nil :type
    (common-lisp:or object-identifier common-lisp:null))
   (policy-type common-lisp:nil :type
    (common-lisp:or policy-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'policy-attachment 'make-policy-attachment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-identifier))
      (common-lisp:list
       (common-lisp:cons "ObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "PolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-attachment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-attachment-list ()
   '(trivial-types:proper-list policy-attachment))
 (common-lisp:defun |make-policy-attachment-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-attachment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (policy-to-path (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-to-path-"))
   (path common-lisp:nil :type (common-lisp:or path-string common-lisp:null))
   (policies common-lisp:nil :type
    (common-lisp:or policy-attachment-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy-to-path 'make-policy-to-path))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-to-path))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-to-path))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "Policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-to-path))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-to-path-list ()
   '(trivial-types:proper-list policy-to-path))
 (common-lisp:defun |make-policy-to-path-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-to-path))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (publish-schema-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-publish-schema-request-"))
   (development-schema-arn
    (common-lisp:error ":development-schema-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or version common-lisp:null))
   (minor-version common-lisp:nil :type
    (common-lisp:or version common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or schema-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'publish-schema-request 'make-publish-schema-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          publish-schema-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'development-schema-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          publish-schema-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minor-version))
      (common-lisp:list
       (common-lisp:cons "MinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          publish-schema-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (publish-schema-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-publish-schema-response-"))
   (published-schema-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'publish-schema-response 'make-publish-schema-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          publish-schema-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          publish-schema-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'published-schema-arn))
      (common-lisp:list
       (common-lisp:cons "PublishedSchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          publish-schema-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-schema-from-json-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-schema-from-json-request-"))
   (schema-arn (common-lisp:error ":schema-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (document (common-lisp:error ":document is required") :type
    (common-lisp:or schema-json-document common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-schema-from-json-request
                    'make-put-schema-from-json-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-schema-from-json-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-schema-from-json-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "Document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-schema-from-json-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-schema-from-json-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-schema-from-json-response-"))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-schema-from-json-response
                    'make-put-schema-from-json-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-schema-from-json-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-schema-from-json-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-schema-from-json-response))
   common-lisp:nil))
(common-lisp:deftype range-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (remove-facet-from-object-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-facet-from-object-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (schema-facet (common-lisp:error ":schema-facet is required") :type
    (common-lisp:or schema-facet common-lisp:null))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-facet-from-object-request
                    'make-remove-facet-from-object-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-facet-from-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-facet-from-object-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-facet))
      (common-lisp:list
       (common-lisp:cons "SchemaFacet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-facet-from-object-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-facet-from-object-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-facet-from-object-response-")))
 (common-lisp:export
  (common-lisp:list 'remove-facet-from-object-response
                    'make-remove-facet-from-object-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-facet-from-object-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-facet-from-object-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-facet-from-object-response))
   common-lisp:nil))
(common-lisp:deftype required-attribute-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition retryable-conflict-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       retryable-conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'retryable-conflict-exception
                    'retryable-conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (rule (:copier common-lisp:nil) (:conc-name "struct-shape-rule-"))
   (type common-lisp:nil :type (common-lisp:or rule-type common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or rule-parameter-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rule 'make-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule))
   common-lisp:nil))
(common-lisp:deftype rule-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype rule-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-rule-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype rule-parameter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype rule-parameter-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-rule-parameter-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype rule-parameter-value () 'common-lisp:string)
(common-lisp:deftype rule-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition schema-already-exists-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       schema-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'schema-already-exists-exception
                    'schema-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition schema-already-published-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       schema-already-published-exception-message)))
 (common-lisp:export
  (common-lisp:list 'schema-already-published-exception
                    'schema-already-published-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (schema-facet (:copier common-lisp:nil)
      (:conc-name "struct-shape-schema-facet-"))
   (schema-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (facet-name common-lisp:nil :type
    (common-lisp:or facet-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'schema-facet 'make-schema-facet))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schema-facet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schema-facet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facet-name))
      (common-lisp:list
       (common-lisp:cons "FacetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schema-facet))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype schema-facet-list ()
   '(trivial-types:proper-list schema-facet))
 (common-lisp:defun |make-schema-facet-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schema-facet))
   aws-sdk/generator/shape::members))
(common-lisp:deftype schema-json-document () 'common-lisp:string)
(common-lisp:deftype schema-name () 'common-lisp:string)
(common-lisp:deftype selector-object-reference () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition still-contains-links-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       still-contains-links-exception-message)))
 (common-lisp:export
  (common-lisp:list 'still-contains-links-exception
                    'still-contains-links-exception-message)))
(common-lisp:deftype string-attribute-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key common-lisp:nil :type (common-lisp:or tag-key common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype tags-number-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (typed-attribute-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-typed-attribute-value-"))
   (string-value common-lisp:nil :type
    (common-lisp:or string-attribute-value common-lisp:null))
   (binary-value common-lisp:nil :type
    (common-lisp:or binary-attribute-value common-lisp:null))
   (boolean-value common-lisp:nil :type
    (common-lisp:or boolean-attribute-value common-lisp:null))
   (number-value common-lisp:nil :type
    (common-lisp:or number-attribute-value common-lisp:null))
   (datetime-value common-lisp:nil :type
    (common-lisp:or datetime-attribute-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'typed-attribute-value 'make-typed-attribute-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          typed-attribute-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          typed-attribute-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "StringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'binary-value))
      (common-lisp:list
       (common-lisp:cons "BinaryValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boolean-value))
      (common-lisp:list
       (common-lisp:cons "BooleanValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-value))
      (common-lisp:list
       (common-lisp:cons "NumberValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datetime-value))
      (common-lisp:list
       (common-lisp:cons "DatetimeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          typed-attribute-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (typed-attribute-value-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-typed-attribute-value-range-"))
   (start-mode (common-lisp:error ":start-mode is required") :type
    (common-lisp:or range-mode common-lisp:null))
   (start-value common-lisp:nil :type
    (common-lisp:or typed-attribute-value common-lisp:null))
   (end-mode (common-lisp:error ":end-mode is required") :type
    (common-lisp:or range-mode common-lisp:null))
   (end-value common-lisp:nil :type
    (common-lisp:or typed-attribute-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'typed-attribute-value-range
                    'make-typed-attribute-value-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          typed-attribute-value-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          typed-attribute-value-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-mode))
      (common-lisp:list
       (common-lisp:cons "StartMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-value))
      (common-lisp:list
       (common-lisp:cons "StartValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-mode))
      (common-lisp:list
       (common-lisp:cons "EndMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-value))
      (common-lisp:list
       (common-lisp:cons "EndValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          typed-attribute-value-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (typed-link-attribute-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-typed-link-attribute-definition-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or attribute-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or facet-attribute-type common-lisp:null))
   (default-value common-lisp:nil :type
    (common-lisp:or typed-attribute-value common-lisp:null))
   (is-immutable common-lisp:nil :type (common-lisp:or bool common-lisp:null))
   (rules common-lisp:nil :type (common-lisp:or rule-map common-lisp:null))
   (required-behavior (common-lisp:error ":required-behavior is required")
    :type (common-lisp:or required-attribute-behavior common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'typed-link-attribute-definition
                    'make-typed-link-attribute-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          typed-link-attribute-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          typed-link-attribute-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-immutable))
      (common-lisp:list
       (common-lisp:cons "IsImmutable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'required-behavior))
      (common-lisp:list
       (common-lisp:cons "RequiredBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          typed-link-attribute-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype typed-link-attribute-definition-list ()
   '(trivial-types:proper-list typed-link-attribute-definition))
 (common-lisp:defun |make-typed-link-attribute-definition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            typed-link-attribute-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (typed-link-attribute-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-typed-link-attribute-range-"))
   (attribute-name common-lisp:nil :type
    (common-lisp:or attribute-name common-lisp:null))
   (range (common-lisp:error ":range is required") :type
    (common-lisp:or typed-attribute-value-range common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'typed-link-attribute-range
                    'make-typed-link-attribute-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          typed-link-attribute-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          typed-link-attribute-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "AttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:list
       (common-lisp:cons "Range"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          typed-link-attribute-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype typed-link-attribute-range-list ()
   '(trivial-types:proper-list typed-link-attribute-range))
 (common-lisp:defun |make-typed-link-attribute-range-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            typed-link-attribute-range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (typed-link-facet (:copier common-lisp:nil)
      (:conc-name "struct-shape-typed-link-facet-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or typed-link-name common-lisp:null))
   (attributes (common-lisp:error ":attributes is required") :type
    (common-lisp:or typed-link-attribute-definition-list common-lisp:null))
   (identity-attribute-order
    (common-lisp:error ":identity-attribute-order is required") :type
    (common-lisp:or attribute-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'typed-link-facet 'make-typed-link-facet))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input typed-link-facet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input typed-link-facet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "Attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-attribute-order))
      (common-lisp:list
       (common-lisp:cons "IdentityAttributeOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input typed-link-facet))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (typed-link-facet-attribute-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-typed-link-facet-attribute-update-"))
   (attribute (common-lisp:error ":attribute is required") :type
    (common-lisp:or typed-link-attribute-definition common-lisp:null))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or update-action-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'typed-link-facet-attribute-update
                    'make-typed-link-facet-attribute-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          typed-link-facet-attribute-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          typed-link-facet-attribute-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "Attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          typed-link-facet-attribute-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype typed-link-facet-attribute-update-list ()
   '(trivial-types:proper-list typed-link-facet-attribute-update))
 (common-lisp:defun |make-typed-link-facet-attribute-update-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            typed-link-facet-attribute-update))
   aws-sdk/generator/shape::members))
(common-lisp:deftype typed-link-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype typed-link-name-list ()
   '(trivial-types:proper-list typed-link-name))
 (common-lisp:defun |make-typed-link-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list typed-link-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (typed-link-schema-and-facet-name (:copier common-lisp:nil)
      (:conc-name "struct-shape-typed-link-schema-and-facet-name-"))
   (schema-arn (common-lisp:error ":schema-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (typed-link-name (common-lisp:error ":typed-link-name is required") :type
    (common-lisp:or typed-link-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'typed-link-schema-and-facet-name
                    'make-typed-link-schema-and-facet-name))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          typed-link-schema-and-facet-name))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          typed-link-schema-and-facet-name))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'typed-link-name))
      (common-lisp:list
       (common-lisp:cons "TypedLinkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          typed-link-schema-and-facet-name))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (typed-link-specifier (:copier common-lisp:nil)
      (:conc-name "struct-shape-typed-link-specifier-"))
   (typed-link-facet (common-lisp:error ":typed-link-facet is required") :type
    (common-lisp:or typed-link-schema-and-facet-name common-lisp:null))
   (source-object-reference
    (common-lisp:error ":source-object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (target-object-reference
    (common-lisp:error ":target-object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (identity-attribute-values
    (common-lisp:error ":identity-attribute-values is required") :type
    (common-lisp:or attribute-name-and-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'typed-link-specifier 'make-typed-link-specifier))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input typed-link-specifier))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input typed-link-specifier))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'typed-link-facet))
      (common-lisp:list
       (common-lisp:cons "TypedLinkFacet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-object-reference))
      (common-lisp:list
       (common-lisp:cons "SourceObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-object-reference))
      (common-lisp:list
       (common-lisp:cons "TargetObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-attribute-values))
      (common-lisp:list
       (common-lisp:cons "IdentityAttributeValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input typed-link-specifier))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype typed-link-specifier-list ()
   '(trivial-types:proper-list typed-link-specifier))
 (common-lisp:defun |make-typed-link-specifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list typed-link-specifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition unsupported-index-type-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-index-type-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unsupported-index-type-exception
                    'unsupported-index-type-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:deftype update-action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (update-facet-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-facet-request-"))
   (schema-arn (common-lisp:error ":schema-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or facet-name common-lisp:null))
   (attribute-updates common-lisp:nil :type
    (common-lisp:or facet-attribute-update-list common-lisp:null))
   (object-type common-lisp:nil :type
    (common-lisp:or object-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-facet-request 'make-update-facet-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-facet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-facet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-updates))
      (common-lisp:list
       (common-lisp:cons "AttributeUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-type))
      (common-lisp:list
       (common-lisp:cons "ObjectType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-facet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-facet-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-facet-response-")))
 (common-lisp:export
  (common-lisp:list 'update-facet-response 'make-update-facet-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-facet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-facet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-facet-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-link-attributes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-link-attributes-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (typed-link-specifier
    (common-lisp:error ":typed-link-specifier is required") :type
    (common-lisp:or typed-link-specifier common-lisp:null))
   (attribute-updates (common-lisp:error ":attribute-updates is required")
    :type (common-lisp:or link-attribute-update-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-link-attributes-request
                    'make-update-link-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-link-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-link-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'typed-link-specifier))
      (common-lisp:list
       (common-lisp:cons "TypedLinkSpecifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-updates))
      (common-lisp:list
       (common-lisp:cons "AttributeUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-link-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-link-attributes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-link-attributes-response-")))
 (common-lisp:export
  (common-lisp:list 'update-link-attributes-response
                    'make-update-link-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-link-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-link-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-link-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-object-attributes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-object-attributes-request-"))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (object-reference (common-lisp:error ":object-reference is required") :type
    (common-lisp:or object-reference common-lisp:null))
   (attribute-updates (common-lisp:error ":attribute-updates is required")
    :type (common-lisp:or object-attribute-update-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-object-attributes-request
                    'make-update-object-attributes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-object-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-object-attributes-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-reference))
      (common-lisp:list
       (common-lisp:cons "ObjectReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-updates))
      (common-lisp:list
       (common-lisp:cons "AttributeUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-object-attributes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-object-attributes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-object-attributes-response-"))
   (object-identifier common-lisp:nil :type
    (common-lisp:or object-identifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-object-attributes-response
                    'make-update-object-attributes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-object-attributes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-object-attributes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-identifier))
      (common-lisp:list
       (common-lisp:cons "ObjectIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-object-attributes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-schema-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-schema-request-"))
   (schema-arn (common-lisp:error ":schema-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or schema-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-schema-request 'make-update-schema-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-schema-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-schema-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-schema-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-schema-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-schema-response-"))
   (schema-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-schema-response 'make-update-schema-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-schema-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-schema-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:list
       (common-lisp:cons "SchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-schema-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-typed-link-facet-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-typed-link-facet-request-"))
   (schema-arn (common-lisp:error ":schema-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or typed-link-name common-lisp:null))
   (attribute-updates (common-lisp:error ":attribute-updates is required")
    :type
    (common-lisp:or typed-link-facet-attribute-update-list common-lisp:null))
   (identity-attribute-order
    (common-lisp:error ":identity-attribute-order is required") :type
    (common-lisp:or attribute-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-typed-link-facet-request
                    'make-update-typed-link-facet-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-typed-link-facet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-arn))
      (common-lisp:cons "x-amz-data-partition"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-typed-link-facet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-updates))
      (common-lisp:list
       (common-lisp:cons "AttributeUpdates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'identity-attribute-order))
      (common-lisp:list
       (common-lisp:cons "IdentityAttributeOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-typed-link-facet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-typed-link-facet-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-typed-link-facet-response-")))
 (common-lisp:export
  (common-lisp:list 'update-typed-link-facet-response
                    'make-update-typed-link-facet-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-typed-link-facet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-typed-link-facet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-typed-link-facet-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (upgrade-applied-schema-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-upgrade-applied-schema-request-"))
   (published-schema-arn
    (common-lisp:error ":published-schema-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (directory-arn (common-lisp:error ":directory-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or bool common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upgrade-applied-schema-request
                    'make-upgrade-applied-schema-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-applied-schema-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-applied-schema-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'published-schema-arn))
      (common-lisp:list
       (common-lisp:cons "PublishedSchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:list
       (common-lisp:cons "DirectoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-applied-schema-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (upgrade-applied-schema-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-upgrade-applied-schema-response-"))
   (upgraded-schema-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (directory-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upgrade-applied-schema-response
                    'make-upgrade-applied-schema-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-applied-schema-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-applied-schema-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upgraded-schema-arn))
      (common-lisp:list
       (common-lisp:cons "UpgradedSchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-arn))
      (common-lisp:list
       (common-lisp:cons "DirectoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-applied-schema-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (upgrade-published-schema-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-upgrade-published-schema-request-"))
   (development-schema-arn
    (common-lisp:error ":development-schema-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (published-schema-arn
    (common-lisp:error ":published-schema-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (minor-version (common-lisp:error ":minor-version is required") :type
    (common-lisp:or version common-lisp:null))
   (dry-run common-lisp:nil :type (common-lisp:or bool common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upgrade-published-schema-request
                    'make-upgrade-published-schema-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-published-schema-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-published-schema-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'development-schema-arn))
      (common-lisp:list
       (common-lisp:cons "DevelopmentSchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'published-schema-arn))
      (common-lisp:list
       (common-lisp:cons "PublishedSchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minor-version))
      (common-lisp:list
       (common-lisp:cons "MinorVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dry-run))
      (common-lisp:list
       (common-lisp:cons "DryRun"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-published-schema-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (upgrade-published-schema-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-upgrade-published-schema-response-"))
   (upgraded-schema-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upgrade-published-schema-response
                    'make-upgrade-published-schema-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-published-schema-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-published-schema-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upgraded-schema-arn))
      (common-lisp:list
       (common-lisp:cons "UpgradedSchemaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upgrade-published-schema-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (clouddirectory-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun add-facet-to-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn schema-facet
                     object-attribute-list object-reference)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn schema-facet object-attribute-list
     object-reference))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-facet-to-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/object/facets"
                                                        "AddFacetToObject"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-facet-to-object))
(common-lisp:progn
 (common-lisp:defun apply-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key published-schema-arn directory-arn)
   (common-lisp:declare
    (common-lisp:ignorable published-schema-arn directory-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-apply-schema-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/schema/apply"
                                                        "ApplySchema"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'apply-schema))
(common-lisp:progn
 (common-lisp:defun attach-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn parent-reference
                     child-reference link-name)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn parent-reference child-reference
     link-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/object/attach"
                                                        "AttachObject"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'attach-object))
(common-lisp:progn
 (common-lisp:defun attach-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn policy-reference
                     object-reference)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn policy-reference object-reference))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/policy/attach"
                                                        "AttachPolicy"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'attach-policy))
(common-lisp:progn
 (common-lisp:defun attach-to-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn index-reference
                     target-reference)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn index-reference target-reference))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-to-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/index/attach"
                                                        "AttachToIndex"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'attach-to-index))
(common-lisp:progn
 (common-lisp:defun attach-typed-link
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn source-object-reference
                     target-object-reference typed-link-facet attributes)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn source-object-reference
     target-object-reference typed-link-facet attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-typed-link-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/typedlink/attach"
                                                        "AttachTypedLink"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'attach-typed-link))
(common-lisp:progn
 (common-lisp:defun batch-read
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn operations
                     consistency-level)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn operations consistency-level))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-read-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/batchread"
                                                        "BatchRead"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-read))
(common-lisp:progn
 (common-lisp:defun batch-write
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn operations)
   (common-lisp:declare (common-lisp:ignorable directory-arn operations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-write-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/batchwrite"
                                                        "BatchWrite"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-write))
(common-lisp:progn
 (common-lisp:defun create-directory
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name schema-arn)
   (common-lisp:declare (common-lisp:ignorable name schema-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-directory-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/directory/create"
                                                        "CreateDirectory"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-directory))
(common-lisp:progn
 (common-lisp:defun create-facet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-arn name attributes object-type
                     facet-style)
   (common-lisp:declare
    (common-lisp:ignorable schema-arn name attributes object-type facet-style))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-facet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/facet/create"
                                                        "CreateFacet"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-facet))
(common-lisp:progn
 (common-lisp:defun create-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn
                     ordered-indexed-attribute-list is-unique parent-reference
                     link-name)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn ordered-indexed-attribute-list
     is-unique parent-reference link-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/index"
                                                        "CreateIndex"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-index))
(common-lisp:progn
 (common-lisp:defun create-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn schema-facets
                     object-attribute-list parent-reference link-name)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn schema-facets object-attribute-list
     parent-reference link-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/object"
                                                        "CreateObject"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-object))
(common-lisp:progn
 (common-lisp:defun create-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-schema-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/schema/create"
                                                        "CreateSchema"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-schema))
(common-lisp:progn
 (common-lisp:defun create-typed-link-facet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-arn facet)
   (common-lisp:declare (common-lisp:ignorable schema-arn facet))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-typed-link-facet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/typedlink/facet/create"
                                                        "CreateTypedLinkFacet"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-typed-link-facet))
(common-lisp:progn
 (common-lisp:defun delete-directory
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn)
   (common-lisp:declare (common-lisp:ignorable directory-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-directory-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/directory"
                                                        "DeleteDirectory"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-directory))
(common-lisp:progn
 (common-lisp:defun delete-facet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-arn name)
   (common-lisp:declare (common-lisp:ignorable schema-arn name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-facet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/facet/delete"
                                                        "DeleteFacet"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-facet))
(common-lisp:progn
 (common-lisp:defun delete-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn object-reference)
   (common-lisp:declare (common-lisp:ignorable directory-arn object-reference))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/object/delete"
                                                        "DeleteObject"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-object))
(common-lisp:progn
 (common-lisp:defun delete-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-arn)
   (common-lisp:declare (common-lisp:ignorable schema-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-schema-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/schema"
                                                        "DeleteSchema"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-schema))
(common-lisp:progn
 (common-lisp:defun delete-typed-link-facet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-arn name)
   (common-lisp:declare (common-lisp:ignorable schema-arn name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-typed-link-facet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/typedlink/facet/delete"
                                                        "DeleteTypedLinkFacet"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-typed-link-facet))
(common-lisp:progn
 (common-lisp:defun detach-from-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn index-reference
                     target-reference)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn index-reference target-reference))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-from-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/index/detach"
                                                        "DetachFromIndex"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'detach-from-index))
(common-lisp:progn
 (common-lisp:defun detach-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn parent-reference link-name)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn parent-reference link-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/object/detach"
                                                        "DetachObject"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'detach-object))
(common-lisp:progn
 (common-lisp:defun detach-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn policy-reference
                     object-reference)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn policy-reference object-reference))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/policy/detach"
                                                        "DetachPolicy"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'detach-policy))
(common-lisp:progn
 (common-lisp:defun detach-typed-link
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn typed-link-specifier)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn typed-link-specifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-typed-link-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/typedlink/detach"
                                                        "DetachTypedLink"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'detach-typed-link))
(common-lisp:progn
 (common-lisp:defun disable-directory
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn)
   (common-lisp:declare (common-lisp:ignorable directory-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-directory-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/directory/disable"
                                                        "DisableDirectory"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-directory))
(common-lisp:progn
 (common-lisp:defun enable-directory
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn)
   (common-lisp:declare (common-lisp:ignorable directory-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-directory-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/directory/enable"
                                                        "EnableDirectory"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-directory))
(common-lisp:progn
 (common-lisp:defun get-applied-schema-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-arn)
   (common-lisp:declare (common-lisp:ignorable schema-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-applied-schema-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/schema/getappliedschema"
                                                        "GetAppliedSchemaVersion"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-applied-schema-version))
(common-lisp:progn
 (common-lisp:defun get-directory
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn)
   (common-lisp:declare (common-lisp:ignorable directory-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-directory-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/directory/get"
                                                        "GetDirectory"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-directory))
(common-lisp:progn
 (common-lisp:defun get-facet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-arn name)
   (common-lisp:declare (common-lisp:ignorable schema-arn name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-facet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/facet"
                                                        "GetFacet"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-facet))
(common-lisp:progn
 (common-lisp:defun get-link-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn typed-link-specifier
                     attribute-names consistency-level)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn typed-link-specifier attribute-names
     consistency-level))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-link-attributes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/typedlink/attributes/get"
                                                        "GetLinkAttributes"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-link-attributes))
(common-lisp:progn
 (common-lisp:defun get-object-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn object-reference
                     consistency-level schema-facet attribute-names)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn object-reference consistency-level
     schema-facet attribute-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-object-attributes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/object/attributes/get"
                                                        "GetObjectAttributes"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-object-attributes))
(common-lisp:progn
 (common-lisp:defun get-object-information
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn object-reference
                     consistency-level)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn object-reference consistency-level))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-object-information-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/object/information"
                                                        "GetObjectInformation"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-object-information))
(common-lisp:progn
 (common-lisp:defun get-schema-as-json
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-arn)
   (common-lisp:declare (common-lisp:ignorable schema-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-schema-as-json-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/schema/json"
                                                        "GetSchemaAsJson"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-schema-as-json))
(common-lisp:progn
 (common-lisp:defun get-typed-link-facet-information
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-arn name)
   (common-lisp:declare (common-lisp:ignorable schema-arn name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-typed-link-facet-information-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/typedlink/facet/get"
                                                        "GetTypedLinkFacetInformation"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-typed-link-facet-information))
(common-lisp:progn
 (common-lisp:defun list-applied-schema-arns
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn schema-arn next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn schema-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-applied-schema-arns-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/schema/applied"
                                                        "ListAppliedSchemaArns"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-applied-schema-arns))
(common-lisp:progn
 (common-lisp:defun list-attached-indices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn target-reference next-token
                     max-results consistency-level)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn target-reference next-token
     max-results consistency-level))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-attached-indices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/object/indices"
                                                        "ListAttachedIndices"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-attached-indices))
(common-lisp:progn
 (common-lisp:defun list-development-schema-arns
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-development-schema-arns-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/schema/development"
                                                        "ListDevelopmentSchemaArns"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-development-schema-arns))
(common-lisp:progn
 (common-lisp:defun list-directories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results state)
   (common-lisp:declare (common-lisp:ignorable next-token max-results state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-directories-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/directory/list"
                                                        "ListDirectories"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-directories))
(common-lisp:progn
 (common-lisp:defun list-facet-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-arn name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable schema-arn name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-facet-attributes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/facet/attributes"
                                                        "ListFacetAttributes"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-facet-attributes))
(common-lisp:progn
 (common-lisp:defun list-facet-names
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable schema-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-facet-names-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/facet/list"
                                                        "ListFacetNames"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-facet-names))
(common-lisp:progn
 (common-lisp:defun list-incoming-typed-links
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn object-reference
                     filter-attribute-ranges filter-typed-link next-token
                     max-results consistency-level)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn object-reference
     filter-attribute-ranges filter-typed-link next-token max-results
     consistency-level))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-incoming-typed-links-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/typedlink/incoming"
                                                        "ListIncomingTypedLinks"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-incoming-typed-links))
(common-lisp:progn
 (common-lisp:defun list-index
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn ranges-on-indexed-values
                     index-reference max-results next-token consistency-level)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn ranges-on-indexed-values
     index-reference max-results next-token consistency-level))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-index-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/index/targets"
                                                        "ListIndex"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-index))
(common-lisp:progn
 (common-lisp:defun list-managed-schema-arns
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable schema-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-managed-schema-arns-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/schema/managed"
                                                        "ListManagedSchemaArns"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-managed-schema-arns))
(common-lisp:progn
 (common-lisp:defun list-object-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn object-reference next-token
                     max-results consistency-level facet-filter)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn object-reference next-token
     max-results consistency-level facet-filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-object-attributes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/object/attributes"
                                                        "ListObjectAttributes"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-object-attributes))
(common-lisp:progn
 (common-lisp:defun list-object-children
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn object-reference next-token
                     max-results consistency-level)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn object-reference next-token
     max-results consistency-level))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-object-children-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/object/children"
                                                        "ListObjectChildren"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-object-children))
(common-lisp:progn
 (common-lisp:defun list-object-parent-paths
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn object-reference next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn object-reference next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-object-parent-paths-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/object/parentpaths"
                                                        "ListObjectParentPaths"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-object-parent-paths))
(common-lisp:progn
 (common-lisp:defun list-object-parents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn object-reference next-token
                     max-results consistency-level
                     include-all-links-to-each-parent)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn object-reference next-token
     max-results consistency-level include-all-links-to-each-parent))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-object-parents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/object/parent"
                                                        "ListObjectParents"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-object-parents))
(common-lisp:progn
 (common-lisp:defun list-object-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn object-reference next-token
                     max-results consistency-level)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn object-reference next-token
     max-results consistency-level))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-object-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/object/policy"
                                                        "ListObjectPolicies"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-object-policies))
(common-lisp:progn
 (common-lisp:defun list-outgoing-typed-links
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn object-reference
                     filter-attribute-ranges filter-typed-link next-token
                     max-results consistency-level)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn object-reference
     filter-attribute-ranges filter-typed-link next-token max-results
     consistency-level))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-outgoing-typed-links-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/typedlink/outgoing"
                                                        "ListOutgoingTypedLinks"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-outgoing-typed-links))
(common-lisp:progn
 (common-lisp:defun list-policy-attachments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn policy-reference next-token
                     max-results consistency-level)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn policy-reference next-token
     max-results consistency-level))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policy-attachments-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/policy/attachment"
                                                        "ListPolicyAttachments"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-policy-attachments))
(common-lisp:progn
 (common-lisp:defun list-published-schema-arns
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable schema-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-published-schema-arns-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/schema/published"
                                                        "ListPublishedSchemaArns"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-published-schema-arns))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/tags"
                                                        "ListTagsForResource"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-typed-link-facet-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-arn name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable schema-arn name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-typed-link-facet-attributes-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/typedlink/facet/attributes"
                                                        "ListTypedLinkFacetAttributes"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-typed-link-facet-attributes))
(common-lisp:progn
 (common-lisp:defun list-typed-link-facet-names
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable schema-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-typed-link-facet-names-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/typedlink/facet/list"
                                                        "ListTypedLinkFacetNames"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-typed-link-facet-names))
(common-lisp:progn
 (common-lisp:defun lookup-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn object-reference next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn object-reference next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-lookup-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/policy/lookup"
                                                        "LookupPolicy"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'lookup-policy))
(common-lisp:progn
 (common-lisp:defun publish-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key development-schema-arn version
                     minor-version name)
   (common-lisp:declare
    (common-lisp:ignorable development-schema-arn version minor-version name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-publish-schema-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/schema/publish"
                                                        "PublishSchema"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'publish-schema))
(common-lisp:progn
 (common-lisp:defun put-schema-from-json
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-arn document)
   (common-lisp:declare (common-lisp:ignorable schema-arn document))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-schema-from-json-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/schema/json"
                                                        "PutSchemaFromJson"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-schema-from-json))
(common-lisp:progn
 (common-lisp:defun remove-facet-from-object
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn schema-facet
                     object-reference)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn schema-facet object-reference))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-facet-from-object-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/object/facets/delete"
                                                        "RemoveFacetFromObject"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-facet-from-object))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/tags/add"
                                                        "TagResource"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/tags/remove"
                                                        "UntagResource"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-facet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-arn name attribute-updates
                     object-type)
   (common-lisp:declare
    (common-lisp:ignorable schema-arn name attribute-updates object-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-facet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/facet"
                                                        "UpdateFacet"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-facet))
(common-lisp:progn
 (common-lisp:defun update-link-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn typed-link-specifier
                     attribute-updates)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn typed-link-specifier
     attribute-updates))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-link-attributes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/amazonclouddirectory/2017-01-11/typedlink/attributes/update"
                                                        "UpdateLinkAttributes"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-link-attributes))
(common-lisp:progn
 (common-lisp:defun update-object-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key directory-arn object-reference
                     attribute-updates)
   (common-lisp:declare
    (common-lisp:ignorable directory-arn object-reference attribute-updates))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-object-attributes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/object/update"
                                                        "UpdateObjectAttributes"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-object-attributes))
(common-lisp:progn
 (common-lisp:defun update-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-arn name)
   (common-lisp:declare (common-lisp:ignorable schema-arn name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-schema-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/schema/update"
                                                        "UpdateSchema"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-schema))
(common-lisp:progn
 (common-lisp:defun update-typed-link-facet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key schema-arn name attribute-updates
                     identity-attribute-order)
   (common-lisp:declare
    (common-lisp:ignorable schema-arn name attribute-updates
     identity-attribute-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-typed-link-facet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/typedlink/facet"
                                                        "UpdateTypedLinkFacet"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-typed-link-facet))
(common-lisp:progn
 (common-lisp:defun upgrade-applied-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key published-schema-arn directory-arn
                     dry-run)
   (common-lisp:declare
    (common-lisp:ignorable published-schema-arn directory-arn dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-upgrade-applied-schema-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/schema/upgradeapplied"
                                                        "UpgradeAppliedSchema"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'upgrade-applied-schema))
(common-lisp:progn
 (common-lisp:defun upgrade-published-schema
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key development-schema-arn
                     published-schema-arn minor-version dry-run)
   (common-lisp:declare
    (common-lisp:ignorable development-schema-arn published-schema-arn
     minor-version dry-run))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-upgrade-published-schema-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'clouddirectory-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        "/amazonclouddirectory/2017-01-11/schema/upgradepublished"
                                                        "UpgradePublishedSchema"
                                                        "2017-01-11"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'upgrade-published-schema))
