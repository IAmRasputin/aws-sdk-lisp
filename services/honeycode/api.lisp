;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/honeycode/api
  (:use)
  (:nicknames #:aws/honeycode)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/honeycode/api)
(common-lisp:progn
 (common-lisp:define-condition honeycode-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'honeycode-error))
(common-lisp:progn
 (common-lisp:defclass honeycode-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "honeycode" :api-version
                        "2020-03-01" :host-prefix "honeycode" :signing-name
                        "honeycode" :global-host common-lisp:nil))
 (common-lisp:export 'honeycode-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("AutomationExecutionException" . automation-execution-exception)
    ("AutomationExecutionTimeoutException"
     . automation-execution-timeout-exception)
    ("InternalServerException" . internal-server-exception)
    ("RequestTimeoutException" . request-timeout-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (honeycode-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition automation-execution-exception
     (honeycode-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       automation-execution-exception-message)))
 (common-lisp:export
  (common-lisp:list 'automation-execution-exception
                    'automation-execution-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition automation-execution-timeout-exception
     (honeycode-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       automation-execution-timeout-exception-message)))
 (common-lisp:export
  (common-lisp:list 'automation-execution-timeout-exception
                    'automation-execution-timeout-exception-message)))
(common-lisp:deftype aws-user-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (batch-create-table-rows-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-create-table-rows-request-"))
   (workbook-id (common-lisp:error ":workbookid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (table-id (common-lisp:error ":tableid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (rows-to-create (common-lisp:error ":rowstocreate is required") :type
    (common-lisp:or create-row-data-list common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-create-table-rows-request
                    'make-batch-create-table-rows-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-table-rows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-table-rows-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rows-to-create))
      (common-lisp:list
       (common-lisp:cons "rowsToCreate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-table-rows-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-create-table-rows-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-create-table-rows-result-"))
   (workbook-cursor (common-lisp:error ":workbookcursor is required") :type
    (common-lisp:or workbook-cursor common-lisp:null))
   (created-rows (common-lisp:error ":createdrows is required") :type
    (common-lisp:or created-rows-map common-lisp:null))
   (failed-batch-items common-lisp:nil :type
    (common-lisp:or failed-batch-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-create-table-rows-result
                    'make-batch-create-table-rows-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-table-rows-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-table-rows-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workbook-cursor))
      (common-lisp:list
       (common-lisp:cons "workbookCursor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-rows))
      (common-lisp:list
       (common-lisp:cons "createdRows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-batch-items))
      (common-lisp:list
       (common-lisp:cons "failedBatchItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-table-rows-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-table-rows-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-table-rows-request-"))
   (workbook-id (common-lisp:error ":workbookid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (table-id (common-lisp:error ":tableid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (row-ids (common-lisp:error ":rowids is required") :type
    (common-lisp:or row-id-list common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-table-rows-request
                    'make-batch-delete-table-rows-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-rows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-rows-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-ids))
      (common-lisp:list
       (common-lisp:cons "rowIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-rows-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-table-rows-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-table-rows-result-"))
   (workbook-cursor (common-lisp:error ":workbookcursor is required") :type
    (common-lisp:or workbook-cursor common-lisp:null))
   (failed-batch-items common-lisp:nil :type
    (common-lisp:or failed-batch-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-table-rows-result
                    'make-batch-delete-table-rows-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-rows-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-rows-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workbook-cursor))
      (common-lisp:list
       (common-lisp:cons "workbookCursor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-batch-items))
      (common-lisp:list
       (common-lisp:cons "failedBatchItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-table-rows-result))
   common-lisp:nil))
(common-lisp:deftype batch-error-message () 'common-lisp:string)
(common-lisp:deftype batch-item-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (batch-update-table-rows-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-update-table-rows-request-"))
   (workbook-id (common-lisp:error ":workbookid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (table-id (common-lisp:error ":tableid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (rows-to-update (common-lisp:error ":rowstoupdate is required") :type
    (common-lisp:or update-row-data-list common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-update-table-rows-request
                    'make-batch-update-table-rows-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-table-rows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-table-rows-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rows-to-update))
      (common-lisp:list
       (common-lisp:cons "rowsToUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-table-rows-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-update-table-rows-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-update-table-rows-result-"))
   (workbook-cursor (common-lisp:error ":workbookcursor is required") :type
    (common-lisp:or workbook-cursor common-lisp:null))
   (failed-batch-items common-lisp:nil :type
    (common-lisp:or failed-batch-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-update-table-rows-result
                    'make-batch-update-table-rows-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-table-rows-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-table-rows-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workbook-cursor))
      (common-lisp:list
       (common-lisp:cons "workbookCursor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-batch-items))
      (common-lisp:list
       (common-lisp:cons "failedBatchItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-table-rows-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-upsert-table-rows-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-upsert-table-rows-request-"))
   (workbook-id (common-lisp:error ":workbookid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (table-id (common-lisp:error ":tableid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (rows-to-upsert (common-lisp:error ":rowstoupsert is required") :type
    (common-lisp:or upsert-row-data-list common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-upsert-table-rows-request
                    'make-batch-upsert-table-rows-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-upsert-table-rows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-upsert-table-rows-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rows-to-upsert))
      (common-lisp:list
       (common-lisp:cons "rowsToUpsert"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-upsert-table-rows-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-upsert-table-rows-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-upsert-table-rows-result-"))
   (rows (common-lisp:error ":rows is required") :type
    (common-lisp:or upsert-rows-result-map common-lisp:null))
   (workbook-cursor (common-lisp:error ":workbookcursor is required") :type
    (common-lisp:or workbook-cursor common-lisp:null))
   (failed-batch-items common-lisp:nil :type
    (common-lisp:or failed-batch-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-upsert-table-rows-result
                    'make-batch-upsert-table-rows-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-upsert-table-rows-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-upsert-table-rows-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rows))
      (common-lisp:list
       (common-lisp:cons "rows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workbook-cursor))
      (common-lisp:list
       (common-lisp:cons "workbookCursor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-batch-items))
      (common-lisp:list
       (common-lisp:cons "failedBatchItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-upsert-table-rows-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cell (:copier common-lisp:nil) (:conc-name "struct-shape-cell-"))
   (formula common-lisp:nil :type (common-lisp:or formula common-lisp:null))
   (format common-lisp:nil :type (common-lisp:or format common-lisp:null))
   (raw-value common-lisp:nil :type
    (common-lisp:or raw-value common-lisp:null))
   (formatted-value common-lisp:nil :type
    (common-lisp:or formatted-value common-lisp:null))
   (formatted-values common-lisp:nil :type
    (common-lisp:or formatted-values-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cell 'make-cell))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cell))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cell))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'formula))
      (common-lisp:list
       (common-lisp:cons "formula"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-value))
      (common-lisp:list
       (common-lisp:cons "rawValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'formatted-value))
      (common-lisp:list
       (common-lisp:cons "formattedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'formatted-values))
      (common-lisp:list
       (common-lisp:cons "formattedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cell))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cell-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-cell-input-"))
   (fact common-lisp:nil :type (common-lisp:or fact common-lisp:null))
   (facts common-lisp:nil :type (common-lisp:or fact-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cell-input 'make-cell-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cell-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cell-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fact))
      (common-lisp:list
       (common-lisp:cons "fact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'facts))
      (common-lisp:list
       (common-lisp:cons "facts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cell-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cells () '(trivial-types:proper-list cell))
 (common-lisp:defun make-cells
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cell))
   aws-sdk/generator/shape::members))
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (column-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-column-metadata-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (format (common-lisp:error ":format is required") :type
    (common-lisp:or format common-lisp:null)))
 (common-lisp:export (common-lisp:list 'column-metadata 'make-column-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input column-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input column-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input column-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-row-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-row-data-"))
   (batch-item-id (common-lisp:error ":batchitemid is required") :type
    (common-lisp:or batch-item-id common-lisp:null))
   (cells-to-create (common-lisp:error ":cellstocreate is required") :type
    (common-lisp:or row-data-input common-lisp:null)))
 (common-lisp:export (common-lisp:list 'create-row-data 'make-create-row-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-row-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-row-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-item-id))
      (common-lisp:list
       (common-lisp:cons "batchItemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cells-to-create))
      (common-lisp:list
       (common-lisp:cons "cellsToCreate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-row-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype create-row-data-list ()
   '(trivial-types:proper-list create-row-data))
 (common-lisp:defun make-create-row-data-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list create-row-data))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype created-rows-map () 'common-lisp:hash-table)
 (common-lisp:defun make-created-rows-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (data-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-item-"))
   (override-format common-lisp:nil :type
    (common-lisp:or format common-lisp:null))
   (raw-value common-lisp:nil :type
    (common-lisp:or raw-value common-lisp:null))
   (formatted-value common-lisp:nil :type
    (common-lisp:or formatted-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'data-item 'make-data-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'override-format))
      (common-lisp:list
       (common-lisp:cons "overrideFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-value))
      (common-lisp:list
       (common-lisp:cons "rawValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'formatted-value))
      (common-lisp:list
       (common-lisp:cons "formattedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-items () '(trivial-types:proper-list data-item))
 (common-lisp:defun make-data-items
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list data-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype delimited-text-delimiter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delimited-text-import-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-delimited-text-import-options-"))
   (delimiter (common-lisp:error ":delimiter is required") :type
    (common-lisp:or delimited-text-delimiter common-lisp:null))
   (has-header-row common-lisp:nil :type
    (common-lisp:or has-header-row common-lisp:null))
   (ignore-empty-rows common-lisp:nil :type
    (common-lisp:or ignore-empty-rows common-lisp:null))
   (data-character-encoding common-lisp:nil :type
    (common-lisp:or import-data-character-encoding common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delimited-text-import-options
                    'make-delimited-text-import-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delimited-text-import-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delimited-text-import-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delimiter))
      (common-lisp:list
       (common-lisp:cons "delimiter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'has-header-row))
      (common-lisp:list
       (common-lisp:cons "hasHeaderRow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ignore-empty-rows))
      (common-lisp:list
       (common-lisp:cons "ignoreEmptyRows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-character-encoding))
      (common-lisp:list
       (common-lisp:cons "dataCharacterEncoding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delimited-text-import-options))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-table-data-import-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-table-data-import-job-request-"))
   (workbook-id (common-lisp:error ":workbookid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (table-id (common-lisp:error ":tableid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-table-data-import-job-request
                    'make-describe-table-data-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-data-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-data-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-data-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-table-data-import-job-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-table-data-import-job-result-"))
   (job-status (common-lisp:error ":jobstatus is required") :type
    (common-lisp:or table-data-import-job-status common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or table-data-import-job-message common-lisp:null))
   (job-metadata (common-lisp:error ":jobmetadata is required") :type
    (common-lisp:or table-data-import-job-metadata common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or error-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-table-data-import-job-result
                    'make-describe-table-data-import-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-data-import-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-data-import-job-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "jobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-metadata))
      (common-lisp:list
       (common-lisp:cons "jobMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-table-data-import-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (destination-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-destination-options-"))
   (column-map common-lisp:nil :type
    (common-lisp:or import-column-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'destination-options 'make-destination-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-map))
      (common-lisp:list
       (common-lisp:cons "columnMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination-options))
   common-lisp:nil))
(common-lisp:deftype email () 'common-lisp:string)
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype fact () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype fact-list () '(trivial-types:proper-list fact))
 (common-lisp:defun make-fact-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list fact))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (failed-batch-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-failed-batch-item-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or batch-item-id common-lisp:null))
   (error-message (common-lisp:error ":errormessage is required") :type
    (common-lisp:or batch-error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'failed-batch-item 'make-failed-batch-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failed-batch-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failed-batch-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failed-batch-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype failed-batch-items ()
   '(trivial-types:proper-list failed-batch-item))
 (common-lisp:defun make-failed-batch-items
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list failed-batch-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (filter (:copier common-lisp:nil) (:conc-name "struct-shape-filter-"))
   (formula (common-lisp:error ":formula is required") :type
    (common-lisp:or formula common-lisp:null))
   (context-row-id common-lisp:nil :type
    (common-lisp:or row-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'formula))
      (common-lisp:list
       (common-lisp:cons "formula"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-row-id))
      (common-lisp:list
       (common-lisp:cons "contextRowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:deftype format () 'common-lisp:string)
(common-lisp:deftype formatted-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype formatted-values-list ()
   '(trivial-types:proper-list formatted-value))
 (common-lisp:defun make-formatted-values-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list formatted-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype formula () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-screen-data-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-screen-data-request-"))
   (workbook-id (common-lisp:error ":workbookid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (screen-id (common-lisp:error ":screenid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (variables common-lisp:nil :type
    (common-lisp:or variable-value-map common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-screen-data-request 'make-get-screen-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-screen-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-screen-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workbook-id))
      (common-lisp:list
       (common-lisp:cons "workbookId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-id))
      (common-lisp:list
       (common-lisp:cons "appId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'screen-id))
      (common-lisp:list
       (common-lisp:cons "screenId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variables))
      (common-lisp:list
       (common-lisp:cons "variables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-screen-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-screen-data-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-screen-data-result-"))
   (results (common-lisp:error ":results is required") :type
    (common-lisp:or result-set-map common-lisp:null))
   (workbook-cursor (common-lisp:error ":workbookcursor is required") :type
    (common-lisp:or workbook-cursor common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-screen-data-result 'make-get-screen-data-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-screen-data-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-screen-data-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workbook-cursor))
      (common-lisp:list
       (common-lisp:cons "workbookCursor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-screen-data-result))
   common-lisp:nil))
(common-lisp:deftype has-header-row () 'common-lisp:boolean)
(common-lisp:deftype ignore-empty-rows () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype import-column-map () 'common-lisp:hash-table)
 (common-lisp:defun make-import-column-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype import-data-character-encoding () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (import-data-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-data-source-"))
   (data-source-config (common-lisp:error ":datasourceconfig is required")
    :type (common-lisp:or import-data-source-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-data-source 'make-import-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-config))
      (common-lisp:list
       (common-lisp:cons "dataSourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-data-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-data-source-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-data-source-config-"))
   (data-source-url common-lisp:nil :type
    (common-lisp:or secure-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-data-source-config
                    'make-import-data-source-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-data-source-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-data-source-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source-url))
      (common-lisp:list
       (common-lisp:cons "dataSourceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-data-source-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-job-submitter (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-job-submitter-"))
   (email common-lisp:nil :type (common-lisp:or email common-lisp:null))
   (user-arn common-lisp:nil :type
    (common-lisp:or aws-user-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-job-submitter 'make-import-job-submitter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-job-submitter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-job-submitter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email))
      (common-lisp:list
       (common-lisp:cons "email"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-arn))
      (common-lisp:list
       (common-lisp:cons "userArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-job-submitter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-options-"))
   (destination-options common-lisp:nil :type
    (common-lisp:or destination-options common-lisp:null))
   (delimited-text-options common-lisp:nil :type
    (common-lisp:or delimited-text-import-options common-lisp:null)))
 (common-lisp:export (common-lisp:list 'import-options 'make-import-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input import-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input import-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-options))
      (common-lisp:list
       (common-lisp:cons "destinationOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delimited-text-options))
      (common-lisp:list
       (common-lisp:cons "delimitedTextOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input import-options))
   common-lisp:nil))
(common-lisp:deftype import-source-data-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (honeycode-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (invoke-screen-automation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-invoke-screen-automation-request-"))
   (workbook-id (common-lisp:error ":workbookid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (app-id (common-lisp:error ":appid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (screen-id (common-lisp:error ":screenid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (screen-automation-id (common-lisp:error ":screenautomationid is required")
    :type (common-lisp:or resource-id common-lisp:null))
   (variables common-lisp:nil :type
    (common-lisp:or variable-value-map common-lisp:null))
   (row-id common-lisp:nil :type (common-lisp:or row-id common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invoke-screen-automation-request
                    'make-invoke-screen-automation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invoke-screen-automation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invoke-screen-automation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variables))
      (common-lisp:list
       (common-lisp:cons "variables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-id))
      (common-lisp:list
       (common-lisp:cons "rowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invoke-screen-automation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (invoke-screen-automation-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-invoke-screen-automation-result-"))
   (workbook-cursor (common-lisp:error ":workbookcursor is required") :type
    (common-lisp:or workbook-cursor common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invoke-screen-automation-result
                    'make-invoke-screen-automation-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          invoke-screen-automation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          invoke-screen-automation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workbook-cursor))
      (common-lisp:list
       (common-lisp:cons "workbookCursor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          invoke-screen-automation-result))
   common-lisp:nil))
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-table-columns-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-table-columns-request-"))
   (workbook-id (common-lisp:error ":workbookid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (table-id (common-lisp:error ":tableid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-table-columns-request
                    'make-list-table-columns-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-table-columns-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-table-columns-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-table-columns-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-table-columns-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-table-columns-result-"))
   (table-columns (common-lisp:error ":tablecolumns is required") :type
    (common-lisp:or table-columns common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (workbook-cursor common-lisp:nil :type
    (common-lisp:or workbook-cursor common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-table-columns-result
                    'make-list-table-columns-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-table-columns-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-table-columns-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-columns))
      (common-lisp:list
       (common-lisp:cons "tableColumns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workbook-cursor))
      (common-lisp:list
       (common-lisp:cons "workbookCursor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-table-columns-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-table-rows-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-table-rows-request-"))
   (workbook-id (common-lisp:error ":workbookid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (table-id (common-lisp:error ":tableid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (row-ids common-lisp:nil :type
    (common-lisp:or row-id-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-table-rows-request 'make-list-table-rows-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-table-rows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-table-rows-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-ids))
      (common-lisp:list
       (common-lisp:cons "rowIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-table-rows-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-table-rows-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-table-rows-result-"))
   (column-ids (common-lisp:error ":columnids is required") :type
    (common-lisp:or resource-ids common-lisp:null))
   (rows (common-lisp:error ":rows is required") :type
    (common-lisp:or table-rows common-lisp:null))
   (row-ids-not-found common-lisp:nil :type
    (common-lisp:or row-id-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (workbook-cursor (common-lisp:error ":workbookcursor is required") :type
    (common-lisp:or workbook-cursor common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-table-rows-result 'make-list-table-rows-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-table-rows-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-table-rows-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-ids))
      (common-lisp:list
       (common-lisp:cons "columnIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rows))
      (common-lisp:list
       (common-lisp:cons "rows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-ids-not-found))
      (common-lisp:list
       (common-lisp:cons "rowIdsNotFound"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workbook-cursor))
      (common-lisp:list
       (common-lisp:cons "workbookCursor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-table-rows-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tables-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tables-request-"))
   (workbook-id (common-lisp:error ":workbookid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tables-request 'make-list-tables-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tables-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tables-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tables-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tables-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tables-result-"))
   (tables (common-lisp:error ":tables is required") :type
    (common-lisp:or tables common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (workbook-cursor common-lisp:nil :type
    (common-lisp:or workbook-cursor common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tables-result 'make-list-tables-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tables-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tables-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tables))
      (common-lisp:list
       (common-lisp:cons "tables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workbook-cursor))
      (common-lisp:list
       (common-lisp:cons "workbookCursor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tables-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-result-"))
   (tags common-lisp:nil :type (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-result
                    'make-list-tags-for-resource-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-result))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (query-table-rows-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-query-table-rows-request-"))
   (workbook-id (common-lisp:error ":workbookid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (table-id (common-lisp:error ":tableid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (filter-formula (common-lisp:error ":filterformula is required") :type
    (common-lisp:or filter common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'query-table-rows-request 'make-query-table-rows-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-table-rows-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-table-rows-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-formula))
      (common-lisp:list
       (common-lisp:cons "filterFormula"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-table-rows-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (query-table-rows-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-query-table-rows-result-"))
   (column-ids (common-lisp:error ":columnids is required") :type
    (common-lisp:or resource-ids common-lisp:null))
   (rows (common-lisp:error ":rows is required") :type
    (common-lisp:or table-rows common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (workbook-cursor (common-lisp:error ":workbookcursor is required") :type
    (common-lisp:or workbook-cursor common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'query-table-rows-result 'make-query-table-rows-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-table-rows-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-table-rows-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-ids))
      (common-lisp:list
       (common-lisp:cons "columnIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rows))
      (common-lisp:list
       (common-lisp:cons "rows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workbook-cursor))
      (common-lisp:list
       (common-lisp:cons "workbookCursor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-table-rows-result))
   common-lisp:nil))
(common-lisp:deftype raw-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition request-timeout-exception
     (honeycode-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       request-timeout-exception-message)))
 (common-lisp:export
  (common-lisp:list 'request-timeout-exception
                    'request-timeout-exception-message)))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-ids () '(trivial-types:proper-list resource-id))
 (common-lisp:defun make-resource-ids
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (honeycode-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:deftype result-header ()
   '(trivial-types:proper-list column-metadata))
 (common-lisp:defun make-result-header
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (result-row (:copier common-lisp:nil)
      (:conc-name "struct-shape-result-row-"))
   (row-id common-lisp:nil :type (common-lisp:or row-id common-lisp:null))
   (data-items (common-lisp:error ":dataitems is required") :type
    (common-lisp:or data-items common-lisp:null)))
 (common-lisp:export (common-lisp:list 'result-row 'make-result-row))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result-row))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result-row))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-id))
      (common-lisp:list
       (common-lisp:cons "rowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-items))
      (common-lisp:list
       (common-lisp:cons "dataItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result-row))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype result-rows () '(trivial-types:proper-list result-row))
 (common-lisp:defun make-result-rows
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list result-row))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (result-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-result-set-"))
   (headers (common-lisp:error ":headers is required") :type
    (common-lisp:or result-header common-lisp:null))
   (rows (common-lisp:error ":rows is required") :type
    (common-lisp:or result-rows common-lisp:null)))
 (common-lisp:export (common-lisp:list 'result-set 'make-result-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input result-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input result-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers))
      (common-lisp:list
       (common-lisp:cons "headers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rows))
      (common-lisp:list
       (common-lisp:cons "rows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input result-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype result-set-map () 'common-lisp:hash-table)
 (common-lisp:defun make-result-set-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype row-data-input () 'common-lisp:hash-table)
 (common-lisp:defun make-row-data-input (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype row-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype row-id-list () '(trivial-types:proper-list row-id))
 (common-lisp:defun make-row-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list row-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype secure-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (honeycode-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (honeycode-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:deftype source-data-column-index () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (source-data-column-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-data-column-properties-"))
   (column-index common-lisp:nil :type
    (common-lisp:or source-data-column-index common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-data-column-properties
                    'make-source-data-column-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-data-column-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-data-column-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-index))
      (common-lisp:list
       (common-lisp:cons "columnIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-data-column-properties))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-table-data-import-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-table-data-import-job-request-"))
   (workbook-id (common-lisp:error ":workbookid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (data-source (common-lisp:error ":datasource is required") :type
    (common-lisp:or import-data-source common-lisp:null))
   (data-format (common-lisp:error ":dataformat is required") :type
    (common-lisp:or import-source-data-format common-lisp:null))
   (destination-table-id (common-lisp:error ":destinationtableid is required")
    :type (common-lisp:or resource-id common-lisp:null))
   (import-options (common-lisp:error ":importoptions is required") :type
    (common-lisp:or import-options common-lisp:null))
   (client-request-token (common-lisp:error ":clientrequesttoken is required")
    :type (common-lisp:or client-request-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-table-data-import-job-request
                    'make-start-table-data-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-table-data-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-table-data-import-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-format))
      (common-lisp:list
       (common-lisp:cons "dataFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-options))
      (common-lisp:list
       (common-lisp:cons "importOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "clientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-table-data-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-table-data-import-job-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-table-data-import-job-result-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or job-id common-lisp:null))
   (job-status (common-lisp:error ":jobstatus is required") :type
    (common-lisp:or table-data-import-job-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-table-data-import-job-result
                    'make-start-table-data-import-job-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-table-data-import-job-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-table-data-import-job-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "jobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-table-data-import-job-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (table (:copier common-lisp:nil) (:conc-name "struct-shape-table-"))
   (table-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (table-name common-lisp:nil :type
    (common-lisp:or table-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'table 'make-table))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-id))
      (common-lisp:list
       (common-lisp:cons "tableId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "tableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (table-column (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-column-"))
   (table-column-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (table-column-name common-lisp:nil :type
    (common-lisp:or table-column-name common-lisp:null))
   (format common-lisp:nil :type (common-lisp:or format common-lisp:null)))
 (common-lisp:export (common-lisp:list 'table-column 'make-table-column))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-column))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-column))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-column-id))
      (common-lisp:list
       (common-lisp:cons "tableColumnId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-column-name))
      (common-lisp:list
       (common-lisp:cons "tableColumnName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'format))
      (common-lisp:list
       (common-lisp:cons "format"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-column))
   common-lisp:nil))
(common-lisp:deftype table-column-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype table-columns ()
   '(trivial-types:proper-list table-column))
 (common-lisp:defun make-table-columns
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-column))
   aws-sdk/generator/shape::members))
(common-lisp:deftype table-data-import-job-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (table-data-import-job-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-data-import-job-metadata-"))
   (submitter (common-lisp:error ":submitter is required") :type
    (common-lisp:or import-job-submitter common-lisp:null))
   (submit-time (common-lisp:error ":submittime is required") :type
    (common-lisp:or timestamp-in-millis common-lisp:null))
   (import-options (common-lisp:error ":importoptions is required") :type
    (common-lisp:or import-options common-lisp:null))
   (data-source (common-lisp:error ":datasource is required") :type
    (common-lisp:or import-data-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'table-data-import-job-metadata
                    'make-table-data-import-job-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          table-data-import-job-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          table-data-import-job-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submitter))
      (common-lisp:list
       (common-lisp:cons "submitter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submit-time))
      (common-lisp:list
       (common-lisp:cons "submitTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'import-options))
      (common-lisp:list
       (common-lisp:cons "importOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "dataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          table-data-import-job-metadata))
   common-lisp:nil))
(common-lisp:deftype table-data-import-job-status () 'common-lisp:string)
(common-lisp:deftype table-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (table-row (:copier common-lisp:nil)
      (:conc-name "struct-shape-table-row-"))
   (row-id (common-lisp:error ":rowid is required") :type
    (common-lisp:or row-id common-lisp:null))
   (cells (common-lisp:error ":cells is required") :type
    (common-lisp:or cells common-lisp:null)))
 (common-lisp:export (common-lisp:list 'table-row 'make-table-row))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input table-row))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input table-row))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-id))
      (common-lisp:list
       (common-lisp:cons "rowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cells))
      (common-lisp:list
       (common-lisp:cons "cells"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input table-row))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype table-rows () '(trivial-types:proper-list table-row))
 (common-lisp:defun make-table-rows
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-row))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tables () '(trivial-types:proper-list table))
 (common-lisp:defun make-tables
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-keys-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-keys-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tags-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-result-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-result 'make-tag-resource-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-result))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags-map () 'common-lisp:hash-table)
 (common-lisp:defun make-tags-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (honeycode-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:deftype timestamp-in-millis () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-keys-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-result-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-result 'make-untag-resource-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-row-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-row-data-"))
   (row-id (common-lisp:error ":rowid is required") :type
    (common-lisp:or row-id common-lisp:null))
   (cells-to-update (common-lisp:error ":cellstoupdate is required") :type
    (common-lisp:or row-data-input common-lisp:null)))
 (common-lisp:export (common-lisp:list 'update-row-data 'make-update-row-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-row-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-row-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-id))
      (common-lisp:list
       (common-lisp:cons "rowId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cells-to-update))
      (common-lisp:list
       (common-lisp:cons "cellsToUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-row-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-row-data-list ()
   '(trivial-types:proper-list update-row-data))
 (common-lisp:defun make-update-row-data-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list update-row-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype upsert-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (upsert-row-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-upsert-row-data-"))
   (batch-item-id (common-lisp:error ":batchitemid is required") :type
    (common-lisp:or batch-item-id common-lisp:null))
   (filter (common-lisp:error ":filter is required") :type
    (common-lisp:or filter common-lisp:null))
   (cells-to-update (common-lisp:error ":cellstoupdate is required") :type
    (common-lisp:or row-data-input common-lisp:null)))
 (common-lisp:export (common-lisp:list 'upsert-row-data 'make-upsert-row-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upsert-row-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upsert-row-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-item-id))
      (common-lisp:list
       (common-lisp:cons "batchItemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cells-to-update))
      (common-lisp:list
       (common-lisp:cons "cellsToUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upsert-row-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype upsert-row-data-list ()
   '(trivial-types:proper-list upsert-row-data))
 (common-lisp:defun make-upsert-row-data-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list upsert-row-data))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (upsert-rows-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-upsert-rows-result-"))
   (row-ids (common-lisp:error ":rowids is required") :type
    (common-lisp:or row-id-list common-lisp:null))
   (upsert-action (common-lisp:error ":upsertaction is required") :type
    (common-lisp:or upsert-action common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upsert-rows-result 'make-upsert-rows-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input upsert-rows-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input upsert-rows-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-ids))
      (common-lisp:list
       (common-lisp:cons "rowIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upsert-action))
      (common-lisp:list
       (common-lisp:cons "upsertAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input upsert-rows-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype upsert-rows-result-map () 'common-lisp:hash-table)
 (common-lisp:defun make-upsert-rows-result-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (honeycode-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype variable-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (variable-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-variable-value-"))
   (raw-value (common-lisp:error ":rawvalue is required") :type
    (common-lisp:or raw-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'variable-value 'make-variable-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input variable-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input variable-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-value))
      (common-lisp:list
       (common-lisp:cons "rawValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input variable-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype variable-value-map () 'common-lisp:hash-table)
 (common-lisp:defun make-variable-value-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype workbook-cursor () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defun batch-create-table-rows
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workbook-id table-id rows-to-create
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable workbook-id table-id rows-to-create
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-create-table-rows-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'honeycode-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workbooks/~A/tables/~A/rows/batchcreate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workbook-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'table-id))))
                                                        "BatchCreateTableRows"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-create-table-rows))
(common-lisp:progn
 (common-lisp:defun batch-delete-table-rows
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workbook-id table-id row-ids
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable workbook-id table-id row-ids client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-delete-table-rows-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'honeycode-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workbooks/~A/tables/~A/rows/batchdelete"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workbook-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'table-id))))
                                                        "BatchDeleteTableRows"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-delete-table-rows))
(common-lisp:progn
 (common-lisp:defun batch-update-table-rows
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workbook-id table-id rows-to-update
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable workbook-id table-id rows-to-update
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-update-table-rows-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'honeycode-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workbooks/~A/tables/~A/rows/batchupdate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workbook-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'table-id))))
                                                        "BatchUpdateTableRows"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-update-table-rows))
(common-lisp:progn
 (common-lisp:defun batch-upsert-table-rows
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workbook-id table-id rows-to-upsert
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable workbook-id table-id rows-to-upsert
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-upsert-table-rows-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'honeycode-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workbooks/~A/tables/~A/rows/batchupsert"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workbook-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'table-id))))
                                                        "BatchUpsertTableRows"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-upsert-table-rows))
(common-lisp:progn
 (common-lisp:defun describe-table-data-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workbook-id table-id job-id)
   (common-lisp:declare (common-lisp:ignorable workbook-id table-id job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-table-data-import-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'honeycode-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workbooks/~A/tables/~A/import/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workbook-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'table-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "DescribeTableDataImportJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-table-data-import-job))
(common-lisp:progn
 (common-lisp:defun get-screen-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workbook-id app-id screen-id variables
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable workbook-id app-id screen-id variables max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-screen-data-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'honeycode-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/screendata"
                                                        "GetScreenData"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-screen-data))
(common-lisp:progn
 (common-lisp:defun invoke-screen-automation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workbook-id app-id screen-id
                     screen-automation-id variables row-id
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable workbook-id app-id screen-id screen-automation-id
     variables row-id client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-invoke-screen-automation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'honeycode-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workbooks/~A/apps/~A/screens/~A/automations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workbook-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'screen-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'automation-id))))
                                                        "InvokeScreenAutomation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'invoke-screen-automation))
(common-lisp:progn
 (common-lisp:defun list-table-columns
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workbook-id table-id next-token)
   (common-lisp:declare
    (common-lisp:ignorable workbook-id table-id next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-table-columns-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'honeycode-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workbooks/~A/tables/~A/columns"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workbook-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'table-id))))
                                                        "ListTableColumns"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-table-columns))
(common-lisp:progn
 (common-lisp:defun list-table-rows
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workbook-id table-id row-ids max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable workbook-id table-id row-ids max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-table-rows-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'honeycode-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workbooks/~A/tables/~A/rows/list"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workbook-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'table-id))))
                                                        "ListTableRows"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-table-rows))
(common-lisp:progn
 (common-lisp:defun list-tables
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workbook-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable workbook-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tables-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'honeycode-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workbooks/~A/tables"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workbook-id))))
                                                        "ListTables"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tables))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'honeycode-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun query-table-rows
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workbook-id table-id filter-formula
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable workbook-id table-id filter-formula max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-query-table-rows-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'honeycode-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workbooks/~A/tables/~A/rows/query"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workbook-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'table-id))))
                                                        "QueryTableRows"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'query-table-rows))
(common-lisp:progn
 (common-lisp:defun start-table-data-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workbook-id data-source data-format
                     destination-table-id import-options client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable workbook-id data-source data-format
     destination-table-id import-options client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-table-data-import-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'honeycode-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/workbooks/~A/tables/~A/import"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'workbook-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'table-id))))
                                                        "StartTableDataImportJob"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-table-data-import-job))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'honeycode-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'honeycode-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
