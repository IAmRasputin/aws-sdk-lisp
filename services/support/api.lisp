;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/support/api
  (:use)
  (:nicknames #:aws/support)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/support/api)
(common-lisp:progn
 (common-lisp:defclass support-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "support" :protocol :json))
 (common-lisp:export 'support-request))
(common-lisp:progn
 (common-lisp:define-condition support-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'support-error))
(common-lisp:defvar *error-map*
  '(("AttachmentIdNotFound" . attachment-id-not-found)
    ("AttachmentLimitExceeded" . attachment-limit-exceeded)
    ("AttachmentSetExpired" . attachment-set-expired)
    ("AttachmentSetIdNotFound" . attachment-set-id-not-found)
    ("AttachmentSetSizeLimitExceeded" . attachment-set-size-limit-exceeded)
    ("CaseCreationLimitExceeded" . case-creation-limit-exceeded)
    ("CaseIdNotFound" . case-id-not-found)
    ("DescribeAttachmentLimitExceeded" . describe-attachment-limit-exceeded)
    ("InternalServerError" . internal-server-error)))
(common-lisp:progn
 (common-lisp:defclass add-attachments-to-set-request common-lisp:nil
                       ((attachments :initarg :|attachments| :type
                         (common-lisp:or attachments common-lisp:null)
                         :accessor %add-attachments-to-set-request-attachments
                         :initform
                         (common-lisp:error ":attachments is required"))
                        (attachment-set-id :initarg :|attachmentSetId| :type
                         (common-lisp:or attachment-set-id common-lisp:null)
                         :accessor
                         %add-attachments-to-set-request-attachment-set-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'add-attachments-to-set-request
                    'make-add-attachments-to-set-request))
 (common-lisp:defun make-add-attachments-to-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attachments attachment-set-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-attachments-to-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-attachments-to-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-attachments-to-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-set-id))
      (common-lisp:list
       (common-lisp:cons "attachmentSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachments))
      (common-lisp:list
       (common-lisp:cons "attachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-attachments-to-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-attachments-to-set-response common-lisp:nil
                       ((expiry-time :initarg :|expiryTime| :type
                         (common-lisp:or expiry-time common-lisp:null)
                         :accessor %add-attachments-to-set-response-expiry-time
                         :initform common-lisp:nil)
                        (attachment-set-id :initarg :|attachmentSetId| :type
                         (common-lisp:or attachment-set-id common-lisp:null)
                         :accessor
                         %add-attachments-to-set-response-attachment-set-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'add-attachments-to-set-response
                    'make-add-attachments-to-set-response))
 (common-lisp:defun make-add-attachments-to-set-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key expiry-time attachment-set-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-attachments-to-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-attachments-to-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-attachments-to-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-set-id))
      (common-lisp:list
       (common-lisp:cons "attachmentSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiry-time))
      (common-lisp:list
       (common-lisp:cons "expiryTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-attachments-to-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-communication-to-case-request common-lisp:nil
                       ((attachment-set-id :initarg :|attachmentSetId| :type
                         (common-lisp:or attachment-set-id common-lisp:null)
                         :accessor
                         %add-communication-to-case-request-attachment-set-id
                         :initform common-lisp:nil)
                        (cc-email-addresses :initarg :|ccEmailAddresses| :type
                         (common-lisp:or cc-email-address-list
                                         common-lisp:null)
                         :accessor
                         %add-communication-to-case-request-cc-email-addresses
                         :initform common-lisp:nil)
                        (communication-body :initarg :|communicationBody| :type
                         (common-lisp:or communication-body common-lisp:null)
                         :accessor
                         %add-communication-to-case-request-communication-body
                         :initform
                         (common-lisp:error ":communicationbody is required"))
                        (case-id :initarg :|caseId| :type
                         (common-lisp:or case-id common-lisp:null) :accessor
                         %add-communication-to-case-request-case-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'add-communication-to-case-request
                    'make-add-communication-to-case-request))
 (common-lisp:defun make-add-communication-to-case-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attachment-set-id cc-email-addresses
                     communication-body case-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-communication-to-case-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-communication-to-case-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-communication-to-case-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'case-id))
      (common-lisp:list
       (common-lisp:cons "caseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'communication-body))
      (common-lisp:list
       (common-lisp:cons "communicationBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cc-email-addresses))
      (common-lisp:list
       (common-lisp:cons "ccEmailAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-set-id))
      (common-lisp:list
       (common-lisp:cons "attachmentSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-communication-to-case-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-communication-to-case-response common-lisp:nil
                       ((result :initarg :|result| :type
                         (common-lisp:or result common-lisp:null) :accessor
                         %add-communication-to-case-response-result :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'add-communication-to-case-response
                    'make-add-communication-to-case-response))
 (common-lisp:defun make-add-communication-to-case-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key result)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-communication-to-case-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-communication-to-case-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-communication-to-case-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-communication-to-case-response))
   common-lisp:nil))
(common-lisp:deftype after-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass attachment common-lisp:nil
                       ((data :initarg :|data| :type
                         (common-lisp:or data common-lisp:null) :accessor
                         %attachment-data :initform common-lisp:nil)
                        (file-name :initarg :|fileName| :type
                         (common-lisp:or file-name common-lisp:null) :accessor
                         %attachment-file-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'attachment 'make-attachment))
 (common-lisp:defun make-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data file-name)
   (common-lisp:apply #'common-lisp:make-instance 'attachment
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-name))
      (common-lisp:list
       (common-lisp:cons "fileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attachment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass attachment-details common-lisp:nil
                       ((file-name :initarg :|fileName| :type
                         (common-lisp:or file-name common-lisp:null) :accessor
                         %attachment-details-file-name :initform
                         common-lisp:nil)
                        (attachment-id :initarg :|attachmentId| :type
                         (common-lisp:or attachment-id common-lisp:null)
                         :accessor %attachment-details-attachment-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'attachment-details 'make-attachment-details))
 (common-lisp:defun make-attachment-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key file-name attachment-id)
   (common-lisp:apply #'common-lisp:make-instance 'attachment-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attachment-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attachment-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-id))
      (common-lisp:list
       (common-lisp:cons "attachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-name))
      (common-lisp:list
       (common-lisp:cons "fileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attachment-details))
   common-lisp:nil))
(common-lisp:deftype attachment-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition attachment-id-not-found
     (support-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       attachment-id-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'attachment-id-not-found 'attachment-id-not-found-message)))
(common-lisp:progn
 (common-lisp:define-condition attachment-limit-exceeded
     (support-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       attachment-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'attachment-limit-exceeded
                    'attachment-limit-exceeded-message)))
(common-lisp:progn
 (common-lisp:deftype attachment-set ()
   '(trivial-types:proper-list attachment-details))
 (common-lisp:defun |make-attachment-set|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attachment-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition attachment-set-expired
     (support-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       attachment-set-expired-message)))
 (common-lisp:export
  (common-lisp:list 'attachment-set-expired 'attachment-set-expired-message)))
(common-lisp:deftype attachment-set-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition attachment-set-id-not-found
     (support-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       attachment-set-id-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'attachment-set-id-not-found
                    'attachment-set-id-not-found-message)))
(common-lisp:progn
 (common-lisp:define-condition attachment-set-size-limit-exceeded
     (support-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       attachment-set-size-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'attachment-set-size-limit-exceeded
                    'attachment-set-size-limit-exceeded-message)))
(common-lisp:progn
 (common-lisp:deftype attachments () '(trivial-types:proper-list attachment))
 (common-lisp:defun |make-attachments|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attachment))
   aws-sdk/generator/shape::members))
(common-lisp:deftype before-time () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition case-creation-limit-exceeded
     (support-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       case-creation-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'case-creation-limit-exceeded
                    'case-creation-limit-exceeded-message)))
(common-lisp:progn
 (common-lisp:defclass case-details common-lisp:nil
                       ((language :initarg :|language| :type
                         (common-lisp:or language common-lisp:null) :accessor
                         %case-details-language :initform common-lisp:nil)
                        (cc-email-addresses :initarg :|ccEmailAddresses| :type
                         (common-lisp:or cc-email-address-list
                                         common-lisp:null)
                         :accessor %case-details-cc-email-addresses :initform
                         common-lisp:nil)
                        (recent-communications :initarg :|recentCommunications|
                         :type
                         (common-lisp:or recent-case-communications
                                         common-lisp:null)
                         :accessor %case-details-recent-communications
                         :initform common-lisp:nil)
                        (time-created :initarg :|timeCreated| :type
                         (common-lisp:or time-created common-lisp:null)
                         :accessor %case-details-time-created :initform
                         common-lisp:nil)
                        (submitted-by :initarg :|submittedBy| :type
                         (common-lisp:or submitted-by common-lisp:null)
                         :accessor %case-details-submitted-by :initform
                         common-lisp:nil)
                        (severity-code :initarg :|severityCode| :type
                         (common-lisp:or severity-code common-lisp:null)
                         :accessor %case-details-severity-code :initform
                         common-lisp:nil)
                        (category-code :initarg :|categoryCode| :type
                         (common-lisp:or category-code common-lisp:null)
                         :accessor %case-details-category-code :initform
                         common-lisp:nil)
                        (service-code :initarg :|serviceCode| :type
                         (common-lisp:or service-code common-lisp:null)
                         :accessor %case-details-service-code :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or status common-lisp:null) :accessor
                         %case-details-status :initform common-lisp:nil)
                        (subject :initarg :|subject| :type
                         (common-lisp:or subject common-lisp:null) :accessor
                         %case-details-subject :initform common-lisp:nil)
                        (display-id :initarg :|displayId| :type
                         (common-lisp:or display-id common-lisp:null) :accessor
                         %case-details-display-id :initform common-lisp:nil)
                        (case-id :initarg :|caseId| :type
                         (common-lisp:or case-id common-lisp:null) :accessor
                         %case-details-case-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'case-details 'make-case-details))
 (common-lisp:defun make-case-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key language cc-email-addresses
                     recent-communications time-created submitted-by
                     severity-code category-code service-code status subject
                     display-id case-id)
   (common-lisp:apply #'common-lisp:make-instance 'case-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input case-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input case-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'case-id))
      (common-lisp:list
       (common-lisp:cons "caseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-id))
      (common-lisp:list
       (common-lisp:cons "displayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-code))
      (common-lisp:list
       (common-lisp:cons "serviceCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-code))
      (common-lisp:list
       (common-lisp:cons "categoryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-code))
      (common-lisp:list
       (common-lisp:cons "severityCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submitted-by))
      (common-lisp:list
       (common-lisp:cons "submittedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-created))
      (common-lisp:list
       (common-lisp:cons "timeCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recent-communications))
      (common-lisp:list
       (common-lisp:cons "recentCommunications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cc-email-addresses))
      (common-lisp:list
       (common-lisp:cons "ccEmailAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input case-details))
   common-lisp:nil))
(common-lisp:deftype case-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype case-id-list () '(trivial-types:proper-list case-id))
 (common-lisp:defun |make-case-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list case-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition case-id-not-found
     (support-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       case-id-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'case-id-not-found 'case-id-not-found-message)))
(common-lisp:progn
 (common-lisp:deftype case-list () '(trivial-types:proper-list case-details))
 (common-lisp:defun |make-case-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list case-details))
   aws-sdk/generator/shape::members))
(common-lisp:deftype case-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass category common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or category-name common-lisp:null)
                         :accessor %category-name :initform common-lisp:nil)
                        (code :initarg :|code| :type
                         (common-lisp:or category-code common-lisp:null)
                         :accessor %category-code :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'category 'make-category))
 (common-lisp:defun make-category
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name code)
   (common-lisp:apply #'common-lisp:make-instance 'category
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input category))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input category))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input category))
   common-lisp:nil))
(common-lisp:deftype category-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype category-list () '(trivial-types:proper-list category))
 (common-lisp:defun |make-category-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list category))
   aws-sdk/generator/shape::members))
(common-lisp:deftype category-name () 'common-lisp:string)
(common-lisp:deftype cc-email-address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cc-email-address-list ()
   '(trivial-types:proper-list cc-email-address))
 (common-lisp:defun |make-cc-email-address-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cc-email-address))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass communication common-lisp:nil
                       ((attachment-set :initarg :|attachmentSet| :type
                         (common-lisp:or attachment-set common-lisp:null)
                         :accessor %communication-attachment-set :initform
                         common-lisp:nil)
                        (time-created :initarg :|timeCreated| :type
                         (common-lisp:or time-created common-lisp:null)
                         :accessor %communication-time-created :initform
                         common-lisp:nil)
                        (submitted-by :initarg :|submittedBy| :type
                         (common-lisp:or submitted-by common-lisp:null)
                         :accessor %communication-submitted-by :initform
                         common-lisp:nil)
                        (body :initarg :|body| :type
                         (common-lisp:or communication-body common-lisp:null)
                         :accessor %communication-body :initform
                         common-lisp:nil)
                        (case-id :initarg :|caseId| :type
                         (common-lisp:or case-id common-lisp:null) :accessor
                         %communication-case-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'communication 'make-communication))
 (common-lisp:defun make-communication
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attachment-set time-created submitted-by
                     body case-id)
   (common-lisp:apply #'common-lisp:make-instance 'communication
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input communication))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input communication))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'case-id))
      (common-lisp:list
       (common-lisp:cons "caseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'submitted-by))
      (common-lisp:list
       (common-lisp:cons "submittedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-created))
      (common-lisp:list
       (common-lisp:cons "timeCreated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-set))
      (common-lisp:list
       (common-lisp:cons "attachmentSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input communication))
   common-lisp:nil))
(common-lisp:deftype communication-body () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype communication-list ()
   '(trivial-types:proper-list communication))
 (common-lisp:defun |make-communication-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list communication))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass create-case-request common-lisp:nil
                       ((attachment-set-id :initarg :|attachmentSetId| :type
                         (common-lisp:or attachment-set-id common-lisp:null)
                         :accessor %create-case-request-attachment-set-id
                         :initform common-lisp:nil)
                        (issue-type :initarg :|issueType| :type
                         (common-lisp:or issue-type common-lisp:null) :accessor
                         %create-case-request-issue-type :initform
                         common-lisp:nil)
                        (language :initarg :|language| :type
                         (common-lisp:or language common-lisp:null) :accessor
                         %create-case-request-language :initform
                         common-lisp:nil)
                        (cc-email-addresses :initarg :|ccEmailAddresses| :type
                         (common-lisp:or cc-email-address-list
                                         common-lisp:null)
                         :accessor %create-case-request-cc-email-addresses
                         :initform common-lisp:nil)
                        (communication-body :initarg :|communicationBody| :type
                         (common-lisp:or communication-body common-lisp:null)
                         :accessor %create-case-request-communication-body
                         :initform
                         (common-lisp:error ":communicationbody is required"))
                        (category-code :initarg :|categoryCode| :type
                         (common-lisp:or category-code common-lisp:null)
                         :accessor %create-case-request-category-code :initform
                         common-lisp:nil)
                        (severity-code :initarg :|severityCode| :type
                         (common-lisp:or severity-code common-lisp:null)
                         :accessor %create-case-request-severity-code :initform
                         common-lisp:nil)
                        (service-code :initarg :|serviceCode| :type
                         (common-lisp:or service-code common-lisp:null)
                         :accessor %create-case-request-service-code :initform
                         common-lisp:nil)
                        (subject :initarg :|subject| :type
                         (common-lisp:or subject common-lisp:null) :accessor
                         %create-case-request-subject :initform
                         (common-lisp:error ":subject is required"))))
 (common-lisp:export
  (common-lisp:list 'create-case-request 'make-create-case-request))
 (common-lisp:defun make-create-case-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attachment-set-id issue-type language
                     cc-email-addresses communication-body category-code
                     severity-code service-code subject)
   (common-lisp:apply #'common-lisp:make-instance 'create-case-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-case-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-case-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-code))
      (common-lisp:list
       (common-lisp:cons "serviceCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-code))
      (common-lisp:list
       (common-lisp:cons "severityCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category-code))
      (common-lisp:list
       (common-lisp:cons "categoryCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'communication-body))
      (common-lisp:list
       (common-lisp:cons "communicationBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cc-email-addresses))
      (common-lisp:list
       (common-lisp:cons "ccEmailAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issue-type))
      (common-lisp:list
       (common-lisp:cons "issueType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-set-id))
      (common-lisp:list
       (common-lisp:cons "attachmentSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-case-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-case-response common-lisp:nil
                       ((case-id :initarg :|caseId| :type
                         (common-lisp:or case-id common-lisp:null) :accessor
                         %create-case-response-case-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-case-response 'make-create-case-response))
 (common-lisp:defun make-create-case-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key case-id)
   (common-lisp:apply #'common-lisp:make-instance 'create-case-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-case-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-case-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'case-id))
      (common-lisp:list
       (common-lisp:cons "caseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-case-response))
   common-lisp:nil))
(common-lisp:deftype data ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:define-condition describe-attachment-limit-exceeded
     (support-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       describe-attachment-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'describe-attachment-limit-exceeded
                    'describe-attachment-limit-exceeded-message)))
(common-lisp:progn
 (common-lisp:defclass describe-attachment-request common-lisp:nil
                       ((attachment-id :initarg :|attachmentId| :type
                         (common-lisp:or attachment-id common-lisp:null)
                         :accessor %describe-attachment-request-attachment-id
                         :initform
                         (common-lisp:error ":attachmentid is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-attachment-request
                    'make-describe-attachment-request))
 (common-lisp:defun make-describe-attachment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attachment-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-attachment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-attachment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-attachment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-id))
      (common-lisp:list
       (common-lisp:cons "attachmentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-attachment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-attachment-response common-lisp:nil
                       ((attachment :initarg :|attachment| :type
                         (common-lisp:or attachment common-lisp:null) :accessor
                         %describe-attachment-response-attachment :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-attachment-response
                    'make-describe-attachment-response))
 (common-lisp:defun make-describe-attachment-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attachment)
   (common-lisp:apply #'common-lisp:make-instance 'describe-attachment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-attachment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-attachment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment))
      (common-lisp:list
       (common-lisp:cons "attachment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-attachment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cases-request common-lisp:nil
                       ((include-communications :initarg
                         :|includeCommunications| :type
                         (common-lisp:or include-communications
                                         common-lisp:null)
                         :accessor
                         %describe-cases-request-include-communications
                         :initform common-lisp:nil)
                        (language :initarg :|language| :type
                         (common-lisp:or language common-lisp:null) :accessor
                         %describe-cases-request-language :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %describe-cases-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-cases-request-next-token :initform
                         common-lisp:nil)
                        (include-resolved-cases :initarg
                         :|includeResolvedCases| :type
                         (common-lisp:or include-resolved-cases
                                         common-lisp:null)
                         :accessor
                         %describe-cases-request-include-resolved-cases
                         :initform common-lisp:nil)
                        (before-time :initarg :|beforeTime| :type
                         (common-lisp:or before-time common-lisp:null)
                         :accessor %describe-cases-request-before-time
                         :initform common-lisp:nil)
                        (after-time :initarg :|afterTime| :type
                         (common-lisp:or after-time common-lisp:null) :accessor
                         %describe-cases-request-after-time :initform
                         common-lisp:nil)
                        (display-id :initarg :|displayId| :type
                         (common-lisp:or display-id common-lisp:null) :accessor
                         %describe-cases-request-display-id :initform
                         common-lisp:nil)
                        (case-id-list :initarg :|caseIdList| :type
                         (common-lisp:or case-id-list common-lisp:null)
                         :accessor %describe-cases-request-case-id-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-cases-request 'make-describe-cases-request))
 (common-lisp:defun make-describe-cases-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key include-communications language
                     max-results next-token include-resolved-cases before-time
                     after-time display-id case-id-list)
   (common-lisp:apply #'common-lisp:make-instance 'describe-cases-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'case-id-list))
      (common-lisp:list
       (common-lisp:cons "caseIdList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-id))
      (common-lisp:list
       (common-lisp:cons "displayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-time))
      (common-lisp:list
       (common-lisp:cons "afterTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'before-time))
      (common-lisp:list
       (common-lisp:cons "beforeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-resolved-cases))
      (common-lisp:list
       (common-lisp:cons "includeResolvedCases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-communications))
      (common-lisp:list
       (common-lisp:cons "includeCommunications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cases-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-cases-response-next-token :initform
                         common-lisp:nil)
                        (cases :initarg :|cases| :type
                         (common-lisp:or case-list common-lisp:null) :accessor
                         %describe-cases-response-cases :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-cases-response 'make-describe-cases-response))
 (common-lisp:defun make-describe-cases-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token cases)
   (common-lisp:apply #'common-lisp:make-instance 'describe-cases-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cases))
      (common-lisp:list
       (common-lisp:cons "cases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-communications-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %describe-communications-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-communications-request-next-token :initform
                         common-lisp:nil)
                        (after-time :initarg :|afterTime| :type
                         (common-lisp:or after-time common-lisp:null) :accessor
                         %describe-communications-request-after-time :initform
                         common-lisp:nil)
                        (before-time :initarg :|beforeTime| :type
                         (common-lisp:or before-time common-lisp:null)
                         :accessor %describe-communications-request-before-time
                         :initform common-lisp:nil)
                        (case-id :initarg :|caseId| :type
                         (common-lisp:or case-id common-lisp:null) :accessor
                         %describe-communications-request-case-id :initform
                         (common-lisp:error ":caseid is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-communications-request
                    'make-describe-communications-request))
 (common-lisp:defun make-describe-communications-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token after-time
                     before-time case-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-communications-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-communications-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-communications-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'case-id))
      (common-lisp:list
       (common-lisp:cons "caseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'before-time))
      (common-lisp:list
       (common-lisp:cons "beforeTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-time))
      (common-lisp:list
       (common-lisp:cons "afterTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-communications-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-communications-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %describe-communications-response-next-token :initform
                         common-lisp:nil)
                        (communications :initarg :|communications| :type
                         (common-lisp:or communication-list common-lisp:null)
                         :accessor
                         %describe-communications-response-communications
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-communications-response
                    'make-describe-communications-response))
 (common-lisp:defun make-describe-communications-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token communications)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-communications-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-communications-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-communications-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'communications))
      (common-lisp:list
       (common-lisp:cons "communications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-communications-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-services-request common-lisp:nil
                       ((language :initarg :|language| :type
                         (common-lisp:or language common-lisp:null) :accessor
                         %describe-services-request-language :initform
                         common-lisp:nil)
                        (service-code-list :initarg :|serviceCodeList| :type
                         (common-lisp:or service-code-list common-lisp:null)
                         :accessor %describe-services-request-service-code-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-services-request
                    'make-describe-services-request))
 (common-lisp:defun make-describe-services-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key language service-code-list)
   (common-lisp:apply #'common-lisp:make-instance 'describe-services-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-services-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-services-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-code-list))
      (common-lisp:list
       (common-lisp:cons "serviceCodeList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-services-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-services-response common-lisp:nil
                       ((services :initarg :|services| :type
                         (common-lisp:or service-list common-lisp:null)
                         :accessor %describe-services-response-services
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-services-response
                    'make-describe-services-response))
 (common-lisp:defun make-describe-services-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key services)
   (common-lisp:apply #'common-lisp:make-instance 'describe-services-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-services-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-services-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'services))
      (common-lisp:list
       (common-lisp:cons "services"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-services-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-severity-levels-request common-lisp:nil
                       ((language :initarg :|language| :type
                         (common-lisp:or language common-lisp:null) :accessor
                         %describe-severity-levels-request-language :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-severity-levels-request
                    'make-describe-severity-levels-request))
 (common-lisp:defun make-describe-severity-levels-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key language)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-severity-levels-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-severity-levels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-severity-levels-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-severity-levels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-severity-levels-response common-lisp:nil
                       ((severity-levels :initarg :|severityLevels| :type
                         (common-lisp:or severity-levels-list common-lisp:null)
                         :accessor
                         %describe-severity-levels-response-severity-levels
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-severity-levels-response
                    'make-describe-severity-levels-response))
 (common-lisp:defun make-describe-severity-levels-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key severity-levels)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-severity-levels-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-severity-levels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-severity-levels-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity-levels))
      (common-lisp:list
       (common-lisp:cons "severityLevels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-severity-levels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-trusted-advisor-check-refresh-statuses-request
                       common-lisp:nil
                       ((check-ids :initarg :|checkIds| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %describe-trusted-advisor-check-refresh-statuses-request-check-ids
                         :initform
                         (common-lisp:error ":checkids is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-trusted-advisor-check-refresh-statuses-request
                    'make-describe-trusted-advisor-check-refresh-statuses-request))
 (common-lisp:defun make-describe-trusted-advisor-check-refresh-statuses-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key check-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-trusted-advisor-check-refresh-statuses-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusted-advisor-check-refresh-statuses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusted-advisor-check-refresh-statuses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-ids))
      (common-lisp:list
       (common-lisp:cons "checkIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusted-advisor-check-refresh-statuses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-trusted-advisor-check-refresh-statuses-response
                       common-lisp:nil
                       ((statuses :initarg :|statuses| :type
                         (common-lisp:or
                          trusted-advisor-check-refresh-status-list
                          common-lisp:null)
                         :accessor
                         %describe-trusted-advisor-check-refresh-statuses-response-statuses
                         :initform
                         (common-lisp:error ":statuses is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-trusted-advisor-check-refresh-statuses-response
                    'make-describe-trusted-advisor-check-refresh-statuses-response))
 (common-lisp:defun make-describe-trusted-advisor-check-refresh-statuses-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key statuses)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-trusted-advisor-check-refresh-statuses-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusted-advisor-check-refresh-statuses-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusted-advisor-check-refresh-statuses-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statuses))
      (common-lisp:list
       (common-lisp:cons "statuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusted-advisor-check-refresh-statuses-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-trusted-advisor-check-result-request
                       common-lisp:nil
                       ((language :initarg :|language| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-trusted-advisor-check-result-request-language
                         :initform common-lisp:nil)
                        (check-id :initarg :|checkId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-trusted-advisor-check-result-request-check-id
                         :initform
                         (common-lisp:error ":checkid is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-trusted-advisor-check-result-request
                    'make-describe-trusted-advisor-check-result-request))
 (common-lisp:defun make-describe-trusted-advisor-check-result-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key language check-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-trusted-advisor-check-result-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusted-advisor-check-result-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusted-advisor-check-result-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-id))
      (common-lisp:list
       (common-lisp:cons "checkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusted-advisor-check-result-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-trusted-advisor-check-result-response
                       common-lisp:nil
                       ((result :initarg :|result| :type
                         (common-lisp:or trusted-advisor-check-result
                                         common-lisp:null)
                         :accessor
                         %describe-trusted-advisor-check-result-response-result
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-trusted-advisor-check-result-response
                    'make-describe-trusted-advisor-check-result-response))
 (common-lisp:defun make-describe-trusted-advisor-check-result-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key result)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-trusted-advisor-check-result-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusted-advisor-check-result-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusted-advisor-check-result-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusted-advisor-check-result-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-trusted-advisor-check-summaries-request
                       common-lisp:nil
                       ((check-ids :initarg :|checkIds| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %describe-trusted-advisor-check-summaries-request-check-ids
                         :initform
                         (common-lisp:error ":checkids is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-trusted-advisor-check-summaries-request
                    'make-describe-trusted-advisor-check-summaries-request))
 (common-lisp:defun make-describe-trusted-advisor-check-summaries-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key check-ids)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-trusted-advisor-check-summaries-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusted-advisor-check-summaries-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusted-advisor-check-summaries-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-ids))
      (common-lisp:list
       (common-lisp:cons "checkIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusted-advisor-check-summaries-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-trusted-advisor-check-summaries-response
                       common-lisp:nil
                       ((summaries :initarg :|summaries| :type
                         (common-lisp:or trusted-advisor-check-summary-list
                                         common-lisp:null)
                         :accessor
                         %describe-trusted-advisor-check-summaries-response-summaries
                         :initform
                         (common-lisp:error ":summaries is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-trusted-advisor-check-summaries-response
                    'make-describe-trusted-advisor-check-summaries-response))
 (common-lisp:defun make-describe-trusted-advisor-check-summaries-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key summaries)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-trusted-advisor-check-summaries-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusted-advisor-check-summaries-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusted-advisor-check-summaries-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summaries))
      (common-lisp:list
       (common-lisp:cons "summaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusted-advisor-check-summaries-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-trusted-advisor-checks-request common-lisp:nil
                       ((language :initarg :|language| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-trusted-advisor-checks-request-language
                         :initform
                         (common-lisp:error ":language is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-trusted-advisor-checks-request
                    'make-describe-trusted-advisor-checks-request))
 (common-lisp:defun make-describe-trusted-advisor-checks-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key language)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-trusted-advisor-checks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusted-advisor-checks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusted-advisor-checks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusted-advisor-checks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-trusted-advisor-checks-response common-lisp:nil
                       ((checks :initarg :|checks| :type
                         (common-lisp:or trusted-advisor-check-list
                                         common-lisp:null)
                         :accessor
                         %describe-trusted-advisor-checks-response-checks
                         :initform (common-lisp:error ":checks is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-trusted-advisor-checks-response
                    'make-describe-trusted-advisor-checks-response))
 (common-lisp:defun make-describe-trusted-advisor-checks-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key checks)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-trusted-advisor-checks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusted-advisor-checks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusted-advisor-checks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checks))
      (common-lisp:list
       (common-lisp:cons "checks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-trusted-advisor-checks-response))
   common-lisp:nil))
(common-lisp:deftype display-id () 'common-lisp:string)
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype expiry-time () 'common-lisp:string)
(common-lisp:deftype file-name () 'common-lisp:string)
(common-lisp:deftype include-communications () 'common-lisp:boolean)
(common-lisp:deftype include-resolved-cases () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition internal-server-error
     (support-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-server-error-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-error 'internal-server-error-message)))
(common-lisp:deftype issue-type () 'common-lisp:string)
(common-lisp:deftype language () 'common-lisp:string)
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass recent-case-communications common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %recent-case-communications-next-token :initform
                         common-lisp:nil)
                        (communications :initarg :|communications| :type
                         (common-lisp:or communication-list common-lisp:null)
                         :accessor %recent-case-communications-communications
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'recent-case-communications
                    'make-recent-case-communications))
 (common-lisp:defun make-recent-case-communications
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token communications)
   (common-lisp:apply #'common-lisp:make-instance 'recent-case-communications
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recent-case-communications))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recent-case-communications))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'communications))
      (common-lisp:list
       (common-lisp:cons "communications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recent-case-communications))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass refresh-trusted-advisor-check-request common-lisp:nil
                       ((check-id :initarg :|checkId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %refresh-trusted-advisor-check-request-check-id
                         :initform
                         (common-lisp:error ":checkid is required"))))
 (common-lisp:export
  (common-lisp:list 'refresh-trusted-advisor-check-request
                    'make-refresh-trusted-advisor-check-request))
 (common-lisp:defun make-refresh-trusted-advisor-check-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key check-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'refresh-trusted-advisor-check-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          refresh-trusted-advisor-check-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          refresh-trusted-advisor-check-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-id))
      (common-lisp:list
       (common-lisp:cons "checkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          refresh-trusted-advisor-check-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass refresh-trusted-advisor-check-response common-lisp:nil
                       ((status :initarg :|status| :type
                         (common-lisp:or trusted-advisor-check-refresh-status
                                         common-lisp:null)
                         :accessor
                         %refresh-trusted-advisor-check-response-status
                         :initform (common-lisp:error ":status is required"))))
 (common-lisp:export
  (common-lisp:list 'refresh-trusted-advisor-check-response
                    'make-refresh-trusted-advisor-check-response))
 (common-lisp:defun make-refresh-trusted-advisor-check-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance
                      'refresh-trusted-advisor-check-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          refresh-trusted-advisor-check-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          refresh-trusted-advisor-check-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          refresh-trusted-advisor-check-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resolve-case-request common-lisp:nil
                       ((case-id :initarg :|caseId| :type
                         (common-lisp:or case-id common-lisp:null) :accessor
                         %resolve-case-request-case-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resolve-case-request 'make-resolve-case-request))
 (common-lisp:defun make-resolve-case-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key case-id)
   (common-lisp:apply #'common-lisp:make-instance 'resolve-case-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resolve-case-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resolve-case-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'case-id))
      (common-lisp:list
       (common-lisp:cons "caseId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resolve-case-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resolve-case-response common-lisp:nil
                       ((final-case-status :initarg :|finalCaseStatus| :type
                         (common-lisp:or case-status common-lisp:null)
                         :accessor %resolve-case-response-final-case-status
                         :initform common-lisp:nil)
                        (initial-case-status :initarg :|initialCaseStatus|
                         :type (common-lisp:or case-status common-lisp:null)
                         :accessor %resolve-case-response-initial-case-status
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resolve-case-response 'make-resolve-case-response))
 (common-lisp:defun make-resolve-case-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key final-case-status initial-case-status)
   (common-lisp:apply #'common-lisp:make-instance 'resolve-case-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resolve-case-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resolve-case-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-case-status))
      (common-lisp:list
       (common-lisp:cons "initialCaseStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'final-case-status))
      (common-lisp:list
       (common-lisp:cons "finalCaseStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resolve-case-response))
   common-lisp:nil))
(common-lisp:deftype result () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass service common-lisp:nil
                       ((categories :initarg :|categories| :type
                         (common-lisp:or category-list common-lisp:null)
                         :accessor %service-categories :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor %service-name :initform common-lisp:nil)
                        (code :initarg :|code| :type
                         (common-lisp:or service-code common-lisp:null)
                         :accessor %service-code :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'service 'make-service))
 (common-lisp:defun make-service
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key categories name code)
   (common-lisp:apply #'common-lisp:make-instance 'service
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'categories))
      (common-lisp:list
       (common-lisp:cons "categories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service))
   common-lisp:nil))
(common-lisp:deftype service-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype service-code-list ()
   '(trivial-types:proper-list service-code))
 (common-lisp:defun |make-service-code-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-code))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype service-list () '(trivial-types:proper-list service))
 (common-lisp:defun |make-service-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service))
   aws-sdk/generator/shape::members))
(common-lisp:deftype service-name () 'common-lisp:string)
(common-lisp:deftype severity-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass severity-level common-lisp:nil
                       ((name :initarg :|name| :type
                         (common-lisp:or severity-level-name common-lisp:null)
                         :accessor %severity-level-name :initform
                         common-lisp:nil)
                        (code :initarg :|code| :type
                         (common-lisp:or severity-level-code common-lisp:null)
                         :accessor %severity-level-code :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'severity-level 'make-severity-level))
 (common-lisp:defun make-severity-level
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name code)
   (common-lisp:apply #'common-lisp:make-instance 'severity-level
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input severity-level))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input severity-level))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input severity-level))
   common-lisp:nil))
(common-lisp:deftype severity-level-code () 'common-lisp:string)
(common-lisp:deftype severity-level-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype severity-levels-list ()
   '(trivial-types:proper-list severity-level))
 (common-lisp:defun |make-severity-levels-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list severity-level))
   aws-sdk/generator/shape::members))
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subject () 'common-lisp:string)
(common-lisp:deftype submitted-by () 'common-lisp:string)
(common-lisp:deftype time-created () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass trusted-advisor-category-specific-summary
                       common-lisp:nil
                       ((cost-optimizing :initarg :|costOptimizing| :type
                         (common-lisp:or
                          trusted-advisor-cost-optimizing-summary
                          common-lisp:null)
                         :accessor
                         %trusted-advisor-category-specific-summary-cost-optimizing
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'trusted-advisor-category-specific-summary
                    'make-trusted-advisor-category-specific-summary))
 (common-lisp:defun make-trusted-advisor-category-specific-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cost-optimizing)
   (common-lisp:apply #'common-lisp:make-instance
                      'trusted-advisor-category-specific-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          trusted-advisor-category-specific-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          trusted-advisor-category-specific-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-optimizing))
      (common-lisp:list
       (common-lisp:cons "costOptimizing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          trusted-advisor-category-specific-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass trusted-advisor-check-description common-lisp:nil
                       ((metadata :initarg :|metadata| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %trusted-advisor-check-description-metadata
                         :initform (common-lisp:error ":metadata is required"))
                        (category :initarg :|category| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %trusted-advisor-check-description-category :initform
                         (common-lisp:error ":category is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %trusted-advisor-check-description-description
                         :initform
                         (common-lisp:error ":description is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %trusted-advisor-check-description-name :initform
                         (common-lisp:error ":name is required"))
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %trusted-advisor-check-description-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'trusted-advisor-check-description
                    'make-trusted-advisor-check-description))
 (common-lisp:defun make-trusted-advisor-check-description
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metadata category description name id)
   (common-lisp:apply #'common-lisp:make-instance
                      'trusted-advisor-check-description
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          trusted-advisor-check-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          trusted-advisor-check-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'category))
      (common-lisp:list
       (common-lisp:cons "category"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          trusted-advisor-check-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype trusted-advisor-check-list ()
   '(trivial-types:proper-list trusted-advisor-check-description))
 (common-lisp:defun |make-trusted-advisor-check-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            trusted-advisor-check-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass trusted-advisor-check-refresh-status common-lisp:nil
                       ((millis-until-next-refreshable :initarg
                         :|millisUntilNextRefreshable| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %trusted-advisor-check-refresh-status-millis-until-next-refreshable
                         :initform
                         (common-lisp:error
                          ":millisuntilnextrefreshable is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %trusted-advisor-check-refresh-status-status :initform
                         (common-lisp:error ":status is required"))
                        (check-id :initarg :|checkId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %trusted-advisor-check-refresh-status-check-id
                         :initform
                         (common-lisp:error ":checkid is required"))))
 (common-lisp:export
  (common-lisp:list 'trusted-advisor-check-refresh-status
                    'make-trusted-advisor-check-refresh-status))
 (common-lisp:defun make-trusted-advisor-check-refresh-status
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key millis-until-next-refreshable status
                     check-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'trusted-advisor-check-refresh-status
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          trusted-advisor-check-refresh-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          trusted-advisor-check-refresh-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-id))
      (common-lisp:list
       (common-lisp:cons "checkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'millis-until-next-refreshable))
      (common-lisp:list
       (common-lisp:cons "millisUntilNextRefreshable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          trusted-advisor-check-refresh-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype trusted-advisor-check-refresh-status-list ()
   '(trivial-types:proper-list trusted-advisor-check-refresh-status))
 (common-lisp:defun |make-trusted-advisor-check-refresh-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            trusted-advisor-check-refresh-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass trusted-advisor-check-result common-lisp:nil
                       ((flagged-resources :initarg :|flaggedResources| :type
                         (common-lisp:or trusted-advisor-resource-detail-list
                                         common-lisp:null)
                         :accessor
                         %trusted-advisor-check-result-flagged-resources
                         :initform
                         (common-lisp:error ":flaggedresources is required"))
                        (category-specific-summary :initarg
                         :|categorySpecificSummary| :type
                         (common-lisp:or
                          trusted-advisor-category-specific-summary
                          common-lisp:null)
                         :accessor
                         %trusted-advisor-check-result-category-specific-summary
                         :initform
                         (common-lisp:error
                          ":categoryspecificsummary is required"))
                        (resources-summary :initarg :|resourcesSummary| :type
                         (common-lisp:or trusted-advisor-resources-summary
                                         common-lisp:null)
                         :accessor
                         %trusted-advisor-check-result-resources-summary
                         :initform
                         (common-lisp:error ":resourcessummary is required"))
                        (status :initarg :|status| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %trusted-advisor-check-result-status :initform
                         (common-lisp:error ":status is required"))
                        (timestamp :initarg common-lisp:string :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %trusted-advisor-check-result-timestamp :initform
                         (common-lisp:error ":string is required"))
                        (check-id :initarg :|checkId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %trusted-advisor-check-result-check-id :initform
                         (common-lisp:error ":checkid is required"))))
 (common-lisp:export
  (common-lisp:list 'trusted-advisor-check-result
                    'make-trusted-advisor-check-result))
 (common-lisp:defun make-trusted-advisor-check-result
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key flagged-resources
                     category-specific-summary resources-summary status
                     timestamp check-id)
   (common-lisp:apply #'common-lisp:make-instance 'trusted-advisor-check-result
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          trusted-advisor-check-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          trusted-advisor-check-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-id))
      (common-lisp:list
       (common-lisp:cons "checkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources-summary))
      (common-lisp:list
       (common-lisp:cons "resourcesSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-specific-summary))
      (common-lisp:list
       (common-lisp:cons "categorySpecificSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flagged-resources))
      (common-lisp:list
       (common-lisp:cons "flaggedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          trusted-advisor-check-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass trusted-advisor-check-summary common-lisp:nil
                       ((category-specific-summary :initarg
                         :|categorySpecificSummary| :type
                         (common-lisp:or
                          trusted-advisor-category-specific-summary
                          common-lisp:null)
                         :accessor
                         %trusted-advisor-check-summary-category-specific-summary
                         :initform
                         (common-lisp:error
                          ":categoryspecificsummary is required"))
                        (resources-summary :initarg :|resourcesSummary| :type
                         (common-lisp:or trusted-advisor-resources-summary
                                         common-lisp:null)
                         :accessor
                         %trusted-advisor-check-summary-resources-summary
                         :initform
                         (common-lisp:error ":resourcessummary is required"))
                        (has-flagged-resources :initarg :|hasFlaggedResources|
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %trusted-advisor-check-summary-has-flagged-resources
                         :initform common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %trusted-advisor-check-summary-status :initform
                         (common-lisp:error ":status is required"))
                        (timestamp :initarg common-lisp:string :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %trusted-advisor-check-summary-timestamp :initform
                         (common-lisp:error ":string is required"))
                        (check-id :initarg :|checkId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %trusted-advisor-check-summary-check-id :initform
                         (common-lisp:error ":checkid is required"))))
 (common-lisp:export
  (common-lisp:list 'trusted-advisor-check-summary
                    'make-trusted-advisor-check-summary))
 (common-lisp:defun make-trusted-advisor-check-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key category-specific-summary
                     resources-summary has-flagged-resources status timestamp
                     check-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'trusted-advisor-check-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          trusted-advisor-check-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          trusted-advisor-check-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-id))
      (common-lisp:list
       (common-lisp:cons "checkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'has-flagged-resources))
      (common-lisp:list
       (common-lisp:cons "hasFlaggedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources-summary))
      (common-lisp:list
       (common-lisp:cons "resourcesSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'category-specific-summary))
      (common-lisp:list
       (common-lisp:cons "categorySpecificSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          trusted-advisor-check-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype trusted-advisor-check-summary-list ()
   '(trivial-types:proper-list trusted-advisor-check-summary))
 (common-lisp:defun |make-trusted-advisor-check-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            trusted-advisor-check-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass trusted-advisor-cost-optimizing-summary common-lisp:nil
                       ((estimated-percent-monthly-savings :initarg
                         :|estimatedPercentMonthlySavings| :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %trusted-advisor-cost-optimizing-summary-estimated-percent-monthly-savings
                         :initform
                         (common-lisp:error
                          ":estimatedpercentmonthlysavings is required"))
                        (estimated-monthly-savings :initarg
                         :|estimatedMonthlySavings| :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %trusted-advisor-cost-optimizing-summary-estimated-monthly-savings
                         :initform
                         (common-lisp:error
                          ":estimatedmonthlysavings is required"))))
 (common-lisp:export
  (common-lisp:list 'trusted-advisor-cost-optimizing-summary
                    'make-trusted-advisor-cost-optimizing-summary))
 (common-lisp:defun make-trusted-advisor-cost-optimizing-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key estimated-percent-monthly-savings
                     estimated-monthly-savings)
   (common-lisp:apply #'common-lisp:make-instance
                      'trusted-advisor-cost-optimizing-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          trusted-advisor-cost-optimizing-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          trusted-advisor-cost-optimizing-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-monthly-savings))
      (common-lisp:list
       (common-lisp:cons "estimatedMonthlySavings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'estimated-percent-monthly-savings))
      (common-lisp:list
       (common-lisp:cons "estimatedPercentMonthlySavings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          trusted-advisor-cost-optimizing-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass trusted-advisor-resource-detail common-lisp:nil
                       ((metadata :initarg :|metadata| :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %trusted-advisor-resource-detail-metadata
                         :initform (common-lisp:error ":metadata is required"))
                        (is-suppressed :initarg :|isSuppressed| :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %trusted-advisor-resource-detail-is-suppressed
                         :initform common-lisp:nil)
                        (resource-id :initarg :|resourceId| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %trusted-advisor-resource-detail-resource-id :initform
                         (common-lisp:error ":resourceid is required"))
                        (region :initarg :|region| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %trusted-advisor-resource-detail-region :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %trusted-advisor-resource-detail-status :initform
                         (common-lisp:error ":status is required"))))
 (common-lisp:export
  (common-lisp:list 'trusted-advisor-resource-detail
                    'make-trusted-advisor-resource-detail))
 (common-lisp:defun make-trusted-advisor-resource-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metadata is-suppressed resource-id region
                     status)
   (common-lisp:apply #'common-lisp:make-instance
                      'trusted-advisor-resource-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          trusted-advisor-resource-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          trusted-advisor-resource-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "resourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-suppressed))
      (common-lisp:list
       (common-lisp:cons "isSuppressed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          trusted-advisor-resource-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype trusted-advisor-resource-detail-list ()
   '(trivial-types:proper-list trusted-advisor-resource-detail))
 (common-lisp:defun |make-trusted-advisor-resource-detail-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            trusted-advisor-resource-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass trusted-advisor-resources-summary common-lisp:nil
                       ((resources-suppressed :initarg :|resourcesSuppressed|
                         :type (common-lisp:or long common-lisp:null) :accessor
                         %trusted-advisor-resources-summary-resources-suppressed
                         :initform
                         (common-lisp:error
                          ":resourcessuppressed is required"))
                        (resources-ignored :initarg :|resourcesIgnored| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %trusted-advisor-resources-summary-resources-ignored
                         :initform
                         (common-lisp:error ":resourcesignored is required"))
                        (resources-flagged :initarg :|resourcesFlagged| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %trusted-advisor-resources-summary-resources-flagged
                         :initform
                         (common-lisp:error ":resourcesflagged is required"))
                        (resources-processed :initarg :|resourcesProcessed|
                         :type (common-lisp:or long common-lisp:null) :accessor
                         %trusted-advisor-resources-summary-resources-processed
                         :initform
                         (common-lisp:error
                          ":resourcesprocessed is required"))))
 (common-lisp:export
  (common-lisp:list 'trusted-advisor-resources-summary
                    'make-trusted-advisor-resources-summary))
 (common-lisp:defun make-trusted-advisor-resources-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resources-suppressed resources-ignored
                     resources-flagged resources-processed)
   (common-lisp:apply #'common-lisp:make-instance
                      'trusted-advisor-resources-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          trusted-advisor-resources-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          trusted-advisor-resources-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources-processed))
      (common-lisp:list
       (common-lisp:cons "resourcesProcessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources-flagged))
      (common-lisp:list
       (common-lisp:cons "resourcesFlagged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources-ignored))
      (common-lisp:list
       (common-lisp:cons "resourcesIgnored"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resources-suppressed))
      (common-lisp:list
       (common-lisp:cons "resourcesSuppressed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          trusted-advisor-resources-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun add-attachments-to-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attachment-set-id attachments)
   (common-lisp:declare (common-lisp:ignorable attachment-set-id attachments))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-attachments-to-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'support-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AddAttachmentsToSet"
                                                        "2013-04-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-attachments-to-set))
(common-lisp:progn
 (common-lisp:defun add-communication-to-case
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key case-id communication-body
                     cc-email-addresses attachment-set-id)
   (common-lisp:declare
    (common-lisp:ignorable case-id communication-body cc-email-addresses
     attachment-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-communication-to-case-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'support-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AddCommunicationToCase"
                                                        "2013-04-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-communication-to-case))
(common-lisp:progn
 (common-lisp:defun create-case
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key subject service-code severity-code
                     category-code communication-body cc-email-addresses
                     language issue-type attachment-set-id)
   (common-lisp:declare
    (common-lisp:ignorable subject service-code severity-code category-code
     communication-body cc-email-addresses language issue-type
     attachment-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-case-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'support-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateCase"
                                                        "2013-04-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-case))
(common-lisp:progn
 (common-lisp:defun describe-attachment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key attachment-id)
   (common-lisp:declare (common-lisp:ignorable attachment-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-attachment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'support-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeAttachment"
                                                        "2013-04-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-attachment))
(common-lisp:progn
 (common-lisp:defun describe-cases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key case-id-list display-id after-time
                     before-time include-resolved-cases next-token max-results
                     language include-communications)
   (common-lisp:declare
    (common-lisp:ignorable case-id-list display-id after-time before-time
     include-resolved-cases next-token max-results language
     include-communications))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-cases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'support-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeCases"
                                                        "2013-04-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-cases))
(common-lisp:progn
 (common-lisp:defun describe-communications
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key case-id before-time after-time next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable case-id before-time after-time next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-communications-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'support-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeCommunications"
                                                        "2013-04-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-communications))
(common-lisp:progn
 (common-lisp:defun describe-services
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-code-list language)
   (common-lisp:declare (common-lisp:ignorable service-code-list language))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-services-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'support-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeServices"
                                                        "2013-04-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-services))
(common-lisp:progn
 (common-lisp:defun describe-severity-levels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key language)
   (common-lisp:declare (common-lisp:ignorable language))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-severity-levels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'support-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeSeverityLevels"
                                                        "2013-04-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-severity-levels))
(common-lisp:progn
 (common-lisp:defun describe-trusted-advisor-check-refresh-statuses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key check-ids)
   (common-lisp:declare (common-lisp:ignorable check-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-trusted-advisor-check-refresh-statuses-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'support-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeTrustedAdvisorCheckRefreshStatuses"
                                                        "2013-04-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-trusted-advisor-check-refresh-statuses))
(common-lisp:progn
 (common-lisp:defun describe-trusted-advisor-check-result
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key check-id language)
   (common-lisp:declare (common-lisp:ignorable check-id language))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-trusted-advisor-check-result-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'support-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeTrustedAdvisorCheckResult"
                                                        "2013-04-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-trusted-advisor-check-result))
(common-lisp:progn
 (common-lisp:defun describe-trusted-advisor-check-summaries
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key check-ids)
   (common-lisp:declare (common-lisp:ignorable check-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-trusted-advisor-check-summaries-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'support-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeTrustedAdvisorCheckSummaries"
                                                        "2013-04-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-trusted-advisor-check-summaries))
(common-lisp:progn
 (common-lisp:defun describe-trusted-advisor-checks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key language)
   (common-lisp:declare (common-lisp:ignorable language))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-trusted-advisor-checks-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'support-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeTrustedAdvisorChecks"
                                                        "2013-04-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-trusted-advisor-checks))
(common-lisp:progn
 (common-lisp:defun refresh-trusted-advisor-check
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key check-id)
   (common-lisp:declare (common-lisp:ignorable check-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-refresh-trusted-advisor-check-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'support-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RefreshTrustedAdvisorCheck"
                                                        "2013-04-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'refresh-trusted-advisor-check))
(common-lisp:progn
 (common-lisp:defun resolve-case
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key case-id)
   (common-lisp:declare (common-lisp:ignorable case-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-resolve-case-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'support-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ResolveCase"
                                                        "2013-04-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'resolve-case))
