;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/waf/api
  (:use)
  (:nicknames #:aws/waf)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/waf/api)
(common-lisp:progn
 (common-lisp:defclass waf-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "waf"))
 (common-lisp:export 'waf-request))
(common-lisp:progn
 (common-lisp:define-condition waf-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'waf-error))
(common-lisp:defvar *error-map*
  '(("WAFBadRequestException" . wafbad-request-exception)
    ("WAFDisallowedNameException" . wafdisallowed-name-exception)
    ("WAFEntityMigrationException" . wafentity-migration-exception)
    ("WAFInternalErrorException" . wafinternal-error-exception)
    ("WAFInvalidAccountException" . wafinvalid-account-exception)
    ("WAFInvalidOperationException" . wafinvalid-operation-exception)
    ("WAFInvalidParameterException" . wafinvalid-parameter-exception)
    ("WAFInvalidPermissionPolicyException"
     . wafinvalid-permission-policy-exception)
    ("WAFInvalidRegexPatternException" . wafinvalid-regex-pattern-exception)
    ("WAFLimitsExceededException" . waflimits-exceeded-exception)
    ("WAFNonEmptyEntityException" . wafnon-empty-entity-exception)
    ("WAFNonexistentContainerException" . wafnonexistent-container-exception)
    ("WAFNonexistentItemException" . wafnonexistent-item-exception)
    ("WAFReferencedItemException" . wafreferenced-item-exception)
    ("WAFServiceLinkedRoleErrorException"
     . wafservice-linked-role-error-exception)
    ("WAFStaleDataException" . wafstale-data-exception)
    ("WAFSubscriptionNotFoundException" . wafsubscription-not-found-exception)
    ("WAFTagOperationException" . waftag-operation-exception)
    ("WAFTagOperationInternalErrorException"
     . waftag-operation-internal-error-exception)))
(common-lisp:deftype action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (activated-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-activated-rule-"))
   (priority (common-lisp:error ":priority is required") :type
    (common-lisp:or rule-priority common-lisp:null))
   (rule-id (common-lisp:error ":rule-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (action common-lisp:nil :type (common-lisp:or waf-action common-lisp:null))
   (override-action common-lisp:nil :type
    (common-lisp:or waf-override-action common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or waf-rule-type common-lisp:null))
   (excluded-rules common-lisp:nil :type
    (common-lisp:or excluded-rules common-lisp:null)))
 (common-lisp:export (common-lisp:list 'activated-rule 'make-activated-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input activated-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input activated-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'override-action))
      (common-lisp:list
       (common-lisp:cons "OverrideAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded-rules))
      (common-lisp:list
       (common-lisp:cons "ExcludedRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input activated-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype activated-rules ()
   '(trivial-types:proper-list activated-rule))
 (common-lisp:defun |make-activated-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list activated-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (byte-match-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-byte-match-set-"))
   (byte-match-set-id (common-lisp:error ":byte-match-set-id is required")
    :type (common-lisp:or resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (byte-match-tuples (common-lisp:error ":byte-match-tuples is required")
    :type (common-lisp:or byte-match-tuples common-lisp:null)))
 (common-lisp:export (common-lisp:list 'byte-match-set 'make-byte-match-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input byte-match-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input byte-match-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'byte-match-set-id))
      (common-lisp:list
       (common-lisp:cons "ByteMatchSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'byte-match-tuples))
      (common-lisp:list
       (common-lisp:cons "ByteMatchTuples"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input byte-match-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype byte-match-set-summaries ()
   '(trivial-types:proper-list byte-match-set-summary))
 (common-lisp:defun |make-byte-match-set-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list byte-match-set-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (byte-match-set-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-byte-match-set-summary-"))
   (byte-match-set-id (common-lisp:error ":byte-match-set-id is required")
    :type (common-lisp:or resource-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'byte-match-set-summary 'make-byte-match-set-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          byte-match-set-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          byte-match-set-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'byte-match-set-id))
      (common-lisp:list
       (common-lisp:cons "ByteMatchSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          byte-match-set-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (byte-match-set-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-byte-match-set-update-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or change-action common-lisp:null))
   (byte-match-tuple (common-lisp:error ":byte-match-tuple is required") :type
    (common-lisp:or byte-match-tuple common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'byte-match-set-update 'make-byte-match-set-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          byte-match-set-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          byte-match-set-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'byte-match-tuple))
      (common-lisp:list
       (common-lisp:cons "ByteMatchTuple"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          byte-match-set-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype byte-match-set-updates ()
   '(trivial-types:proper-list byte-match-set-update))
 (common-lisp:defun |make-byte-match-set-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list byte-match-set-update))
   aws-sdk/generator/shape::members))
(common-lisp:deftype byte-match-target-string ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defstruct
     (byte-match-tuple (:copier common-lisp:nil)
      (:conc-name "struct-shape-byte-match-tuple-"))
   (field-to-match (common-lisp:error ":field-to-match is required") :type
    (common-lisp:or field-to-match common-lisp:null))
   (target-string (common-lisp:error ":target-string is required") :type
    (common-lisp:or byte-match-target-string common-lisp:null))
   (text-transformation (common-lisp:error ":text-transformation is required")
    :type (common-lisp:or text-transformation common-lisp:null))
   (positional-constraint
    (common-lisp:error ":positional-constraint is required") :type
    (common-lisp:or positional-constraint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'byte-match-tuple 'make-byte-match-tuple))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input byte-match-tuple))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input byte-match-tuple))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-to-match))
      (common-lisp:list
       (common-lisp:cons "FieldToMatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-string))
      (common-lisp:list
       (common-lisp:cons "TargetString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-transformation))
      (common-lisp:list
       (common-lisp:cons "TextTransformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'positional-constraint))
      (common-lisp:list
       (common-lisp:cons "PositionalConstraint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input byte-match-tuple))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype byte-match-tuples ()
   '(trivial-types:proper-list byte-match-tuple))
 (common-lisp:defun |make-byte-match-tuples|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list byte-match-tuple))
   aws-sdk/generator/shape::members))
(common-lisp:deftype change-action () 'common-lisp:string)
(common-lisp:deftype change-token () 'common-lisp:string)
(common-lisp:deftype change-token-status () 'common-lisp:string)
(common-lisp:deftype comparison-operator () 'common-lisp:string)
(common-lisp:deftype country () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-byte-match-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-byte-match-set-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-byte-match-set-request
                    'make-create-byte-match-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-byte-match-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-byte-match-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-byte-match-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-byte-match-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-byte-match-set-response-"))
   (byte-match-set common-lisp:nil :type
    (common-lisp:or byte-match-set common-lisp:null))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-byte-match-set-response
                    'make-create-byte-match-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-byte-match-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-byte-match-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'byte-match-set))
      (common-lisp:list
       (common-lisp:cons "ByteMatchSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-byte-match-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-geo-match-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-geo-match-set-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-geo-match-set-request
                    'make-create-geo-match-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-geo-match-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-geo-match-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-geo-match-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-geo-match-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-geo-match-set-response-"))
   (geo-match-set common-lisp:nil :type
    (common-lisp:or geo-match-set common-lisp:null))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-geo-match-set-response
                    'make-create-geo-match-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-geo-match-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-geo-match-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geo-match-set))
      (common-lisp:list
       (common-lisp:cons "GeoMatchSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-geo-match-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-ipset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-ipset-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-ipset-request 'make-create-ipset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-ipset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-ipset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-ipset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-ipset-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-ipset-response-"))
   (ipset common-lisp:nil :type (common-lisp:or ipset common-lisp:null))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-ipset-response 'make-create-ipset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-ipset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-ipset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipset))
      (common-lisp:list
       (common-lisp:cons "IPSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-ipset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-rate-based-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-rate-based-rule-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (metric-name (common-lisp:error ":metric-name is required") :type
    (common-lisp:or metric-name common-lisp:null))
   (rate-key (common-lisp:error ":rate-key is required") :type
    (common-lisp:or rate-key common-lisp:null))
   (rate-limit (common-lisp:error ":rate-limit is required") :type
    (common-lisp:or rate-limit common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-rate-based-rule-request
                    'make-create-rate-based-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-rate-based-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-rate-based-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-key))
      (common-lisp:list
       (common-lisp:cons "RateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-limit))
      (common-lisp:list
       (common-lisp:cons "RateLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-rate-based-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-rate-based-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-rate-based-rule-response-"))
   (rule common-lisp:nil :type
    (common-lisp:or rate-based-rule common-lisp:null))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-rate-based-rule-response
                    'make-create-rate-based-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-rate-based-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-rate-based-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "Rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-rate-based-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-regex-match-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-regex-match-set-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-regex-match-set-request
                    'make-create-regex-match-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-regex-match-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-regex-match-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-regex-match-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-regex-match-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-regex-match-set-response-"))
   (regex-match-set common-lisp:nil :type
    (common-lisp:or regex-match-set common-lisp:null))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-regex-match-set-response
                    'make-create-regex-match-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-regex-match-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-regex-match-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex-match-set))
      (common-lisp:list
       (common-lisp:cons "RegexMatchSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-regex-match-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-regex-pattern-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-regex-pattern-set-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-regex-pattern-set-request
                    'make-create-regex-pattern-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-regex-pattern-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-regex-pattern-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-regex-pattern-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-regex-pattern-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-regex-pattern-set-response-"))
   (regex-pattern-set common-lisp:nil :type
    (common-lisp:or regex-pattern-set common-lisp:null))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-regex-pattern-set-response
                    'make-create-regex-pattern-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-regex-pattern-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-regex-pattern-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex-pattern-set))
      (common-lisp:list
       (common-lisp:cons "RegexPatternSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-regex-pattern-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-rule-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-rule-group-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (metric-name (common-lisp:error ":metric-name is required") :type
    (common-lisp:or metric-name common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-rule-group-request
                    'make-create-rule-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-rule-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-rule-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-rule-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-rule-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-rule-group-response-"))
   (rule-group common-lisp:nil :type
    (common-lisp:or rule-group common-lisp:null))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-rule-group-response
                    'make-create-rule-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-rule-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-rule-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-group))
      (common-lisp:list
       (common-lisp:cons "RuleGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-rule-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-rule-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (metric-name (common-lisp:error ":metric-name is required") :type
    (common-lisp:or metric-name common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-rule-request 'make-create-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-rule-response-"))
   (rule common-lisp:nil :type (common-lisp:or rule common-lisp:null))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-rule-response 'make-create-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "Rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-size-constraint-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-size-constraint-set-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-size-constraint-set-request
                    'make-create-size-constraint-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-size-constraint-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-size-constraint-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-size-constraint-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-size-constraint-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-size-constraint-set-response-"))
   (size-constraint-set common-lisp:nil :type
    (common-lisp:or size-constraint-set common-lisp:null))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-size-constraint-set-response
                    'make-create-size-constraint-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-size-constraint-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-size-constraint-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-constraint-set))
      (common-lisp:list
       (common-lisp:cons "SizeConstraintSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-size-constraint-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-sql-injection-match-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-sql-injection-match-set-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-sql-injection-match-set-request
                    'make-create-sql-injection-match-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sql-injection-match-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sql-injection-match-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sql-injection-match-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-sql-injection-match-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-sql-injection-match-set-response-"))
   (sql-injection-match-set common-lisp:nil :type
    (common-lisp:or sql-injection-match-set common-lisp:null))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-sql-injection-match-set-response
                    'make-create-sql-injection-match-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-sql-injection-match-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-sql-injection-match-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sql-injection-match-set))
      (common-lisp:list
       (common-lisp:cons "SqlInjectionMatchSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-sql-injection-match-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-web-aclmigration-stack-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-web-aclmigration-stack-request-"))
   (web-aclid (common-lisp:error ":web-aclid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (s3bucket-name (common-lisp:error ":s3bucket-name is required") :type
    (common-lisp:or s3bucket-name common-lisp:null))
   (ignore-unsupported-type
    (common-lisp:error ":ignore-unsupported-type is required") :type
    (common-lisp:or ignore-unsupported-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-web-aclmigration-stack-request
                    'make-create-web-aclmigration-stack-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-web-aclmigration-stack-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-web-aclmigration-stack-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-aclid))
      (common-lisp:list
       (common-lisp:cons "WebACLId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3bucket-name))
      (common-lisp:list
       (common-lisp:cons "S3BucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ignore-unsupported-type))
      (common-lisp:list
       (common-lisp:cons "IgnoreUnsupportedType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-web-aclmigration-stack-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-web-aclmigration-stack-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-web-aclmigration-stack-response-"))
   (s3object-url (common-lisp:error ":s3object-url is required") :type
    (common-lisp:or s3object-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-web-aclmigration-stack-response
                    'make-create-web-aclmigration-stack-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-web-aclmigration-stack-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-web-aclmigration-stack-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3object-url))
      (common-lisp:list
       (common-lisp:cons "S3ObjectUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-web-aclmigration-stack-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-web-aclrequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-web-aclrequest-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (metric-name (common-lisp:error ":metric-name is required") :type
    (common-lisp:or metric-name common-lisp:null))
   (default-action (common-lisp:error ":default-action is required") :type
    (common-lisp:or waf-action common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-web-aclrequest 'make-create-web-aclrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-web-aclrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-web-aclrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-action))
      (common-lisp:list
       (common-lisp:cons "DefaultAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-web-aclrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-web-aclresponse (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-web-aclresponse-"))
   (web-acl common-lisp:nil :type (common-lisp:or web-acl common-lisp:null))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-web-aclresponse 'make-create-web-aclresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-web-aclresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-web-aclresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-acl))
      (common-lisp:list
       (common-lisp:cons "WebACL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-web-aclresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-xss-match-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-xss-match-set-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-xss-match-set-request
                    'make-create-xss-match-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-xss-match-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-xss-match-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-xss-match-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-xss-match-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-xss-match-set-response-"))
   (xss-match-set common-lisp:nil :type
    (common-lisp:or xss-match-set common-lisp:null))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-xss-match-set-response
                    'make-create-xss-match-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-xss-match-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-xss-match-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xss-match-set))
      (common-lisp:list
       (common-lisp:cons "XssMatchSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-xss-match-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-byte-match-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-byte-match-set-request-"))
   (byte-match-set-id (common-lisp:error ":byte-match-set-id is required")
    :type (common-lisp:or resource-id common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-byte-match-set-request
                    'make-delete-byte-match-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-byte-match-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-byte-match-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'byte-match-set-id))
      (common-lisp:list
       (common-lisp:cons "ByteMatchSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-byte-match-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-byte-match-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-byte-match-set-response-"))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-byte-match-set-response
                    'make-delete-byte-match-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-byte-match-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-byte-match-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-byte-match-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-geo-match-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-geo-match-set-request-"))
   (geo-match-set-id (common-lisp:error ":geo-match-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-geo-match-set-request
                    'make-delete-geo-match-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-geo-match-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-geo-match-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geo-match-set-id))
      (common-lisp:list
       (common-lisp:cons "GeoMatchSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-geo-match-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-geo-match-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-geo-match-set-response-"))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-geo-match-set-response
                    'make-delete-geo-match-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-geo-match-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-geo-match-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-geo-match-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-ipset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-ipset-request-"))
   (ipset-id (common-lisp:error ":ipset-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-ipset-request 'make-delete-ipset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-ipset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-ipset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipset-id))
      (common-lisp:list
       (common-lisp:cons "IPSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-ipset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-ipset-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-ipset-response-"))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-ipset-response 'make-delete-ipset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-ipset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-ipset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-ipset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-logging-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-logging-configuration-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-logging-configuration-request
                    'make-delete-logging-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-logging-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-logging-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-logging-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-logging-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-logging-configuration-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-logging-configuration-response
                    'make-delete-logging-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-logging-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-logging-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-logging-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-permission-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-permission-policy-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-permission-policy-request
                    'make-delete-permission-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-permission-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-permission-policy-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-permission-policy-response
                    'make-delete-permission-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-permission-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-rate-based-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-rate-based-rule-request-"))
   (rule-id (common-lisp:error ":rule-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-rate-based-rule-request
                    'make-delete-rate-based-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-rate-based-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-rate-based-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-rate-based-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-rate-based-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-rate-based-rule-response-"))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-rate-based-rule-response
                    'make-delete-rate-based-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-rate-based-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-rate-based-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-rate-based-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-regex-match-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-regex-match-set-request-"))
   (regex-match-set-id (common-lisp:error ":regex-match-set-id is required")
    :type (common-lisp:or resource-id common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-regex-match-set-request
                    'make-delete-regex-match-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-regex-match-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-regex-match-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex-match-set-id))
      (common-lisp:list
       (common-lisp:cons "RegexMatchSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-regex-match-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-regex-match-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-regex-match-set-response-"))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-regex-match-set-response
                    'make-delete-regex-match-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-regex-match-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-regex-match-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-regex-match-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-regex-pattern-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-regex-pattern-set-request-"))
   (regex-pattern-set-id
    (common-lisp:error ":regex-pattern-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-regex-pattern-set-request
                    'make-delete-regex-pattern-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-regex-pattern-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-regex-pattern-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'regex-pattern-set-id))
      (common-lisp:list
       (common-lisp:cons "RegexPatternSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-regex-pattern-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-regex-pattern-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-regex-pattern-set-response-"))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-regex-pattern-set-response
                    'make-delete-regex-pattern-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-regex-pattern-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-regex-pattern-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-regex-pattern-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-rule-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-rule-group-request-"))
   (rule-group-id (common-lisp:error ":rule-group-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-rule-group-request
                    'make-delete-rule-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-rule-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-rule-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-group-id))
      (common-lisp:list
       (common-lisp:cons "RuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-rule-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-rule-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-rule-group-response-"))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-rule-group-response
                    'make-delete-rule-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-rule-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-rule-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-rule-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-rule-request-"))
   (rule-id (common-lisp:error ":rule-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-rule-request 'make-delete-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-rule-response-"))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-rule-response 'make-delete-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-size-constraint-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-size-constraint-set-request-"))
   (size-constraint-set-id
    (common-lisp:error ":size-constraint-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-size-constraint-set-request
                    'make-delete-size-constraint-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-size-constraint-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-size-constraint-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'size-constraint-set-id))
      (common-lisp:list
       (common-lisp:cons "SizeConstraintSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-size-constraint-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-size-constraint-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-size-constraint-set-response-"))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-size-constraint-set-response
                    'make-delete-size-constraint-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-size-constraint-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-size-constraint-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-size-constraint-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-sql-injection-match-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-sql-injection-match-set-request-"))
   (sql-injection-match-set-id
    (common-lisp:error ":sql-injection-match-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-sql-injection-match-set-request
                    'make-delete-sql-injection-match-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-sql-injection-match-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-sql-injection-match-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sql-injection-match-set-id))
      (common-lisp:list
       (common-lisp:cons "SqlInjectionMatchSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-sql-injection-match-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-sql-injection-match-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-sql-injection-match-set-response-"))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-sql-injection-match-set-response
                    'make-delete-sql-injection-match-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-sql-injection-match-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-sql-injection-match-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-sql-injection-match-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-web-aclrequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-web-aclrequest-"))
   (web-aclid (common-lisp:error ":web-aclid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-web-aclrequest 'make-delete-web-aclrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-web-aclrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-web-aclrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-aclid))
      (common-lisp:list
       (common-lisp:cons "WebACLId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-web-aclrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-web-aclresponse (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-web-aclresponse-"))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-web-aclresponse 'make-delete-web-aclresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-web-aclresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-web-aclresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-web-aclresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-xss-match-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-xss-match-set-request-"))
   (xss-match-set-id (common-lisp:error ":xss-match-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-xss-match-set-request
                    'make-delete-xss-match-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-xss-match-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-xss-match-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xss-match-set-id))
      (common-lisp:list
       (common-lisp:cons "XssMatchSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-xss-match-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-xss-match-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-xss-match-set-response-"))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-xss-match-set-response
                    'make-delete-xss-match-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-xss-match-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-xss-match-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-xss-match-set-response))
   common-lisp:nil))
(common-lisp:deftype error-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (excluded-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-excluded-rule-"))
   (rule-id (common-lisp:error ":rule-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'excluded-rule 'make-excluded-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input excluded-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input excluded-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input excluded-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype excluded-rules ()
   '(trivial-types:proper-list excluded-rule))
 (common-lisp:defun |make-excluded-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list excluded-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (field-to-match (:copier common-lisp:nil)
      (:conc-name "struct-shape-field-to-match-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or match-field-type common-lisp:null))
   (data common-lisp:nil :type
    (common-lisp:or match-field-data common-lisp:null)))
 (common-lisp:export (common-lisp:list 'field-to-match 'make-field-to-match))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input field-to-match))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input field-to-match))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "Data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input field-to-match))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (geo-match-constraint (:copier common-lisp:nil)
      (:conc-name "struct-shape-geo-match-constraint-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or geo-match-constraint-type common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or geo-match-constraint-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'geo-match-constraint 'make-geo-match-constraint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input geo-match-constraint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input geo-match-constraint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input geo-match-constraint))
   common-lisp:nil))
(common-lisp:deftype geo-match-constraint-type () 'common-lisp:string)
(common-lisp:deftype geo-match-constraint-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype geo-match-constraints ()
   '(trivial-types:proper-list geo-match-constraint))
 (common-lisp:defun |make-geo-match-constraints|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list geo-match-constraint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (geo-match-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-geo-match-set-"))
   (geo-match-set-id (common-lisp:error ":geo-match-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (geo-match-constraints
    (common-lisp:error ":geo-match-constraints is required") :type
    (common-lisp:or geo-match-constraints common-lisp:null)))
 (common-lisp:export (common-lisp:list 'geo-match-set 'make-geo-match-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input geo-match-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input geo-match-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geo-match-set-id))
      (common-lisp:list
       (common-lisp:cons "GeoMatchSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'geo-match-constraints))
      (common-lisp:list
       (common-lisp:cons "GeoMatchConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input geo-match-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype geo-match-set-summaries ()
   '(trivial-types:proper-list geo-match-set-summary))
 (common-lisp:defun |make-geo-match-set-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list geo-match-set-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (geo-match-set-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-geo-match-set-summary-"))
   (geo-match-set-id (common-lisp:error ":geo-match-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'geo-match-set-summary 'make-geo-match-set-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          geo-match-set-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          geo-match-set-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geo-match-set-id))
      (common-lisp:list
       (common-lisp:cons "GeoMatchSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          geo-match-set-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (geo-match-set-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-geo-match-set-update-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or change-action common-lisp:null))
   (geo-match-constraint
    (common-lisp:error ":geo-match-constraint is required") :type
    (common-lisp:or geo-match-constraint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'geo-match-set-update 'make-geo-match-set-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input geo-match-set-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input geo-match-set-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'geo-match-constraint))
      (common-lisp:list
       (common-lisp:cons "GeoMatchConstraint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input geo-match-set-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype geo-match-set-updates ()
   '(trivial-types:proper-list geo-match-set-update))
 (common-lisp:defun |make-geo-match-set-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list geo-match-set-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-byte-match-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-byte-match-set-request-"))
   (byte-match-set-id (common-lisp:error ":byte-match-set-id is required")
    :type (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-byte-match-set-request
                    'make-get-byte-match-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-byte-match-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-byte-match-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'byte-match-set-id))
      (common-lisp:list
       (common-lisp:cons "ByteMatchSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-byte-match-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-byte-match-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-byte-match-set-response-"))
   (byte-match-set common-lisp:nil :type
    (common-lisp:or byte-match-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-byte-match-set-response
                    'make-get-byte-match-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-byte-match-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-byte-match-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'byte-match-set))
      (common-lisp:list
       (common-lisp:cons "ByteMatchSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-byte-match-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-change-token-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-change-token-request-")))
 (common-lisp:export
  (common-lisp:list 'get-change-token-request 'make-get-change-token-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-change-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-change-token-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-change-token-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-change-token-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-change-token-response-"))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-change-token-response
                    'make-get-change-token-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-change-token-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-change-token-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-change-token-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-change-token-status-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-change-token-status-request-"))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-change-token-status-request
                    'make-get-change-token-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-change-token-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-change-token-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-change-token-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-change-token-status-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-change-token-status-response-"))
   (change-token-status common-lisp:nil :type
    (common-lisp:or change-token-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-change-token-status-response
                    'make-get-change-token-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-change-token-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-change-token-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token-status))
      (common-lisp:list
       (common-lisp:cons "ChangeTokenStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-change-token-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-geo-match-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-geo-match-set-request-"))
   (geo-match-set-id (common-lisp:error ":geo-match-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-geo-match-set-request
                    'make-get-geo-match-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-geo-match-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-geo-match-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geo-match-set-id))
      (common-lisp:list
       (common-lisp:cons "GeoMatchSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-geo-match-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-geo-match-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-geo-match-set-response-"))
   (geo-match-set common-lisp:nil :type
    (common-lisp:or geo-match-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-geo-match-set-response
                    'make-get-geo-match-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-geo-match-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-geo-match-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geo-match-set))
      (common-lisp:list
       (common-lisp:cons "GeoMatchSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-geo-match-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-ipset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-ipset-request-"))
   (ipset-id (common-lisp:error ":ipset-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-ipset-request 'make-get-ipset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-ipset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-ipset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipset-id))
      (common-lisp:list
       (common-lisp:cons "IPSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-ipset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-ipset-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-ipset-response-"))
   (ipset common-lisp:nil :type (common-lisp:or ipset common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-ipset-response 'make-get-ipset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-ipset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-ipset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipset))
      (common-lisp:list
       (common-lisp:cons "IPSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-ipset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-logging-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-logging-configuration-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-logging-configuration-request
                    'make-get-logging-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-logging-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-logging-configuration-response-"))
   (logging-configuration common-lisp:nil :type
    (common-lisp:or logging-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-logging-configuration-response
                    'make-get-logging-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logging-configuration))
      (common-lisp:list
       (common-lisp:cons "LoggingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-logging-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-permission-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-permission-policy-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-permission-policy-request
                    'make-get-permission-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-permission-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-permission-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-permission-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-permission-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-permission-policy-response-"))
   (policy common-lisp:nil :type
    (common-lisp:or policy-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-permission-policy-response
                    'make-get-permission-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-permission-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-permission-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-permission-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-rate-based-rule-managed-keys-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-rate-based-rule-managed-keys-request-"))
   (rule-id (common-lisp:error ":rule-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-rate-based-rule-managed-keys-request
                    'make-get-rate-based-rule-managed-keys-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-rate-based-rule-managed-keys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-rate-based-rule-managed-keys-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-rate-based-rule-managed-keys-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-rate-based-rule-managed-keys-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-rate-based-rule-managed-keys-response-"))
   (managed-keys common-lisp:nil :type
    (common-lisp:or managed-keys common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-rate-based-rule-managed-keys-response
                    'make-get-rate-based-rule-managed-keys-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-rate-based-rule-managed-keys-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-rate-based-rule-managed-keys-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-keys))
      (common-lisp:list
       (common-lisp:cons "ManagedKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-rate-based-rule-managed-keys-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-rate-based-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-rate-based-rule-request-"))
   (rule-id (common-lisp:error ":rule-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-rate-based-rule-request
                    'make-get-rate-based-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-rate-based-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-rate-based-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-rate-based-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-rate-based-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-rate-based-rule-response-"))
   (rule common-lisp:nil :type
    (common-lisp:or rate-based-rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-rate-based-rule-response
                    'make-get-rate-based-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-rate-based-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-rate-based-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "Rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-rate-based-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-regex-match-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-regex-match-set-request-"))
   (regex-match-set-id (common-lisp:error ":regex-match-set-id is required")
    :type (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-regex-match-set-request
                    'make-get-regex-match-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-regex-match-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-regex-match-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex-match-set-id))
      (common-lisp:list
       (common-lisp:cons "RegexMatchSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-regex-match-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-regex-match-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-regex-match-set-response-"))
   (regex-match-set common-lisp:nil :type
    (common-lisp:or regex-match-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-regex-match-set-response
                    'make-get-regex-match-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-regex-match-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-regex-match-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex-match-set))
      (common-lisp:list
       (common-lisp:cons "RegexMatchSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-regex-match-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-regex-pattern-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-regex-pattern-set-request-"))
   (regex-pattern-set-id
    (common-lisp:error ":regex-pattern-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-regex-pattern-set-request
                    'make-get-regex-pattern-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-regex-pattern-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-regex-pattern-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'regex-pattern-set-id))
      (common-lisp:list
       (common-lisp:cons "RegexPatternSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-regex-pattern-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-regex-pattern-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-regex-pattern-set-response-"))
   (regex-pattern-set common-lisp:nil :type
    (common-lisp:or regex-pattern-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-regex-pattern-set-response
                    'make-get-regex-pattern-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-regex-pattern-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-regex-pattern-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex-pattern-set))
      (common-lisp:list
       (common-lisp:cons "RegexPatternSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-regex-pattern-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-rule-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-rule-group-request-"))
   (rule-group-id (common-lisp:error ":rule-group-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-rule-group-request 'make-get-rule-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-rule-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-rule-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-group-id))
      (common-lisp:list
       (common-lisp:cons "RuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-rule-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-rule-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-rule-group-response-"))
   (rule-group common-lisp:nil :type
    (common-lisp:or rule-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-rule-group-response 'make-get-rule-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-rule-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-rule-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-group))
      (common-lisp:list
       (common-lisp:cons "RuleGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-rule-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-rule-request-"))
   (rule-id (common-lisp:error ":rule-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-rule-request 'make-get-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-rule-response-"))
   (rule common-lisp:nil :type (common-lisp:or rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-rule-response 'make-get-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule))
      (common-lisp:list
       (common-lisp:cons "Rule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-rule-response))
   common-lisp:nil))
(common-lisp:deftype get-sampled-requests-max-items () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (get-sampled-requests-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sampled-requests-request-"))
   (web-acl-id (common-lisp:error ":web-acl-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (rule-id (common-lisp:error ":rule-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (time-window (common-lisp:error ":time-window is required") :type
    (common-lisp:or time-window common-lisp:null))
   (max-items (common-lisp:error ":max-items is required") :type
    (common-lisp:or get-sampled-requests-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sampled-requests-request
                    'make-get-sampled-requests-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sampled-requests-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sampled-requests-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-acl-id))
      (common-lisp:list
       (common-lisp:cons "WebAclId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-window))
      (common-lisp:list
       (common-lisp:cons "TimeWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sampled-requests-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sampled-requests-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sampled-requests-response-"))
   (sampled-requests common-lisp:nil :type
    (common-lisp:or sampled-httprequests common-lisp:null))
   (population-size common-lisp:nil :type
    (common-lisp:or population-size common-lisp:null))
   (time-window common-lisp:nil :type
    (common-lisp:or time-window common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sampled-requests-response
                    'make-get-sampled-requests-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sampled-requests-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sampled-requests-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sampled-requests))
      (common-lisp:list
       (common-lisp:cons "SampledRequests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'population-size))
      (common-lisp:list
       (common-lisp:cons "PopulationSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-window))
      (common-lisp:list
       (common-lisp:cons "TimeWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sampled-requests-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-size-constraint-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-size-constraint-set-request-"))
   (size-constraint-set-id
    (common-lisp:error ":size-constraint-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-size-constraint-set-request
                    'make-get-size-constraint-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-size-constraint-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-size-constraint-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'size-constraint-set-id))
      (common-lisp:list
       (common-lisp:cons "SizeConstraintSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-size-constraint-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-size-constraint-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-size-constraint-set-response-"))
   (size-constraint-set common-lisp:nil :type
    (common-lisp:or size-constraint-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-size-constraint-set-response
                    'make-get-size-constraint-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-size-constraint-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-size-constraint-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-constraint-set))
      (common-lisp:list
       (common-lisp:cons "SizeConstraintSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-size-constraint-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sql-injection-match-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sql-injection-match-set-request-"))
   (sql-injection-match-set-id
    (common-lisp:error ":sql-injection-match-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sql-injection-match-set-request
                    'make-get-sql-injection-match-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sql-injection-match-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sql-injection-match-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sql-injection-match-set-id))
      (common-lisp:list
       (common-lisp:cons "SqlInjectionMatchSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sql-injection-match-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sql-injection-match-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sql-injection-match-set-response-"))
   (sql-injection-match-set common-lisp:nil :type
    (common-lisp:or sql-injection-match-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sql-injection-match-set-response
                    'make-get-sql-injection-match-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sql-injection-match-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sql-injection-match-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sql-injection-match-set))
      (common-lisp:list
       (common-lisp:cons "SqlInjectionMatchSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sql-injection-match-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-web-aclrequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-web-aclrequest-"))
   (web-aclid (common-lisp:error ":web-aclid is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-web-aclrequest 'make-get-web-aclrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-web-aclrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-web-aclrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-aclid))
      (common-lisp:list
       (common-lisp:cons "WebACLId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-web-aclrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-web-aclresponse (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-web-aclresponse-"))
   (web-acl common-lisp:nil :type (common-lisp:or web-acl common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-web-aclresponse 'make-get-web-aclresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-web-aclresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-web-aclresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-acl))
      (common-lisp:list
       (common-lisp:cons "WebACL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-web-aclresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-xss-match-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-xss-match-set-request-"))
   (xss-match-set-id (common-lisp:error ":xss-match-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-xss-match-set-request
                    'make-get-xss-match-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-xss-match-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-xss-match-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xss-match-set-id))
      (common-lisp:list
       (common-lisp:cons "XssMatchSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-xss-match-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-xss-match-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-xss-match-set-response-"))
   (xss-match-set common-lisp:nil :type
    (common-lisp:or xss-match-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-xss-match-set-response
                    'make-get-xss-match-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-xss-match-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-xss-match-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xss-match-set))
      (common-lisp:list
       (common-lisp:cons "XssMatchSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-xss-match-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (httpheader (:copier common-lisp:nil)
      (:conc-name "struct-shape-httpheader-"))
   (name common-lisp:nil :type (common-lisp:or header-name common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or header-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'httpheader 'make-httpheader))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input httpheader))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input httpheader))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input httpheader))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype httpheaders () '(trivial-types:proper-list httpheader))
 (common-lisp:defun |make-httpheaders|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list httpheader))
   aws-sdk/generator/shape::members))
(common-lisp:deftype httpmethod () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (httprequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-httprequest-"))
   (client-ip common-lisp:nil :type (common-lisp:or ipstring common-lisp:null))
   (country common-lisp:nil :type (common-lisp:or country common-lisp:null))
   (uri common-lisp:nil :type (common-lisp:or uristring common-lisp:null))
   (method common-lisp:nil :type (common-lisp:or httpmethod common-lisp:null))
   (httpversion common-lisp:nil :type
    (common-lisp:or httpversion common-lisp:null))
   (headers common-lisp:nil :type
    (common-lisp:or httpheaders common-lisp:null)))
 (common-lisp:export (common-lisp:list 'httprequest 'make-httprequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input httprequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input httprequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-ip))
      (common-lisp:list
       (common-lisp:cons "ClientIP"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'country))
      (common-lisp:list
       (common-lisp:cons "Country"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "URI"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'method))
      (common-lisp:list
       (common-lisp:cons "Method"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'httpversion))
      (common-lisp:list
       (common-lisp:cons "HTTPVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers))
      (common-lisp:list
       (common-lisp:cons "Headers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input httprequest))
   common-lisp:nil))
(common-lisp:deftype httpversion () 'common-lisp:string)
(common-lisp:deftype header-name () 'common-lisp:string)
(common-lisp:deftype header-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ipset (:copier common-lisp:nil) (:conc-name "struct-shape-ipset-"))
   (ipset-id (common-lisp:error ":ipset-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (ipset-descriptors (common-lisp:error ":ipset-descriptors is required")
    :type (common-lisp:or ipset-descriptors common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ipset 'make-ipset))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ipset))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ipset))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipset-id))
      (common-lisp:list
       (common-lisp:cons "IPSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipset-descriptors))
      (common-lisp:list
       (common-lisp:cons "IPSetDescriptors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ipset))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ipset-descriptor (:copier common-lisp:nil)
      (:conc-name "struct-shape-ipset-descriptor-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or ipset-descriptor-type common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or ipset-descriptor-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ipset-descriptor 'make-ipset-descriptor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ipset-descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ipset-descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ipset-descriptor))
   common-lisp:nil))
(common-lisp:deftype ipset-descriptor-type () 'common-lisp:string)
(common-lisp:deftype ipset-descriptor-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ipset-descriptors ()
   '(trivial-types:proper-list ipset-descriptor))
 (common-lisp:defun |make-ipset-descriptors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ipset-descriptor))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype ipset-summaries ()
   '(trivial-types:proper-list ipset-summary))
 (common-lisp:defun |make-ipset-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ipset-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (ipset-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-ipset-summary-"))
   (ipset-id (common-lisp:error ":ipset-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ipset-summary 'make-ipset-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ipset-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ipset-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipset-id))
      (common-lisp:list
       (common-lisp:cons "IPSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ipset-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ipset-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-ipset-update-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or change-action common-lisp:null))
   (ipset-descriptor (common-lisp:error ":ipset-descriptor is required") :type
    (common-lisp:or ipset-descriptor common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ipset-update 'make-ipset-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ipset-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ipset-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipset-descriptor))
      (common-lisp:list
       (common-lisp:cons "IPSetDescriptor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ipset-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ipset-updates ()
   '(trivial-types:proper-list ipset-update))
 (common-lisp:defun |make-ipset-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ipset-update))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ipstring () 'common-lisp:string)
(common-lisp:deftype ignore-unsupported-type () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (list-activated-rules-in-rule-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-activated-rules-in-rule-group-request-"))
   (rule-group-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-activated-rules-in-rule-group-request
                    'make-list-activated-rules-in-rule-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-activated-rules-in-rule-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-activated-rules-in-rule-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-group-id))
      (common-lisp:list
       (common-lisp:cons "RuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-activated-rules-in-rule-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-activated-rules-in-rule-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-activated-rules-in-rule-group-response-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (activated-rules common-lisp:nil :type
    (common-lisp:or activated-rules common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-activated-rules-in-rule-group-response
                    'make-list-activated-rules-in-rule-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-activated-rules-in-rule-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-activated-rules-in-rule-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activated-rules))
      (common-lisp:list
       (common-lisp:cons "ActivatedRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-activated-rules-in-rule-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-byte-match-sets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-byte-match-sets-request-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-byte-match-sets-request
                    'make-list-byte-match-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-byte-match-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-byte-match-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-byte-match-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-byte-match-sets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-byte-match-sets-response-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (byte-match-sets common-lisp:nil :type
    (common-lisp:or byte-match-set-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-byte-match-sets-response
                    'make-list-byte-match-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-byte-match-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-byte-match-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'byte-match-sets))
      (common-lisp:list
       (common-lisp:cons "ByteMatchSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-byte-match-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-geo-match-sets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-geo-match-sets-request-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-geo-match-sets-request
                    'make-list-geo-match-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-geo-match-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-geo-match-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-geo-match-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-geo-match-sets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-geo-match-sets-response-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (geo-match-sets common-lisp:nil :type
    (common-lisp:or geo-match-set-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-geo-match-sets-response
                    'make-list-geo-match-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-geo-match-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-geo-match-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geo-match-sets))
      (common-lisp:list
       (common-lisp:cons "GeoMatchSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-geo-match-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-ipsets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-ipsets-request-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-ipsets-request 'make-list-ipsets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-ipsets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-ipsets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-ipsets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-ipsets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-ipsets-response-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (ipsets common-lisp:nil :type
    (common-lisp:or ipset-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-ipsets-response 'make-list-ipsets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-ipsets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-ipsets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipsets))
      (common-lisp:list
       (common-lisp:cons "IPSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-ipsets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-logging-configurations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-logging-configurations-request-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-logging-configurations-request
                    'make-list-logging-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-logging-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-logging-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-logging-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-logging-configurations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-logging-configurations-response-"))
   (logging-configurations common-lisp:nil :type
    (common-lisp:or logging-configurations common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-logging-configurations-response
                    'make-list-logging-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-logging-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-logging-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logging-configurations))
      (common-lisp:list
       (common-lisp:cons "LoggingConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-logging-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-rate-based-rules-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-rate-based-rules-request-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-rate-based-rules-request
                    'make-list-rate-based-rules-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rate-based-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rate-based-rules-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rate-based-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-rate-based-rules-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-rate-based-rules-response-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (rules common-lisp:nil :type
    (common-lisp:or rule-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-rate-based-rules-response
                    'make-list-rate-based-rules-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rate-based-rules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rate-based-rules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rate-based-rules-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-regex-match-sets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-regex-match-sets-request-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-regex-match-sets-request
                    'make-list-regex-match-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-regex-match-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-regex-match-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-regex-match-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-regex-match-sets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-regex-match-sets-response-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (regex-match-sets common-lisp:nil :type
    (common-lisp:or regex-match-set-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-regex-match-sets-response
                    'make-list-regex-match-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-regex-match-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-regex-match-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex-match-sets))
      (common-lisp:list
       (common-lisp:cons "RegexMatchSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-regex-match-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-regex-pattern-sets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-regex-pattern-sets-request-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-regex-pattern-sets-request
                    'make-list-regex-pattern-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-regex-pattern-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-regex-pattern-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-regex-pattern-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-regex-pattern-sets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-regex-pattern-sets-response-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (regex-pattern-sets common-lisp:nil :type
    (common-lisp:or regex-pattern-set-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-regex-pattern-sets-response
                    'make-list-regex-pattern-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-regex-pattern-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-regex-pattern-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex-pattern-sets))
      (common-lisp:list
       (common-lisp:cons "RegexPatternSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-regex-pattern-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-rule-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-rule-groups-request-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-rule-groups-request 'make-list-rule-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-rule-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-rule-groups-response-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (rule-groups common-lisp:nil :type
    (common-lisp:or rule-group-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-rule-groups-response
                    'make-list-rule-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-groups))
      (common-lisp:list
       (common-lisp:cons "RuleGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rule-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-rules-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-rules-request-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-rules-request 'make-list-rules-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-rules-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-rules-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-rules-response-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (rules common-lisp:nil :type
    (common-lisp:or rule-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-rules-response 'make-list-rules-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-rules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-rules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-rules-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-size-constraint-sets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-size-constraint-sets-request-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-size-constraint-sets-request
                    'make-list-size-constraint-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-size-constraint-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-size-constraint-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-size-constraint-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-size-constraint-sets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-size-constraint-sets-response-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (size-constraint-sets common-lisp:nil :type
    (common-lisp:or size-constraint-set-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-size-constraint-sets-response
                    'make-list-size-constraint-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-size-constraint-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-size-constraint-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'size-constraint-sets))
      (common-lisp:list
       (common-lisp:cons "SizeConstraintSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-size-constraint-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sql-injection-match-sets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sql-injection-match-sets-request-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sql-injection-match-sets-request
                    'make-list-sql-injection-match-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sql-injection-match-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sql-injection-match-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sql-injection-match-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sql-injection-match-sets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sql-injection-match-sets-response-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (sql-injection-match-sets common-lisp:nil :type
    (common-lisp:or sql-injection-match-set-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sql-injection-match-sets-response
                    'make-list-sql-injection-match-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sql-injection-match-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sql-injection-match-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sql-injection-match-sets))
      (common-lisp:list
       (common-lisp:cons "SqlInjectionMatchSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sql-injection-match-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-subscribed-rule-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-subscribed-rule-groups-request-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-subscribed-rule-groups-request
                    'make-list-subscribed-rule-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribed-rule-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribed-rule-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribed-rule-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-subscribed-rule-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-subscribed-rule-groups-response-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (rule-groups common-lisp:nil :type
    (common-lisp:or subscribed-rule-group-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-subscribed-rule-groups-response
                    'make-list-subscribed-rule-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribed-rule-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribed-rule-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-groups))
      (common-lisp:list
       (common-lisp:cons "RuleGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribed-rule-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (tag-info-for-resource common-lisp:nil :type
    (common-lisp:or tag-info-for-resource common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tag-info-for-resource))
      (common-lisp:list
       (common-lisp:cons "TagInfoForResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-web-acls-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-web-acls-request-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-web-acls-request 'make-list-web-acls-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-web-acls-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-web-acls-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-web-acls-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-web-acls-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-web-acls-response-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (web-acls common-lisp:nil :type
    (common-lisp:or web-aclsummaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-web-acls-response 'make-list-web-acls-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-web-acls-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-web-acls-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-acls))
      (common-lisp:list
       (common-lisp:cons "WebACLs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-web-acls-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-xss-match-sets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-xss-match-sets-request-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or pagination-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-xss-match-sets-request
                    'make-list-xss-match-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-xss-match-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-xss-match-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'limit))
      (common-lisp:list
       (common-lisp:cons "Limit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-xss-match-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-xss-match-sets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-xss-match-sets-response-"))
   (next-marker common-lisp:nil :type
    (common-lisp:or next-marker common-lisp:null))
   (xss-match-sets common-lisp:nil :type
    (common-lisp:or xss-match-set-summaries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-xss-match-sets-response
                    'make-list-xss-match-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-xss-match-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-xss-match-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-marker))
      (common-lisp:list
       (common-lisp:cons "NextMarker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xss-match-sets))
      (common-lisp:list
       (common-lisp:cons "XssMatchSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-xss-match-sets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-destination-configs ()
   '(trivial-types:proper-list resource-arn))
 (common-lisp:defun |make-log-destination-configs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (logging-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-logging-configuration-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (log-destination-configs
    (common-lisp:error ":log-destination-configs is required") :type
    (common-lisp:or log-destination-configs common-lisp:null))
   (redacted-fields common-lisp:nil :type
    (common-lisp:or redacted-fields common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'logging-configuration 'make-logging-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'log-destination-configs))
      (common-lisp:list
       (common-lisp:cons "LogDestinationConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redacted-fields))
      (common-lisp:list
       (common-lisp:cons "RedactedFields"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          logging-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype logging-configurations ()
   '(trivial-types:proper-list logging-configuration))
 (common-lisp:defun |make-logging-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list logging-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype managed-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype managed-keys () '(trivial-types:proper-list managed-key))
 (common-lisp:defun |make-managed-keys|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list managed-key))
   aws-sdk/generator/shape::members))
(common-lisp:deftype match-field-data () 'common-lisp:string)
(common-lisp:deftype match-field-type () 'common-lisp:string)
(common-lisp:deftype metric-name () 'common-lisp:string)
(common-lisp:deftype migration-error-type () 'common-lisp:string)
(common-lisp:deftype negated () 'common-lisp:boolean)
(common-lisp:deftype next-marker () 'common-lisp:string)
(common-lisp:deftype pagination-limit () 'common-lisp:integer)
(common-lisp:deftype parameter-exception-field () 'common-lisp:string)
(common-lisp:deftype parameter-exception-parameter () 'common-lisp:string)
(common-lisp:deftype parameter-exception-reason () 'common-lisp:string)
(common-lisp:deftype policy-string () 'common-lisp:string)
(common-lisp:deftype population-size () 'common-lisp:integer)
(common-lisp:deftype positional-constraint () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (predicate (:copier common-lisp:nil)
      (:conc-name "struct-shape-predicate-"))
   (negated (common-lisp:error ":negated is required") :type
    (common-lisp:or negated common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or predicate-type common-lisp:null))
   (data-id (common-lisp:error ":data-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'predicate 'make-predicate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input predicate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input predicate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'negated))
      (common-lisp:list
       (common-lisp:cons "Negated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-id))
      (common-lisp:list
       (common-lisp:cons "DataId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input predicate))
   common-lisp:nil))
(common-lisp:deftype predicate-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype predicates () '(trivial-types:proper-list predicate))
 (common-lisp:defun |make-predicates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list predicate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (put-logging-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-logging-configuration-request-"))
   (logging-configuration
    (common-lisp:error ":logging-configuration is required") :type
    (common-lisp:or logging-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-logging-configuration-request
                    'make-put-logging-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logging-configuration))
      (common-lisp:list
       (common-lisp:cons "LoggingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-logging-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-logging-configuration-response-"))
   (logging-configuration common-lisp:nil :type
    (common-lisp:or logging-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-logging-configuration-response
                    'make-put-logging-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'logging-configuration))
      (common-lisp:list
       (common-lisp:cons "LoggingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-permission-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-permission-policy-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (policy (common-lisp:error ":policy is required") :type
    (common-lisp:or policy-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-permission-policy-request
                    'make-put-permission-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-permission-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-permission-policy-response-")))
 (common-lisp:export
  (common-lisp:list 'put-permission-policy-response
                    'make-put-permission-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-permission-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rate-based-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-rate-based-rule-"))
   (rule-id (common-lisp:error ":rule-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (metric-name common-lisp:nil :type
    (common-lisp:or metric-name common-lisp:null))
   (match-predicates (common-lisp:error ":match-predicates is required") :type
    (common-lisp:or predicates common-lisp:null))
   (rate-key (common-lisp:error ":rate-key is required") :type
    (common-lisp:or rate-key common-lisp:null))
   (rate-limit (common-lisp:error ":rate-limit is required") :type
    (common-lisp:or rate-limit common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rate-based-rule 'make-rate-based-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rate-based-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rate-based-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'match-predicates))
      (common-lisp:list
       (common-lisp:cons "MatchPredicates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-key))
      (common-lisp:list
       (common-lisp:cons "RateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-limit))
      (common-lisp:list
       (common-lisp:cons "RateLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rate-based-rule))
   common-lisp:nil))
(common-lisp:deftype rate-key () 'common-lisp:string)
(common-lisp:deftype rate-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype redacted-fields ()
   '(trivial-types:proper-list field-to-match))
 (common-lisp:defun |make-redacted-fields|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field-to-match))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (regex-match-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-regex-match-set-"))
   (regex-match-set-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (regex-match-tuples common-lisp:nil :type
    (common-lisp:or regex-match-tuples common-lisp:null)))
 (common-lisp:export (common-lisp:list 'regex-match-set 'make-regex-match-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input regex-match-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input regex-match-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex-match-set-id))
      (common-lisp:list
       (common-lisp:cons "RegexMatchSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex-match-tuples))
      (common-lisp:list
       (common-lisp:cons "RegexMatchTuples"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input regex-match-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype regex-match-set-summaries ()
   '(trivial-types:proper-list regex-match-set-summary))
 (common-lisp:defun |make-regex-match-set-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list regex-match-set-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (regex-match-set-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-regex-match-set-summary-"))
   (regex-match-set-id (common-lisp:error ":regex-match-set-id is required")
    :type (common-lisp:or resource-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'regex-match-set-summary 'make-regex-match-set-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          regex-match-set-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          regex-match-set-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex-match-set-id))
      (common-lisp:list
       (common-lisp:cons "RegexMatchSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          regex-match-set-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (regex-match-set-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-regex-match-set-update-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or change-action common-lisp:null))
   (regex-match-tuple (common-lisp:error ":regex-match-tuple is required")
    :type (common-lisp:or regex-match-tuple common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'regex-match-set-update 'make-regex-match-set-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          regex-match-set-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          regex-match-set-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex-match-tuple))
      (common-lisp:list
       (common-lisp:cons "RegexMatchTuple"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          regex-match-set-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype regex-match-set-updates ()
   '(trivial-types:proper-list regex-match-set-update))
 (common-lisp:defun |make-regex-match-set-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list regex-match-set-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (regex-match-tuple (:copier common-lisp:nil)
      (:conc-name "struct-shape-regex-match-tuple-"))
   (field-to-match (common-lisp:error ":field-to-match is required") :type
    (common-lisp:or field-to-match common-lisp:null))
   (text-transformation (common-lisp:error ":text-transformation is required")
    :type (common-lisp:or text-transformation common-lisp:null))
   (regex-pattern-set-id
    (common-lisp:error ":regex-pattern-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'regex-match-tuple 'make-regex-match-tuple))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input regex-match-tuple))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input regex-match-tuple))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-to-match))
      (common-lisp:list
       (common-lisp:cons "FieldToMatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-transformation))
      (common-lisp:list
       (common-lisp:cons "TextTransformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'regex-pattern-set-id))
      (common-lisp:list
       (common-lisp:cons "RegexPatternSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input regex-match-tuple))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype regex-match-tuples ()
   '(trivial-types:proper-list regex-match-tuple))
 (common-lisp:defun |make-regex-match-tuples|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list regex-match-tuple))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (regex-pattern-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-regex-pattern-set-"))
   (regex-pattern-set-id
    (common-lisp:error ":regex-pattern-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (regex-pattern-strings
    (common-lisp:error ":regex-pattern-strings is required") :type
    (common-lisp:or regex-pattern-strings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'regex-pattern-set 'make-regex-pattern-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input regex-pattern-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input regex-pattern-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'regex-pattern-set-id))
      (common-lisp:list
       (common-lisp:cons "RegexPatternSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'regex-pattern-strings))
      (common-lisp:list
       (common-lisp:cons "RegexPatternStrings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input regex-pattern-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype regex-pattern-set-summaries ()
   '(trivial-types:proper-list regex-pattern-set-summary))
 (common-lisp:defun |make-regex-pattern-set-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            regex-pattern-set-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (regex-pattern-set-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-regex-pattern-set-summary-"))
   (regex-pattern-set-id
    (common-lisp:error ":regex-pattern-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'regex-pattern-set-summary
                    'make-regex-pattern-set-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          regex-pattern-set-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          regex-pattern-set-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'regex-pattern-set-id))
      (common-lisp:list
       (common-lisp:cons "RegexPatternSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          regex-pattern-set-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (regex-pattern-set-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-regex-pattern-set-update-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or change-action common-lisp:null))
   (regex-pattern-string
    (common-lisp:error ":regex-pattern-string is required") :type
    (common-lisp:or regex-pattern-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'regex-pattern-set-update 'make-regex-pattern-set-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          regex-pattern-set-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          regex-pattern-set-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'regex-pattern-string))
      (common-lisp:list
       (common-lisp:cons "RegexPatternString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          regex-pattern-set-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype regex-pattern-set-updates ()
   '(trivial-types:proper-list regex-pattern-set-update))
 (common-lisp:defun |make-regex-pattern-set-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            regex-pattern-set-update))
   aws-sdk/generator/shape::members))
(common-lisp:deftype regex-pattern-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype regex-pattern-strings ()
   '(trivial-types:proper-list regex-pattern-string))
 (common-lisp:defun |make-regex-pattern-strings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list regex-pattern-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (rule (:copier common-lisp:nil) (:conc-name "struct-shape-rule-"))
   (rule-id (common-lisp:error ":rule-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (metric-name common-lisp:nil :type
    (common-lisp:or metric-name common-lisp:null))
   (predicates (common-lisp:error ":predicates is required") :type
    (common-lisp:or predicates common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rule 'make-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicates))
      (common-lisp:list
       (common-lisp:cons "Predicates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-group-"))
   (rule-group-id (common-lisp:error ":rule-group-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (metric-name common-lisp:nil :type
    (common-lisp:or metric-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rule-group 'make-rule-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-group-id))
      (common-lisp:list
       (common-lisp:cons "RuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-group-summaries ()
   '(trivial-types:proper-list rule-group-summary))
 (common-lisp:defun |make-rule-group-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule-group-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-group-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-group-summary-"))
   (rule-group-id (common-lisp:error ":rule-group-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rule-group-summary 'make-rule-group-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-group-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-group-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-group-id))
      (common-lisp:list
       (common-lisp:cons "RuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-group-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-group-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-group-update-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or change-action common-lisp:null))
   (activated-rule (common-lisp:error ":activated-rule is required") :type
    (common-lisp:or activated-rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rule-group-update 'make-rule-group-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-group-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-group-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activated-rule))
      (common-lisp:list
       (common-lisp:cons "ActivatedRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-group-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-group-updates ()
   '(trivial-types:proper-list rule-group-update))
 (common-lisp:defun |make-rule-group-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule-group-update))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rule-priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype rule-summaries ()
   '(trivial-types:proper-list rule-summary))
 (common-lisp:defun |make-rule-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-summary-"))
   (rule-id (common-lisp:error ":rule-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rule-summary 'make-rule-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rule-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-rule-update-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or change-action common-lisp:null))
   (predicate (common-lisp:error ":predicate is required") :type
    (common-lisp:or predicate common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rule-update 'make-rule-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rule-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rule-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'predicate))
      (common-lisp:list
       (common-lisp:cons "Predicate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rule-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rule-updates () '(trivial-types:proper-list rule-update))
 (common-lisp:defun |make-rule-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule-update))
   aws-sdk/generator/shape::members))
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:deftype s3object-url () 'common-lisp:string)
(common-lisp:deftype sample-weight () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (sampled-httprequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-sampled-httprequest-"))
   (request (common-lisp:error ":request is required") :type
    (common-lisp:or httprequest common-lisp:null))
   (weight (common-lisp:error ":weight is required") :type
    (common-lisp:or sample-weight common-lisp:null))
   (timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (action common-lisp:nil :type (common-lisp:or action common-lisp:null))
   (rule-within-rule-group common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sampled-httprequest 'make-sampled-httprequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sampled-httprequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sampled-httprequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request))
      (common-lisp:list
       (common-lisp:cons "Request"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'weight))
      (common-lisp:list
       (common-lisp:cons "Weight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rule-within-rule-group))
      (common-lisp:list
       (common-lisp:cons "RuleWithinRuleGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sampled-httprequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sampled-httprequests ()
   '(trivial-types:proper-list sampled-httprequest))
 (common-lisp:defun |make-sampled-httprequests|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sampled-httprequest))
   aws-sdk/generator/shape::members))
(common-lisp:deftype size () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (size-constraint (:copier common-lisp:nil)
      (:conc-name "struct-shape-size-constraint-"))
   (field-to-match (common-lisp:error ":field-to-match is required") :type
    (common-lisp:or field-to-match common-lisp:null))
   (text-transformation (common-lisp:error ":text-transformation is required")
    :type (common-lisp:or text-transformation common-lisp:null))
   (comparison-operator (common-lisp:error ":comparison-operator is required")
    :type (common-lisp:or comparison-operator common-lisp:null))
   (size (common-lisp:error ":size is required") :type
    (common-lisp:or size common-lisp:null)))
 (common-lisp:export (common-lisp:list 'size-constraint 'make-size-constraint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input size-constraint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input size-constraint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-to-match))
      (common-lisp:list
       (common-lisp:cons "FieldToMatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-transformation))
      (common-lisp:list
       (common-lisp:cons "TextTransformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-operator))
      (common-lisp:list
       (common-lisp:cons "ComparisonOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size))
      (common-lisp:list
       (common-lisp:cons "Size"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input size-constraint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (size-constraint-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-size-constraint-set-"))
   (size-constraint-set-id
    (common-lisp:error ":size-constraint-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (size-constraints (common-lisp:error ":size-constraints is required") :type
    (common-lisp:or size-constraints common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'size-constraint-set 'make-size-constraint-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input size-constraint-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input size-constraint-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'size-constraint-set-id))
      (common-lisp:list
       (common-lisp:cons "SizeConstraintSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-constraints))
      (common-lisp:list
       (common-lisp:cons "SizeConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input size-constraint-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype size-constraint-set-summaries ()
   '(trivial-types:proper-list size-constraint-set-summary))
 (common-lisp:defun |make-size-constraint-set-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            size-constraint-set-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (size-constraint-set-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-size-constraint-set-summary-"))
   (size-constraint-set-id
    (common-lisp:error ":size-constraint-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'size-constraint-set-summary
                    'make-size-constraint-set-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          size-constraint-set-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          size-constraint-set-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'size-constraint-set-id))
      (common-lisp:list
       (common-lisp:cons "SizeConstraintSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          size-constraint-set-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (size-constraint-set-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-size-constraint-set-update-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or change-action common-lisp:null))
   (size-constraint (common-lisp:error ":size-constraint is required") :type
    (common-lisp:or size-constraint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'size-constraint-set-update
                    'make-size-constraint-set-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          size-constraint-set-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          size-constraint-set-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-constraint))
      (common-lisp:list
       (common-lisp:cons "SizeConstraint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          size-constraint-set-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype size-constraint-set-updates ()
   '(trivial-types:proper-list size-constraint-set-update))
 (common-lisp:defun |make-size-constraint-set-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            size-constraint-set-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype size-constraints ()
   '(trivial-types:proper-list size-constraint))
 (common-lisp:defun |make-size-constraints|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list size-constraint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (sql-injection-match-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-sql-injection-match-set-"))
   (sql-injection-match-set-id
    (common-lisp:error ":sql-injection-match-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (sql-injection-match-tuples
    (common-lisp:error ":sql-injection-match-tuples is required") :type
    (common-lisp:or sql-injection-match-tuples common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sql-injection-match-set 'make-sql-injection-match-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sql-injection-match-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sql-injection-match-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sql-injection-match-set-id))
      (common-lisp:list
       (common-lisp:cons "SqlInjectionMatchSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sql-injection-match-tuples))
      (common-lisp:list
       (common-lisp:cons "SqlInjectionMatchTuples"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sql-injection-match-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sql-injection-match-set-summaries ()
   '(trivial-types:proper-list sql-injection-match-set-summary))
 (common-lisp:defun |make-sql-injection-match-set-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            sql-injection-match-set-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (sql-injection-match-set-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-sql-injection-match-set-summary-"))
   (sql-injection-match-set-id
    (common-lisp:error ":sql-injection-match-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sql-injection-match-set-summary
                    'make-sql-injection-match-set-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sql-injection-match-set-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sql-injection-match-set-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sql-injection-match-set-id))
      (common-lisp:list
       (common-lisp:cons "SqlInjectionMatchSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sql-injection-match-set-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sql-injection-match-set-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-sql-injection-match-set-update-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or change-action common-lisp:null))
   (sql-injection-match-tuple
    (common-lisp:error ":sql-injection-match-tuple is required") :type
    (common-lisp:or sql-injection-match-tuple common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sql-injection-match-set-update
                    'make-sql-injection-match-set-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sql-injection-match-set-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sql-injection-match-set-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sql-injection-match-tuple))
      (common-lisp:list
       (common-lisp:cons "SqlInjectionMatchTuple"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sql-injection-match-set-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sql-injection-match-set-updates ()
   '(trivial-types:proper-list sql-injection-match-set-update))
 (common-lisp:defun |make-sql-injection-match-set-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            sql-injection-match-set-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (sql-injection-match-tuple (:copier common-lisp:nil)
      (:conc-name "struct-shape-sql-injection-match-tuple-"))
   (field-to-match (common-lisp:error ":field-to-match is required") :type
    (common-lisp:or field-to-match common-lisp:null))
   (text-transformation (common-lisp:error ":text-transformation is required")
    :type (common-lisp:or text-transformation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sql-injection-match-tuple
                    'make-sql-injection-match-tuple))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sql-injection-match-tuple))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sql-injection-match-tuple))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-to-match))
      (common-lisp:list
       (common-lisp:cons "FieldToMatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-transformation))
      (common-lisp:list
       (common-lisp:cons "TextTransformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sql-injection-match-tuple))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sql-injection-match-tuples ()
   '(trivial-types:proper-list sql-injection-match-tuple))
 (common-lisp:defun |make-sql-injection-match-tuples|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            sql-injection-match-tuple))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype subscribed-rule-group-summaries ()
   '(trivial-types:proper-list subscribed-rule-group-summary))
 (common-lisp:defun |make-subscribed-rule-group-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            subscribed-rule-group-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (subscribed-rule-group-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-subscribed-rule-group-summary-"))
   (rule-group-id (common-lisp:error ":rule-group-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (metric-name (common-lisp:error ":metric-name is required") :type
    (common-lisp:or metric-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subscribed-rule-group-summary
                    'make-subscribed-rule-group-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-rule-group-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-rule-group-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-group-id))
      (common-lisp:list
       (common-lisp:cons "RuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscribed-rule-group-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-info-for-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-info-for-resource-"))
   (resource-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (tag-list common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-info-for-resource 'make-tag-info-for-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-info-for-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-info-for-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-list))
      (common-lisp:list
       (common-lisp:cons "TagList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-info-for-resource))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype text-transformation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (time-window (:copier common-lisp:nil)
      (:conc-name "struct-shape-time-window-"))
   (start-time (common-lisp:error ":start-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time (common-lisp:error ":end-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'time-window 'make-time-window))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-window))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-window))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-window))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype uristring () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceARN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-byte-match-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-byte-match-set-request-"))
   (byte-match-set-id (common-lisp:error ":byte-match-set-id is required")
    :type (common-lisp:or resource-id common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null))
   (updates (common-lisp:error ":updates is required") :type
    (common-lisp:or byte-match-set-updates common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-byte-match-set-request
                    'make-update-byte-match-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-byte-match-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-byte-match-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'byte-match-set-id))
      (common-lisp:list
       (common-lisp:cons "ByteMatchSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updates))
      (common-lisp:list
       (common-lisp:cons "Updates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-byte-match-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-byte-match-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-byte-match-set-response-"))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-byte-match-set-response
                    'make-update-byte-match-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-byte-match-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-byte-match-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-byte-match-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-geo-match-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-geo-match-set-request-"))
   (geo-match-set-id (common-lisp:error ":geo-match-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null))
   (updates (common-lisp:error ":updates is required") :type
    (common-lisp:or geo-match-set-updates common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-geo-match-set-request
                    'make-update-geo-match-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-geo-match-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-geo-match-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geo-match-set-id))
      (common-lisp:list
       (common-lisp:cons "GeoMatchSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updates))
      (common-lisp:list
       (common-lisp:cons "Updates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-geo-match-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-geo-match-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-geo-match-set-response-"))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-geo-match-set-response
                    'make-update-geo-match-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-geo-match-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-geo-match-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-geo-match-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-ipset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-ipset-request-"))
   (ipset-id (common-lisp:error ":ipset-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null))
   (updates (common-lisp:error ":updates is required") :type
    (common-lisp:or ipset-updates common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-ipset-request 'make-update-ipset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-ipset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-ipset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipset-id))
      (common-lisp:list
       (common-lisp:cons "IPSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updates))
      (common-lisp:list
       (common-lisp:cons "Updates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-ipset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-ipset-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-ipset-response-"))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-ipset-response 'make-update-ipset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ipset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ipset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ipset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-rate-based-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-rate-based-rule-request-"))
   (rule-id (common-lisp:error ":rule-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null))
   (updates (common-lisp:error ":updates is required") :type
    (common-lisp:or rule-updates common-lisp:null))
   (rate-limit (common-lisp:error ":rate-limit is required") :type
    (common-lisp:or rate-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-rate-based-rule-request
                    'make-update-rate-based-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-rate-based-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-rate-based-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updates))
      (common-lisp:list
       (common-lisp:cons "Updates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-limit))
      (common-lisp:list
       (common-lisp:cons "RateLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-rate-based-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-rate-based-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-rate-based-rule-response-"))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-rate-based-rule-response
                    'make-update-rate-based-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-rate-based-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-rate-based-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-rate-based-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-regex-match-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-regex-match-set-request-"))
   (regex-match-set-id (common-lisp:error ":regex-match-set-id is required")
    :type (common-lisp:or resource-id common-lisp:null))
   (updates (common-lisp:error ":updates is required") :type
    (common-lisp:or regex-match-set-updates common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-regex-match-set-request
                    'make-update-regex-match-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-regex-match-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-regex-match-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex-match-set-id))
      (common-lisp:list
       (common-lisp:cons "RegexMatchSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updates))
      (common-lisp:list
       (common-lisp:cons "Updates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-regex-match-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-regex-match-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-regex-match-set-response-"))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-regex-match-set-response
                    'make-update-regex-match-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-regex-match-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-regex-match-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-regex-match-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-regex-pattern-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-regex-pattern-set-request-"))
   (regex-pattern-set-id
    (common-lisp:error ":regex-pattern-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (updates (common-lisp:error ":updates is required") :type
    (common-lisp:or regex-pattern-set-updates common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-regex-pattern-set-request
                    'make-update-regex-pattern-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-regex-pattern-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-regex-pattern-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'regex-pattern-set-id))
      (common-lisp:list
       (common-lisp:cons "RegexPatternSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updates))
      (common-lisp:list
       (common-lisp:cons "Updates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-regex-pattern-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-regex-pattern-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-regex-pattern-set-response-"))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-regex-pattern-set-response
                    'make-update-regex-pattern-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-regex-pattern-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-regex-pattern-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-regex-pattern-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-rule-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-rule-group-request-"))
   (rule-group-id (common-lisp:error ":rule-group-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (updates (common-lisp:error ":updates is required") :type
    (common-lisp:or rule-group-updates common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-rule-group-request
                    'make-update-rule-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-group-id))
      (common-lisp:list
       (common-lisp:cons "RuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updates))
      (common-lisp:list
       (common-lisp:cons "Updates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-rule-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-rule-group-response-"))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-rule-group-response
                    'make-update-rule-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-rule-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-rule-request-"))
   (rule-id (common-lisp:error ":rule-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null))
   (updates (common-lisp:error ":updates is required") :type
    (common-lisp:or rule-updates common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-rule-request 'make-update-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-id))
      (common-lisp:list
       (common-lisp:cons "RuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updates))
      (common-lisp:list
       (common-lisp:cons "Updates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-rule-response-"))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-rule-response 'make-update-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-size-constraint-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-size-constraint-set-request-"))
   (size-constraint-set-id
    (common-lisp:error ":size-constraint-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null))
   (updates (common-lisp:error ":updates is required") :type
    (common-lisp:or size-constraint-set-updates common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-size-constraint-set-request
                    'make-update-size-constraint-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-size-constraint-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-size-constraint-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'size-constraint-set-id))
      (common-lisp:list
       (common-lisp:cons "SizeConstraintSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updates))
      (common-lisp:list
       (common-lisp:cons "Updates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-size-constraint-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-size-constraint-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-size-constraint-set-response-"))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-size-constraint-set-response
                    'make-update-size-constraint-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-size-constraint-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-size-constraint-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-size-constraint-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-sql-injection-match-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-sql-injection-match-set-request-"))
   (sql-injection-match-set-id
    (common-lisp:error ":sql-injection-match-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null))
   (updates (common-lisp:error ":updates is required") :type
    (common-lisp:or sql-injection-match-set-updates common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-sql-injection-match-set-request
                    'make-update-sql-injection-match-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sql-injection-match-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sql-injection-match-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sql-injection-match-set-id))
      (common-lisp:list
       (common-lisp:cons "SqlInjectionMatchSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updates))
      (common-lisp:list
       (common-lisp:cons "Updates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sql-injection-match-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-sql-injection-match-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-sql-injection-match-set-response-"))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-sql-injection-match-set-response
                    'make-update-sql-injection-match-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sql-injection-match-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sql-injection-match-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sql-injection-match-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-web-aclrequest (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-web-aclrequest-"))
   (web-aclid (common-lisp:error ":web-aclid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null))
   (updates common-lisp:nil :type
    (common-lisp:or web-aclupdates common-lisp:null))
   (default-action common-lisp:nil :type
    (common-lisp:or waf-action common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-web-aclrequest 'make-update-web-aclrequest))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-web-aclrequest))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-web-aclrequest))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-aclid))
      (common-lisp:list
       (common-lisp:cons "WebACLId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updates))
      (common-lisp:list
       (common-lisp:cons "Updates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-action))
      (common-lisp:list
       (common-lisp:cons "DefaultAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-web-aclrequest))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-web-aclresponse (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-web-aclresponse-"))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-web-aclresponse 'make-update-web-aclresponse))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-web-aclresponse))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-web-aclresponse))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-web-aclresponse))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-xss-match-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-xss-match-set-request-"))
   (xss-match-set-id (common-lisp:error ":xss-match-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (change-token (common-lisp:error ":change-token is required") :type
    (common-lisp:or change-token common-lisp:null))
   (updates (common-lisp:error ":updates is required") :type
    (common-lisp:or xss-match-set-updates common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-xss-match-set-request
                    'make-update-xss-match-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-xss-match-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-xss-match-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xss-match-set-id))
      (common-lisp:list
       (common-lisp:cons "XssMatchSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updates))
      (common-lisp:list
       (common-lisp:cons "Updates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-xss-match-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-xss-match-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-xss-match-set-response-"))
   (change-token common-lisp:nil :type
    (common-lisp:or change-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-xss-match-set-response
                    'make-update-xss-match-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-xss-match-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-xss-match-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-token))
      (common-lisp:list
       (common-lisp:cons "ChangeToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-xss-match-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition wafbad-request-exception
     (waf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafbad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafbad-request-exception
                    'wafbad-request-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition wafdisallowed-name-exception
     (waf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafdisallowed-name-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafdisallowed-name-exception
                    'wafdisallowed-name-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition wafentity-migration-exception
     (waf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafentity-migration-exception-message)
      (migration-error-type :initarg :migration-error-type :initform
       common-lisp:nil :reader
       wafentity-migration-exception-migration-error-type)
      (migration-error-reason :initarg :migration-error-reason :initform
       common-lisp:nil :reader
       wafentity-migration-exception-migration-error-reason)))
 (common-lisp:export
  (common-lisp:list 'wafentity-migration-exception
                    'wafentity-migration-exception-message
                    'wafentity-migration-exception-migration-error-type
                    'wafentity-migration-exception-migration-error-reason)))
(common-lisp:progn
 (common-lisp:define-condition wafinternal-error-exception
     (waf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafinternal-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafinternal-error-exception
                    'wafinternal-error-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition wafinvalid-account-exception
     (waf-error)
     common-lisp:nil)
 (common-lisp:export (common-lisp:list 'wafinvalid-account-exception)))
(common-lisp:progn
 (common-lisp:define-condition wafinvalid-operation-exception
     (waf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafinvalid-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafinvalid-operation-exception
                    'wafinvalid-operation-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition wafinvalid-parameter-exception
     (waf-error)
     ((field :initarg :field :initform common-lisp:nil :reader
       wafinvalid-parameter-exception-field)
      (parameter :initarg :parameter :initform common-lisp:nil :reader
       wafinvalid-parameter-exception-parameter)
      (reason :initarg :reason :initform common-lisp:nil :reader
       wafinvalid-parameter-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'wafinvalid-parameter-exception
                    'wafinvalid-parameter-exception-field
                    'wafinvalid-parameter-exception-parameter
                    'wafinvalid-parameter-exception-reason)))
(common-lisp:progn
 (common-lisp:define-condition wafinvalid-permission-policy-exception
     (waf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafinvalid-permission-policy-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafinvalid-permission-policy-exception
                    'wafinvalid-permission-policy-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition wafinvalid-regex-pattern-exception
     (waf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafinvalid-regex-pattern-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafinvalid-regex-pattern-exception
                    'wafinvalid-regex-pattern-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition waflimits-exceeded-exception
     (waf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       waflimits-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'waflimits-exceeded-exception
                    'waflimits-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition wafnon-empty-entity-exception
     (waf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafnon-empty-entity-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafnon-empty-entity-exception
                    'wafnon-empty-entity-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition wafnonexistent-container-exception
     (waf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafnonexistent-container-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafnonexistent-container-exception
                    'wafnonexistent-container-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition wafnonexistent-item-exception
     (waf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafnonexistent-item-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafnonexistent-item-exception
                    'wafnonexistent-item-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition wafreferenced-item-exception
     (waf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafreferenced-item-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafreferenced-item-exception
                    'wafreferenced-item-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition wafservice-linked-role-error-exception
     (waf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafservice-linked-role-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafservice-linked-role-error-exception
                    'wafservice-linked-role-error-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition wafstale-data-exception
     (waf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafstale-data-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafstale-data-exception 'wafstale-data-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition wafsubscription-not-found-exception
     (waf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       wafsubscription-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'wafsubscription-not-found-exception
                    'wafsubscription-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition waftag-operation-exception
     (waf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       waftag-operation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'waftag-operation-exception
                    'waftag-operation-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition waftag-operation-internal-error-exception
     (waf-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       waftag-operation-internal-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'waftag-operation-internal-error-exception
                    'waftag-operation-internal-error-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (waf-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-waf-action-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or waf-action-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'waf-action 'make-waf-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input waf-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input waf-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input waf-action))
   common-lisp:nil))
(common-lisp:deftype waf-action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (waf-override-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-waf-override-action-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or waf-override-action-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'waf-override-action 'make-waf-override-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input waf-override-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input waf-override-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input waf-override-action))
   common-lisp:nil))
(common-lisp:deftype waf-override-action-type () 'common-lisp:string)
(common-lisp:deftype waf-rule-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (web-acl (:copier common-lisp:nil) (:conc-name "struct-shape-web-acl-"))
   (web-aclid (common-lisp:error ":web-aclid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (metric-name common-lisp:nil :type
    (common-lisp:or metric-name common-lisp:null))
   (default-action (common-lisp:error ":default-action is required") :type
    (common-lisp:or waf-action common-lisp:null))
   (rules (common-lisp:error ":rules is required") :type
    (common-lisp:or activated-rules common-lisp:null))
   (web-aclarn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'web-acl 'make-web-acl))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input web-acl))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input web-acl))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-aclid))
      (common-lisp:list
       (common-lisp:cons "WebACLId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-action))
      (common-lisp:list
       (common-lisp:cons "DefaultAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules))
      (common-lisp:list
       (common-lisp:cons "Rules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-aclarn))
      (common-lisp:list
       (common-lisp:cons "WebACLArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input web-acl))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype web-aclsummaries ()
   '(trivial-types:proper-list web-aclsummary))
 (common-lisp:defun |make-web-aclsummaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list web-aclsummary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (web-aclsummary (:copier common-lisp:nil)
      (:conc-name "struct-shape-web-aclsummary-"))
   (web-aclid (common-lisp:error ":web-aclid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'web-aclsummary 'make-web-aclsummary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input web-aclsummary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input web-aclsummary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'web-aclid))
      (common-lisp:list
       (common-lisp:cons "WebACLId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input web-aclsummary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (web-aclupdate (:copier common-lisp:nil)
      (:conc-name "struct-shape-web-aclupdate-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or change-action common-lisp:null))
   (activated-rule (common-lisp:error ":activated-rule is required") :type
    (common-lisp:or activated-rule common-lisp:null)))
 (common-lisp:export (common-lisp:list 'web-aclupdate 'make-web-aclupdate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input web-aclupdate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input web-aclupdate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'activated-rule))
      (common-lisp:list
       (common-lisp:cons "ActivatedRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input web-aclupdate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype web-aclupdates ()
   '(trivial-types:proper-list web-aclupdate))
 (common-lisp:defun |make-web-aclupdates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list web-aclupdate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (xss-match-set (:copier common-lisp:nil)
      (:conc-name "struct-shape-xss-match-set-"))
   (xss-match-set-id (common-lisp:error ":xss-match-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (xss-match-tuples (common-lisp:error ":xss-match-tuples is required") :type
    (common-lisp:or xss-match-tuples common-lisp:null)))
 (common-lisp:export (common-lisp:list 'xss-match-set 'make-xss-match-set))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input xss-match-set))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input xss-match-set))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xss-match-set-id))
      (common-lisp:list
       (common-lisp:cons "XssMatchSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xss-match-tuples))
      (common-lisp:list
       (common-lisp:cons "XssMatchTuples"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input xss-match-set))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype xss-match-set-summaries ()
   '(trivial-types:proper-list xss-match-set-summary))
 (common-lisp:defun |make-xss-match-set-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xss-match-set-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (xss-match-set-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-xss-match-set-summary-"))
   (xss-match-set-id (common-lisp:error ":xss-match-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'xss-match-set-summary 'make-xss-match-set-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          xss-match-set-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          xss-match-set-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xss-match-set-id))
      (common-lisp:list
       (common-lisp:cons "XssMatchSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          xss-match-set-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (xss-match-set-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-xss-match-set-update-"))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or change-action common-lisp:null))
   (xss-match-tuple (common-lisp:error ":xss-match-tuple is required") :type
    (common-lisp:or xss-match-tuple common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'xss-match-set-update 'make-xss-match-set-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input xss-match-set-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input xss-match-set-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xss-match-tuple))
      (common-lisp:list
       (common-lisp:cons "XssMatchTuple"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input xss-match-set-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype xss-match-set-updates ()
   '(trivial-types:proper-list xss-match-set-update))
 (common-lisp:defun |make-xss-match-set-updates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xss-match-set-update))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (xss-match-tuple (:copier common-lisp:nil)
      (:conc-name "struct-shape-xss-match-tuple-"))
   (field-to-match (common-lisp:error ":field-to-match is required") :type
    (common-lisp:or field-to-match common-lisp:null))
   (text-transformation (common-lisp:error ":text-transformation is required")
    :type (common-lisp:or text-transformation common-lisp:null)))
 (common-lisp:export (common-lisp:list 'xss-match-tuple 'make-xss-match-tuple))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input xss-match-tuple))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input xss-match-tuple))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'field-to-match))
      (common-lisp:list
       (common-lisp:cons "FieldToMatch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-transformation))
      (common-lisp:list
       (common-lisp:cons "TextTransformation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input xss-match-tuple))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype xss-match-tuples ()
   '(trivial-types:proper-list xss-match-tuple))
 (common-lisp:defun |make-xss-match-tuples|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list xss-match-tuple))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |errorMessage| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun create-byte-match-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name change-token)
   (common-lisp:declare (common-lisp:ignorable name change-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-byte-match-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateByteMatchSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-byte-match-set))
(common-lisp:progn
 (common-lisp:defun create-geo-match-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name change-token)
   (common-lisp:declare (common-lisp:ignorable name change-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-geo-match-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateGeoMatchSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-geo-match-set))
(common-lisp:progn
 (common-lisp:defun create-ipset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name change-token)
   (common-lisp:declare (common-lisp:ignorable name change-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-ipset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateIPSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-ipset))
(common-lisp:progn
 (common-lisp:defun create-rate-based-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name metric-name rate-key rate-limit
                     change-token tags)
   (common-lisp:declare
    (common-lisp:ignorable name metric-name rate-key rate-limit change-token
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-rate-based-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateRateBasedRule"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-rate-based-rule))
(common-lisp:progn
 (common-lisp:defun create-regex-match-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name change-token)
   (common-lisp:declare (common-lisp:ignorable name change-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-regex-match-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateRegexMatchSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-regex-match-set))
(common-lisp:progn
 (common-lisp:defun create-regex-pattern-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name change-token)
   (common-lisp:declare (common-lisp:ignorable name change-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-regex-pattern-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateRegexPatternSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-regex-pattern-set))
(common-lisp:progn
 (common-lisp:defun create-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name metric-name change-token tags)
   (common-lisp:declare
    (common-lisp:ignorable name metric-name change-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "CreateRule"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-rule))
(common-lisp:progn
 (common-lisp:defun create-rule-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name metric-name change-token tags)
   (common-lisp:declare
    (common-lisp:ignorable name metric-name change-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-rule-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateRuleGroup"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-rule-group))
(common-lisp:progn
 (common-lisp:defun create-size-constraint-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name change-token)
   (common-lisp:declare (common-lisp:ignorable name change-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-size-constraint-set-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateSizeConstraintSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-size-constraint-set))
(common-lisp:progn
 (common-lisp:defun create-sql-injection-match-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name change-token)
   (common-lisp:declare (common-lisp:ignorable name change-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-sql-injection-match-set-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateSqlInjectionMatchSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-sql-injection-match-set))
(common-lisp:progn
 (common-lisp:defun create-web-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name metric-name default-action
                     change-token tags)
   (common-lisp:declare
    (common-lisp:ignorable name metric-name default-action change-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-web-aclrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateWebACL"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-web-acl))
(common-lisp:progn
 (common-lisp:defun create-web-aclmigration-stack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key web-aclid s3bucket-name
                     ignore-unsupported-type)
   (common-lisp:declare
    (common-lisp:ignorable web-aclid s3bucket-name ignore-unsupported-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-web-aclmigration-stack-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateWebACLMigrationStack"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-web-aclmigration-stack))
(common-lisp:progn
 (common-lisp:defun create-xss-match-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name change-token)
   (common-lisp:declare (common-lisp:ignorable name change-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-xss-match-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateXssMatchSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-xss-match-set))
(common-lisp:progn
 (common-lisp:defun delete-byte-match-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key byte-match-set-id change-token)
   (common-lisp:declare (common-lisp:ignorable byte-match-set-id change-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-byte-match-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteByteMatchSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-byte-match-set))
(common-lisp:progn
 (common-lisp:defun delete-geo-match-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key geo-match-set-id change-token)
   (common-lisp:declare (common-lisp:ignorable geo-match-set-id change-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-geo-match-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteGeoMatchSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-geo-match-set))
(common-lisp:progn
 (common-lisp:defun delete-ipset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ipset-id change-token)
   (common-lisp:declare (common-lisp:ignorable ipset-id change-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-ipset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteIPSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-ipset))
(common-lisp:progn
 (common-lisp:defun delete-logging-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-logging-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteLoggingConfiguration"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-logging-configuration))
(common-lisp:progn
 (common-lisp:defun delete-permission-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-permission-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeletePermissionPolicy"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-permission-policy))
(common-lisp:progn
 (common-lisp:defun delete-rate-based-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-id change-token)
   (common-lisp:declare (common-lisp:ignorable rule-id change-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-rate-based-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRateBasedRule"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-rate-based-rule))
(common-lisp:progn
 (common-lisp:defun delete-regex-match-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key regex-match-set-id change-token)
   (common-lisp:declare
    (common-lisp:ignorable regex-match-set-id change-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-regex-match-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRegexMatchSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-regex-match-set))
(common-lisp:progn
 (common-lisp:defun delete-regex-pattern-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key regex-pattern-set-id change-token)
   (common-lisp:declare
    (common-lisp:ignorable regex-pattern-set-id change-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-regex-pattern-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRegexPatternSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-regex-pattern-set))
(common-lisp:progn
 (common-lisp:defun delete-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-id change-token)
   (common-lisp:declare (common-lisp:ignorable rule-id change-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "DeleteRule"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-rule))
(common-lisp:progn
 (common-lisp:defun delete-rule-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-group-id change-token)
   (common-lisp:declare (common-lisp:ignorable rule-group-id change-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-rule-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRuleGroup"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-rule-group))
(common-lisp:progn
 (common-lisp:defun delete-size-constraint-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key size-constraint-set-id change-token)
   (common-lisp:declare
    (common-lisp:ignorable size-constraint-set-id change-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-size-constraint-set-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSizeConstraintSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-size-constraint-set))
(common-lisp:progn
 (common-lisp:defun delete-sql-injection-match-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sql-injection-match-set-id change-token)
   (common-lisp:declare
    (common-lisp:ignorable sql-injection-match-set-id change-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-sql-injection-match-set-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSqlInjectionMatchSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-sql-injection-match-set))
(common-lisp:progn
 (common-lisp:defun delete-web-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key web-aclid change-token)
   (common-lisp:declare (common-lisp:ignorable web-aclid change-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-web-aclrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteWebACL"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-web-acl))
(common-lisp:progn
 (common-lisp:defun delete-xss-match-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key xss-match-set-id change-token)
   (common-lisp:declare (common-lisp:ignorable xss-match-set-id change-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-xss-match-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteXssMatchSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-xss-match-set))
(common-lisp:progn
 (common-lisp:defun get-byte-match-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key byte-match-set-id)
   (common-lisp:declare (common-lisp:ignorable byte-match-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-byte-match-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetByteMatchSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-byte-match-set))
(common-lisp:progn
 (common-lisp:defun get-change-token ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'waf-request :method "POST" :path "/" :params
                                `(("Action" ,@"GetChangeToken")
                                  ("Version" ,@"2015-08-24"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-change-token))
(common-lisp:progn
 (common-lisp:defun get-change-token-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key change-token)
   (common-lisp:declare (common-lisp:ignorable change-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-change-token-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetChangeTokenStatus"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-change-token-status))
(common-lisp:progn
 (common-lisp:defun get-geo-match-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key geo-match-set-id)
   (common-lisp:declare (common-lisp:ignorable geo-match-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-geo-match-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetGeoMatchSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-geo-match-set))
(common-lisp:progn
 (common-lisp:defun get-ipset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ipset-id)
   (common-lisp:declare (common-lisp:ignorable ipset-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-ipset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetIPSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-ipset))
(common-lisp:progn
 (common-lisp:defun get-logging-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-logging-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetLoggingConfiguration"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-logging-configuration))
(common-lisp:progn
 (common-lisp:defun get-permission-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-permission-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetPermissionPolicy"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-permission-policy))
(common-lisp:progn
 (common-lisp:defun get-rate-based-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-id)
   (common-lisp:declare (common-lisp:ignorable rule-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-rate-based-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRateBasedRule"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-rate-based-rule))
(common-lisp:progn
 (common-lisp:defun get-rate-based-rule-managed-keys
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-id next-marker)
   (common-lisp:declare (common-lisp:ignorable rule-id next-marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-rate-based-rule-managed-keys-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRateBasedRuleManagedKeys"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-rate-based-rule-managed-keys))
(common-lisp:progn
 (common-lisp:defun get-regex-match-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key regex-match-set-id)
   (common-lisp:declare (common-lisp:ignorable regex-match-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-regex-match-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRegexMatchSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-regex-match-set))
(common-lisp:progn
 (common-lisp:defun get-regex-pattern-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key regex-pattern-set-id)
   (common-lisp:declare (common-lisp:ignorable regex-pattern-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-regex-pattern-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRegexPatternSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-regex-pattern-set))
(common-lisp:progn
 (common-lisp:defun get-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-id)
   (common-lisp:declare (common-lisp:ignorable rule-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetRule"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-rule))
(common-lisp:progn
 (common-lisp:defun get-rule-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-group-id)
   (common-lisp:declare (common-lisp:ignorable rule-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-rule-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRuleGroup"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-rule-group))
(common-lisp:progn
 (common-lisp:defun get-sampled-requests
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key web-acl-id rule-id time-window max-items)
   (common-lisp:declare
    (common-lisp:ignorable web-acl-id rule-id time-window max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sampled-requests-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSampledRequests"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-sampled-requests))
(common-lisp:progn
 (common-lisp:defun get-size-constraint-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key size-constraint-set-id)
   (common-lisp:declare (common-lisp:ignorable size-constraint-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-size-constraint-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSizeConstraintSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-size-constraint-set))
(common-lisp:progn
 (common-lisp:defun get-sql-injection-match-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sql-injection-match-set-id)
   (common-lisp:declare (common-lisp:ignorable sql-injection-match-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-sql-injection-match-set-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSqlInjectionMatchSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-sql-injection-match-set))
(common-lisp:progn
 (common-lisp:defun get-web-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key web-aclid)
   (common-lisp:declare (common-lisp:ignorable web-aclid))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-web-aclrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetWebACL"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-web-acl))
(common-lisp:progn
 (common-lisp:defun get-xss-match-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key xss-match-set-id)
   (common-lisp:declare (common-lisp:ignorable xss-match-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-xss-match-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetXssMatchSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-xss-match-set))
(common-lisp:progn
 (common-lisp:defun list-activated-rules-in-rule-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-group-id next-marker limit)
   (common-lisp:declare
    (common-lisp:ignorable rule-group-id next-marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-activated-rules-in-rule-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListActivatedRulesInRuleGroup"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-activated-rules-in-rule-group))
(common-lisp:progn
 (common-lisp:defun list-byte-match-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-marker limit)
   (common-lisp:declare (common-lisp:ignorable next-marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-byte-match-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListByteMatchSets"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-byte-match-sets))
(common-lisp:progn
 (common-lisp:defun list-geo-match-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-marker limit)
   (common-lisp:declare (common-lisp:ignorable next-marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-geo-match-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListGeoMatchSets"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-geo-match-sets))
(common-lisp:progn
 (common-lisp:defun list-ipsets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-marker limit)
   (common-lisp:declare (common-lisp:ignorable next-marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-ipsets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListIPSets"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-ipsets))
(common-lisp:progn
 (common-lisp:defun list-logging-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-marker limit)
   (common-lisp:declare (common-lisp:ignorable next-marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-logging-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListLoggingConfigurations"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-logging-configurations))
(common-lisp:progn
 (common-lisp:defun list-rate-based-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-marker limit)
   (common-lisp:declare (common-lisp:ignorable next-marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-rate-based-rules-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListRateBasedRules"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-rate-based-rules))
(common-lisp:progn
 (common-lisp:defun list-regex-match-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-marker limit)
   (common-lisp:declare (common-lisp:ignorable next-marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-regex-match-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListRegexMatchSets"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-regex-match-sets))
(common-lisp:progn
 (common-lisp:defun list-regex-pattern-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-marker limit)
   (common-lisp:declare (common-lisp:ignorable next-marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-regex-pattern-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListRegexPatternSets"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-regex-pattern-sets))
(common-lisp:progn
 (common-lisp:defun list-rule-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-marker limit)
   (common-lisp:declare (common-lisp:ignorable next-marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-rule-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListRuleGroups"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-rule-groups))
(common-lisp:progn
 (common-lisp:defun list-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-marker limit)
   (common-lisp:declare (common-lisp:ignorable next-marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-rules-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListRules"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-rules))
(common-lisp:progn
 (common-lisp:defun list-size-constraint-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-marker limit)
   (common-lisp:declare (common-lisp:ignorable next-marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-size-constraint-sets-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListSizeConstraintSets"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-size-constraint-sets))
(common-lisp:progn
 (common-lisp:defun list-sql-injection-match-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-marker limit)
   (common-lisp:declare (common-lisp:ignorable next-marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-sql-injection-match-sets-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListSqlInjectionMatchSets"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-sql-injection-match-sets))
(common-lisp:progn
 (common-lisp:defun list-subscribed-rule-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-marker limit)
   (common-lisp:declare (common-lisp:ignorable next-marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-subscribed-rule-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListSubscribedRuleGroups"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-subscribed-rule-groups))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-marker limit resource-arn)
   (common-lisp:declare (common-lisp:ignorable next-marker limit resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-web-acls
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-marker limit)
   (common-lisp:declare (common-lisp:ignorable next-marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-web-acls-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListWebACLs"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-web-acls))
(common-lisp:progn
 (common-lisp:defun list-xss-match-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-marker limit)
   (common-lisp:declare (common-lisp:ignorable next-marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-xss-match-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListXssMatchSets"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-xss-match-sets))
(common-lisp:progn
 (common-lisp:defun put-logging-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key logging-configuration)
   (common-lisp:declare (common-lisp:ignorable logging-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-logging-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutLoggingConfiguration"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-logging-configuration))
(common-lisp:progn
 (common-lisp:defun put-permission-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn policy)
   (common-lisp:declare (common-lisp:ignorable resource-arn policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-permission-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutPermissionPolicy"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-permission-policy))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-byte-match-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key byte-match-set-id change-token updates)
   (common-lisp:declare
    (common-lisp:ignorable byte-match-set-id change-token updates))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-byte-match-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateByteMatchSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-byte-match-set))
(common-lisp:progn
 (common-lisp:defun update-geo-match-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key geo-match-set-id change-token updates)
   (common-lisp:declare
    (common-lisp:ignorable geo-match-set-id change-token updates))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-geo-match-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateGeoMatchSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-geo-match-set))
(common-lisp:progn
 (common-lisp:defun update-ipset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ipset-id change-token updates)
   (common-lisp:declare (common-lisp:ignorable ipset-id change-token updates))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-ipset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateIPSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-ipset))
(common-lisp:progn
 (common-lisp:defun update-rate-based-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-id change-token updates rate-limit)
   (common-lisp:declare
    (common-lisp:ignorable rule-id change-token updates rate-limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-rate-based-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateRateBasedRule"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-rate-based-rule))
(common-lisp:progn
 (common-lisp:defun update-regex-match-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key regex-match-set-id updates change-token)
   (common-lisp:declare
    (common-lisp:ignorable regex-match-set-id updates change-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-regex-match-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateRegexMatchSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-regex-match-set))
(common-lisp:progn
 (common-lisp:defun update-regex-pattern-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key regex-pattern-set-id updates
                     change-token)
   (common-lisp:declare
    (common-lisp:ignorable regex-pattern-set-id updates change-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-regex-pattern-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateRegexPatternSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-regex-pattern-set))
(common-lisp:progn
 (common-lisp:defun update-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-id change-token updates)
   (common-lisp:declare (common-lisp:ignorable rule-id change-token updates))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "UpdateRule"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-rule))
(common-lisp:progn
 (common-lisp:defun update-rule-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-group-id updates change-token)
   (common-lisp:declare
    (common-lisp:ignorable rule-group-id updates change-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-rule-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateRuleGroup"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-rule-group))
(common-lisp:progn
 (common-lisp:defun update-size-constraint-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key size-constraint-set-id change-token
                     updates)
   (common-lisp:declare
    (common-lisp:ignorable size-constraint-set-id change-token updates))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-size-constraint-set-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateSizeConstraintSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-size-constraint-set))
(common-lisp:progn
 (common-lisp:defun update-sql-injection-match-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sql-injection-match-set-id change-token
                     updates)
   (common-lisp:declare
    (common-lisp:ignorable sql-injection-match-set-id change-token updates))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-sql-injection-match-set-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateSqlInjectionMatchSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-sql-injection-match-set))
(common-lisp:progn
 (common-lisp:defun update-web-acl
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key web-aclid change-token updates
                     default-action)
   (common-lisp:declare
    (common-lisp:ignorable web-aclid change-token updates default-action))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-web-aclrequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateWebACL"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-web-acl))
(common-lisp:progn
 (common-lisp:defun update-xss-match-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key xss-match-set-id change-token updates)
   (common-lisp:declare
    (common-lisp:ignorable xss-match-set-id change-token updates))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-xss-match-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'waf-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateXssMatchSet"
                                                        "2015-08-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-xss-match-set))
