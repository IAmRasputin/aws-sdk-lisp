;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/lightsail/api
  (:use)
  (:nicknames #:aws/lightsail)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/lightsail/api)
(common-lisp:progn
 (common-lisp:define-condition lightsail-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'lightsail-error))
(common-lisp:progn
 (common-lisp:defclass lightsail-request (aws-sdk/json-request:json-request)
                       common-lisp:nil
                       (:default-initargs :service "lightsail" :api-version
                        "2016-11-28" :host-prefix "lightsail" :signing-name
                        common-lisp:nil :global-host common-lisp:nil
                        :target-prefix "Lightsail_20161128" :json-version
                        "1.1"))
 (common-lisp:export 'lightsail-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("AccountSetupInProgressException" . account-setup-in-progress-exception)
    ("InvalidInputException" . invalid-input-exception)
    ("NotFoundException" . not-found-exception)
    ("OperationFailureException" . operation-failure-exception)
    ("ServiceException" . service-exception)
    ("UnauthenticatedException" . unauthenticated-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (lightsail-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       access-denied-exception-code)
      (docs :initarg :docs :initform common-lisp:nil :reader
       access-denied-exception-docs)
      (message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)
      (tip :initarg :tip :initform common-lisp:nil :reader
       access-denied-exception-tip)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-code
                    'access-denied-exception-docs
                    'access-denied-exception-message
                    'access-denied-exception-tip)))
(common-lisp:deftype access-direction () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (access-key (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-key-"))
   (access-key-id common-lisp:nil :type
    (common-lisp:or iamaccess-key-id common-lisp:null))
   (secret-access-key common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status-type common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (last-used common-lisp:nil :type
    (common-lisp:or access-key-last-used common-lisp:null)))
 (common-lisp:export (common-lisp:list 'access-key 'make-access-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "accessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-access-key))
      (common-lisp:list
       (common-lisp:cons "secretAccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-used))
      (common-lisp:list
       (common-lisp:cons "lastUsed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (access-key-last-used (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-key-last-used-"))
   (last-used-date common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (region common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (service-name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'access-key-last-used 'make-access-key-last-used))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-key-last-used))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-key-last-used))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-used-date))
      (common-lisp:list
       (common-lisp:cons "lastUsedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-key-last-used))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype access-key-list ()
   '(trivial-types:proper-list access-key))
 (common-lisp:defun make-access-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype access-receiver-list ()
   '(trivial-types:proper-list resource-receiving-access))
 (common-lisp:defun make-access-receiver-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resource-receiving-access))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (access-rules (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-rules-"))
   (get-object common-lisp:nil :type
    (common-lisp:or access-type common-lisp:null))
   (allow-public-overrides common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'access-rules 'make-access-rules))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-rules))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-rules))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'get-object))
      (common-lisp:list
       (common-lisp:cons "getObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-public-overrides))
      (common-lisp:list
       (common-lisp:cons "allowPublicOverrides"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-rules))
   common-lisp:nil))
(common-lisp:deftype access-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (account-level-bpa-sync (:copier common-lisp:nil)
      (:conc-name "struct-shape-account-level-bpa-sync-"))
   (status common-lisp:nil :type
    (common-lisp:or account-level-bpa-sync-status common-lisp:null))
   (last-synced-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or bpastatus-message common-lisp:null))
   (bpa-impacts-lightsail common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'account-level-bpa-sync 'make-account-level-bpa-sync))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          account-level-bpa-sync))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          account-level-bpa-sync))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-synced-at))
      (common-lisp:list
       (common-lisp:cons "lastSyncedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bpa-impacts-lightsail))
      (common-lisp:list
       (common-lisp:cons "bpaImpactsLightsail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          account-level-bpa-sync))
   common-lisp:nil))
(common-lisp:deftype account-level-bpa-sync-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition account-setup-in-progress-exception
     (lightsail-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       account-setup-in-progress-exception-code)
      (docs :initarg :docs :initform common-lisp:nil :reader
       account-setup-in-progress-exception-docs)
      (message :initarg :message :initform common-lisp:nil :reader
       account-setup-in-progress-exception-message)
      (tip :initarg :tip :initform common-lisp:nil :reader
       account-setup-in-progress-exception-tip)))
 (common-lisp:export
  (common-lisp:list 'account-setup-in-progress-exception
                    'account-setup-in-progress-exception-code
                    'account-setup-in-progress-exception-docs
                    'account-setup-in-progress-exception-message
                    'account-setup-in-progress-exception-tip)))
(common-lisp:progn
 (common-lisp:defstruct
     (add-on (:copier common-lisp:nil) (:conc-name "struct-shape-add-on-"))
   (name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (snapshot-time-of-day common-lisp:nil :type
    (common-lisp:or time-of-day common-lisp:null))
   (next-snapshot-time-of-day common-lisp:nil :type
    (common-lisp:or time-of-day common-lisp:null))
   (threshold common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (duration common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'add-on 'make-add-on))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-on))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-on))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-time-of-day))
      (common-lisp:list
       (common-lisp:cons "snapshotTimeOfDay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'next-snapshot-time-of-day))
      (common-lisp:list
       (common-lisp:cons "nextSnapshotTimeOfDay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-on))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype add-on-list () '(trivial-types:proper-list add-on))
 (common-lisp:defun make-add-on-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list add-on))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (add-on-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-on-request-"))
   (add-on-type (common-lisp:error ":addontype is required") :type
    (common-lisp:or add-on-type common-lisp:null))
   (auto-snapshot-add-on-request common-lisp:nil :type
    (common-lisp:or auto-snapshot-add-on-request common-lisp:null))
   (stop-instance-on-idle-request common-lisp:nil :type
    (common-lisp:or stop-instance-on-idle-request common-lisp:null)))
 (common-lisp:export (common-lisp:list 'add-on-request 'make-add-on-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-on-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-on-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-on-type))
      (common-lisp:list
       (common-lisp:cons "addOnType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-snapshot-add-on-request))
      (common-lisp:list
       (common-lisp:cons "autoSnapshotAddOnRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stop-instance-on-idle-request))
      (common-lisp:list
       (common-lisp:cons "stopInstanceOnIdleRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-on-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype add-on-request-list ()
   '(trivial-types:proper-list add-on-request))
 (common-lisp:defun make-add-on-request-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list add-on-request))
   aws-sdk/generator/shape::members))
(common-lisp:deftype add-on-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (alarm (:copier common-lisp:nil) (:conc-name "struct-shape-alarm-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or resource-location common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (support-code common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (monitored-resource-info common-lisp:nil :type
    (common-lisp:or monitored-resource-info common-lisp:null))
   (comparison-operator common-lisp:nil :type
    (common-lisp:or comparison-operator common-lisp:null))
   (evaluation-periods common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (period common-lisp:nil :type
    (common-lisp:or metric-period common-lisp:null))
   (threshold common-lisp:nil :type
    (common-lisp:or common-lisp:double-float common-lisp:null))
   (datapoints-to-alarm common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (treat-missing-data common-lisp:nil :type
    (common-lisp:or treat-missing-data common-lisp:null))
   (statistic common-lisp:nil :type
    (common-lisp:or metric-statistic common-lisp:null))
   (metric-name common-lisp:nil :type
    (common-lisp:or metric-name common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or alarm-state common-lisp:null))
   (unit common-lisp:nil :type (common-lisp:or metric-unit common-lisp:null))
   (contact-protocols common-lisp:nil :type
    (common-lisp:or contact-protocols-list common-lisp:null))
   (notification-triggers common-lisp:nil :type
    (common-lisp:or notification-trigger-list common-lisp:null))
   (notification-enabled common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'alarm 'make-alarm))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alarm))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alarm))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitored-resource-info))
      (common-lisp:list
       (common-lisp:cons "monitoredResourceInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-operator))
      (common-lisp:list
       (common-lisp:cons "comparisonOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-periods))
      (common-lisp:list
       (common-lisp:cons "evaluationPeriods"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datapoints-to-alarm))
      (common-lisp:list
       (common-lisp:cons "datapointsToAlarm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'treat-missing-data))
      (common-lisp:list
       (common-lisp:cons "treatMissingData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistic))
      (common-lisp:list
       (common-lisp:cons "statistic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-protocols))
      (common-lisp:list
       (common-lisp:cons "contactProtocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-triggers))
      (common-lisp:list
       (common-lisp:cons "notificationTriggers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-enabled))
      (common-lisp:list
       (common-lisp:cons "notificationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alarm))
   common-lisp:nil))
(common-lisp:deftype alarm-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype alarms-list () '(trivial-types:proper-list alarm))
 (common-lisp:defun make-alarms-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alarm))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (allocate-static-ip-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-allocate-static-ip-request-"))
   (static-ip-name (common-lisp:error ":staticipname is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'allocate-static-ip-request
                    'make-allocate-static-ip-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          allocate-static-ip-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          allocate-static-ip-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-ip-name))
      (common-lisp:list
       (common-lisp:cons "staticIpName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          allocate-static-ip-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (allocate-static-ip-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-allocate-static-ip-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'allocate-static-ip-result
                    'make-allocate-static-ip-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          allocate-static-ip-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          allocate-static-ip-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          allocate-static-ip-result))
   common-lisp:nil))
(common-lisp:deftype app-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype app-category-list ()
   '(trivial-types:proper-list app-category))
 (common-lisp:defun make-app-category-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list app-category))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-certificate-to-distribution-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-certificate-to-distribution-request-"))
   (distribution-name (common-lisp:error ":distributionname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (certificate-name (common-lisp:error ":certificatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-certificate-to-distribution-request
                    'make-attach-certificate-to-distribution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-certificate-to-distribution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-certificate-to-distribution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-name))
      (common-lisp:list
       (common-lisp:cons "distributionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-name))
      (common-lisp:list
       (common-lisp:cons "certificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-certificate-to-distribution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-certificate-to-distribution-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-certificate-to-distribution-result-"))
   (operation common-lisp:nil :type
    (common-lisp:or operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-certificate-to-distribution-result
                    'make-attach-certificate-to-distribution-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-certificate-to-distribution-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-certificate-to-distribution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-certificate-to-distribution-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-disk-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-disk-request-"))
   (disk-name (common-lisp:error ":diskname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (instance-name (common-lisp:error ":instancename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (disk-path (common-lisp:error ":diskpath is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (auto-mounting common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-disk-request 'make-attach-disk-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attach-disk-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attach-disk-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-name))
      (common-lisp:list
       (common-lisp:cons "diskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-path))
      (common-lisp:list
       (common-lisp:cons "diskPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mounting))
      (common-lisp:list
       (common-lisp:cons "autoMounting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attach-disk-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-disk-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-disk-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-disk-result 'make-attach-disk-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attach-disk-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attach-disk-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attach-disk-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-instances-to-load-balancer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-instances-to-load-balancer-request-"))
   (load-balancer-name (common-lisp:error ":loadbalancername is required")
    :type (common-lisp:or resource-name common-lisp:null))
   (instance-names (common-lisp:error ":instancenames is required") :type
    (common-lisp:or resource-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-instances-to-load-balancer-request
                    'make-attach-instances-to-load-balancer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-instances-to-load-balancer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-instances-to-load-balancer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-names))
      (common-lisp:list
       (common-lisp:cons "instanceNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-instances-to-load-balancer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-instances-to-load-balancer-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-instances-to-load-balancer-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-instances-to-load-balancer-result
                    'make-attach-instances-to-load-balancer-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-instances-to-load-balancer-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-instances-to-load-balancer-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-instances-to-load-balancer-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-load-balancer-tls-certificate-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-attach-load-balancer-tls-certificate-request-"))
   (load-balancer-name (common-lisp:error ":loadbalancername is required")
    :type (common-lisp:or resource-name common-lisp:null))
   (certificate-name (common-lisp:error ":certificatename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-load-balancer-tls-certificate-request
                    'make-attach-load-balancer-tls-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-tls-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-tls-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-name))
      (common-lisp:list
       (common-lisp:cons "certificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-tls-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-load-balancer-tls-certificate-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-load-balancer-tls-certificate-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-load-balancer-tls-certificate-result
                    'make-attach-load-balancer-tls-certificate-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-tls-certificate-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-tls-certificate-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-load-balancer-tls-certificate-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-static-ip-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-static-ip-request-"))
   (static-ip-name (common-lisp:error ":staticipname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (instance-name (common-lisp:error ":instancename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-static-ip-request 'make-attach-static-ip-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-static-ip-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-static-ip-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-ip-name))
      (common-lisp:list
       (common-lisp:cons "staticIpName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-static-ip-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-static-ip-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-static-ip-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-static-ip-result 'make-attach-static-ip-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-static-ip-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-static-ip-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-static-ip-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attached-disk (:copier common-lisp:nil)
      (:conc-name "struct-shape-attached-disk-"))
   (path common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (size-in-gb common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'attached-disk 'make-attached-disk))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attached-disk))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attached-disk))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gb))
      (common-lisp:list
       (common-lisp:cons "sizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attached-disk))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype attached-disk-list ()
   '(trivial-types:proper-list attached-disk))
 (common-lisp:defun make-attached-disk-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attached-disk))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype attached-disk-map () 'common-lisp:hash-table)
 (common-lisp:defun make-attached-disk-map
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype auto-mount-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (auto-snapshot-add-on-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-snapshot-add-on-request-"))
   (snapshot-time-of-day common-lisp:nil :type
    (common-lisp:or time-of-day common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-snapshot-add-on-request
                    'make-auto-snapshot-add-on-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-snapshot-add-on-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-snapshot-add-on-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'snapshot-time-of-day))
      (common-lisp:list
       (common-lisp:cons "snapshotTimeOfDay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-snapshot-add-on-request))
   common-lisp:nil))
(common-lisp:deftype auto-snapshot-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (auto-snapshot-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-snapshot-details-"))
   (date common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or auto-snapshot-status common-lisp:null))
   (from-attached-disks common-lisp:nil :type
    (common-lisp:or attached-disk-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-snapshot-details 'make-auto-snapshot-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-snapshot-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-snapshot-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-attached-disks))
      (common-lisp:list
       (common-lisp:cons "fromAttachedDisks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-snapshot-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auto-snapshot-details-list ()
   '(trivial-types:proper-list auto-snapshot-details))
 (common-lisp:defun make-auto-snapshot-details-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auto-snapshot-details))
   aws-sdk/generator/shape::members))
(common-lisp:deftype auto-snapshot-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (availability-zone (:copier common-lisp:nil)
      (:conc-name "struct-shape-availability-zone-"))
   (zone-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'availability-zone 'make-availability-zone))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input availability-zone))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zone-name))
      (common-lisp:list
       (common-lisp:cons "zoneName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input availability-zone))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype availability-zone-list ()
   '(trivial-types:proper-list availability-zone))
 (common-lisp:defun make-availability-zone-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list availability-zone))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bpastatus-message () 'common-lisp:string)
(common-lisp:deftype base64 () 'common-lisp:string)
(common-lisp:deftype behavior-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (blueprint (:copier common-lisp:nil)
      (:conc-name "struct-shape-blueprint-"))
   (blueprint-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (group common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or blueprint-type common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (is-active common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (min-power common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (version-code common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (product-url common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (license-url common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (platform common-lisp:nil :type
    (common-lisp:or instance-platform common-lisp:null))
   (app-category common-lisp:nil :type
    (common-lisp:or app-category common-lisp:null)))
 (common-lisp:export (common-lisp:list 'blueprint 'make-blueprint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input blueprint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input blueprint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-id))
      (common-lisp:list
       (common-lisp:cons "blueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-active))
      (common-lisp:list
       (common-lisp:cons "isActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-power))
      (common-lisp:list
       (common-lisp:cons "minPower"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-code))
      (common-lisp:list
       (common-lisp:cons "versionCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-url))
      (common-lisp:list
       (common-lisp:cons "productUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'license-url))
      (common-lisp:list
       (common-lisp:cons "licenseUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform))
      (common-lisp:list
       (common-lisp:cons "platform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-category))
      (common-lisp:list
       (common-lisp:cons "appCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input blueprint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype blueprint-list () '(trivial-types:proper-list blueprint))
 (common-lisp:defun make-blueprint-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list blueprint))
   aws-sdk/generator/shape::members))
(common-lisp:deftype blueprint-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (bucket (:copier common-lisp:nil) (:conc-name "struct-shape-bucket-"))
   (resource-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (access-rules common-lisp:nil :type
    (common-lisp:or access-rules common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (bundle-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (url common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or resource-location common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or bucket-name common-lisp:null))
   (support-code common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (object-versioning common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (able-to-update-bundle common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (readonly-access-accounts common-lisp:nil :type
    (common-lisp:or partner-id-list common-lisp:null))
   (resources-receiving-access common-lisp:nil :type
    (common-lisp:or access-receiver-list common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or bucket-state common-lisp:null))
   (access-log-config common-lisp:nil :type
    (common-lisp:or bucket-access-log-config common-lisp:null)))
 (common-lisp:export (common-lisp:list 'bucket 'make-bucket))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-rules))
      (common-lisp:list
       (common-lisp:cons "accessRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-versioning))
      (common-lisp:list
       (common-lisp:cons "objectVersioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'able-to-update-bundle))
      (common-lisp:list
       (common-lisp:cons "ableToUpdateBundle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'readonly-access-accounts))
      (common-lisp:list
       (common-lisp:cons "readonlyAccessAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resources-receiving-access))
      (common-lisp:list
       (common-lisp:cons "resourcesReceivingAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-log-config))
      (common-lisp:list
       (common-lisp:cons "accessLogConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (bucket-access-log-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-bucket-access-log-config-"))
   (enabled (common-lisp:error ":enabled is required") :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (destination common-lisp:nil :type
    (common-lisp:or bucket-name common-lisp:null))
   (prefix common-lisp:nil :type
    (common-lisp:or bucket-access-log-prefix common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'bucket-access-log-config 'make-bucket-access-log-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          bucket-access-log-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          bucket-access-log-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          bucket-access-log-config))
   common-lisp:nil))
(common-lisp:deftype bucket-access-log-prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (bucket-bundle (:copier common-lisp:nil)
      (:conc-name "struct-shape-bucket-bundle-"))
   (bundle-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (price common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null))
   (storage-per-month-in-gb common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (transfer-per-month-in-gb common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (is-active common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'bucket-bundle 'make-bucket-bundle))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket-bundle))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket-bundle))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price))
      (common-lisp:list
       (common-lisp:cons "price"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'storage-per-month-in-gb))
      (common-lisp:list
       (common-lisp:cons "storagePerMonthInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transfer-per-month-in-gb))
      (common-lisp:list
       (common-lisp:cons "transferPerMonthInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-active))
      (common-lisp:list
       (common-lisp:cons "isActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket-bundle))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bucket-bundle-list ()
   '(trivial-types:proper-list bucket-bundle))
 (common-lisp:defun make-bucket-bundle-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bucket-bundle))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype bucket-list () '(trivial-types:proper-list bucket))
 (common-lisp:defun make-bucket-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bucket))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bucket-metric-name () 'common-lisp:string)
(common-lisp:deftype bucket-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (bucket-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-bucket-state-"))
   (code common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'bucket-state 'make-bucket-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bucket-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bucket-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bucket-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (bundle (:copier common-lisp:nil) (:conc-name "struct-shape-bundle-"))
   (price common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null))
   (cpu-count common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (disk-size-in-gb common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (bundle-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (is-active common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (power common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (ram-size-in-gb common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null))
   (transfer-per-month-in-gb common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (supported-platforms common-lisp:nil :type
    (common-lisp:or instance-platform-list common-lisp:null))
   (supported-app-categories common-lisp:nil :type
    (common-lisp:or app-category-list common-lisp:null))
   (public-ipv4address-count common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'bundle 'make-bundle))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bundle))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bundle))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price))
      (common-lisp:list
       (common-lisp:cons "price"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu-count))
      (common-lisp:list
       (common-lisp:cons "cpuCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "diskSizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-active))
      (common-lisp:list
       (common-lisp:cons "isActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'power))
      (common-lisp:list
       (common-lisp:cons "power"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ram-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "ramSizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transfer-per-month-in-gb))
      (common-lisp:list
       (common-lisp:cons "transferPerMonthInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supported-platforms))
      (common-lisp:list
       (common-lisp:cons "supportedPlatforms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-app-categories))
      (common-lisp:list
       (common-lisp:cons "supportedAppCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-ipv4address-count))
      (common-lisp:list
       (common-lisp:cons "publicIpv4AddressCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bundle))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype bundle-list () '(trivial-types:proper-list bundle))
 (common-lisp:defun make-bundle-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bundle))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cache-behavior (:copier common-lisp:nil)
      (:conc-name "struct-shape-cache-behavior-"))
   (behavior common-lisp:nil :type
    (common-lisp:or behavior-enum common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cache-behavior 'make-cache-behavior))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cache-behavior))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cache-behavior))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behavior))
      (common-lisp:list
       (common-lisp:cons "behavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cache-behavior))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cache-behavior-list ()
   '(trivial-types:proper-list cache-behavior-per-path))
 (common-lisp:defun make-cache-behavior-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cache-behavior-per-path))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cache-behavior-per-path (:copier common-lisp:nil)
      (:conc-name "struct-shape-cache-behavior-per-path-"))
   (path common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (behavior common-lisp:nil :type
    (common-lisp:or behavior-enum common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cache-behavior-per-path 'make-cache-behavior-per-path))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cache-behavior-per-path))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cache-behavior-per-path))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'behavior))
      (common-lisp:list
       (common-lisp:cons "behavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cache-behavior-per-path))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cache-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-cache-settings-"))
   (default-ttl common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (minimum-ttl common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (maximum-ttl common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (allowed-httpmethods common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (cached-httpmethods common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (forwarded-cookies common-lisp:nil :type
    (common-lisp:or cookie-object common-lisp:null))
   (forwarded-headers common-lisp:nil :type
    (common-lisp:or header-object common-lisp:null))
   (forwarded-query-strings common-lisp:nil :type
    (common-lisp:or query-string-object common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cache-settings 'make-cache-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cache-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cache-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-ttl))
      (common-lisp:list
       (common-lisp:cons "defaultTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-ttl))
      (common-lisp:list
       (common-lisp:cons "minimumTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-ttl))
      (common-lisp:list
       (common-lisp:cons "maximumTTL"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-httpmethods))
      (common-lisp:list
       (common-lisp:cons "allowedHTTPMethods"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cached-httpmethods))
      (common-lisp:list
       (common-lisp:cons "cachedHTTPMethods"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forwarded-cookies))
      (common-lisp:list
       (common-lisp:cons "forwardedCookies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forwarded-headers))
      (common-lisp:list
       (common-lisp:cons "forwardedHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'forwarded-query-strings))
      (common-lisp:list
       (common-lisp:cons "forwardedQueryStrings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cache-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (certificate (:copier common-lisp:nil)
      (:conc-name "struct-shape-certificate-"))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or certificate-name common-lisp:null))
   (domain-name common-lisp:nil :type
    (common-lisp:or domain-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or certificate-status common-lisp:null))
   (serial-number common-lisp:nil :type
    (common-lisp:or serial-number common-lisp:null))
   (subject-alternative-names common-lisp:nil :type
    (common-lisp:or subject-alternative-name-list common-lisp:null))
   (domain-validation-records common-lisp:nil :type
    (common-lisp:or domain-validation-record-list common-lisp:null))
   (request-failure-reason common-lisp:nil :type
    (common-lisp:or request-failure-reason common-lisp:null))
   (in-use-resource-count common-lisp:nil :type
    (common-lisp:or in-use-resource-count common-lisp:null))
   (key-algorithm common-lisp:nil :type
    (common-lisp:or key-algorithm common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (issued-at common-lisp:nil :type (common-lisp:or iso-date common-lisp:null))
   (issuer-ca common-lisp:nil :type
    (common-lisp:or issuer-ca common-lisp:null))
   (not-before common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (not-after common-lisp:nil :type (common-lisp:or iso-date common-lisp:null))
   (eligible-to-renew common-lisp:nil :type
    (common-lisp:or eligible-to-renew common-lisp:null))
   (renewal-summary common-lisp:nil :type
    (common-lisp:or renewal-summary common-lisp:null))
   (revoked-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (revocation-reason common-lisp:nil :type
    (common-lisp:or revocation-reason common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (support-code common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'certificate 'make-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "serialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-alternative-names))
      (common-lisp:list
       (common-lisp:cons "subjectAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-validation-records))
      (common-lisp:list
       (common-lisp:cons "domainValidationRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-failure-reason))
      (common-lisp:list
       (common-lisp:cons "requestFailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'in-use-resource-count))
      (common-lisp:list
       (common-lisp:cons "inUseResourceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-algorithm))
      (common-lisp:list
       (common-lisp:cons "keyAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issued-at))
      (common-lisp:list
       (common-lisp:cons "issuedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer-ca))
      (common-lisp:list
       (common-lisp:cons "issuerCA"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-before))
      (common-lisp:list
       (common-lisp:cons "notBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-after))
      (common-lisp:list
       (common-lisp:cons "notAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eligible-to-renew))
      (common-lisp:list
       (common-lisp:cons "eligibleToRenew"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-summary))
      (common-lisp:list
       (common-lisp:cons "renewalSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoked-at))
      (common-lisp:list
       (common-lisp:cons "revokedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revocation-reason))
      (common-lisp:list
       (common-lisp:cons "revocationReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate))
   common-lisp:nil))
(common-lisp:deftype certificate-domain-validation-status ()
  'common-lisp:string)
(common-lisp:deftype certificate-name () 'common-lisp:string)
(common-lisp:deftype certificate-provider () 'common-lisp:string)
(common-lisp:deftype certificate-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype certificate-status-list ()
   '(trivial-types:proper-list certificate-status))
 (common-lisp:defun make-certificate-status-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (certificate-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-certificate-summary-"))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (certificate-name common-lisp:nil :type
    (common-lisp:or certificate-name common-lisp:null))
   (domain-name common-lisp:nil :type
    (common-lisp:or domain-name common-lisp:null))
   (certificate-detail common-lisp:nil :type
    (common-lisp:or certificate common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'certificate-summary 'make-certificate-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-arn))
      (common-lisp:list
       (common-lisp:cons "certificateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-name))
      (common-lisp:list
       (common-lisp:cons "certificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-detail))
      (common-lisp:list
       (common-lisp:cons "certificateDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype certificate-summary-list ()
   '(trivial-types:proper-list certificate-summary))
 (common-lisp:defun make-certificate-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (close-instance-public-ports-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-close-instance-public-ports-request-"))
   (port-info (common-lisp:error ":portinfo is required") :type
    (common-lisp:or port-info common-lisp:null))
   (instance-name (common-lisp:error ":instancename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'close-instance-public-ports-request
                    'make-close-instance-public-ports-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          close-instance-public-ports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          close-instance-public-ports-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-info))
      (common-lisp:list
       (common-lisp:cons "portInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          close-instance-public-ports-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (close-instance-public-ports-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-close-instance-public-ports-result-"))
   (operation common-lisp:nil :type
    (common-lisp:or operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'close-instance-public-ports-result
                    'make-close-instance-public-ports-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          close-instance-public-ports-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          close-instance-public-ports-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          close-instance-public-ports-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-formation-stack-record (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-formation-stack-record-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or resource-location common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or record-state common-lisp:null))
   (source-info common-lisp:nil :type
    (common-lisp:or cloud-formation-stack-record-source-info-list
                    common-lisp:null))
   (destination-info common-lisp:nil :type
    (common-lisp:or destination-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-formation-stack-record
                    'make-cloud-formation-stack-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-stack-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-stack-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-info))
      (common-lisp:list
       (common-lisp:cons "sourceInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-info))
      (common-lisp:list
       (common-lisp:cons "destinationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-stack-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cloud-formation-stack-record-list ()
   '(trivial-types:proper-list cloud-formation-stack-record))
 (common-lisp:defun make-cloud-formation-stack-record-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cloud-formation-stack-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-formation-stack-record-source-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-cloud-formation-stack-record-source-info-"))
   (resource-type common-lisp:nil :type
    (common-lisp:or cloud-formation-stack-record-source-type common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-formation-stack-record-source-info
                    'make-cloud-formation-stack-record-source-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-stack-record-source-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-stack-record-source-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cloud-formation-stack-record-source-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cloud-formation-stack-record-source-info-list ()
   '(trivial-types:proper-list cloud-formation-stack-record-source-info))
 (common-lisp:defun make-cloud-formation-stack-record-source-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            cloud-formation-stack-record-source-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cloud-formation-stack-record-source-type ()
  'common-lisp:string)
(common-lisp:deftype comparison-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (contact-method (:copier common-lisp:nil)
      (:conc-name "struct-shape-contact-method-"))
   (contact-endpoint common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or contact-method-status common-lisp:null))
   (protocol common-lisp:nil :type
    (common-lisp:or contact-protocol common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or resource-location common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (support-code common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'contact-method 'make-contact-method))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input contact-method))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input contact-method))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-endpoint))
      (common-lisp:list
       (common-lisp:cons "contactEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input contact-method))
   common-lisp:nil))
(common-lisp:deftype contact-method-status () 'common-lisp:string)
(common-lisp:deftype contact-method-verification-protocol ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype contact-methods-list ()
   '(trivial-types:proper-list contact-method))
 (common-lisp:defun make-contact-methods-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list contact-method))
   aws-sdk/generator/shape::members))
(common-lisp:deftype contact-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype contact-protocols-list ()
   '(trivial-types:proper-list contact-protocol))
 (common-lisp:defun make-contact-protocols-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list contact-protocol))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (container (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-"))
   (image common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (command common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or environment common-lisp:null))
   (ports common-lisp:nil :type (common-lisp:or port-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'container 'make-container))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ports))
      (common-lisp:list
       (common-lisp:cons "ports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (container-image (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-image-"))
   (image common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (digest common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null)))
 (common-lisp:export (common-lisp:list 'container-image 'make-container-image))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container-image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container-image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'digest))
      (common-lisp:list
       (common-lisp:cons "digest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container-image))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-image-list ()
   '(trivial-types:proper-list container-image))
 (common-lisp:defun make-container-image-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list container-image))
   aws-sdk/generator/shape::members))
(common-lisp:deftype container-label () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype container-map () 'common-lisp:hash-table)
 (common-lisp:defun make-container-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype container-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (container-service (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-service-"))
   (container-service-name common-lisp:nil :type
    (common-lisp:or container-service-name common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or resource-location common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (power common-lisp:nil :type
    (common-lisp:or container-service-power-name common-lisp:null))
   (power-id common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or container-service-state common-lisp:null))
   (state-detail common-lisp:nil :type
    (common-lisp:or container-service-state-detail common-lisp:null))
   (scale common-lisp:nil :type
    (common-lisp:or container-service-scale common-lisp:null))
   (current-deployment common-lisp:nil :type
    (common-lisp:or container-service-deployment common-lisp:null))
   (next-deployment common-lisp:nil :type
    (common-lisp:or container-service-deployment common-lisp:null))
   (is-disabled common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (principal-arn common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (private-domain-name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (public-domain-names common-lisp:nil :type
    (common-lisp:or container-service-public-domains common-lisp:null))
   (url common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (private-registry-access common-lisp:nil :type
    (common-lisp:or private-registry-access common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'container-service 'make-container-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container-service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container-service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-service-name))
      (common-lisp:list
       (common-lisp:cons "containerServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'power))
      (common-lisp:list
       (common-lisp:cons "power"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'power-id))
      (common-lisp:list
       (common-lisp:cons "powerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-detail))
      (common-lisp:list
       (common-lisp:cons "stateDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale))
      (common-lisp:list
       (common-lisp:cons "scale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-deployment))
      (common-lisp:list
       (common-lisp:cons "currentDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-deployment))
      (common-lisp:list
       (common-lisp:cons "nextDeployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-disabled))
      (common-lisp:list
       (common-lisp:cons "isDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-domain-name))
      (common-lisp:list
       (common-lisp:cons "privateDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-domain-names))
      (common-lisp:list
       (common-lisp:cons "publicDomainNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-registry-access))
      (common-lisp:list
       (common-lisp:cons "privateRegistryAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container-service))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (container-service-deployment (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-service-deployment-"))
   (version common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or container-service-deployment-state common-lisp:null))
   (containers common-lisp:nil :type
    (common-lisp:or container-map common-lisp:null))
   (public-endpoint common-lisp:nil :type
    (common-lisp:or container-service-endpoint common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'container-service-deployment
                    'make-container-service-deployment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-service-deployment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-service-deployment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'containers))
      (common-lisp:list
       (common-lisp:cons "containers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-endpoint))
      (common-lisp:list
       (common-lisp:cons "publicEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-service-deployment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-service-deployment-list ()
   '(trivial-types:proper-list container-service-deployment))
 (common-lisp:defun make-container-service-deployment-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            container-service-deployment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (container-service-deployment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-service-deployment-request-"))
   (containers common-lisp:nil :type
    (common-lisp:or container-map common-lisp:null))
   (public-endpoint common-lisp:nil :type
    (common-lisp:or endpoint-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'container-service-deployment-request
                    'make-container-service-deployment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-service-deployment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-service-deployment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'containers))
      (common-lisp:list
       (common-lisp:cons "containers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-endpoint))
      (common-lisp:list
       (common-lisp:cons "publicEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-service-deployment-request))
   common-lisp:nil))
(common-lisp:deftype container-service-deployment-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (container-service-ecrimage-puller-role (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-service-ecrimage-puller-role-"))
   (is-active common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (principal-arn common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'container-service-ecrimage-puller-role
                    'make-container-service-ecrimage-puller-role))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-service-ecrimage-puller-role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-service-ecrimage-puller-role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-active))
      (common-lisp:list
       (common-lisp:cons "isActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-arn))
      (common-lisp:list
       (common-lisp:cons "principalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-service-ecrimage-puller-role))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (container-service-ecrimage-puller-role-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-container-service-ecrimage-puller-role-request-"))
   (is-active common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'container-service-ecrimage-puller-role-request
                    'make-container-service-ecrimage-puller-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-service-ecrimage-puller-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-service-ecrimage-puller-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-active))
      (common-lisp:list
       (common-lisp:cons "isActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-service-ecrimage-puller-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (container-service-endpoint (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-service-endpoint-"))
   (container-name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (container-port common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (health-check common-lisp:nil :type
    (common-lisp:or container-service-health-check-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'container-service-endpoint
                    'make-container-service-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-service-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-service-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "containerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-port))
      (common-lisp:list
       (common-lisp:cons "containerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "healthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-service-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (container-service-health-check-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-service-health-check-config-"))
   (healthy-threshold common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (unhealthy-threshold common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (timeout-seconds common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (interval-seconds common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (path common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (success-codes common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'container-service-health-check-config
                    'make-container-service-health-check-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-service-health-check-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-service-health-check-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'healthy-threshold))
      (common-lisp:list
       (common-lisp:cons "healthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unhealthy-threshold))
      (common-lisp:list
       (common-lisp:cons "unhealthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout-seconds))
      (common-lisp:list
       (common-lisp:cons "timeoutSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval-seconds))
      (common-lisp:list
       (common-lisp:cons "intervalSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-codes))
      (common-lisp:list
       (common-lisp:cons "successCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-service-health-check-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-service-list ()
   '(trivial-types:proper-list container-service))
 (common-lisp:defun make-container-service-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list container-service))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (container-service-log-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-service-log-event-"))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'container-service-log-event
                    'make-container-service-log-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-service-log-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-service-log-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-service-log-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-service-log-event-list ()
   '(trivial-types:proper-list container-service-log-event))
 (common-lisp:defun make-container-service-log-event-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            container-service-log-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype container-service-metadata-entry ()
   'common-lisp:hash-table)
 (common-lisp:defun make-container-service-metadata-entry
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype container-service-metadata-entry-list ()
   '(trivial-types:proper-list container-service-metadata-entry))
 (common-lisp:defun make-container-service-metadata-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            container-service-metadata-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype container-service-metric-name () 'common-lisp:string)
(common-lisp:deftype container-service-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (container-service-power (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-service-power-"))
   (power-id common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (price common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null))
   (cpu-count common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null))
   (ram-size-in-gb common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (is-active common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'container-service-power 'make-container-service-power))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-service-power))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-service-power))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'power-id))
      (common-lisp:list
       (common-lisp:cons "powerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price))
      (common-lisp:list
       (common-lisp:cons "price"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu-count))
      (common-lisp:list
       (common-lisp:cons "cpuCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ram-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "ramSizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-active))
      (common-lisp:list
       (common-lisp:cons "isActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-service-power))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-service-power-list ()
   '(trivial-types:proper-list container-service-power))
 (common-lisp:defun make-container-service-power-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list container-service-power))
   aws-sdk/generator/shape::members))
(common-lisp:deftype container-service-power-name () 'common-lisp:string)
(common-lisp:deftype container-service-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype container-service-public-domains ()
   'common-lisp:hash-table)
 (common-lisp:defun make-container-service-public-domains
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype container-service-public-domains-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun make-container-service-public-domains-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (container-service-registry-login (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-service-registry-login-"))
   (username common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (password common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (expires-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (registry common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'container-service-registry-login
                    'make-container-service-registry-login))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-service-registry-login))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-service-registry-login))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-at))
      (common-lisp:list
       (common-lisp:cons "expiresAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry))
      (common-lisp:list
       (common-lisp:cons "registry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-service-registry-login))
   common-lisp:nil))
(common-lisp:deftype container-service-scale () 'common-lisp:integer)
(common-lisp:deftype container-service-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (container-service-state-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-service-state-detail-"))
   (code common-lisp:nil :type
    (common-lisp:or container-service-state-detail-code common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'container-service-state-detail
                    'make-container-service-state-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-service-state-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-service-state-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-service-state-detail))
   common-lisp:nil))
(common-lisp:deftype container-service-state-detail-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (container-services-list-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-services-list-result-"))
   (container-services common-lisp:nil :type
    (common-lisp:or container-service-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'container-services-list-result
                    'make-container-services-list-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-services-list-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-services-list-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-services))
      (common-lisp:list
       (common-lisp:cons "containerServices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-services-list-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cookie-object (:copier common-lisp:nil)
      (:conc-name "struct-shape-cookie-object-"))
   (option common-lisp:nil :type
    (common-lisp:or forward-values common-lisp:null))
   (cookies-allow-list common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cookie-object 'make-cookie-object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cookie-object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cookie-object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option))
      (common-lisp:list
       (common-lisp:cons "option"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cookies-allow-list))
      (common-lisp:list
       (common-lisp:cons "cookiesAllowList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cookie-object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-snapshot-request-"))
   (source-snapshot-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (source-resource-name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (restore-date common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (use-latest-restorable-auto-snapshot common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (target-snapshot-name (common-lisp:error ":targetsnapshotname is required")
    :type (common-lisp:or resource-name common-lisp:null))
   (source-region (common-lisp:error ":sourceregion is required") :type
    (common-lisp:or region-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-snapshot-request 'make-copy-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          copy-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          copy-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "sourceSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-resource-name))
      (common-lisp:list
       (common-lisp:cons "sourceResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-date))
      (common-lisp:list
       (common-lisp:cons "restoreDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-latest-restorable-auto-snapshot))
      (common-lisp:list
       (common-lisp:cons "useLatestRestorableAutoSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "targetSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-region))
      (common-lisp:list
       (common-lisp:cons "sourceRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          copy-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (copy-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-copy-snapshot-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'copy-snapshot-result 'make-copy-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input copy-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input copy-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input copy-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cost-estimate (:copier common-lisp:nil)
      (:conc-name "struct-shape-cost-estimate-"))
   (usage-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (results-by-time common-lisp:nil :type
    (common-lisp:or estimates-by-time common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cost-estimate 'make-cost-estimate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cost-estimate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cost-estimate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-type))
      (common-lisp:list
       (common-lisp:cons "usageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results-by-time))
      (common-lisp:list
       (common-lisp:cons "resultsByTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cost-estimate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cost-estimates ()
   '(trivial-types:proper-list cost-estimate))
 (common-lisp:defun make-cost-estimates
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cost-estimate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (create-bucket-access-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-bucket-access-key-request-"))
   (bucket-name (common-lisp:error ":bucketname is required") :type
    (common-lisp:or bucket-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-bucket-access-key-request
                    'make-create-bucket-access-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-access-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-access-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-access-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-bucket-access-key-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-bucket-access-key-result-"))
   (access-key common-lisp:nil :type
    (common-lisp:or access-key common-lisp:null))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-bucket-access-key-result
                    'make-create-bucket-access-key-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-access-key-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-access-key-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key))
      (common-lisp:list
       (common-lisp:cons "accessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-access-key-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-bucket-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-bucket-request-"))
   (bucket-name (common-lisp:error ":bucketname is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (bundle-id (common-lisp:error ":bundleid is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (enable-object-versioning common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-bucket-request 'make-create-bucket-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-object-versioning))
      (common-lisp:list
       (common-lisp:cons "enableObjectVersioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bucket-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-bucket-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-bucket-result-"))
   (bucket common-lisp:nil :type (common-lisp:or bucket common-lisp:null))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-bucket-result 'make-create-bucket-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-bucket-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-bucket-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-bucket-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-certificate-request-"))
   (certificate-name (common-lisp:error ":certificatename is required") :type
    (common-lisp:or certificate-name common-lisp:null))
   (domain-name (common-lisp:error ":domainname is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (subject-alternative-names common-lisp:nil :type
    (common-lisp:or subject-alternative-name-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-certificate-request
                    'make-create-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-name))
      (common-lisp:list
       (common-lisp:cons "certificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-alternative-names))
      (common-lisp:list
       (common-lisp:cons "subjectAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-certificate-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-certificate-result-"))
   (certificate common-lisp:nil :type
    (common-lisp:or certificate-summary common-lisp:null))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-certificate-result
                    'make-create-certificate-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-certificate-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cloud-formation-stack-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cloud-formation-stack-request-"))
   (instances (common-lisp:error ":instances is required") :type
    (common-lisp:or instance-entry-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cloud-formation-stack-request
                    'make-create-cloud-formation-stack-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-stack-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-stack-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-stack-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-cloud-formation-stack-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-cloud-formation-stack-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-cloud-formation-stack-result
                    'make-create-cloud-formation-stack-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-stack-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-stack-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-cloud-formation-stack-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-contact-method-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-contact-method-request-"))
   (protocol (common-lisp:error ":protocol is required") :type
    (common-lisp:or contact-protocol common-lisp:null))
   (contact-endpoint (common-lisp:error ":contactendpoint is required") :type
    (common-lisp:or string-max256 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-contact-method-request
                    'make-create-contact-method-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-method-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-method-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-endpoint))
      (common-lisp:list
       (common-lisp:cons "contactEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-method-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-contact-method-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-contact-method-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-contact-method-result
                    'make-create-contact-method-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-method-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-method-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-contact-method-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-container-service-deployment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-container-service-deployment-request-"))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or container-service-name common-lisp:null))
   (containers common-lisp:nil :type
    (common-lisp:or container-map common-lisp:null))
   (public-endpoint common-lisp:nil :type
    (common-lisp:or endpoint-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-container-service-deployment-request
                    'make-create-container-service-deployment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-deployment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-deployment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'containers))
      (common-lisp:list
       (common-lisp:cons "containers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-endpoint))
      (common-lisp:list
       (common-lisp:cons "publicEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-deployment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-container-service-deployment-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-container-service-deployment-result-"))
   (container-service common-lisp:nil :type
    (common-lisp:or container-service common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-container-service-deployment-result
                    'make-create-container-service-deployment-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-deployment-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-deployment-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-service))
      (common-lisp:list
       (common-lisp:cons "containerService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-deployment-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-container-service-registry-login-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-container-service-registry-login-request-")))
 (common-lisp:export
  (common-lisp:list 'create-container-service-registry-login-request
                    'make-create-container-service-registry-login-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-registry-login-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-registry-login-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-registry-login-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-container-service-registry-login-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-container-service-registry-login-result-"))
   (registry-login common-lisp:nil :type
    (common-lisp:or container-service-registry-login common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-container-service-registry-login-result
                    'make-create-container-service-registry-login-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-registry-login-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-registry-login-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registry-login))
      (common-lisp:list
       (common-lisp:cons "registryLogin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-registry-login-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-container-service-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-container-service-request-"))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or container-service-name common-lisp:null))
   (power (common-lisp:error ":power is required") :type
    (common-lisp:or container-service-power-name common-lisp:null))
   (scale (common-lisp:error ":scale is required") :type
    (common-lisp:or container-service-scale common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (public-domain-names common-lisp:nil :type
    (common-lisp:or container-service-public-domains common-lisp:null))
   (deployment common-lisp:nil :type
    (common-lisp:or container-service-deployment-request common-lisp:null))
   (private-registry-access common-lisp:nil :type
    (common-lisp:or private-registry-access-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-container-service-request
                    'make-create-container-service-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'power))
      (common-lisp:list
       (common-lisp:cons "power"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale))
      (common-lisp:list
       (common-lisp:cons "scale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-domain-names))
      (common-lisp:list
       (common-lisp:cons "publicDomainNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment))
      (common-lisp:list
       (common-lisp:cons "deployment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-registry-access))
      (common-lisp:list
       (common-lisp:cons "privateRegistryAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-container-service-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-container-service-result-"))
   (container-service common-lisp:nil :type
    (common-lisp:or container-service common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-container-service-result
                    'make-create-container-service-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-service))
      (common-lisp:list
       (common-lisp:cons "containerService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-container-service-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-disk-from-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-disk-from-snapshot-request-"))
   (disk-name (common-lisp:error ":diskname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (disk-snapshot-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (availability-zone (common-lisp:error ":availabilityzone is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (size-in-gb (common-lisp:error ":sizeingb is required") :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (add-ons common-lisp:nil :type
    (common-lisp:or add-on-request-list common-lisp:null))
   (source-disk-name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (restore-date common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (use-latest-restorable-auto-snapshot common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-disk-from-snapshot-request
                    'make-create-disk-from-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-disk-from-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-disk-from-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-name))
      (common-lisp:list
       (common-lisp:cons "diskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "diskSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "availabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gb))
      (common-lisp:list
       (common-lisp:cons "sizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-ons))
      (common-lisp:list
       (common-lisp:cons "addOns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-disk-name))
      (common-lisp:list
       (common-lisp:cons "sourceDiskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-date))
      (common-lisp:list
       (common-lisp:cons "restoreDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-latest-restorable-auto-snapshot))
      (common-lisp:list
       (common-lisp:cons "useLatestRestorableAutoSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-disk-from-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-disk-from-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-disk-from-snapshot-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-disk-from-snapshot-result
                    'make-create-disk-from-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-disk-from-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-disk-from-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-disk-from-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-disk-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-disk-request-"))
   (disk-name (common-lisp:error ":diskname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (availability-zone (common-lisp:error ":availabilityzone is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (size-in-gb (common-lisp:error ":sizeingb is required") :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (add-ons common-lisp:nil :type
    (common-lisp:or add-on-request-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-disk-request 'make-create-disk-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-disk-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-disk-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-name))
      (common-lisp:list
       (common-lisp:cons "diskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "availabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gb))
      (common-lisp:list
       (common-lisp:cons "sizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-ons))
      (common-lisp:list
       (common-lisp:cons "addOns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-disk-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-disk-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-disk-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-disk-result 'make-create-disk-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-disk-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-disk-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-disk-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-disk-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-disk-snapshot-request-"))
   (disk-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (disk-snapshot-name (common-lisp:error ":disksnapshotname is required")
    :type (common-lisp:or resource-name common-lisp:null))
   (instance-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-disk-snapshot-request
                    'make-create-disk-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-disk-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-disk-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-name))
      (common-lisp:list
       (common-lisp:cons "diskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "diskSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-disk-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-disk-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-disk-snapshot-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-disk-snapshot-result
                    'make-create-disk-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-disk-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-disk-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-disk-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-distribution-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-distribution-request-"))
   (distribution-name (common-lisp:error ":distributionname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (origin (common-lisp:error ":origin is required") :type
    (common-lisp:or input-origin common-lisp:null))
   (default-cache-behavior
    (common-lisp:error ":defaultcachebehavior is required") :type
    (common-lisp:or cache-behavior common-lisp:null))
   (cache-behavior-settings common-lisp:nil :type
    (common-lisp:or cache-settings common-lisp:null))
   (cache-behaviors common-lisp:nil :type
    (common-lisp:or cache-behavior-list common-lisp:null))
   (bundle-id (common-lisp:error ":bundleid is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (ip-address-type common-lisp:nil :type
    (common-lisp:or ip-address-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-distribution-request
                    'make-create-distribution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-name))
      (common-lisp:list
       (common-lisp:cons "distributionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin))
      (common-lisp:list
       (common-lisp:cons "origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-cache-behavior))
      (common-lisp:list
       (common-lisp:cons "defaultCacheBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-behavior-settings))
      (common-lisp:list
       (common-lisp:cons "cacheBehaviorSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-behaviors))
      (common-lisp:list
       (common-lisp:cons "cacheBehaviors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "ipAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-distribution-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-distribution-result-"))
   (distribution common-lisp:nil :type
    (common-lisp:or lightsail-distribution common-lisp:null))
   (operation common-lisp:nil :type
    (common-lisp:or operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-distribution-result
                    'make-create-distribution-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution))
      (common-lisp:list
       (common-lisp:cons "distribution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-distribution-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-domain-entry-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-domain-entry-request-"))
   (domain-name (common-lisp:error ":domainname is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-entry (common-lisp:error ":domainentry is required") :type
    (common-lisp:or domain-entry common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-domain-entry-request
                    'make-create-domain-entry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-entry-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-entry))
      (common-lisp:list
       (common-lisp:cons "domainEntry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-entry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-domain-entry-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-domain-entry-result-"))
   (operation common-lisp:nil :type
    (common-lisp:or operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-domain-entry-result
                    'make-create-domain-entry-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-entry-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-entry-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-entry-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-domain-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-domain-request-"))
   (domain-name (common-lisp:error ":domainname is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-domain-request 'make-create-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-domain-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-domain-result-"))
   (operation common-lisp:nil :type
    (common-lisp:or operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-domain-result 'make-create-domain-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-domain-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-domain-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-domain-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-guisession-access-details-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-guisession-access-details-request-"))
   (resource-name (common-lisp:error ":resourcename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-guisession-access-details-request
                    'make-create-guisession-access-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-guisession-access-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-guisession-access-details-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-guisession-access-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-guisession-access-details-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-guisession-access-details-result-"))
   (resource-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or status common-lisp:null))
   (percentage-complete common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (sessions common-lisp:nil :type (common-lisp:or sessions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-guisession-access-details-result
                    'make-create-guisession-access-details-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-guisession-access-details-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-guisession-access-details-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percentage-complete))
      (common-lisp:list
       (common-lisp:cons "percentageComplete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sessions))
      (common-lisp:list
       (common-lisp:cons "sessions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-guisession-access-details-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-instance-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-instance-snapshot-request-"))
   (instance-snapshot-name
    (common-lisp:error ":instancesnapshotname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (instance-name (common-lisp:error ":instancename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-instance-snapshot-request
                    'make-create-instance-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "instanceSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-instance-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-instance-snapshot-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-instance-snapshot-result
                    'make-create-instance-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-instances-from-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-instances-from-snapshot-request-"))
   (instance-names (common-lisp:error ":instancenames is required") :type
    (common-lisp:or string-list common-lisp:null))
   (attached-disk-mapping common-lisp:nil :type
    (common-lisp:or attached-disk-map common-lisp:null))
   (availability-zone (common-lisp:error ":availabilityzone is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (instance-snapshot-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (bundle-id (common-lisp:error ":bundleid is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (user-data common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (key-pair-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (add-ons common-lisp:nil :type
    (common-lisp:or add-on-request-list common-lisp:null))
   (ip-address-type common-lisp:nil :type
    (common-lisp:or ip-address-type common-lisp:null))
   (source-instance-name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (restore-date common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (use-latest-restorable-auto-snapshot common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-instances-from-snapshot-request
                    'make-create-instances-from-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instances-from-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instances-from-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-names))
      (common-lisp:list
       (common-lisp:cons "instanceNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attached-disk-mapping))
      (common-lisp:list
       (common-lisp:cons "attachedDiskMapping"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "availabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "instanceSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data))
      (common-lisp:list
       (common-lisp:cons "userData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair-name))
      (common-lisp:list
       (common-lisp:cons "keyPairName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-ons))
      (common-lisp:list
       (common-lisp:cons "addOns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "ipAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-instance-name))
      (common-lisp:list
       (common-lisp:cons "sourceInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-date))
      (common-lisp:list
       (common-lisp:cons "restoreDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-latest-restorable-auto-snapshot))
      (common-lisp:list
       (common-lisp:cons "useLatestRestorableAutoSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instances-from-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-instances-from-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-instances-from-snapshot-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-instances-from-snapshot-result
                    'make-create-instances-from-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instances-from-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instances-from-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instances-from-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-instances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-instances-request-"))
   (instance-names (common-lisp:error ":instancenames is required") :type
    (common-lisp:or string-list common-lisp:null))
   (availability-zone (common-lisp:error ":availabilityzone is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (custom-image-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (blueprint-id (common-lisp:error ":blueprintid is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (bundle-id (common-lisp:error ":bundleid is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (user-data common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (key-pair-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (add-ons common-lisp:nil :type
    (common-lisp:or add-on-request-list common-lisp:null))
   (ip-address-type common-lisp:nil :type
    (common-lisp:or ip-address-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-instances-request 'make-create-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-names))
      (common-lisp:list
       (common-lisp:cons "instanceNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "availabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-image-name))
      (common-lisp:list
       (common-lisp:cons "customImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-id))
      (common-lisp:list
       (common-lisp:cons "blueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data))
      (common-lisp:list
       (common-lisp:cons "userData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair-name))
      (common-lisp:list
       (common-lisp:cons "keyPairName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-ons))
      (common-lisp:list
       (common-lisp:cons "addOns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "ipAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-instances-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-instances-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-instances-result 'make-create-instances-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instances-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instances-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instances-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-key-pair-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-key-pair-request-"))
   (key-pair-name (common-lisp:error ":keypairname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-key-pair-request 'make-create-key-pair-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-key-pair-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-key-pair-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair-name))
      (common-lisp:list
       (common-lisp:cons "keyPairName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-key-pair-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-key-pair-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-key-pair-result-"))
   (key-pair common-lisp:nil :type (common-lisp:or key-pair common-lisp:null))
   (public-key-base64 common-lisp:nil :type
    (common-lisp:or base64 common-lisp:null))
   (private-key-base64 common-lisp:nil :type
    (common-lisp:or base64 common-lisp:null))
   (operation common-lisp:nil :type
    (common-lisp:or operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-key-pair-result 'make-create-key-pair-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-key-pair-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-key-pair-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair))
      (common-lisp:list
       (common-lisp:cons "keyPair"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key-base64))
      (common-lisp:list
       (common-lisp:cons "publicKeyBase64"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key-base64))
      (common-lisp:list
       (common-lisp:cons "privateKeyBase64"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-key-pair-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-load-balancer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-load-balancer-request-"))
   (load-balancer-name (common-lisp:error ":loadbalancername is required")
    :type (common-lisp:or resource-name common-lisp:null))
   (instance-port (common-lisp:error ":instanceport is required") :type
    (common-lisp:or port common-lisp:null))
   (health-check-path common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (certificate-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (certificate-domain-name common-lisp:nil :type
    (common-lisp:or domain-name common-lisp:null))
   (certificate-alternative-names common-lisp:nil :type
    (common-lisp:or domain-name-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (ip-address-type common-lisp:nil :type
    (common-lisp:or ip-address-type common-lisp:null))
   (tls-policy-name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-load-balancer-request
                    'make-create-load-balancer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-port))
      (common-lisp:list
       (common-lisp:cons "instancePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-path))
      (common-lisp:list
       (common-lisp:cons "healthCheckPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-name))
      (common-lisp:list
       (common-lisp:cons "certificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-domain-name))
      (common-lisp:list
       (common-lisp:cons "certificateDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-alternative-names))
      (common-lisp:list
       (common-lisp:cons "certificateAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "ipAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls-policy-name))
      (common-lisp:list
       (common-lisp:cons "tlsPolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-load-balancer-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-load-balancer-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-load-balancer-result
                    'make-create-load-balancer-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-load-balancer-tls-certificate-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-load-balancer-tls-certificate-request-"))
   (load-balancer-name (common-lisp:error ":loadbalancername is required")
    :type (common-lisp:or resource-name common-lisp:null))
   (certificate-name (common-lisp:error ":certificatename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (certificate-domain-name
    (common-lisp:error ":certificatedomainname is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (certificate-alternative-names common-lisp:nil :type
    (common-lisp:or domain-name-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-load-balancer-tls-certificate-request
                    'make-create-load-balancer-tls-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-tls-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-tls-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-name))
      (common-lisp:list
       (common-lisp:cons "certificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-domain-name))
      (common-lisp:list
       (common-lisp:cons "certificateDomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-alternative-names))
      (common-lisp:list
       (common-lisp:cons "certificateAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-tls-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-load-balancer-tls-certificate-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-load-balancer-tls-certificate-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-load-balancer-tls-certificate-result
                    'make-create-load-balancer-tls-certificate-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-tls-certificate-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-tls-certificate-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-load-balancer-tls-certificate-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-relational-database-from-snapshot-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-relational-database-from-snapshot-request-"))
   (relational-database-name
    (common-lisp:error ":relationaldatabasename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (relational-database-snapshot-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (relational-database-bundle-id common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (source-relational-database-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (restore-time common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (use-latest-restorable-time common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-relational-database-from-snapshot-request
                    'make-create-relational-database-from-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-from-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-from-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "availabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "publiclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-bundle-id))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseBundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-relational-database-name))
      (common-lisp:list
       (common-lisp:cons "sourceRelationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restore-time))
      (common-lisp:list
       (common-lisp:cons "restoreTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'use-latest-restorable-time))
      (common-lisp:list
       (common-lisp:cons "useLatestRestorableTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-from-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-relational-database-from-snapshot-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-relational-database-from-snapshot-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-relational-database-from-snapshot-result
                    'make-create-relational-database-from-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-from-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-from-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-from-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-relational-database-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-relational-database-request-"))
   (relational-database-name
    (common-lisp:error ":relationaldatabasename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (relational-database-blueprint-id
    (common-lisp:error ":relationaldatabaseblueprintid is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (relational-database-bundle-id
    (common-lisp:error ":relationaldatabasebundleid is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (master-database-name (common-lisp:error ":masterdatabasename is required")
    :type (common-lisp:or common-lisp:string common-lisp:null))
   (master-username (common-lisp:error ":masterusername is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (master-user-password common-lisp:nil :type
    (common-lisp:or sensitive-string common-lisp:null))
   (preferred-backup-window common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-relational-database-request
                    'make-create-relational-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "availabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-bundle-id))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseBundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-database-name))
      (common-lisp:list
       (common-lisp:cons "masterDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "masterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "masterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "preferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "preferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "publiclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-relational-database-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-relational-database-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-relational-database-result
                    'make-create-relational-database-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-relational-database-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-relational-database-snapshot-request-"))
   (relational-database-name
    (common-lisp:error ":relationaldatabasename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (relational-database-snapshot-name
    (common-lisp:error ":relationaldatabasesnapshotname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-relational-database-snapshot-request
                    'make-create-relational-database-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-relational-database-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-relational-database-snapshot-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-relational-database-snapshot-result
                    'make-create-relational-database-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-relational-database-snapshot-result))
   common-lisp:nil))
(common-lisp:deftype currency () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-alarm-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-alarm-request-"))
   (alarm-name (common-lisp:error ":alarmname is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-alarm-request 'make-delete-alarm-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-alarm-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-alarm-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-name))
      (common-lisp:list
       (common-lisp:cons "alarmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-alarm-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-alarm-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-alarm-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-alarm-result 'make-delete-alarm-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-alarm-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-alarm-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-alarm-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-auto-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-auto-snapshot-request-"))
   (resource-name (common-lisp:error ":resourcename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (date (common-lisp:error ":date is required") :type
    (common-lisp:or auto-snapshot-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-auto-snapshot-request
                    'make-delete-auto-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-auto-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-auto-snapshot-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-auto-snapshot-result
                    'make-delete-auto-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-bucket-access-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-bucket-access-key-request-"))
   (bucket-name (common-lisp:error ":bucketname is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (access-key-id (common-lisp:error ":accesskeyid is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-access-key-request
                    'make-delete-bucket-access-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-access-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-access-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "accessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-access-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-bucket-access-key-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-bucket-access-key-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-access-key-result
                    'make-delete-bucket-access-key-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-access-key-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-access-key-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-access-key-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-bucket-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-bucket-request-"))
   (bucket-name (common-lisp:error ":bucketname is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (force-delete common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-request 'make-delete-bucket-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force-delete))
      (common-lisp:list
       (common-lisp:cons "forceDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-bucket-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-bucket-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-bucket-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-bucket-result 'make-delete-bucket-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-bucket-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-bucket-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-bucket-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-certificate-request-"))
   (certificate-name (common-lisp:error ":certificatename is required") :type
    (common-lisp:or certificate-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-certificate-request
                    'make-delete-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-name))
      (common-lisp:list
       (common-lisp:cons "certificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-certificate-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-certificate-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-certificate-result
                    'make-delete-certificate-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-certificate-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-contact-method-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-contact-method-request-"))
   (protocol (common-lisp:error ":protocol is required") :type
    (common-lisp:or contact-protocol common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-contact-method-request
                    'make-delete-contact-method-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-method-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-method-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-method-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-contact-method-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-contact-method-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-contact-method-result
                    'make-delete-contact-method-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-method-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-method-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-contact-method-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-container-image-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-container-image-request-"))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or container-service-name common-lisp:null))
   (image (common-lisp:error ":image is required") :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-container-image-request
                    'make-delete-container-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-container-image-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-container-image-result-")))
 (common-lisp:export
  (common-lisp:list 'delete-container-image-result
                    'make-delete-container-image-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-image-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-image-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-image-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-container-service-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-container-service-request-"))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or container-service-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-container-service-request
                    'make-delete-container-service-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-container-service-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-container-service-result-")))
 (common-lisp:export
  (common-lisp:list 'delete-container-service-result
                    'make-delete-container-service-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-service-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-service-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-container-service-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-disk-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-disk-request-"))
   (disk-name (common-lisp:error ":diskname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (force-delete-add-ons common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-disk-request 'make-delete-disk-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-disk-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-disk-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-name))
      (common-lisp:list
       (common-lisp:cons "diskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'force-delete-add-ons))
      (common-lisp:list
       (common-lisp:cons "forceDeleteAddOns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-disk-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-disk-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-disk-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-disk-result 'make-delete-disk-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-disk-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-disk-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-disk-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-disk-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-disk-snapshot-request-"))
   (disk-snapshot-name (common-lisp:error ":disksnapshotname is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-disk-snapshot-request
                    'make-delete-disk-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-disk-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-disk-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "diskSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-disk-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-disk-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-disk-snapshot-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-disk-snapshot-result
                    'make-delete-disk-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-disk-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-disk-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-disk-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-distribution-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-distribution-request-"))
   (distribution-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-distribution-request
                    'make-delete-distribution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-name))
      (common-lisp:list
       (common-lisp:cons "distributionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-distribution-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-distribution-result-"))
   (operation common-lisp:nil :type
    (common-lisp:or operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-distribution-result
                    'make-delete-distribution-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-distribution-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-domain-entry-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-domain-entry-request-"))
   (domain-name (common-lisp:error ":domainname is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-entry (common-lisp:error ":domainentry is required") :type
    (common-lisp:or domain-entry common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-domain-entry-request
                    'make-delete-domain-entry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-entry-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-entry))
      (common-lisp:list
       (common-lisp:cons "domainEntry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-entry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-domain-entry-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-domain-entry-result-"))
   (operation common-lisp:nil :type
    (common-lisp:or operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-domain-entry-result
                    'make-delete-domain-entry-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-entry-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-entry-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-entry-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-domain-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-domain-request-"))
   (domain-name (common-lisp:error ":domainname is required") :type
    (common-lisp:or domain-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-domain-request 'make-delete-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-domain-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-domain-result-"))
   (operation common-lisp:nil :type
    (common-lisp:or operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-domain-result 'make-delete-domain-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-domain-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-domain-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-domain-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-instance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-instance-request-"))
   (instance-name (common-lisp:error ":instancename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (force-delete-add-ons common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-instance-request 'make-delete-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'force-delete-add-ons))
      (common-lisp:list
       (common-lisp:cons "forceDeleteAddOns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-instance-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-instance-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-instance-result 'make-delete-instance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-instance-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-instance-snapshot-request-"))
   (instance-snapshot-name
    (common-lisp:error ":instancesnapshotname is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-instance-snapshot-request
                    'make-delete-instance-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "instanceSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-instance-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-instance-snapshot-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-instance-snapshot-result
                    'make-delete-instance-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-key-pair-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-key-pair-request-"))
   (key-pair-name (common-lisp:error ":keypairname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (expected-fingerprint common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-key-pair-request 'make-delete-key-pair-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-key-pair-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-key-pair-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair-name))
      (common-lisp:list
       (common-lisp:cons "keyPairName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'expected-fingerprint))
      (common-lisp:list
       (common-lisp:cons "expectedFingerprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-key-pair-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-key-pair-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-key-pair-result-"))
   (operation common-lisp:nil :type
    (common-lisp:or operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-key-pair-result 'make-delete-key-pair-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-key-pair-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-key-pair-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-key-pair-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-known-host-keys-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-known-host-keys-request-"))
   (instance-name (common-lisp:error ":instancename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-known-host-keys-request
                    'make-delete-known-host-keys-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-known-host-keys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-known-host-keys-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-known-host-keys-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-known-host-keys-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-known-host-keys-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-known-host-keys-result
                    'make-delete-known-host-keys-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-known-host-keys-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-known-host-keys-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-known-host-keys-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-load-balancer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-load-balancer-request-"))
   (load-balancer-name (common-lisp:error ":loadbalancername is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-load-balancer-request
                    'make-delete-load-balancer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-load-balancer-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-load-balancer-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-load-balancer-result
                    'make-delete-load-balancer-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-load-balancer-tls-certificate-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-load-balancer-tls-certificate-request-"))
   (load-balancer-name (common-lisp:error ":loadbalancername is required")
    :type (common-lisp:or resource-name common-lisp:null))
   (certificate-name (common-lisp:error ":certificatename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (force common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-load-balancer-tls-certificate-request
                    'make-delete-load-balancer-tls-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-tls-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-tls-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-name))
      (common-lisp:list
       (common-lisp:cons "certificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-tls-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-load-balancer-tls-certificate-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-load-balancer-tls-certificate-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-load-balancer-tls-certificate-result
                    'make-delete-load-balancer-tls-certificate-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-tls-certificate-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-tls-certificate-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-load-balancer-tls-certificate-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-relational-database-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-relational-database-request-"))
   (relational-database-name
    (common-lisp:error ":relationaldatabasename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (skip-final-snapshot common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (final-relational-database-snapshot-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-relational-database-request
                    'make-delete-relational-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-relational-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-relational-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-final-snapshot))
      (common-lisp:list
       (common-lisp:cons "skipFinalSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-relational-database-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "finalRelationalDatabaseSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-relational-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-relational-database-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-relational-database-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-relational-database-result
                    'make-delete-relational-database-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-relational-database-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-relational-database-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-relational-database-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-relational-database-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-relational-database-snapshot-request-"))
   (relational-database-snapshot-name
    (common-lisp:error ":relationaldatabasesnapshotname is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-relational-database-snapshot-request
                    'make-delete-relational-database-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-relational-database-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-relational-database-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-relational-database-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-relational-database-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-relational-database-snapshot-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-relational-database-snapshot-result
                    'make-delete-relational-database-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-relational-database-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-relational-database-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-relational-database-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (destination-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-destination-info-"))
   (id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (service common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'destination-info 'make-destination-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destination-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destination-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destination-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-certificate-from-distribution-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-detach-certificate-from-distribution-request-"))
   (distribution-name (common-lisp:error ":distributionname is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-certificate-from-distribution-request
                    'make-detach-certificate-from-distribution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-certificate-from-distribution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-certificate-from-distribution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-name))
      (common-lisp:list
       (common-lisp:cons "distributionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-certificate-from-distribution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-certificate-from-distribution-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-certificate-from-distribution-result-"))
   (operation common-lisp:nil :type
    (common-lisp:or operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-certificate-from-distribution-result
                    'make-detach-certificate-from-distribution-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-certificate-from-distribution-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-certificate-from-distribution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-certificate-from-distribution-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-disk-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-disk-request-"))
   (disk-name (common-lisp:error ":diskname is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-disk-request 'make-detach-disk-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input detach-disk-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input detach-disk-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-name))
      (common-lisp:list
       (common-lisp:cons "diskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input detach-disk-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-disk-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-disk-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-disk-result 'make-detach-disk-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input detach-disk-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input detach-disk-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input detach-disk-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-instances-from-load-balancer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-instances-from-load-balancer-request-"))
   (load-balancer-name (common-lisp:error ":loadbalancername is required")
    :type (common-lisp:or resource-name common-lisp:null))
   (instance-names (common-lisp:error ":instancenames is required") :type
    (common-lisp:or resource-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-instances-from-load-balancer-request
                    'make-detach-instances-from-load-balancer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-instances-from-load-balancer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-instances-from-load-balancer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-names))
      (common-lisp:list
       (common-lisp:cons "instanceNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-instances-from-load-balancer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-instances-from-load-balancer-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-instances-from-load-balancer-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-instances-from-load-balancer-result
                    'make-detach-instances-from-load-balancer-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-instances-from-load-balancer-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-instances-from-load-balancer-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-instances-from-load-balancer-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-static-ip-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-static-ip-request-"))
   (static-ip-name (common-lisp:error ":staticipname is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-static-ip-request 'make-detach-static-ip-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-static-ip-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-static-ip-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-ip-name))
      (common-lisp:list
       (common-lisp:cons "staticIpName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-static-ip-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-static-ip-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-static-ip-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-static-ip-result 'make-detach-static-ip-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-static-ip-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-static-ip-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-static-ip-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-add-on-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-add-on-request-"))
   (add-on-type (common-lisp:error ":addontype is required") :type
    (common-lisp:or add-on-type common-lisp:null))
   (resource-name (common-lisp:error ":resourcename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-add-on-request 'make-disable-add-on-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-add-on-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-add-on-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-on-type))
      (common-lisp:list
       (common-lisp:cons "addOnType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-add-on-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-add-on-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-disable-add-on-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-add-on-result 'make-disable-add-on-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-add-on-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-add-on-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-add-on-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disk (:copier common-lisp:nil) (:conc-name "struct-shape-disk-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (support-code common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or resource-location common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (add-ons common-lisp:nil :type
    (common-lisp:or add-on-list common-lisp:null))
   (size-in-gb common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (is-system-disk common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (iops common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (path common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or disk-state common-lisp:null))
   (attached-to common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (is-attached common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (attachment-state common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (gb-in-use common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (auto-mount-status common-lisp:nil :type
    (common-lisp:or auto-mount-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'disk 'make-disk))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disk))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disk))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-ons))
      (common-lisp:list
       (common-lisp:cons "addOns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gb))
      (common-lisp:list
       (common-lisp:cons "sizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-system-disk))
      (common-lisp:list
       (common-lisp:cons "isSystemDisk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iops))
      (common-lisp:list
       (common-lisp:cons "iops"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attached-to))
      (common-lisp:list
       (common-lisp:cons "attachedTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-attached))
      (common-lisp:list
       (common-lisp:cons "isAttached"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-state))
      (common-lisp:list
       (common-lisp:cons "attachmentState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gb-in-use))
      (common-lisp:list
       (common-lisp:cons "gbInUse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mount-status))
      (common-lisp:list
       (common-lisp:cons "autoMountStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disk))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disk-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-disk-info-"))
   (name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (size-in-gb common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (is-system-disk common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'disk-info 'make-disk-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disk-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disk-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gb))
      (common-lisp:list
       (common-lisp:cons "sizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-system-disk))
      (common-lisp:list
       (common-lisp:cons "isSystemDisk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disk-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype disk-info-list () '(trivial-types:proper-list disk-info))
 (common-lisp:defun make-disk-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list disk-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype disk-list () '(trivial-types:proper-list disk))
 (common-lisp:defun make-disk-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list disk))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (disk-map (:copier common-lisp:nil) (:conc-name "struct-shape-disk-map-"))
   (original-disk-path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (new-disk-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'disk-map 'make-disk-map))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disk-map))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disk-map))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'original-disk-path))
      (common-lisp:list
       (common-lisp:cons "originalDiskPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-disk-name))
      (common-lisp:list
       (common-lisp:cons "newDiskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disk-map))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype disk-map-list () '(trivial-types:proper-list disk-map))
 (common-lisp:defun make-disk-map-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list disk-map))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (disk-snapshot (:copier common-lisp:nil)
      (:conc-name "struct-shape-disk-snapshot-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (support-code common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or resource-location common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (size-in-gb common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or disk-snapshot-state common-lisp:null))
   (progress common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (from-disk-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (from-disk-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (from-instance-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (from-instance-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (is-from-auto-snapshot common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'disk-snapshot 'make-disk-snapshot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disk-snapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disk-snapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gb))
      (common-lisp:list
       (common-lisp:cons "sizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:list
       (common-lisp:cons "progress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-disk-name))
      (common-lisp:list
       (common-lisp:cons "fromDiskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-disk-arn))
      (common-lisp:list
       (common-lisp:cons "fromDiskArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-instance-name))
      (common-lisp:list
       (common-lisp:cons "fromInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-instance-arn))
      (common-lisp:list
       (common-lisp:cons "fromInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-from-auto-snapshot))
      (common-lisp:list
       (common-lisp:cons "isFromAutoSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disk-snapshot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disk-snapshot-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-disk-snapshot-info-"))
   (size-in-gb common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disk-snapshot-info 'make-disk-snapshot-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disk-snapshot-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disk-snapshot-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gb))
      (common-lisp:list
       (common-lisp:cons "sizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disk-snapshot-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype disk-snapshot-list ()
   '(trivial-types:proper-list disk-snapshot))
 (common-lisp:defun make-disk-snapshot-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list disk-snapshot))
   aws-sdk/generator/shape::members))
(common-lisp:deftype disk-snapshot-state () 'common-lisp:string)
(common-lisp:deftype disk-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (distribution-bundle (:copier common-lisp:nil)
      (:conc-name "struct-shape-distribution-bundle-"))
   (bundle-id common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (price common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null))
   (transfer-per-month-in-gb common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (is-active common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'distribution-bundle 'make-distribution-bundle))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input distribution-bundle))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input distribution-bundle))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price))
      (common-lisp:list
       (common-lisp:cons "price"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transfer-per-month-in-gb))
      (common-lisp:list
       (common-lisp:cons "transferPerMonthInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-active))
      (common-lisp:list
       (common-lisp:cons "isActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input distribution-bundle))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype distribution-bundle-list ()
   '(trivial-types:proper-list distribution-bundle))
 (common-lisp:defun make-distribution-bundle-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list distribution-bundle))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype distribution-list ()
   '(trivial-types:proper-list lightsail-distribution))
 (common-lisp:defun make-distribution-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lightsail-distribution))
   aws-sdk/generator/shape::members))
(common-lisp:deftype distribution-metric-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dns-record-creation-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-dns-record-creation-state-"))
   (code common-lisp:nil :type
    (common-lisp:or dns-record-creation-state-code common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dns-record-creation-state
                    'make-dns-record-creation-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dns-record-creation-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dns-record-creation-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dns-record-creation-state))
   common-lisp:nil))
(common-lisp:deftype dns-record-creation-state-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (domain (:copier common-lisp:nil) (:conc-name "struct-shape-domain-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (support-code common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or resource-location common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (domain-entries common-lisp:nil :type
    (common-lisp:or domain-entry-list common-lisp:null))
   (registered-domain-delegation-info common-lisp:nil :type
    (common-lisp:or registered-domain-delegation-info common-lisp:null)))
 (common-lisp:export (common-lisp:list 'domain 'make-domain))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-entries))
      (common-lisp:list
       (common-lisp:cons "domainEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registered-domain-delegation-info))
      (common-lisp:list
       (common-lisp:cons "registeredDomainDelegationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (domain-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-domain-entry-"))
   (id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or domain-name common-lisp:null))
   (target common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (is-alias common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or domain-entry-type common-lisp:null))
   (options common-lisp:nil :type
    (common-lisp:or domain-entry-options common-lisp:null)))
 (common-lisp:export (common-lisp:list 'domain-entry 'make-domain-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target))
      (common-lisp:list
       (common-lisp:cons "target"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-alias))
      (common-lisp:list
       (common-lisp:cons "isAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'options))
      (common-lisp:list
       (common-lisp:cons "options"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-entry-list ()
   '(trivial-types:proper-list domain-entry))
 (common-lisp:defun make-domain-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype domain-entry-options () 'common-lisp:hash-table)
 (common-lisp:defun make-domain-entry-options
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype domain-entry-options-keys () 'common-lisp:string)
(common-lisp:deftype domain-entry-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype domain-list () '(trivial-types:proper-list domain))
 (common-lisp:defun make-domain-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain))
   aws-sdk/generator/shape::members))
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype domain-name-list ()
   '(trivial-types:proper-list domain-name))
 (common-lisp:defun make-domain-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (domain-validation-record (:copier common-lisp:nil)
      (:conc-name "struct-shape-domain-validation-record-"))
   (domain-name common-lisp:nil :type
    (common-lisp:or domain-name common-lisp:null))
   (resource-record common-lisp:nil :type
    (common-lisp:or resource-record common-lisp:null))
   (dns-record-creation-state common-lisp:nil :type
    (common-lisp:or dns-record-creation-state common-lisp:null))
   (validation-status common-lisp:nil :type
    (common-lisp:or certificate-domain-validation-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'domain-validation-record 'make-domain-validation-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          domain-validation-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          domain-validation-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-record))
      (common-lisp:list
       (common-lisp:cons "resourceRecord"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dns-record-creation-state))
      (common-lisp:list
       (common-lisp:cons "dnsRecordCreationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-status))
      (common-lisp:list
       (common-lisp:cons "validationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          domain-validation-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype domain-validation-record-list ()
   '(trivial-types:proper-list domain-validation-record))
 (common-lisp:defun make-domain-validation-record-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            domain-validation-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (download-default-key-pair-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-download-default-key-pair-request-")))
 (common-lisp:export
  (common-lisp:list 'download-default-key-pair-request
                    'make-download-default-key-pair-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          download-default-key-pair-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          download-default-key-pair-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          download-default-key-pair-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (download-default-key-pair-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-download-default-key-pair-result-"))
   (public-key-base64 common-lisp:nil :type
    (common-lisp:or base64 common-lisp:null))
   (private-key-base64 common-lisp:nil :type
    (common-lisp:or base64 common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'download-default-key-pair-result
                    'make-download-default-key-pair-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          download-default-key-pair-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          download-default-key-pair-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key-base64))
      (common-lisp:list
       (common-lisp:cons "publicKeyBase64"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key-base64))
      (common-lisp:list
       (common-lisp:cons "privateKeyBase64"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          download-default-key-pair-result))
   common-lisp:nil))
(common-lisp:deftype eligible-to-renew () 'common-lisp:string)
(common-lisp:deftype email-address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (enable-add-on-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-add-on-request-"))
   (resource-name (common-lisp:error ":resourcename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (add-on-request (common-lisp:error ":addonrequest is required") :type
    (common-lisp:or add-on-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-add-on-request 'make-enable-add-on-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-add-on-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-add-on-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-on-request))
      (common-lisp:list
       (common-lisp:cons "addOnRequest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-add-on-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-add-on-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-add-on-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-add-on-result 'make-enable-add-on-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input enable-add-on-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input enable-add-on-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input enable-add-on-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoint-request-"))
   (container-name (common-lisp:error ":containername is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (container-port (common-lisp:error ":containerport is required") :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (health-check common-lisp:nil :type
    (common-lisp:or container-service-health-check-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'endpoint-request 'make-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "containerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-port))
      (common-lisp:list
       (common-lisp:cons "containerPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check))
      (common-lisp:list
       (common-lisp:cons "healthCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment () 'common-lisp:hash-table)
 (common-lisp:defun make-environment (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (estimate-by-time (:copier common-lisp:nil)
      (:conc-name "struct-shape-estimate-by-time-"))
   (usage-cost common-lisp:nil :type
    (common-lisp:or common-lisp:double-float common-lisp:null))
   (pricing-unit common-lisp:nil :type
    (common-lisp:or pricing-unit common-lisp:null))
   (unit common-lisp:nil :type
    (common-lisp:or common-lisp:double-float common-lisp:null))
   (currency common-lisp:nil :type (common-lisp:or currency common-lisp:null))
   (time-period common-lisp:nil :type
    (common-lisp:or time-period common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'estimate-by-time 'make-estimate-by-time))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input estimate-by-time))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input estimate-by-time))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-cost))
      (common-lisp:list
       (common-lisp:cons "usageCost"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pricing-unit))
      (common-lisp:list
       (common-lisp:cons "pricingUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency))
      (common-lisp:list
       (common-lisp:cons "currency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-period))
      (common-lisp:list
       (common-lisp:cons "timePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input estimate-by-time))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype estimates-by-time ()
   '(trivial-types:proper-list estimate-by-time))
 (common-lisp:defun make-estimates-by-time
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list estimate-by-time))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (export-snapshot-record (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-snapshot-record-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or resource-location common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or record-state common-lisp:null))
   (source-info common-lisp:nil :type
    (common-lisp:or export-snapshot-record-source-info common-lisp:null))
   (destination-info common-lisp:nil :type
    (common-lisp:or destination-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-snapshot-record 'make-export-snapshot-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-snapshot-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-snapshot-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-info))
      (common-lisp:list
       (common-lisp:cons "sourceInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-info))
      (common-lisp:list
       (common-lisp:cons "destinationInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-snapshot-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype export-snapshot-record-list ()
   '(trivial-types:proper-list export-snapshot-record))
 (common-lisp:defun make-export-snapshot-record-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list export-snapshot-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (export-snapshot-record-source-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-snapshot-record-source-info-"))
   (resource-type common-lisp:nil :type
    (common-lisp:or export-snapshot-record-source-type common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (from-resource-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (from-resource-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (instance-snapshot-info common-lisp:nil :type
    (common-lisp:or instance-snapshot-info common-lisp:null))
   (disk-snapshot-info common-lisp:nil :type
    (common-lisp:or disk-snapshot-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-snapshot-record-source-info
                    'make-export-snapshot-record-source-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-snapshot-record-source-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-snapshot-record-source-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-resource-name))
      (common-lisp:list
       (common-lisp:cons "fromResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-resource-arn))
      (common-lisp:list
       (common-lisp:cons "fromResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-snapshot-info))
      (common-lisp:list
       (common-lisp:cons "instanceSnapshotInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-snapshot-info))
      (common-lisp:list
       (common-lisp:cons "diskSnapshotInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-snapshot-record-source-info))
   common-lisp:nil))
(common-lisp:deftype export-snapshot-record-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (export-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-snapshot-request-"))
   (source-snapshot-name (common-lisp:error ":sourcesnapshotname is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-snapshot-request 'make-export-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "sourceSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (export-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-snapshot-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-snapshot-result 'make-export-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-snapshot-result))
   common-lisp:nil))
(common-lisp:deftype forward-values () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-active-names-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-active-names-request-"))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-active-names-request 'make-get-active-names-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-active-names-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-active-names-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-active-names-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-active-names-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-active-names-result-"))
   (active-names common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-active-names-result 'make-get-active-names-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-active-names-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-active-names-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-names))
      (common-lisp:list
       (common-lisp:cons "activeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-active-names-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-alarms-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-alarms-request-"))
   (alarm-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (monitored-resource-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-alarms-request 'make-get-alarms-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-alarms-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-alarms-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-name))
      (common-lisp:list
       (common-lisp:cons "alarmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitored-resource-name))
      (common-lisp:list
       (common-lisp:cons "monitoredResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-alarms-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-alarms-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-alarms-result-"))
   (alarms common-lisp:nil :type (common-lisp:or alarms-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-alarms-result 'make-get-alarms-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-alarms-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-alarms-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarms))
      (common-lisp:list
       (common-lisp:cons "alarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-alarms-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-auto-snapshots-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-auto-snapshots-request-"))
   (resource-name (common-lisp:error ":resourcename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-auto-snapshots-request
                    'make-get-auto-snapshots-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-snapshots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-snapshots-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-snapshots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-auto-snapshots-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-auto-snapshots-result-"))
   (resource-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (auto-snapshots common-lisp:nil :type
    (common-lisp:or auto-snapshot-details-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-auto-snapshots-result
                    'make-get-auto-snapshots-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-snapshots-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-snapshots-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-snapshots))
      (common-lisp:list
       (common-lisp:cons "autoSnapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-auto-snapshots-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-blueprints-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-blueprints-request-"))
   (include-inactive common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (app-category common-lisp:nil :type
    (common-lisp:or app-category common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-blueprints-request 'make-get-blueprints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-inactive))
      (common-lisp:list
       (common-lisp:cons "includeInactive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-category))
      (common-lisp:list
       (common-lisp:cons "appCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-blueprints-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-blueprints-result-"))
   (blueprints common-lisp:nil :type
    (common-lisp:or blueprint-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-blueprints-result 'make-get-blueprints-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprints-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprints-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprints))
      (common-lisp:list
       (common-lisp:cons "blueprints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-blueprints-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-access-keys-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-access-keys-request-"))
   (bucket-name (common-lisp:error ":bucketname is required") :type
    (common-lisp:or bucket-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-access-keys-request
                    'make-get-bucket-access-keys-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-access-keys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-access-keys-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-access-keys-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-access-keys-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-access-keys-result-"))
   (access-keys common-lisp:nil :type
    (common-lisp:or access-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-access-keys-result
                    'make-get-bucket-access-keys-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-access-keys-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-access-keys-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-keys))
      (common-lisp:list
       (common-lisp:cons "accessKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-access-keys-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-bundles-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-bundles-request-"))
   (include-inactive common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-bundles-request
                    'make-get-bucket-bundles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-bundles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-bundles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-inactive))
      (common-lisp:list
       (common-lisp:cons "includeInactive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-bundles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-bundles-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-bundles-result-"))
   (bundles common-lisp:nil :type
    (common-lisp:or bucket-bundle-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-bundles-result
                    'make-get-bucket-bundles-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-bundles-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-bundles-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundles))
      (common-lisp:list
       (common-lisp:cons "bundles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-bundles-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-metric-data-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-metric-data-request-"))
   (bucket-name (common-lisp:error ":bucketname is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (metric-name (common-lisp:error ":metricname is required") :type
    (common-lisp:or bucket-metric-name common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or iso-date common-lisp:null))
   (end-time (common-lisp:error ":endtime is required") :type
    (common-lisp:or iso-date common-lisp:null))
   (period (common-lisp:error ":period is required") :type
    (common-lisp:or metric-period common-lisp:null))
   (statistics (common-lisp:error ":statistics is required") :type
    (common-lisp:or metric-statistic-list common-lisp:null))
   (unit (common-lisp:error ":unit is required") :type
    (common-lisp:or metric-unit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-metric-data-request
                    'make-get-bucket-metric-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metric-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metric-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metric-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bucket-metric-data-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bucket-metric-data-result-"))
   (metric-name common-lisp:nil :type
    (common-lisp:or bucket-metric-name common-lisp:null))
   (metric-data common-lisp:nil :type
    (common-lisp:or metric-datapoint-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bucket-metric-data-result
                    'make-get-bucket-metric-data-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metric-data-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metric-data-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data))
      (common-lisp:list
       (common-lisp:cons "metricData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-bucket-metric-data-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-buckets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-buckets-request-"))
   (bucket-name common-lisp:nil :type
    (common-lisp:or bucket-name common-lisp:null))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (include-connected-resources common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-buckets-request 'make-get-buckets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-buckets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-buckets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-connected-resources))
      (common-lisp:list
       (common-lisp:cons "includeConnectedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-buckets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-buckets-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-buckets-result-"))
   (buckets common-lisp:nil :type
    (common-lisp:or bucket-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (account-level-bpa-sync common-lisp:nil :type
    (common-lisp:or account-level-bpa-sync common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-buckets-result 'make-get-buckets-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-buckets-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-buckets-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buckets))
      (common-lisp:list
       (common-lisp:cons "buckets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'account-level-bpa-sync))
      (common-lisp:list
       (common-lisp:cons "accountLevelBpaSync"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-buckets-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bundles-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bundles-request-"))
   (include-inactive common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (app-category common-lisp:nil :type
    (common-lisp:or app-category common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bundles-request 'make-get-bundles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-bundles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-bundles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-inactive))
      (common-lisp:list
       (common-lisp:cons "includeInactive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-category))
      (common-lisp:list
       (common-lisp:cons "appCategory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-bundles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-bundles-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-bundles-result-"))
   (bundles common-lisp:nil :type
    (common-lisp:or bundle-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-bundles-result 'make-get-bundles-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-bundles-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-bundles-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundles))
      (common-lisp:list
       (common-lisp:cons "bundles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-bundles-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-certificates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-certificates-request-"))
   (certificate-statuses common-lisp:nil :type
    (common-lisp:or certificate-status-list common-lisp:null))
   (include-certificate-details common-lisp:nil :type
    (common-lisp:or include-certificate-details common-lisp:null))
   (certificate-name common-lisp:nil :type
    (common-lisp:or certificate-name common-lisp:null))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-certificates-request 'make-get-certificates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-certificates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-statuses))
      (common-lisp:list
       (common-lisp:cons "certificateStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-certificate-details))
      (common-lisp:list
       (common-lisp:cons "includeCertificateDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-name))
      (common-lisp:list
       (common-lisp:cons "certificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-certificates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-certificates-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-certificates-result-"))
   (certificates common-lisp:nil :type
    (common-lisp:or certificate-summary-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-certificates-result 'make-get-certificates-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-certificates-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-certificates-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-certificates-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-cloud-formation-stack-records-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-cloud-formation-stack-records-request-"))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-cloud-formation-stack-records-request
                    'make-get-cloud-formation-stack-records-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-formation-stack-records-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-formation-stack-records-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-formation-stack-records-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-cloud-formation-stack-records-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-cloud-formation-stack-records-result-"))
   (cloud-formation-stack-records common-lisp:nil :type
    (common-lisp:or cloud-formation-stack-record-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-cloud-formation-stack-records-result
                    'make-get-cloud-formation-stack-records-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-formation-stack-records-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-formation-stack-records-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cloud-formation-stack-records))
      (common-lisp:list
       (common-lisp:cons "cloudFormationStackRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cloud-formation-stack-records-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-contact-methods-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-contact-methods-request-"))
   (protocols common-lisp:nil :type
    (common-lisp:or contact-protocols-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-contact-methods-request
                    'make-get-contact-methods-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-methods-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-methods-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols))
      (common-lisp:list
       (common-lisp:cons "protocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-methods-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-contact-methods-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-contact-methods-result-"))
   (contact-methods common-lisp:nil :type
    (common-lisp:or contact-methods-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-contact-methods-result
                    'make-get-contact-methods-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-methods-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-methods-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-methods))
      (common-lisp:list
       (common-lisp:cons "contactMethods"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-contact-methods-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-container-apimetadata-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-container-apimetadata-request-")))
 (common-lisp:export
  (common-lisp:list 'get-container-apimetadata-request
                    'make-get-container-apimetadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-apimetadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-apimetadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-apimetadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-container-apimetadata-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-container-apimetadata-result-"))
   (metadata common-lisp:nil :type
    (common-lisp:or container-service-metadata-entry-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-container-apimetadata-result
                    'make-get-container-apimetadata-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-apimetadata-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-apimetadata-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-apimetadata-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-container-images-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-container-images-request-"))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or container-service-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-container-images-request
                    'make-get-container-images-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-images-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-images-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-images-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-container-images-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-container-images-result-"))
   (container-images common-lisp:nil :type
    (common-lisp:or container-image-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-container-images-result
                    'make-get-container-images-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-images-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-images-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-images))
      (common-lisp:list
       (common-lisp:cons "containerImages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-images-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-container-log-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-container-log-request-"))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or container-service-name common-lisp:null))
   (container-name (common-lisp:error ":containername is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or iso-date common-lisp:null))
   (filter-pattern common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-container-log-request
                    'make-get-container-log-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-log-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-log-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-name))
      (common-lisp:list
       (common-lisp:cons "containerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-pattern))
      (common-lisp:list
       (common-lisp:cons "filterPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-log-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-container-log-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-container-log-result-"))
   (log-events common-lisp:nil :type
    (common-lisp:or container-service-log-event-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-container-log-result 'make-get-container-log-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-log-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-log-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-events))
      (common-lisp:list
       (common-lisp:cons "logEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-log-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-container-service-deployments-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-container-service-deployments-request-"))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or container-service-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-container-service-deployments-request
                    'make-get-container-service-deployments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-deployments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-deployments-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-deployments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-container-service-deployments-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-container-service-deployments-result-"))
   (deployments common-lisp:nil :type
    (common-lisp:or container-service-deployment-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-container-service-deployments-result
                    'make-get-container-service-deployments-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-deployments-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-deployments-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployments))
      (common-lisp:list
       (common-lisp:cons "deployments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-deployments-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-container-service-metric-data-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-container-service-metric-data-request-"))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or container-service-name common-lisp:null))
   (metric-name (common-lisp:error ":metricname is required") :type
    (common-lisp:or container-service-metric-name common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or iso-date common-lisp:null))
   (end-time (common-lisp:error ":endtime is required") :type
    (common-lisp:or iso-date common-lisp:null))
   (period (common-lisp:error ":period is required") :type
    (common-lisp:or metric-period common-lisp:null))
   (statistics (common-lisp:error ":statistics is required") :type
    (common-lisp:or metric-statistic-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-container-service-metric-data-request
                    'make-get-container-service-metric-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-metric-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-metric-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-metric-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-container-service-metric-data-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-container-service-metric-data-result-"))
   (metric-name common-lisp:nil :type
    (common-lisp:or container-service-metric-name common-lisp:null))
   (metric-data common-lisp:nil :type
    (common-lisp:or metric-datapoint-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-container-service-metric-data-result
                    'make-get-container-service-metric-data-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-metric-data-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-metric-data-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data))
      (common-lisp:list
       (common-lisp:cons "metricData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-metric-data-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-container-service-powers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-container-service-powers-request-")))
 (common-lisp:export
  (common-lisp:list 'get-container-service-powers-request
                    'make-get-container-service-powers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-powers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-powers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-powers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-container-service-powers-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-container-service-powers-result-"))
   (powers common-lisp:nil :type
    (common-lisp:or container-service-power-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-container-service-powers-result
                    'make-get-container-service-powers-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-powers-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-powers-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'powers))
      (common-lisp:list
       (common-lisp:cons "powers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-service-powers-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-container-services-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-container-services-request-"))
   (service-name common-lisp:nil :type
    (common-lisp:or container-service-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-container-services-request
                    'make-get-container-services-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-container-services-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-container-services-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-container-services-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-cost-estimate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-cost-estimate-request-"))
   (resource-name (common-lisp:error ":resourcename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or iso-date common-lisp:null))
   (end-time (common-lisp:error ":endtime is required") :type
    (common-lisp:or iso-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-cost-estimate-request
                    'make-get-cost-estimate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-estimate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-estimate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-estimate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-cost-estimate-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-cost-estimate-result-"))
   (resources-budget-estimate common-lisp:nil :type
    (common-lisp:or resources-budget-estimate common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-cost-estimate-result 'make-get-cost-estimate-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-estimate-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-estimate-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resources-budget-estimate))
      (common-lisp:list
       (common-lisp:cons "resourcesBudgetEstimate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-cost-estimate-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-disk-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-disk-request-"))
   (disk-name (common-lisp:error ":diskname is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-disk-request 'make-get-disk-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-disk-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-disk-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-name))
      (common-lisp:list
       (common-lisp:cons "diskName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-disk-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-disk-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-disk-result-"))
   (disk common-lisp:nil :type (common-lisp:or disk common-lisp:null)))
 (common-lisp:export (common-lisp:list 'get-disk-result 'make-get-disk-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-disk-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-disk-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk))
      (common-lisp:list
       (common-lisp:cons "disk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-disk-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-disk-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-disk-snapshot-request-"))
   (disk-snapshot-name (common-lisp:error ":disksnapshotname is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-disk-snapshot-request
                    'make-get-disk-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-disk-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-disk-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "diskSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-disk-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-disk-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-disk-snapshot-result-"))
   (disk-snapshot common-lisp:nil :type
    (common-lisp:or disk-snapshot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-disk-snapshot-result 'make-get-disk-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-disk-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-disk-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-snapshot))
      (common-lisp:list
       (common-lisp:cons "diskSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-disk-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-disk-snapshots-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-disk-snapshots-request-"))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-disk-snapshots-request
                    'make-get-disk-snapshots-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-disk-snapshots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-disk-snapshots-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-disk-snapshots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-disk-snapshots-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-disk-snapshots-result-"))
   (disk-snapshots common-lisp:nil :type
    (common-lisp:or disk-snapshot-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-disk-snapshots-result
                    'make-get-disk-snapshots-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-disk-snapshots-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-disk-snapshots-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-snapshots))
      (common-lisp:list
       (common-lisp:cons "diskSnapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-disk-snapshots-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-disks-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-disks-request-"))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-disks-request 'make-get-disks-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-disks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-disks-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-disks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-disks-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-disks-result-"))
   (disks common-lisp:nil :type (common-lisp:or disk-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-disks-result 'make-get-disks-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-disks-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-disks-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disks))
      (common-lisp:list
       (common-lisp:cons "disks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-disks-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-distribution-bundles-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-distribution-bundles-request-")))
 (common-lisp:export
  (common-lisp:list 'get-distribution-bundles-request
                    'make-get-distribution-bundles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-bundles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-bundles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-bundles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-distribution-bundles-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-distribution-bundles-result-"))
   (bundles common-lisp:nil :type
    (common-lisp:or distribution-bundle-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-distribution-bundles-result
                    'make-get-distribution-bundles-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-bundles-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-bundles-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundles))
      (common-lisp:list
       (common-lisp:cons "bundles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-bundles-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-distribution-latest-cache-reset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-distribution-latest-cache-reset-request-"))
   (distribution-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-distribution-latest-cache-reset-request
                    'make-get-distribution-latest-cache-reset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-latest-cache-reset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-latest-cache-reset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-name))
      (common-lisp:list
       (common-lisp:cons "distributionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-latest-cache-reset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-distribution-latest-cache-reset-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-distribution-latest-cache-reset-result-"))
   (status common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-distribution-latest-cache-reset-result
                    'make-get-distribution-latest-cache-reset-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-latest-cache-reset-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-latest-cache-reset-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-latest-cache-reset-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-distribution-metric-data-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-distribution-metric-data-request-"))
   (distribution-name (common-lisp:error ":distributionname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (metric-name (common-lisp:error ":metricname is required") :type
    (common-lisp:or distribution-metric-name common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (end-time (common-lisp:error ":endtime is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (period (common-lisp:error ":period is required") :type
    (common-lisp:or metric-period common-lisp:null))
   (unit (common-lisp:error ":unit is required") :type
    (common-lisp:or metric-unit common-lisp:null))
   (statistics (common-lisp:error ":statistics is required") :type
    (common-lisp:or metric-statistic-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-distribution-metric-data-request
                    'make-get-distribution-metric-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-metric-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-metric-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-name))
      (common-lisp:list
       (common-lisp:cons "distributionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-metric-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-distribution-metric-data-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-distribution-metric-data-result-"))
   (metric-name common-lisp:nil :type
    (common-lisp:or distribution-metric-name common-lisp:null))
   (metric-data common-lisp:nil :type
    (common-lisp:or metric-datapoint-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-distribution-metric-data-result
                    'make-get-distribution-metric-data-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-metric-data-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-metric-data-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data))
      (common-lisp:list
       (common-lisp:cons "metricData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-distribution-metric-data-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-distributions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-distributions-request-"))
   (distribution-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-distributions-request
                    'make-get-distributions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-distributions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-distributions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-name))
      (common-lisp:list
       (common-lisp:cons "distributionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-distributions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-distributions-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-distributions-result-"))
   (distributions common-lisp:nil :type
    (common-lisp:or distribution-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-distributions-result 'make-get-distributions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-distributions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-distributions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distributions))
      (common-lisp:list
       (common-lisp:cons "distributions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-distributions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-domain-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-domain-request-"))
   (domain-name (common-lisp:error ":domainname is required") :type
    (common-lisp:or domain-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-domain-request 'make-get-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-domain-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-domain-result-"))
   (domain common-lisp:nil :type (common-lisp:or domain common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-domain-result 'make-get-domain-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-domain-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-domain-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-domain-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-domains-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-domains-request-"))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-domains-request 'make-get-domains-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-domains-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-domains-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-domains-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-domains-result-"))
   (domains common-lisp:nil :type
    (common-lisp:or domain-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-domains-result 'make-get-domains-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-domains-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-domains-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domains))
      (common-lisp:list
       (common-lisp:cons "domains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-domains-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-export-snapshot-records-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-export-snapshot-records-request-"))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-export-snapshot-records-request
                    'make-get-export-snapshot-records-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-export-snapshot-records-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-export-snapshot-records-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-export-snapshot-records-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-export-snapshot-records-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-export-snapshot-records-result-"))
   (export-snapshot-records common-lisp:nil :type
    (common-lisp:or export-snapshot-record-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-export-snapshot-records-result
                    'make-get-export-snapshot-records-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-export-snapshot-records-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-export-snapshot-records-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-snapshot-records))
      (common-lisp:list
       (common-lisp:cons "exportSnapshotRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-export-snapshot-records-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-instance-access-details-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-instance-access-details-request-"))
   (instance-name (common-lisp:error ":instancename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (protocol common-lisp:nil :type
    (common-lisp:or instance-access-protocol common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-instance-access-details-request
                    'make-get-instance-access-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-access-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-access-details-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-access-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-instance-access-details-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-instance-access-details-result-"))
   (access-details common-lisp:nil :type
    (common-lisp:or instance-access-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-instance-access-details-result
                    'make-get-instance-access-details-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-access-details-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-access-details-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-details))
      (common-lisp:list
       (common-lisp:cons "accessDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-access-details-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-instance-metric-data-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-instance-metric-data-request-"))
   (instance-name (common-lisp:error ":instancename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (metric-name (common-lisp:error ":metricname is required") :type
    (common-lisp:or instance-metric-name common-lisp:null))
   (period (common-lisp:error ":period is required") :type
    (common-lisp:or metric-period common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (end-time (common-lisp:error ":endtime is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (unit (common-lisp:error ":unit is required") :type
    (common-lisp:or metric-unit common-lisp:null))
   (statistics (common-lisp:error ":statistics is required") :type
    (common-lisp:or metric-statistic-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-instance-metric-data-request
                    'make-get-instance-metric-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-metric-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-metric-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-metric-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-instance-metric-data-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-instance-metric-data-result-"))
   (metric-name common-lisp:nil :type
    (common-lisp:or instance-metric-name common-lisp:null))
   (metric-data common-lisp:nil :type
    (common-lisp:or metric-datapoint-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-instance-metric-data-result
                    'make-get-instance-metric-data-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-metric-data-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-metric-data-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data))
      (common-lisp:list
       (common-lisp:cons "metricData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-metric-data-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-instance-port-states-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-instance-port-states-request-"))
   (instance-name (common-lisp:error ":instancename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-instance-port-states-request
                    'make-get-instance-port-states-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-port-states-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-port-states-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-port-states-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-instance-port-states-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-instance-port-states-result-"))
   (port-states common-lisp:nil :type
    (common-lisp:or instance-port-state-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-instance-port-states-result
                    'make-get-instance-port-states-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-port-states-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-port-states-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-states))
      (common-lisp:list
       (common-lisp:cons "portStates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-port-states-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-instance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-instance-request-"))
   (instance-name (common-lisp:error ":instancename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-instance-request 'make-get-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-instance-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-instance-result-"))
   (instance common-lisp:nil :type (common-lisp:or instance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-instance-result 'make-get-instance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-instance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-instance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance))
      (common-lisp:list
       (common-lisp:cons "instance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-instance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-instance-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-instance-snapshot-request-"))
   (instance-snapshot-name
    (common-lisp:error ":instancesnapshotname is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-instance-snapshot-request
                    'make-get-instance-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "instanceSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-instance-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-instance-snapshot-result-"))
   (instance-snapshot common-lisp:nil :type
    (common-lisp:or instance-snapshot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-instance-snapshot-result
                    'make-get-instance-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-snapshot))
      (common-lisp:list
       (common-lisp:cons "instanceSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-instance-snapshots-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-instance-snapshots-request-"))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-instance-snapshots-request
                    'make-get-instance-snapshots-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-snapshots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-snapshots-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-snapshots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-instance-snapshots-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-instance-snapshots-result-"))
   (instance-snapshots common-lisp:nil :type
    (common-lisp:or instance-snapshot-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-instance-snapshots-result
                    'make-get-instance-snapshots-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-snapshots-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-snapshots-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-snapshots))
      (common-lisp:list
       (common-lisp:cons "instanceSnapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-snapshots-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-instance-state-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-instance-state-request-"))
   (instance-name (common-lisp:error ":instancename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-instance-state-request
                    'make-get-instance-state-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-state-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-state-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-state-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-instance-state-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-instance-state-result-"))
   (state common-lisp:nil :type
    (common-lisp:or instance-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-instance-state-result
                    'make-get-instance-state-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-state-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-state-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-state-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-instances-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-instances-request-"))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-instances-request 'make-get-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instances-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instances-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instances-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-instances-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-instances-result-"))
   (instances common-lisp:nil :type
    (common-lisp:or instance-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-instances-result 'make-get-instances-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-instances-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-instances-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instances))
      (common-lisp:list
       (common-lisp:cons "instances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-instances-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-key-pair-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-key-pair-request-"))
   (key-pair-name (common-lisp:error ":keypairname is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-key-pair-request 'make-get-key-pair-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-key-pair-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-key-pair-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair-name))
      (common-lisp:list
       (common-lisp:cons "keyPairName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-key-pair-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-key-pair-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-key-pair-result-"))
   (key-pair common-lisp:nil :type (common-lisp:or key-pair common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-key-pair-result 'make-get-key-pair-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-key-pair-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-key-pair-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair))
      (common-lisp:list
       (common-lisp:cons "keyPair"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-key-pair-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-key-pairs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-key-pairs-request-"))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (include-default-key-pair common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-key-pairs-request 'make-get-key-pairs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-key-pairs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-key-pairs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-default-key-pair))
      (common-lisp:list
       (common-lisp:cons "includeDefaultKeyPair"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-key-pairs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-key-pairs-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-key-pairs-result-"))
   (key-pairs common-lisp:nil :type
    (common-lisp:or key-pair-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-key-pairs-result 'make-get-key-pairs-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-key-pairs-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-key-pairs-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pairs))
      (common-lisp:list
       (common-lisp:cons "keyPairs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-key-pairs-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-load-balancer-metric-data-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-load-balancer-metric-data-request-"))
   (load-balancer-name (common-lisp:error ":loadbalancername is required")
    :type (common-lisp:or resource-name common-lisp:null))
   (metric-name (common-lisp:error ":metricname is required") :type
    (common-lisp:or load-balancer-metric-name common-lisp:null))
   (period (common-lisp:error ":period is required") :type
    (common-lisp:or metric-period common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (end-time (common-lisp:error ":endtime is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (unit (common-lisp:error ":unit is required") :type
    (common-lisp:or metric-unit common-lisp:null))
   (statistics (common-lisp:error ":statistics is required") :type
    (common-lisp:or metric-statistic-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-load-balancer-metric-data-request
                    'make-get-load-balancer-metric-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-metric-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-metric-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-metric-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-load-balancer-metric-data-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-load-balancer-metric-data-result-"))
   (metric-name common-lisp:nil :type
    (common-lisp:or load-balancer-metric-name common-lisp:null))
   (metric-data common-lisp:nil :type
    (common-lisp:or metric-datapoint-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-load-balancer-metric-data-result
                    'make-get-load-balancer-metric-data-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-metric-data-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-metric-data-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data))
      (common-lisp:list
       (common-lisp:cons "metricData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-metric-data-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-load-balancer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-load-balancer-request-"))
   (load-balancer-name (common-lisp:error ":loadbalancername is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-load-balancer-request
                    'make-get-load-balancer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-load-balancer-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-load-balancer-result-"))
   (load-balancer common-lisp:nil :type
    (common-lisp:or load-balancer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-load-balancer-result 'make-get-load-balancer-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer))
      (common-lisp:list
       (common-lisp:cons "loadBalancer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-load-balancer-tls-certificates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-load-balancer-tls-certificates-request-"))
   (load-balancer-name (common-lisp:error ":loadbalancername is required")
    :type (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-load-balancer-tls-certificates-request
                    'make-get-load-balancer-tls-certificates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-tls-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-tls-certificates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-tls-certificates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-load-balancer-tls-certificates-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-load-balancer-tls-certificates-result-"))
   (tls-certificates common-lisp:nil :type
    (common-lisp:or load-balancer-tls-certificate-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-load-balancer-tls-certificates-result
                    'make-get-load-balancer-tls-certificates-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-tls-certificates-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-tls-certificates-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls-certificates))
      (common-lisp:list
       (common-lisp:cons "tlsCertificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-tls-certificates-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-load-balancer-tls-policies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-load-balancer-tls-policies-request-"))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-load-balancer-tls-policies-request
                    'make-get-load-balancer-tls-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-tls-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-tls-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-tls-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-load-balancer-tls-policies-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-load-balancer-tls-policies-result-"))
   (tls-policies common-lisp:nil :type
    (common-lisp:or load-balancer-tls-policy-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-load-balancer-tls-policies-result
                    'make-get-load-balancer-tls-policies-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-tls-policies-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-tls-policies-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls-policies))
      (common-lisp:list
       (common-lisp:cons "tlsPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancer-tls-policies-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-load-balancers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-load-balancers-request-"))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-load-balancers-request
                    'make-get-load-balancers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancers-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-load-balancers-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-load-balancers-result-"))
   (load-balancers common-lisp:nil :type
    (common-lisp:or load-balancer-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-load-balancers-result
                    'make-get-load-balancers-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancers-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancers-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancers))
      (common-lisp:list
       (common-lisp:cons "loadBalancers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-load-balancers-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-operation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-operation-request-"))
   (operation-id (common-lisp:error ":operationid is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-operation-request 'make-get-operation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-operation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-operation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "operationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-operation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-operation-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-operation-result-"))
   (operation common-lisp:nil :type
    (common-lisp:or operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-operation-result 'make-get-operation-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-operation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-operation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-operation-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-operations-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-operations-for-resource-request-"))
   (resource-name (common-lisp:error ":resourcename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-operations-for-resource-request
                    'make-get-operations-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-operations-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-operations-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-operations-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-operations-for-resource-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-operations-for-resource-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null))
   (next-page-count common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-operations-for-resource-result
                    'make-get-operations-for-resource-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-operations-for-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-operations-for-resource-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-count))
      (common-lisp:list
       (common-lisp:cons "nextPageCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-operations-for-resource-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-operations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-operations-request-"))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-operations-request 'make-get-operations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-operations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-operations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-operations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-operations-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-operations-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-operations-result 'make-get-operations-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-operations-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-operations-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-operations-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-regions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-regions-request-"))
   (include-availability-zones common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (include-relational-database-availability-zones common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-regions-request 'make-get-regions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-regions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-regions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-availability-zones))
      (common-lisp:list
       (common-lisp:cons "includeAvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-relational-database-availability-zones))
      (common-lisp:list
       (common-lisp:cons "includeRelationalDatabaseAvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-regions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-regions-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-regions-result-"))
   (regions common-lisp:nil :type
    (common-lisp:or region-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-regions-result 'make-get-regions-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-regions-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-regions-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regions))
      (common-lisp:list
       (common-lisp:cons "regions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-regions-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-relational-database-blueprints-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-relational-database-blueprints-request-"))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-blueprints-request
                    'make-get-relational-database-blueprints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-blueprints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-blueprints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-blueprints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-relational-database-blueprints-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-relational-database-blueprints-result-"))
   (blueprints common-lisp:nil :type
    (common-lisp:or relational-database-blueprint-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-blueprints-result
                    'make-get-relational-database-blueprints-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-blueprints-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-blueprints-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprints))
      (common-lisp:list
       (common-lisp:cons "blueprints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-blueprints-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-relational-database-bundles-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-relational-database-bundles-request-"))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (include-inactive common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-bundles-request
                    'make-get-relational-database-bundles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-bundles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-bundles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-inactive))
      (common-lisp:list
       (common-lisp:cons "includeInactive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-bundles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-relational-database-bundles-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-relational-database-bundles-result-"))
   (bundles common-lisp:nil :type
    (common-lisp:or relational-database-bundle-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-bundles-result
                    'make-get-relational-database-bundles-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-bundles-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-bundles-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundles))
      (common-lisp:list
       (common-lisp:cons "bundles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-bundles-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-relational-database-events-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-relational-database-events-request-"))
   (relational-database-name
    (common-lisp:error ":relationaldatabasename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (duration-in-minutes common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-events-request
                    'make-get-relational-database-events-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-minutes))
      (common-lisp:list
       (common-lisp:cons "durationInMinutes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-relational-database-events-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-relational-database-events-result-"))
   (relational-database-events common-lisp:nil :type
    (common-lisp:or relational-database-event-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-events-result
                    'make-get-relational-database-events-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-events-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-events-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-events))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-events-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-relational-database-log-events-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-relational-database-log-events-request-"))
   (relational-database-name
    (common-lisp:error ":relationaldatabasename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (log-stream-name (common-lisp:error ":logstreamname is required") :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or iso-date common-lisp:null))
   (start-from-head common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-log-events-request
                    'make-get-relational-database-log-events-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-log-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-log-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-stream-name))
      (common-lisp:list
       (common-lisp:cons "logStreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-from-head))
      (common-lisp:list
       (common-lisp:cons "startFromHead"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-log-events-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-relational-database-log-events-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-relational-database-log-events-result-"))
   (resource-log-events common-lisp:nil :type
    (common-lisp:or log-event-list common-lisp:null))
   (next-backward-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (next-forward-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-log-events-result
                    'make-get-relational-database-log-events-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-log-events-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-log-events-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-log-events))
      (common-lisp:list
       (common-lisp:cons "resourceLogEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-backward-token))
      (common-lisp:list
       (common-lisp:cons "nextBackwardToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-forward-token))
      (common-lisp:list
       (common-lisp:cons "nextForwardToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-log-events-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-relational-database-log-streams-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-relational-database-log-streams-request-"))
   (relational-database-name
    (common-lisp:error ":relationaldatabasename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-log-streams-request
                    'make-get-relational-database-log-streams-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-log-streams-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-log-streams-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-log-streams-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-relational-database-log-streams-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-relational-database-log-streams-result-"))
   (log-streams common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-log-streams-result
                    'make-get-relational-database-log-streams-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-log-streams-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-log-streams-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-streams))
      (common-lisp:list
       (common-lisp:cons "logStreams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-log-streams-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-relational-database-master-user-password-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-relational-database-master-user-password-request-"))
   (relational-database-name
    (common-lisp:error ":relationaldatabasename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (password-version common-lisp:nil :type
    (common-lisp:or relational-database-password-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-master-user-password-request
                    'make-get-relational-database-master-user-password-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-master-user-password-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-master-user-password-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-version))
      (common-lisp:list
       (common-lisp:cons "passwordVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-master-user-password-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-relational-database-master-user-password-result
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-relational-database-master-user-password-result-"))
   (master-user-password common-lisp:nil :type
    (common-lisp:or sensitive-string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-master-user-password-result
                    'make-get-relational-database-master-user-password-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-master-user-password-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-master-user-password-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "masterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-master-user-password-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-relational-database-metric-data-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-relational-database-metric-data-request-"))
   (relational-database-name
    (common-lisp:error ":relationaldatabasename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (metric-name (common-lisp:error ":metricname is required") :type
    (common-lisp:or relational-database-metric-name common-lisp:null))
   (period (common-lisp:error ":period is required") :type
    (common-lisp:or metric-period common-lisp:null))
   (start-time (common-lisp:error ":starttime is required") :type
    (common-lisp:or iso-date common-lisp:null))
   (end-time (common-lisp:error ":endtime is required") :type
    (common-lisp:or iso-date common-lisp:null))
   (unit (common-lisp:error ":unit is required") :type
    (common-lisp:or metric-unit common-lisp:null))
   (statistics (common-lisp:error ":statistics is required") :type
    (common-lisp:or metric-statistic-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-metric-data-request
                    'make-get-relational-database-metric-data-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-metric-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-metric-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'period))
      (common-lisp:list
       (common-lisp:cons "period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-metric-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-relational-database-metric-data-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-relational-database-metric-data-result-"))
   (metric-name common-lisp:nil :type
    (common-lisp:or relational-database-metric-name common-lisp:null))
   (metric-data common-lisp:nil :type
    (common-lisp:or metric-datapoint-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-metric-data-result
                    'make-get-relational-database-metric-data-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-metric-data-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-metric-data-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-data))
      (common-lisp:list
       (common-lisp:cons "metricData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-metric-data-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-relational-database-parameters-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-relational-database-parameters-request-"))
   (relational-database-name
    (common-lisp:error ":relationaldatabasename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-parameters-request
                    'make-get-relational-database-parameters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-parameters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-parameters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-parameters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-relational-database-parameters-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-relational-database-parameters-result-"))
   (parameters common-lisp:nil :type
    (common-lisp:or relational-database-parameter-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-parameters-result
                    'make-get-relational-database-parameters-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-parameters-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-parameters-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-parameters-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-relational-database-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-relational-database-request-"))
   (relational-database-name
    (common-lisp:error ":relationaldatabasename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-request
                    'make-get-relational-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-relational-database-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-relational-database-result-"))
   (relational-database common-lisp:nil :type
    (common-lisp:or relational-database common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-result
                    'make-get-relational-database-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relational-database))
      (common-lisp:list
       (common-lisp:cons "relationalDatabase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-relational-database-snapshot-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-relational-database-snapshot-request-"))
   (relational-database-snapshot-name
    (common-lisp:error ":relationaldatabasesnapshotname is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-snapshot-request
                    'make-get-relational-database-snapshot-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-snapshot-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-snapshot-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-snapshot-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-relational-database-snapshot-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-relational-database-snapshot-result-"))
   (relational-database-snapshot common-lisp:nil :type
    (common-lisp:or relational-database-snapshot common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-snapshot-result
                    'make-get-relational-database-snapshot-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-snapshot-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-snapshot-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-snapshot))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-snapshot-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-relational-database-snapshots-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-relational-database-snapshots-request-"))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-snapshots-request
                    'make-get-relational-database-snapshots-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-snapshots-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-snapshots-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-snapshots-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-relational-database-snapshots-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-relational-database-snapshots-result-"))
   (relational-database-snapshots common-lisp:nil :type
    (common-lisp:or relational-database-snapshot-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-relational-database-snapshots-result
                    'make-get-relational-database-snapshots-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-snapshots-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-snapshots-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-snapshots))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseSnapshots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-database-snapshots-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-relational-databases-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-relational-databases-request-"))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-relational-databases-request
                    'make-get-relational-databases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-databases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-databases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-databases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-relational-databases-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-relational-databases-result-"))
   (relational-databases common-lisp:nil :type
    (common-lisp:or relational-database-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-relational-databases-result
                    'make-get-relational-databases-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-databases-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-databases-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-databases))
      (common-lisp:list
       (common-lisp:cons "relationalDatabases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-relational-databases-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-setup-history-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-setup-history-request-"))
   (resource-name (common-lisp:error ":resourcename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (page-token common-lisp:nil :type
    (common-lisp:or setup-history-page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-setup-history-request
                    'make-get-setup-history-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-setup-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-setup-history-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-setup-history-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-setup-history-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-setup-history-result-"))
   (setup-history common-lisp:nil :type
    (common-lisp:or |setupHistoryList| common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or setup-history-page-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-setup-history-result 'make-get-setup-history-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-setup-history-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-setup-history-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'setup-history))
      (common-lisp:list
       (common-lisp:cons "setupHistory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-setup-history-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-static-ip-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-static-ip-request-"))
   (static-ip-name (common-lisp:error ":staticipname is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-static-ip-request 'make-get-static-ip-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-static-ip-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-static-ip-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-ip-name))
      (common-lisp:list
       (common-lisp:cons "staticIpName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-static-ip-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-static-ip-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-static-ip-result-"))
   (static-ip common-lisp:nil :type
    (common-lisp:or static-ip common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-static-ip-result 'make-get-static-ip-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-static-ip-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-static-ip-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-ip))
      (common-lisp:list
       (common-lisp:cons "staticIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-static-ip-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-static-ips-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-static-ips-request-"))
   (page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-static-ips-request 'make-get-static-ips-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-static-ips-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-static-ips-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-token))
      (common-lisp:list
       (common-lisp:cons "pageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-static-ips-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-static-ips-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-static-ips-result-"))
   (static-ips common-lisp:nil :type
    (common-lisp:or static-ip-list common-lisp:null))
   (next-page-token common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-static-ips-result 'make-get-static-ips-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-static-ips-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-static-ips-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-ips))
      (common-lisp:list
       (common-lisp:cons "staticIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-page-token))
      (common-lisp:list
       (common-lisp:cons "nextPageToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-static-ips-result))
   common-lisp:nil))
(common-lisp:deftype header-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype header-forward-list ()
   '(trivial-types:proper-list header-enum))
 (common-lisp:defun make-header-forward-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list header-enum))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (header-object (:copier common-lisp:nil)
      (:conc-name "struct-shape-header-object-"))
   (option common-lisp:nil :type
    (common-lisp:or forward-values common-lisp:null))
   (headers-allow-list common-lisp:nil :type
    (common-lisp:or header-forward-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'header-object 'make-header-object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input header-object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input header-object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option))
      (common-lisp:list
       (common-lisp:cons "option"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'headers-allow-list))
      (common-lisp:list
       (common-lisp:cons "headersAllowList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input header-object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (host-key-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-host-key-attributes-"))
   (algorithm common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (public-key common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (witnessed-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (fingerprint-sha1 common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (fingerprint-sha256 common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (not-valid-before common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (not-valid-after common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'host-key-attributes 'make-host-key-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input host-key-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input host-key-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm))
      (common-lisp:list
       (common-lisp:cons "algorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key))
      (common-lisp:list
       (common-lisp:cons "publicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'witnessed-at))
      (common-lisp:list
       (common-lisp:cons "witnessedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fingerprint-sha1))
      (common-lisp:list
       (common-lisp:cons "fingerprintSHA1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fingerprint-sha256))
      (common-lisp:list
       (common-lisp:cons "fingerprintSHA256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-valid-before))
      (common-lisp:list
       (common-lisp:cons "notValidBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-valid-after))
      (common-lisp:list
       (common-lisp:cons "notValidAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input host-key-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype host-keys-list ()
   '(trivial-types:proper-list host-key-attributes))
 (common-lisp:defun make-host-keys-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list host-key-attributes))
   aws-sdk/generator/shape::members))
(common-lisp:deftype http-endpoint () 'common-lisp:string)
(common-lisp:deftype http-protocol-ipv6 () 'common-lisp:string)
(common-lisp:deftype http-tokens () 'common-lisp:string)
(common-lisp:deftype iamaccess-key-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (import-key-pair-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-key-pair-request-"))
   (key-pair-name (common-lisp:error ":keypairname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (public-key-base64 (common-lisp:error ":publickeybase64 is required") :type
    (common-lisp:or base64 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-key-pair-request 'make-import-key-pair-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-key-pair-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-key-pair-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair-name))
      (common-lisp:list
       (common-lisp:cons "keyPairName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-key-base64))
      (common-lisp:list
       (common-lisp:cons "publicKeyBase64"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-key-pair-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-key-pair-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-key-pair-result-"))
   (operation common-lisp:nil :type
    (common-lisp:or operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-key-pair-result 'make-import-key-pair-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-key-pair-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-key-pair-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-key-pair-result))
   common-lisp:nil))
(common-lisp:deftype in-use-resource-count () 'common-lisp:integer)
(common-lisp:deftype include-certificate-details () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (input-origin (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-origin-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (region-name common-lisp:nil :type
    (common-lisp:or region-name common-lisp:null))
   (protocol-policy common-lisp:nil :type
    (common-lisp:or origin-protocol-policy-enum common-lisp:null)))
 (common-lisp:export (common-lisp:list 'input-origin 'make-input-origin))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-origin))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-origin))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "regionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol-policy))
      (common-lisp:list
       (common-lisp:cons "protocolPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-origin))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (instance (:copier common-lisp:nil) (:conc-name "struct-shape-instance-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (support-code common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or resource-location common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (blueprint-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (blueprint-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (bundle-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (add-ons common-lisp:nil :type
    (common-lisp:or add-on-list common-lisp:null))
   (is-static-ip common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (private-ip-address common-lisp:nil :type
    (common-lisp:or ip-address common-lisp:null))
   (public-ip-address common-lisp:nil :type
    (common-lisp:or ip-address common-lisp:null))
   (ipv6addresses common-lisp:nil :type
    (common-lisp:or ipv6address-list common-lisp:null))
   (ip-address-type common-lisp:nil :type
    (common-lisp:or ip-address-type common-lisp:null))
   (hardware common-lisp:nil :type
    (common-lisp:or instance-hardware common-lisp:null))
   (networking common-lisp:nil :type
    (common-lisp:or instance-networking common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or instance-state common-lisp:null))
   (username common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (ssh-key-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (metadata-options common-lisp:nil :type
    (common-lisp:or instance-metadata-options common-lisp:null)))
 (common-lisp:export (common-lisp:list 'instance 'make-instance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-id))
      (common-lisp:list
       (common-lisp:cons "blueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-name))
      (common-lisp:list
       (common-lisp:cons "blueprintName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-ons))
      (common-lisp:list
       (common-lisp:cons "addOns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-static-ip))
      (common-lisp:list
       (common-lisp:cons "isStaticIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "privateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip-address))
      (common-lisp:list
       (common-lisp:cons "publicIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6addresses))
      (common-lisp:list
       (common-lisp:cons "ipv6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "ipAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hardware))
      (common-lisp:list
       (common-lisp:cons "hardware"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'networking))
      (common-lisp:list
       (common-lisp:cons "networking"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ssh-key-name))
      (common-lisp:list
       (common-lisp:cons "sshKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-options))
      (common-lisp:list
       (common-lisp:cons "metadataOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-access-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-access-details-"))
   (cert-key common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (expires-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (ip-address common-lisp:nil :type
    (common-lisp:or ip-address common-lisp:null))
   (ipv6addresses common-lisp:nil :type
    (common-lisp:or ipv6address-list common-lisp:null))
   (password common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (password-data common-lisp:nil :type
    (common-lisp:or password-data common-lisp:null))
   (private-key common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (protocol common-lisp:nil :type
    (common-lisp:or instance-access-protocol common-lisp:null))
   (instance-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (username common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (host-keys common-lisp:nil :type
    (common-lisp:or host-keys-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-access-details 'make-instance-access-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-access-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-access-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cert-key))
      (common-lisp:list
       (common-lisp:cons "certKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-at))
      (common-lisp:list
       (common-lisp:cons "expiresAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "ipAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6addresses))
      (common-lisp:list
       (common-lisp:cons "ipv6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-data))
      (common-lisp:list
       (common-lisp:cons "passwordData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key))
      (common-lisp:list
       (common-lisp:cons "privateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-keys))
      (common-lisp:list
       (common-lisp:cons "hostKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-access-details))
   common-lisp:nil))
(common-lisp:deftype instance-access-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (instance-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-entry-"))
   (source-name (common-lisp:error ":sourcename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (instance-type (common-lisp:error ":instancetype is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (port-info-source (common-lisp:error ":portinfosource is required") :type
    (common-lisp:or port-info-source-type common-lisp:null))
   (user-data common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (availability-zone (common-lisp:error ":availabilityzone is required") :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'instance-entry 'make-instance-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "sourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "instanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-info-source))
      (common-lisp:list
       (common-lisp:cons "portInfoSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-data))
      (common-lisp:list
       (common-lisp:cons "userData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "availabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-entry-list ()
   '(trivial-types:proper-list instance-entry))
 (common-lisp:defun make-instance-entry-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-hardware (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-hardware-"))
   (cpu-count common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (disks common-lisp:nil :type (common-lisp:or disk-list common-lisp:null))
   (ram-size-in-gb common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-hardware 'make-instance-hardware))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-hardware))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-hardware))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu-count))
      (common-lisp:list
       (common-lisp:cons "cpuCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disks))
      (common-lisp:list
       (common-lisp:cons "disks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ram-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "ramSizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-hardware))
   common-lisp:nil))
(common-lisp:deftype instance-health-reason () 'common-lisp:string)
(common-lisp:deftype instance-health-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (instance-health-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-health-summary-"))
   (instance-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (instance-health common-lisp:nil :type
    (common-lisp:or instance-health-state common-lisp:null))
   (instance-health-reason common-lisp:nil :type
    (common-lisp:or instance-health-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-health-summary 'make-instance-health-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-health-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-health-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-health))
      (common-lisp:list
       (common-lisp:cons "instanceHealth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-health-reason))
      (common-lisp:list
       (common-lisp:cons "instanceHealthReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-health-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-health-summary-list ()
   '(trivial-types:proper-list instance-health-summary))
 (common-lisp:defun make-instance-health-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-health-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype instance-list () '(trivial-types:proper-list instance))
 (common-lisp:defun make-instance-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-metadata-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-metadata-options-"))
   (state common-lisp:nil :type
    (common-lisp:or instance-metadata-state common-lisp:null))
   (http-tokens common-lisp:nil :type
    (common-lisp:or http-tokens common-lisp:null))
   (http-endpoint common-lisp:nil :type
    (common-lisp:or http-endpoint common-lisp:null))
   (http-put-response-hop-limit common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (http-protocol-ipv6 common-lisp:nil :type
    (common-lisp:or http-protocol-ipv6 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-metadata-options
                    'make-instance-metadata-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-metadata-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-metadata-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-tokens))
      (common-lisp:list
       (common-lisp:cons "httpTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-endpoint))
      (common-lisp:list
       (common-lisp:cons "httpEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-put-response-hop-limit))
      (common-lisp:list
       (common-lisp:cons "httpPutResponseHopLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-protocol-ipv6))
      (common-lisp:list
       (common-lisp:cons "httpProtocolIpv6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-metadata-options))
   common-lisp:nil))
(common-lisp:deftype instance-metadata-state () 'common-lisp:string)
(common-lisp:deftype instance-metric-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (instance-networking (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-networking-"))
   (monthly-transfer common-lisp:nil :type
    (common-lisp:or monthly-transfer common-lisp:null))
   (ports common-lisp:nil :type
    (common-lisp:or instance-port-info-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-networking 'make-instance-networking))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-networking))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-networking))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monthly-transfer))
      (common-lisp:list
       (common-lisp:cons "monthlyTransfer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ports))
      (common-lisp:list
       (common-lisp:cons "ports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-networking))
   common-lisp:nil))
(common-lisp:deftype instance-platform () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-platform-list ()
   '(trivial-types:proper-list instance-platform))
 (common-lisp:defun make-instance-platform-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-platform))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-port-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-port-info-"))
   (from-port common-lisp:nil :type (common-lisp:or port common-lisp:null))
   (to-port common-lisp:nil :type (common-lisp:or port common-lisp:null))
   (protocol common-lisp:nil :type
    (common-lisp:or network-protocol common-lisp:null))
   (access-from common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (access-type common-lisp:nil :type
    (common-lisp:or port-access-type common-lisp:null))
   (common-name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (access-direction common-lisp:nil :type
    (common-lisp:or access-direction common-lisp:null))
   (cidrs common-lisp:nil :type (common-lisp:or string-list common-lisp:null))
   (ipv6cidrs common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (cidr-list-aliases common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-port-info 'make-instance-port-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-port-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-port-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "fromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "toPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-from))
      (common-lisp:list
       (common-lisp:cons "accessFrom"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-type))
      (common-lisp:list
       (common-lisp:cons "accessType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'common-name))
      (common-lisp:list
       (common-lisp:cons "commonName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-direction))
      (common-lisp:list
       (common-lisp:cons "accessDirection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidrs))
      (common-lisp:list
       (common-lisp:cons "cidrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6cidrs))
      (common-lisp:list
       (common-lisp:cons "ipv6Cidrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-list-aliases))
      (common-lisp:list
       (common-lisp:cons "cidrListAliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-port-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-port-info-list ()
   '(trivial-types:proper-list instance-port-info))
 (common-lisp:defun make-instance-port-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-port-info))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-port-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-port-state-"))
   (from-port common-lisp:nil :type (common-lisp:or port common-lisp:null))
   (to-port common-lisp:nil :type (common-lisp:or port common-lisp:null))
   (protocol common-lisp:nil :type
    (common-lisp:or network-protocol common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or port-state common-lisp:null))
   (cidrs common-lisp:nil :type (common-lisp:or string-list common-lisp:null))
   (ipv6cidrs common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (cidr-list-aliases common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-port-state 'make-instance-port-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-port-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-port-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "fromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "toPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidrs))
      (common-lisp:list
       (common-lisp:cons "cidrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6cidrs))
      (common-lisp:list
       (common-lisp:cons "ipv6Cidrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-list-aliases))
      (common-lisp:list
       (common-lisp:cons "cidrListAliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-port-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-port-state-list ()
   '(trivial-types:proper-list instance-port-state))
 (common-lisp:defun make-instance-port-state-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-port-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-snapshot (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-snapshot-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (support-code common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or resource-location common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or instance-snapshot-state common-lisp:null))
   (progress common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (from-attached-disks common-lisp:nil :type
    (common-lisp:or disk-list common-lisp:null))
   (from-instance-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (from-instance-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (from-blueprint-id common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (from-bundle-id common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (is-from-auto-snapshot common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (size-in-gb common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-snapshot 'make-instance-snapshot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-snapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-snapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'progress))
      (common-lisp:list
       (common-lisp:cons "progress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-attached-disks))
      (common-lisp:list
       (common-lisp:cons "fromAttachedDisks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-instance-name))
      (common-lisp:list
       (common-lisp:cons "fromInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-instance-arn))
      (common-lisp:list
       (common-lisp:cons "fromInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "fromBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-bundle-id))
      (common-lisp:list
       (common-lisp:cons "fromBundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-from-auto-snapshot))
      (common-lisp:list
       (common-lisp:cons "isFromAutoSnapshot"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gb))
      (common-lisp:list
       (common-lisp:cons "sizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-snapshot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-snapshot-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-snapshot-info-"))
   (from-bundle-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (from-blueprint-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (from-disk-info common-lisp:nil :type
    (common-lisp:or disk-info-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-snapshot-info 'make-instance-snapshot-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-snapshot-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-snapshot-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-bundle-id))
      (common-lisp:list
       (common-lisp:cons "fromBundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "fromBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-disk-info))
      (common-lisp:list
       (common-lisp:cons "fromDiskInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-snapshot-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype instance-snapshot-list ()
   '(trivial-types:proper-list instance-snapshot))
 (common-lisp:defun make-instance-snapshot-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-snapshot))
   aws-sdk/generator/shape::members))
(common-lisp:deftype instance-snapshot-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (instance-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-state-"))
   (code common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'instance-state 'make-instance-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-state))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition invalid-input-exception
     (lightsail-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       invalid-input-exception-code)
      (docs :initarg :docs :initform common-lisp:nil :reader
       invalid-input-exception-docs)
      (message :initarg :message :initform common-lisp:nil :reader
       invalid-input-exception-message)
      (tip :initarg :tip :initform common-lisp:nil :reader
       invalid-input-exception-tip)))
 (common-lisp:export
  (common-lisp:list 'invalid-input-exception 'invalid-input-exception-code
                    'invalid-input-exception-docs
                    'invalid-input-exception-message
                    'invalid-input-exception-tip)))
(common-lisp:deftype ip-address () 'common-lisp:string)
(common-lisp:deftype ip-address-type () 'common-lisp:string)
(common-lisp:deftype ipv6address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ipv6address-list ()
   '(trivial-types:proper-list ipv6address))
 (common-lisp:defun make-ipv6address-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ipv6address))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (is-vpc-peered-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-is-vpc-peered-request-")))
 (common-lisp:export
  (common-lisp:list 'is-vpc-peered-request 'make-is-vpc-peered-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          is-vpc-peered-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          is-vpc-peered-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          is-vpc-peered-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (is-vpc-peered-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-is-vpc-peered-result-"))
   (is-peered common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'is-vpc-peered-result 'make-is-vpc-peered-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input is-vpc-peered-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input is-vpc-peered-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-peered))
      (common-lisp:list
       (common-lisp:cons "isPeered"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input is-vpc-peered-result))
   common-lisp:nil))
(common-lisp:deftype iso-date () 'common-lisp:string)
(common-lisp:deftype issuer-ca () 'common-lisp:string)
(common-lisp:deftype key-algorithm () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (key-pair (:copier common-lisp:nil) (:conc-name "struct-shape-key-pair-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (support-code common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or resource-location common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (fingerprint common-lisp:nil :type
    (common-lisp:or base64 common-lisp:null)))
 (common-lisp:export (common-lisp:list 'key-pair 'make-key-pair))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input key-pair))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input key-pair))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fingerprint))
      (common-lisp:list
       (common-lisp:cons "fingerprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input key-pair))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype key-pair-list () '(trivial-types:proper-list key-pair))
 (common-lisp:defun make-key-pair-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list key-pair))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (lightsail-distribution (:copier common-lisp:nil)
      (:conc-name "struct-shape-lightsail-distribution-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (support-code common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or resource-location common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (alternative-domain-names common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (is-enabled common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (domain-name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (bundle-id common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (certificate-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (origin common-lisp:nil :type (common-lisp:or origin common-lisp:null))
   (origin-public-dns common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (default-cache-behavior common-lisp:nil :type
    (common-lisp:or cache-behavior common-lisp:null))
   (cache-behavior-settings common-lisp:nil :type
    (common-lisp:or cache-settings common-lisp:null))
   (cache-behaviors common-lisp:nil :type
    (common-lisp:or cache-behavior-list common-lisp:null))
   (able-to-update-bundle common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (ip-address-type common-lisp:nil :type
    (common-lisp:or ip-address-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lightsail-distribution 'make-lightsail-distribution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lightsail-distribution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lightsail-distribution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alternative-domain-names))
      (common-lisp:list
       (common-lisp:cons "alternativeDomainNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-enabled))
      (common-lisp:list
       (common-lisp:cons "isEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-name))
      (common-lisp:list
       (common-lisp:cons "certificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin))
      (common-lisp:list
       (common-lisp:cons "origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin-public-dns))
      (common-lisp:list
       (common-lisp:cons "originPublicDNS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-cache-behavior))
      (common-lisp:list
       (common-lisp:cons "defaultCacheBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-behavior-settings))
      (common-lisp:list
       (common-lisp:cons "cacheBehaviorSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-behaviors))
      (common-lisp:list
       (common-lisp:cons "cacheBehaviors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'able-to-update-bundle))
      (common-lisp:list
       (common-lisp:cons "ableToUpdateBundle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "ipAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lightsail-distribution))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (load-balancer (:copier common-lisp:nil)
      (:conc-name "struct-shape-load-balancer-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (support-code common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or resource-location common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (dns-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or load-balancer-state common-lisp:null))
   (protocol common-lisp:nil :type
    (common-lisp:or load-balancer-protocol common-lisp:null))
   (public-ports common-lisp:nil :type
    (common-lisp:or port-list common-lisp:null))
   (health-check-path common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (instance-port common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (instance-health-summary common-lisp:nil :type
    (common-lisp:or instance-health-summary-list common-lisp:null))
   (tls-certificate-summaries common-lisp:nil :type
    (common-lisp:or load-balancer-tls-certificate-summary-list
                    common-lisp:null))
   (configuration-options common-lisp:nil :type
    (common-lisp:or load-balancer-configuration-options common-lisp:null))
   (ip-address-type common-lisp:nil :type
    (common-lisp:or ip-address-type common-lisp:null))
   (https-redirection-enabled common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (tls-policy-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'load-balancer 'make-load-balancer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input load-balancer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input load-balancer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-name))
      (common-lisp:list
       (common-lisp:cons "dnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ports))
      (common-lisp:list
       (common-lisp:cons "publicPorts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'health-check-path))
      (common-lisp:list
       (common-lisp:cons "healthCheckPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-port))
      (common-lisp:list
       (common-lisp:cons "instancePort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-health-summary))
      (common-lisp:list
       (common-lisp:cons "instanceHealthSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tls-certificate-summaries))
      (common-lisp:list
       (common-lisp:cons "tlsCertificateSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-options))
      (common-lisp:list
       (common-lisp:cons "configurationOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "ipAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'https-redirection-enabled))
      (common-lisp:list
       (common-lisp:cons "httpsRedirectionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tls-policy-name))
      (common-lisp:list
       (common-lisp:cons "tlsPolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input load-balancer))
   common-lisp:nil))
(common-lisp:deftype load-balancer-attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype load-balancer-configuration-options ()
   'common-lisp:hash-table)
 (common-lisp:defun make-load-balancer-configuration-options
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype load-balancer-list ()
   '(trivial-types:proper-list load-balancer))
 (common-lisp:defun make-load-balancer-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list load-balancer))
   aws-sdk/generator/shape::members))
(common-lisp:deftype load-balancer-metric-name () 'common-lisp:string)
(common-lisp:deftype load-balancer-protocol () 'common-lisp:string)
(common-lisp:deftype load-balancer-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (load-balancer-tls-certificate (:copier common-lisp:nil)
      (:conc-name "struct-shape-load-balancer-tls-certificate-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (support-code common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or resource-location common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (load-balancer-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (is-attached common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or load-balancer-tls-certificate-status common-lisp:null))
   (domain-name common-lisp:nil :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-validation-records common-lisp:nil :type
    (common-lisp:or load-balancer-tls-certificate-domain-validation-record-list
                    common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or load-balancer-tls-certificate-failure-reason
                    common-lisp:null))
   (issued-at common-lisp:nil :type (common-lisp:or iso-date common-lisp:null))
   (issuer common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (key-algorithm common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (not-after common-lisp:nil :type (common-lisp:or iso-date common-lisp:null))
   (not-before common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (renewal-summary common-lisp:nil :type
    (common-lisp:or load-balancer-tls-certificate-renewal-summary
                    common-lisp:null))
   (revocation-reason common-lisp:nil :type
    (common-lisp:or load-balancer-tls-certificate-revocation-reason
                    common-lisp:null))
   (revoked-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (serial common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (signature-algorithm common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (subject common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (subject-alternative-names common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'load-balancer-tls-certificate
                    'make-load-balancer-tls-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-attached))
      (common-lisp:list
       (common-lisp:cons "isAttached"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-validation-records))
      (common-lisp:list
       (common-lisp:cons "domainValidationRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "failureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issued-at))
      (common-lisp:list
       (common-lisp:cons "issuedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-algorithm))
      (common-lisp:list
       (common-lisp:cons "keyAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-after))
      (common-lisp:list
       (common-lisp:cons "notAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'not-before))
      (common-lisp:list
       (common-lisp:cons "notBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-summary))
      (common-lisp:list
       (common-lisp:cons "renewalSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revocation-reason))
      (common-lisp:list
       (common-lisp:cons "revocationReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revoked-at))
      (common-lisp:list
       (common-lisp:cons "revokedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial))
      (common-lisp:list
       (common-lisp:cons "serial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signature-algorithm))
      (common-lisp:list
       (common-lisp:cons "signatureAlgorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subject))
      (common-lisp:list
       (common-lisp:cons "subject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subject-alternative-names))
      (common-lisp:list
       (common-lisp:cons "subjectAlternativeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (load-balancer-tls-certificate-dns-record-creation-state
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-load-balancer-tls-certificate-dns-record-creation-state-"))
   (code common-lisp:nil :type
    (common-lisp:or
     load-balancer-tls-certificate-dns-record-creation-state-code
     common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'load-balancer-tls-certificate-dns-record-creation-state
                    'make-load-balancer-tls-certificate-dns-record-creation-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-dns-record-creation-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-dns-record-creation-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-dns-record-creation-state))
   common-lisp:nil))
(common-lisp:deftype load-balancer-tls-certificate-dns-record-creation-state-code
                     ()
  'common-lisp:string)
(common-lisp:deftype load-balancer-tls-certificate-domain-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (load-balancer-tls-certificate-domain-validation-option
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-load-balancer-tls-certificate-domain-validation-option-"))
   (domain-name common-lisp:nil :type
    (common-lisp:or domain-name common-lisp:null))
   (validation-status common-lisp:nil :type
    (common-lisp:or load-balancer-tls-certificate-domain-status
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'load-balancer-tls-certificate-domain-validation-option
                    'make-load-balancer-tls-certificate-domain-validation-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-domain-validation-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-domain-validation-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-status))
      (common-lisp:list
       (common-lisp:cons "validationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-domain-validation-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype load-balancer-tls-certificate-domain-validation-option-list
                      ()
   '(trivial-types:proper-list
     load-balancer-tls-certificate-domain-validation-option))
 (common-lisp:defun make-load-balancer-tls-certificate-domain-validation-option-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            load-balancer-tls-certificate-domain-validation-option))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (load-balancer-tls-certificate-domain-validation-record
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-load-balancer-tls-certificate-domain-validation-record-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (validation-status common-lisp:nil :type
    (common-lisp:or load-balancer-tls-certificate-domain-status
                    common-lisp:null))
   (domain-name common-lisp:nil :type
    (common-lisp:or domain-name common-lisp:null))
   (dns-record-creation-state common-lisp:nil :type
    (common-lisp:or load-balancer-tls-certificate-dns-record-creation-state
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'load-balancer-tls-certificate-domain-validation-record
                    'make-load-balancer-tls-certificate-domain-validation-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-domain-validation-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-domain-validation-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-status))
      (common-lisp:list
       (common-lisp:cons "validationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dns-record-creation-state))
      (common-lisp:list
       (common-lisp:cons "dnsRecordCreationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-domain-validation-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype load-balancer-tls-certificate-domain-validation-record-list
                      ()
   '(trivial-types:proper-list
     load-balancer-tls-certificate-domain-validation-record))
 (common-lisp:defun make-load-balancer-tls-certificate-domain-validation-record-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            load-balancer-tls-certificate-domain-validation-record))
   aws-sdk/generator/shape::members))
(common-lisp:deftype load-balancer-tls-certificate-failure-reason ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype load-balancer-tls-certificate-list ()
   '(trivial-types:proper-list load-balancer-tls-certificate))
 (common-lisp:defun make-load-balancer-tls-certificate-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            load-balancer-tls-certificate))
   aws-sdk/generator/shape::members))
(common-lisp:deftype load-balancer-tls-certificate-renewal-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (load-balancer-tls-certificate-renewal-summary (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-load-balancer-tls-certificate-renewal-summary-"))
   (renewal-status common-lisp:nil :type
    (common-lisp:or load-balancer-tls-certificate-renewal-status
                    common-lisp:null))
   (domain-validation-options common-lisp:nil :type
    (common-lisp:or load-balancer-tls-certificate-domain-validation-option-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'load-balancer-tls-certificate-renewal-summary
                    'make-load-balancer-tls-certificate-renewal-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-renewal-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-renewal-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-status))
      (common-lisp:list
       (common-lisp:cons "renewalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-validation-options))
      (common-lisp:list
       (common-lisp:cons "domainValidationOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-renewal-summary))
   common-lisp:nil))
(common-lisp:deftype load-balancer-tls-certificate-revocation-reason ()
  'common-lisp:string)
(common-lisp:deftype load-balancer-tls-certificate-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (load-balancer-tls-certificate-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-load-balancer-tls-certificate-summary-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (is-attached common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'load-balancer-tls-certificate-summary
                    'make-load-balancer-tls-certificate-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-attached))
      (common-lisp:list
       (common-lisp:cons "isAttached"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-certificate-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype load-balancer-tls-certificate-summary-list ()
   '(trivial-types:proper-list load-balancer-tls-certificate-summary))
 (common-lisp:defun make-load-balancer-tls-certificate-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            load-balancer-tls-certificate-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (load-balancer-tls-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-load-balancer-tls-policy-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (is-default common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (protocols common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (ciphers common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'load-balancer-tls-policy 'make-load-balancer-tls-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default))
      (common-lisp:list
       (common-lisp:cons "isDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocols))
      (common-lisp:list
       (common-lisp:cons "protocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ciphers))
      (common-lisp:list
       (common-lisp:cons "ciphers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          load-balancer-tls-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype load-balancer-tls-policy-list ()
   '(trivial-types:proper-list load-balancer-tls-policy))
 (common-lisp:defun make-load-balancer-tls-policy-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            load-balancer-tls-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (log-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-log-event-"))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'log-event 'make-log-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input log-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input log-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input log-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype log-event-list () '(trivial-types:proper-list log-event))
 (common-lisp:defun make-log-event-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list log-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (metric-datapoint (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-datapoint-"))
   (average common-lisp:nil :type
    (common-lisp:or common-lisp:double-float common-lisp:null))
   (maximum common-lisp:nil :type
    (common-lisp:or common-lisp:double-float common-lisp:null))
   (minimum common-lisp:nil :type
    (common-lisp:or common-lisp:double-float common-lisp:null))
   (sample-count common-lisp:nil :type
    (common-lisp:or common-lisp:double-float common-lisp:null))
   (sum common-lisp:nil :type
    (common-lisp:or common-lisp:double-float common-lisp:null))
   (timestamp common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (unit common-lisp:nil :type (common-lisp:or metric-unit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metric-datapoint 'make-metric-datapoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-datapoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-datapoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'average))
      (common-lisp:list
       (common-lisp:cons "average"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum))
      (common-lisp:list
       (common-lisp:cons "maximum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum))
      (common-lisp:list
       (common-lisp:cons "minimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-count))
      (common-lisp:list
       (common-lisp:cons "sampleCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sum))
      (common-lisp:list
       (common-lisp:cons "sum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-datapoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-datapoint-list ()
   '(trivial-types:proper-list metric-datapoint))
 (common-lisp:defun make-metric-datapoint-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-datapoint))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric-name () 'common-lisp:string)
(common-lisp:deftype metric-period () 'common-lisp:integer)
(common-lisp:deftype metric-statistic () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metric-statistic-list ()
   '(trivial-types:proper-list metric-statistic))
 (common-lisp:defun make-metric-statistic-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-statistic))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (monitored-resource-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitored-resource-info-"))
   (arn common-lisp:nil :type (common-lisp:or resource-arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitored-resource-info 'make-monitored-resource-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitored-resource-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitored-resource-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitored-resource-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (monthly-transfer (:copier common-lisp:nil)
      (:conc-name "struct-shape-monthly-transfer-"))
   (gb-per-month-allocated common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monthly-transfer 'make-monthly-transfer))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input monthly-transfer))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input monthly-transfer))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'gb-per-month-allocated))
      (common-lisp:list
       (common-lisp:cons "gbPerMonthAllocated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input monthly-transfer))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (name-servers-update-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-name-servers-update-state-"))
   (code common-lisp:nil :type
    (common-lisp:or name-servers-update-state-code common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'name-servers-update-state
                    'make-name-servers-update-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          name-servers-update-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          name-servers-update-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          name-servers-update-state))
   common-lisp:nil))
(common-lisp:deftype name-servers-update-state-code () 'common-lisp:string)
(common-lisp:deftype network-protocol () 'common-lisp:string)
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (lightsail-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       not-found-exception-code)
      (docs :initarg :docs :initform common-lisp:nil :reader
       not-found-exception-docs)
      (message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)
      (tip :initarg :tip :initform common-lisp:nil :reader
       not-found-exception-tip)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-code
                    'not-found-exception-docs 'not-found-exception-message
                    'not-found-exception-tip)))
(common-lisp:progn
 (common-lisp:deftype notification-trigger-list ()
   '(trivial-types:proper-list alarm-state))
 (common-lisp:defun make-notification-trigger-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alarm-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (open-instance-public-ports-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-open-instance-public-ports-request-"))
   (port-info (common-lisp:error ":portinfo is required") :type
    (common-lisp:or port-info common-lisp:null))
   (instance-name (common-lisp:error ":instancename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'open-instance-public-ports-request
                    'make-open-instance-public-ports-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          open-instance-public-ports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          open-instance-public-ports-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-info))
      (common-lisp:list
       (common-lisp:cons "portInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          open-instance-public-ports-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (open-instance-public-ports-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-open-instance-public-ports-result-"))
   (operation common-lisp:nil :type
    (common-lisp:or operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'open-instance-public-ports-result
                    'make-open-instance-public-ports-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          open-instance-public-ports-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          open-instance-public-ports-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          open-instance-public-ports-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (operation (:copier common-lisp:nil)
      (:conc-name "struct-shape-operation-"))
   (id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (resource-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or resource-location common-lisp:null))
   (is-terminal common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (operation-details common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (operation-type common-lisp:nil :type
    (common-lisp:or operation-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or operation-status common-lisp:null))
   (status-changed-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (error-details common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'operation 'make-operation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input operation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input operation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-terminal))
      (common-lisp:list
       (common-lisp:cons "isTerminal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-details))
      (common-lisp:list
       (common-lisp:cons "operationDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-type))
      (common-lisp:list
       (common-lisp:cons "operationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-changed-at))
      (common-lisp:list
       (common-lisp:cons "statusChangedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-details))
      (common-lisp:list
       (common-lisp:cons "errorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input operation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition operation-failure-exception
     (lightsail-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       operation-failure-exception-code)
      (docs :initarg :docs :initform common-lisp:nil :reader
       operation-failure-exception-docs)
      (message :initarg :message :initform common-lisp:nil :reader
       operation-failure-exception-message)
      (tip :initarg :tip :initform common-lisp:nil :reader
       operation-failure-exception-tip)))
 (common-lisp:export
  (common-lisp:list 'operation-failure-exception
                    'operation-failure-exception-code
                    'operation-failure-exception-docs
                    'operation-failure-exception-message
                    'operation-failure-exception-tip)))
(common-lisp:progn
 (common-lisp:deftype operation-list () '(trivial-types:proper-list operation))
 (common-lisp:defun make-operation-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list operation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype operation-status () 'common-lisp:string)
(common-lisp:deftype operation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (origin (:copier common-lisp:nil) (:conc-name "struct-shape-origin-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (region-name common-lisp:nil :type
    (common-lisp:or region-name common-lisp:null))
   (protocol-policy common-lisp:nil :type
    (common-lisp:or origin-protocol-policy-enum common-lisp:null)))
 (common-lisp:export (common-lisp:list 'origin 'make-origin))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input origin))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input origin))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "regionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol-policy))
      (common-lisp:list
       (common-lisp:cons "protocolPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input origin))
   common-lisp:nil))
(common-lisp:deftype origin-protocol-policy-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype partner-id-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun make-partner-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (password-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-password-data-"))
   (ciphertext common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (key-pair-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'password-data 'make-password-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input password-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input password-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ciphertext))
      (common-lisp:list
       (common-lisp:cons "ciphertext"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-pair-name))
      (common-lisp:list
       (common-lisp:cons "keyPairName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input password-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (peer-vpc-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-peer-vpc-request-")))
 (common-lisp:export
  (common-lisp:list 'peer-vpc-request 'make-peer-vpc-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input peer-vpc-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input peer-vpc-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input peer-vpc-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (peer-vpc-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-peer-vpc-result-"))
   (operation common-lisp:nil :type
    (common-lisp:or operation common-lisp:null)))
 (common-lisp:export (common-lisp:list 'peer-vpc-result 'make-peer-vpc-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input peer-vpc-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input peer-vpc-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input peer-vpc-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pending-maintenance-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-pending-maintenance-action-"))
   (action common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (current-apply-date common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pending-maintenance-action
                    'make-pending-maintenance-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-apply-date))
      (common-lisp:list
       (common-lisp:cons "currentApplyDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-maintenance-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pending-maintenance-action-list ()
   '(trivial-types:proper-list pending-maintenance-action))
 (common-lisp:defun make-pending-maintenance-action-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pending-maintenance-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (pending-modified-relational-database-values (:copier common-lisp:nil)
      (:conc-name "struct-shape-pending-modified-relational-database-values-"))
   (master-user-password common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (backup-retention-enabled common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pending-modified-relational-database-values
                    'make-pending-modified-relational-database-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-relational-database-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-relational-database-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "masterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "engineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-enabled))
      (common-lisp:list
       (common-lisp:cons "backupRetentionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-modified-relational-database-values))
   common-lisp:nil))
(common-lisp:deftype port () 'common-lisp:integer)
(common-lisp:deftype port-access-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (port-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-port-info-"))
   (from-port common-lisp:nil :type (common-lisp:or port common-lisp:null))
   (to-port common-lisp:nil :type (common-lisp:or port common-lisp:null))
   (protocol common-lisp:nil :type
    (common-lisp:or network-protocol common-lisp:null))
   (cidrs common-lisp:nil :type (common-lisp:or string-list common-lisp:null))
   (ipv6cidrs common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (cidr-list-aliases common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'port-info 'make-port-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input port-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input port-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'from-port))
      (common-lisp:list
       (common-lisp:cons "fromPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'to-port))
      (common-lisp:list
       (common-lisp:cons "toPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidrs))
      (common-lisp:list
       (common-lisp:cons "cidrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6cidrs))
      (common-lisp:list
       (common-lisp:cons "ipv6Cidrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr-list-aliases))
      (common-lisp:list
       (common-lisp:cons "cidrListAliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input port-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype port-info-list () '(trivial-types:proper-list port-info))
 (common-lisp:defun make-port-info-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype port-info-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype port-list () '(trivial-types:proper-list port))
 (common-lisp:defun make-port-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list port))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype port-map () 'common-lisp:hash-table)
 (common-lisp:defun make-port-map (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype port-state () 'common-lisp:string)
(common-lisp:deftype pricing-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (private-registry-access (:copier common-lisp:nil)
      (:conc-name "struct-shape-private-registry-access-"))
   (ecr-image-puller-role common-lisp:nil :type
    (common-lisp:or container-service-ecrimage-puller-role common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'private-registry-access 'make-private-registry-access))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          private-registry-access))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          private-registry-access))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ecr-image-puller-role))
      (common-lisp:list
       (common-lisp:cons "ecrImagePullerRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          private-registry-access))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (private-registry-access-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-private-registry-access-request-"))
   (ecr-image-puller-role common-lisp:nil :type
    (common-lisp:or container-service-ecrimage-puller-role-request
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'private-registry-access-request
                    'make-private-registry-access-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          private-registry-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          private-registry-access-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ecr-image-puller-role))
      (common-lisp:list
       (common-lisp:cons "ecrImagePullerRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          private-registry-access-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-alarm-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-alarm-request-"))
   (alarm-name (common-lisp:error ":alarmname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (metric-name (common-lisp:error ":metricname is required") :type
    (common-lisp:or metric-name common-lisp:null))
   (monitored-resource-name
    (common-lisp:error ":monitoredresourcename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (comparison-operator (common-lisp:error ":comparisonoperator is required")
    :type (common-lisp:or comparison-operator common-lisp:null))
   (threshold (common-lisp:error ":threshold is required") :type
    (common-lisp:or common-lisp:double-float common-lisp:null))
   (evaluation-periods (common-lisp:error ":evaluationperiods is required")
    :type (common-lisp:or common-lisp:integer common-lisp:null))
   (datapoints-to-alarm common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (treat-missing-data common-lisp:nil :type
    (common-lisp:or treat-missing-data common-lisp:null))
   (contact-protocols common-lisp:nil :type
    (common-lisp:or contact-protocols-list common-lisp:null))
   (notification-triggers common-lisp:nil :type
    (common-lisp:or notification-trigger-list common-lisp:null))
   (notification-enabled common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-alarm-request 'make-put-alarm-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-alarm-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-alarm-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-name))
      (common-lisp:list
       (common-lisp:cons "alarmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "metricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitored-resource-name))
      (common-lisp:list
       (common-lisp:cons "monitoredResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'comparison-operator))
      (common-lisp:list
       (common-lisp:cons "comparisonOperator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-periods))
      (common-lisp:list
       (common-lisp:cons "evaluationPeriods"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datapoints-to-alarm))
      (common-lisp:list
       (common-lisp:cons "datapointsToAlarm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'treat-missing-data))
      (common-lisp:list
       (common-lisp:cons "treatMissingData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'contact-protocols))
      (common-lisp:list
       (common-lisp:cons "contactProtocols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-triggers))
      (common-lisp:list
       (common-lisp:cons "notificationTriggers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-enabled))
      (common-lisp:list
       (common-lisp:cons "notificationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-alarm-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-alarm-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-alarm-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-alarm-result 'make-put-alarm-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-alarm-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-alarm-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-alarm-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-instance-public-ports-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-instance-public-ports-request-"))
   (port-infos (common-lisp:error ":portinfos is required") :type
    (common-lisp:or port-info-list common-lisp:null))
   (instance-name (common-lisp:error ":instancename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-instance-public-ports-request
                    'make-put-instance-public-ports-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-instance-public-ports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-instance-public-ports-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port-infos))
      (common-lisp:list
       (common-lisp:cons "portInfos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-instance-public-ports-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-instance-public-ports-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-instance-public-ports-result-"))
   (operation common-lisp:nil :type
    (common-lisp:or operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-instance-public-ports-result
                    'make-put-instance-public-ports-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-instance-public-ports-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-instance-public-ports-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-instance-public-ports-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (query-string-object (:copier common-lisp:nil)
      (:conc-name "struct-shape-query-string-object-"))
   (option common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (query-strings-allow-list common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'query-string-object 'make-query-string-object))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-string-object))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-string-object))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'option))
      (common-lisp:list
       (common-lisp:cons "option"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'query-strings-allow-list))
      (common-lisp:list
       (common-lisp:cons "queryStringsAllowList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-string-object))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (r53hosted-zone-deletion-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-r53hosted-zone-deletion-state-"))
   (code common-lisp:nil :type
    (common-lisp:or r53hosted-zone-deletion-state-code common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'r53hosted-zone-deletion-state
                    'make-r53hosted-zone-deletion-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          r53hosted-zone-deletion-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          r53hosted-zone-deletion-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          r53hosted-zone-deletion-state))
   common-lisp:nil))
(common-lisp:deftype r53hosted-zone-deletion-state-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (reboot-instance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-reboot-instance-request-"))
   (instance-name (common-lisp:error ":instancename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reboot-instance-request 'make-reboot-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reboot-instance-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-reboot-instance-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reboot-instance-result 'make-reboot-instance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-instance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-instance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-instance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reboot-relational-database-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-reboot-relational-database-request-"))
   (relational-database-name
    (common-lisp:error ":relationaldatabasename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reboot-relational-database-request
                    'make-reboot-relational-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-relational-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-relational-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-relational-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reboot-relational-database-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-reboot-relational-database-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reboot-relational-database-result
                    'make-reboot-relational-database-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-relational-database-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-relational-database-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-relational-database-result))
   common-lisp:nil))
(common-lisp:deftype record-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (region (:copier common-lisp:nil) (:conc-name "struct-shape-region-"))
   (continent-code common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or region-name common-lisp:null))
   (availability-zones common-lisp:nil :type
    (common-lisp:or availability-zone-list common-lisp:null))
   (relational-database-availability-zones common-lisp:nil :type
    (common-lisp:or availability-zone-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'region 'make-region))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input region))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input region))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'continent-code))
      (common-lisp:list
       (common-lisp:cons "continentCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "displayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "availabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-availability-zones))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseAvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input region))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype region-list () '(trivial-types:proper-list region))
 (common-lisp:defun make-region-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list region))
   aws-sdk/generator/shape::members))
(common-lisp:deftype region-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (register-container-image-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-container-image-request-"))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or container-service-name common-lisp:null))
   (label (common-lisp:error ":label is required") :type
    (common-lisp:or container-label common-lisp:null))
   (digest (common-lisp:error ":digest is required") :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-container-image-request
                    'make-register-container-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-container-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-container-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label))
      (common-lisp:list
       (common-lisp:cons "label"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'digest))
      (common-lisp:list
       (common-lisp:cons "digest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-container-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-container-image-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-container-image-result-"))
   (container-image common-lisp:nil :type
    (common-lisp:or container-image common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-container-image-result
                    'make-register-container-image-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-container-image-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-container-image-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-image))
      (common-lisp:list
       (common-lisp:cons "containerImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-container-image-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (registered-domain-delegation-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-registered-domain-delegation-info-"))
   (name-servers-update-state common-lisp:nil :type
    (common-lisp:or name-servers-update-state common-lisp:null))
   (r53hosted-zone-deletion-state common-lisp:nil :type
    (common-lisp:or r53hosted-zone-deletion-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registered-domain-delegation-info
                    'make-registered-domain-delegation-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          registered-domain-delegation-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          registered-domain-delegation-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'name-servers-update-state))
      (common-lisp:list
       (common-lisp:cons "nameServersUpdateState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'r53hosted-zone-deletion-state))
      (common-lisp:list
       (common-lisp:cons "r53HostedZoneDeletionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          registered-domain-delegation-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (relational-database (:copier common-lisp:nil)
      (:conc-name "struct-shape-relational-database-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (support-code common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or resource-location common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (relational-database-blueprint-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (relational-database-bundle-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (master-database-name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (hardware common-lisp:nil :type
    (common-lisp:or relational-database-hardware common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (secondary-availability-zone common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (backup-retention-enabled common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (pending-modified-values common-lisp:nil :type
    (common-lisp:or pending-modified-relational-database-values
                    common-lisp:null))
   (engine common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (latest-restorable-time common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (master-username common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (parameter-apply-status common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (preferred-backup-window common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (master-endpoint common-lisp:nil :type
    (common-lisp:or relational-database-endpoint common-lisp:null))
   (pending-maintenance-actions common-lisp:nil :type
    (common-lisp:or pending-maintenance-action-list common-lisp:null))
   (ca-certificate-identifier common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'relational-database 'make-relational-database))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input relational-database))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input relational-database))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-bundle-id))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseBundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-database-name))
      (common-lisp:list
       (common-lisp:cons "masterDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hardware))
      (common-lisp:list
       (common-lisp:cons "hardware"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-availability-zone))
      (common-lisp:list
       (common-lisp:cons "secondaryAvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'backup-retention-enabled))
      (common-lisp:list
       (common-lisp:cons "backupRetentionEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-modified-values))
      (common-lisp:list
       (common-lisp:cons "pendingModifiedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "engineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-restorable-time))
      (common-lisp:list
       (common-lisp:cons "latestRestorableTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-username))
      (common-lisp:list
       (common-lisp:cons "masterUsername"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameter-apply-status))
      (common-lisp:list
       (common-lisp:cons "parameterApplyStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "preferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "preferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "publiclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'master-endpoint))
      (common-lisp:list
       (common-lisp:cons "masterEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-maintenance-actions))
      (common-lisp:list
       (common-lisp:cons "pendingMaintenanceActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ca-certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "caCertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input relational-database))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (relational-database-blueprint (:copier common-lisp:nil)
      (:conc-name "struct-shape-relational-database-blueprint-"))
   (blueprint-id common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (engine common-lisp:nil :type
    (common-lisp:or relational-database-engine common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (engine-description common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (engine-version-description common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (is-engine-default common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'relational-database-blueprint
                    'make-relational-database-blueprint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-blueprint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-blueprint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blueprint-id))
      (common-lisp:list
       (common-lisp:cons "blueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "engineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-description))
      (common-lisp:list
       (common-lisp:cons "engineDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'engine-version-description))
      (common-lisp:list
       (common-lisp:cons "engineVersionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-engine-default))
      (common-lisp:list
       (common-lisp:cons "isEngineDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-blueprint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype relational-database-blueprint-list ()
   '(trivial-types:proper-list relational-database-blueprint))
 (common-lisp:defun make-relational-database-blueprint-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            relational-database-blueprint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (relational-database-bundle (:copier common-lisp:nil)
      (:conc-name "struct-shape-relational-database-bundle-"))
   (bundle-id common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (price common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null))
   (ram-size-in-gb common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null))
   (disk-size-in-gb common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (transfer-per-month-in-gb common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (cpu-count common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (is-encrypted common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (is-active common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'relational-database-bundle
                    'make-relational-database-bundle))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-bundle))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-bundle))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'price))
      (common-lisp:list
       (common-lisp:cons "price"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ram-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "ramSizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "diskSizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transfer-per-month-in-gb))
      (common-lisp:list
       (common-lisp:cons "transferPerMonthInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu-count))
      (common-lisp:list
       (common-lisp:cons "cpuCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-encrypted))
      (common-lisp:list
       (common-lisp:cons "isEncrypted"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-active))
      (common-lisp:list
       (common-lisp:cons "isActive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-bundle))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype relational-database-bundle-list ()
   '(trivial-types:proper-list relational-database-bundle))
 (common-lisp:defun make-relational-database-bundle-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            relational-database-bundle))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (relational-database-endpoint (:copier common-lisp:nil)
      (:conc-name "struct-shape-relational-database-endpoint-"))
   (port common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (address common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'relational-database-endpoint
                    'make-relational-database-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'address))
      (common-lisp:list
       (common-lisp:cons "address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-endpoint))
   common-lisp:nil))
(common-lisp:deftype relational-database-engine () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (relational-database-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-relational-database-event-"))
   (resource common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (event-categories common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'relational-database-event
                    'make-relational-database-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-categories))
      (common-lisp:list
       (common-lisp:cons "eventCategories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype relational-database-event-list ()
   '(trivial-types:proper-list relational-database-event))
 (common-lisp:defun make-relational-database-event-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            relational-database-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (relational-database-hardware (:copier common-lisp:nil)
      (:conc-name "struct-shape-relational-database-hardware-"))
   (cpu-count common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (disk-size-in-gb common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (ram-size-in-gb common-lisp:nil :type
    (common-lisp:or common-lisp:single-float common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'relational-database-hardware
                    'make-relational-database-hardware))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-hardware))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-hardware))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu-count))
      (common-lisp:list
       (common-lisp:cons "cpuCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disk-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "diskSizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ram-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "ramSizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-hardware))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype relational-database-list ()
   '(trivial-types:proper-list relational-database))
 (common-lisp:defun make-relational-database-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list relational-database))
   aws-sdk/generator/shape::members))
(common-lisp:deftype relational-database-metric-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (relational-database-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-relational-database-parameter-"))
   (allowed-values common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (apply-method common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (apply-type common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (data-type common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (is-modifiable common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (parameter-name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (parameter-value common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'relational-database-parameter
                    'make-relational-database-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allowed-values))
      (common-lisp:list
       (common-lisp:cons "allowedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-method))
      (common-lisp:list
       (common-lisp:cons "applyMethod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-type))
      (common-lisp:list
       (common-lisp:cons "applyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-modifiable))
      (common-lisp:list
       (common-lisp:cons "isModifiable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-name))
      (common-lisp:list
       (common-lisp:cons "parameterName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-value))
      (common-lisp:list
       (common-lisp:cons "parameterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype relational-database-parameter-list ()
   '(trivial-types:proper-list relational-database-parameter))
 (common-lisp:defun make-relational-database-parameter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            relational-database-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype relational-database-password-version ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (relational-database-snapshot (:copier common-lisp:nil)
      (:conc-name "struct-shape-relational-database-snapshot-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (support-code common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or resource-location common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (engine common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (engine-version common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (size-in-gb common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (from-relational-database-name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (from-relational-database-arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (from-relational-database-bundle-id common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (from-relational-database-blueprint-id common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'relational-database-snapshot
                    'make-relational-database-snapshot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-snapshot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-snapshot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine))
      (common-lisp:list
       (common-lisp:cons "engine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'engine-version))
      (common-lisp:list
       (common-lisp:cons "engineVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'size-in-gb))
      (common-lisp:list
       (common-lisp:cons "sizeInGb"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'from-relational-database-name))
      (common-lisp:list
       (common-lisp:cons "fromRelationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'from-relational-database-arn))
      (common-lisp:list
       (common-lisp:cons "fromRelationalDatabaseArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'from-relational-database-bundle-id))
      (common-lisp:list
       (common-lisp:cons "fromRelationalDatabaseBundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'from-relational-database-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "fromRelationalDatabaseBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          relational-database-snapshot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype relational-database-snapshot-list ()
   '(trivial-types:proper-list relational-database-snapshot))
 (common-lisp:defun make-relational-database-snapshot-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            relational-database-snapshot))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (release-static-ip-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-release-static-ip-request-"))
   (static-ip-name (common-lisp:error ":staticipname is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'release-static-ip-request
                    'make-release-static-ip-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          release-static-ip-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          release-static-ip-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-ip-name))
      (common-lisp:list
       (common-lisp:cons "staticIpName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          release-static-ip-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (release-static-ip-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-release-static-ip-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'release-static-ip-result 'make-release-static-ip-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          release-static-ip-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          release-static-ip-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          release-static-ip-result))
   common-lisp:nil))
(common-lisp:deftype renewal-status () 'common-lisp:string)
(common-lisp:deftype renewal-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (renewal-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-renewal-summary-"))
   (domain-validation-records common-lisp:nil :type
    (common-lisp:or domain-validation-record-list common-lisp:null))
   (renewal-status common-lisp:nil :type
    (common-lisp:or renewal-status common-lisp:null))
   (renewal-status-reason common-lisp:nil :type
    (common-lisp:or renewal-status-reason common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null)))
 (common-lisp:export (common-lisp:list 'renewal-summary 'make-renewal-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input renewal-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input renewal-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-validation-records))
      (common-lisp:list
       (common-lisp:cons "domainValidationRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-status))
      (common-lisp:list
       (common-lisp:cons "renewalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'renewal-status-reason))
      (common-lisp:list
       (common-lisp:cons "renewalStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input renewal-summary))
   common-lisp:nil))
(common-lisp:deftype request-failure-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (reset-distribution-cache-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-reset-distribution-cache-request-"))
   (distribution-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reset-distribution-cache-request
                    'make-reset-distribution-cache-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-distribution-cache-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-distribution-cache-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-name))
      (common-lisp:list
       (common-lisp:cons "distributionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-distribution-cache-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reset-distribution-cache-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-reset-distribution-cache-result-"))
   (status common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (operation common-lisp:nil :type
    (common-lisp:or operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reset-distribution-cache-result
                    'make-reset-distribution-cache-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-distribution-cache-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-distribution-cache-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-time))
      (common-lisp:list
       (common-lisp:cons "createTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-distribution-cache-result))
   common-lisp:nil))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:deftype resource-bucket-access () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource-budget-estimate (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-budget-estimate-"))
   (resource-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (cost-estimates common-lisp:nil :type
    (common-lisp:or cost-estimates common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or iso-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-budget-estimate 'make-resource-budget-estimate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-budget-estimate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-budget-estimate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-estimates))
      (common-lisp:list
       (common-lisp:cons "costEstimates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "startTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "endTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-budget-estimate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-location-"))
   (availability-zone common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (region-name common-lisp:nil :type
    (common-lisp:or region-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-location 'make-resource-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "availabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region-name))
      (common-lisp:list
       (common-lisp:cons "regionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-location))
   common-lisp:nil))
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-name-list ()
   '(trivial-types:proper-list resource-name))
 (common-lisp:defun make-resource-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-receiving-access (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-receiving-access-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-receiving-access
                    'make-resource-receiving-access))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-receiving-access))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-receiving-access))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-receiving-access))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-record (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-record-"))
   (name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-record 'make-resource-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-record))
   common-lisp:nil))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resources-budget-estimate ()
   '(trivial-types:proper-list resource-budget-estimate))
 (common-lisp:defun make-resources-budget-estimate
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resource-budget-estimate))
   aws-sdk/generator/shape::members))
(common-lisp:deftype revocation-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (send-contact-method-verification-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-contact-method-verification-request-"))
   (protocol (common-lisp:error ":protocol is required") :type
    (common-lisp:or contact-method-verification-protocol common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-contact-method-verification-request
                    'make-send-contact-method-verification-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-contact-method-verification-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-contact-method-verification-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-contact-method-verification-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-contact-method-verification-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-send-contact-method-verification-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-contact-method-verification-result
                    'make-send-contact-method-verification-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-contact-method-verification-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-contact-method-verification-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-contact-method-verification-result))
   common-lisp:nil))
(common-lisp:deftype sensitive-non-empty-string () 'common-lisp:string)
(common-lisp:deftype sensitive-string () 'common-lisp:string)
(common-lisp:deftype serial-number () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-exception
     (lightsail-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       service-exception-code)
      (docs :initarg :docs :initform common-lisp:nil :reader
       service-exception-docs)
      (message :initarg :message :initform common-lisp:nil :reader
       service-exception-message)
      (tip :initarg :tip :initform common-lisp:nil :reader
       service-exception-tip)))
 (common-lisp:export
  (common-lisp:list 'service-exception 'service-exception-code
                    'service-exception-docs 'service-exception-message
                    'service-exception-tip)))
(common-lisp:progn
 (common-lisp:defstruct
     (session (:copier common-lisp:nil) (:conc-name "struct-shape-session-"))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (url common-lisp:nil :type
    (common-lisp:or sensitive-non-empty-string common-lisp:null))
   (is-primary common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'session 'make-session))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-primary))
      (common-lisp:list
       (common-lisp:cons "isPrimary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sessions () '(trivial-types:proper-list session))
 (common-lisp:defun make-sessions
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list session))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (set-ip-address-type-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-set-ip-address-type-request-"))
   (resource-type (common-lisp:error ":resourcetype is required") :type
    (common-lisp:or resource-type common-lisp:null))
   (resource-name (common-lisp:error ":resourcename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (ip-address-type (common-lisp:error ":ipaddresstype is required") :type
    (common-lisp:or ip-address-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-ip-address-type-request
                    'make-set-ip-address-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-ip-address-type-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-ip-address-type-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-type))
      (common-lisp:list
       (common-lisp:cons "ipAddressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-ip-address-type-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (set-ip-address-type-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-set-ip-address-type-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-ip-address-type-result
                    'make-set-ip-address-type-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-ip-address-type-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-ip-address-type-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-ip-address-type-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (set-resource-access-for-bucket-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-set-resource-access-for-bucket-request-"))
   (resource-name (common-lisp:error ":resourcename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (bucket-name (common-lisp:error ":bucketname is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (access (common-lisp:error ":access is required") :type
    (common-lisp:or resource-bucket-access common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-resource-access-for-bucket-request
                    'make-set-resource-access-for-bucket-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-resource-access-for-bucket-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-resource-access-for-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access))
      (common-lisp:list
       (common-lisp:cons "access"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-resource-access-for-bucket-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (set-resource-access-for-bucket-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-set-resource-access-for-bucket-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-resource-access-for-bucket-result
                    'make-set-resource-access-for-bucket-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-resource-access-for-bucket-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-resource-access-for-bucket-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-resource-access-for-bucket-result))
   common-lisp:nil))
(common-lisp:deftype setup-domain-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype setup-domain-name-list ()
   '(trivial-types:proper-list setup-domain-name))
 (common-lisp:defun make-setup-domain-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list setup-domain-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (setup-execution-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-setup-execution-details-"))
   (command common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (date-time common-lisp:nil :type (common-lisp:or iso-date common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or setup-status common-lisp:null))
   (standard-error common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (standard-output common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'setup-execution-details 'make-setup-execution-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          setup-execution-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          setup-execution-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'command))
      (common-lisp:list
       (common-lisp:cons "command"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-time))
      (common-lisp:list
       (common-lisp:cons "dateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standard-error))
      (common-lisp:list
       (common-lisp:cons "standardError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standard-output))
      (common-lisp:list
       (common-lisp:cons "standardOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          setup-execution-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype setup-execution-details-list ()
   '(trivial-types:proper-list setup-execution-details))
 (common-lisp:defun make-setup-execution-details-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list setup-execution-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (setup-history (:copier common-lisp:nil)
      (:conc-name "struct-shape-setup-history-"))
   (operation-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (request common-lisp:nil :type
    (common-lisp:or setup-request common-lisp:null))
   (resource common-lisp:nil :type
    (common-lisp:or setup-history-resource common-lisp:null))
   (execution-details common-lisp:nil :type
    (common-lisp:or setup-execution-details-list common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or setup-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'setup-history 'make-setup-history))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input setup-history))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input setup-history))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "operationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request))
      (common-lisp:list
       (common-lisp:cons "request"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-details))
      (common-lisp:list
       (common-lisp:cons "executionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input setup-history))
   common-lisp:nil))
(common-lisp:deftype setup-history-page-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (setup-history-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-setup-history-resource-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or resource-location common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'setup-history-resource 'make-setup-history-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          setup-history-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          setup-history-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          setup-history-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (setup-instance-https-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-setup-instance-https-request-"))
   (instance-name (common-lisp:error ":instancename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (email-address (common-lisp:error ":emailaddress is required") :type
    (common-lisp:or email-address common-lisp:null))
   (domain-names (common-lisp:error ":domainnames is required") :type
    (common-lisp:or setup-domain-name-list common-lisp:null))
   (certificate-provider (common-lisp:error ":certificateprovider is required")
    :type (common-lisp:or certificate-provider common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'setup-instance-https-request
                    'make-setup-instance-https-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          setup-instance-https-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          setup-instance-https-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'email-address))
      (common-lisp:list
       (common-lisp:cons "emailAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-names))
      (common-lisp:list
       (common-lisp:cons "domainNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-provider))
      (common-lisp:list
       (common-lisp:cons "certificateProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          setup-instance-https-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (setup-instance-https-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-setup-instance-https-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'setup-instance-https-result
                    'make-setup-instance-https-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          setup-instance-https-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          setup-instance-https-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          setup-instance-https-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (setup-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-setup-request-"))
   (instance-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (domain-names common-lisp:nil :type
    (common-lisp:or setup-domain-name-list common-lisp:null))
   (certificate-provider common-lisp:nil :type
    (common-lisp:or certificate-provider common-lisp:null)))
 (common-lisp:export (common-lisp:list 'setup-request 'make-setup-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input setup-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input setup-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-names))
      (common-lisp:list
       (common-lisp:cons "domainNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-provider))
      (common-lisp:list
       (common-lisp:cons "certificateProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input setup-request))
   common-lisp:nil))
(common-lisp:deftype setup-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-guisession-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-guisession-request-"))
   (resource-name (common-lisp:error ":resourcename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-guisession-request 'make-start-guisession-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-guisession-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-guisession-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-guisession-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-guisession-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-guisession-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-guisession-result 'make-start-guisession-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-guisession-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-guisession-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-guisession-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-instance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-instance-request-"))
   (instance-name (common-lisp:error ":instancename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-instance-request 'make-start-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-instance-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-instance-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-instance-result 'make-start-instance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-instance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-relational-database-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-relational-database-request-"))
   (relational-database-name
    (common-lisp:error ":relationaldatabasename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-relational-database-request
                    'make-start-relational-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-relational-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-relational-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-relational-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-relational-database-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-relational-database-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-relational-database-result
                    'make-start-relational-database-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-relational-database-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-relational-database-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-relational-database-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (static-ip (:copier common-lisp:nil)
      (:conc-name "struct-shape-static-ip-"))
   (name common-lisp:nil :type (common-lisp:or resource-name common-lisp:null))
   (arn common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (support-code common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or iso-date common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or resource-location common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (ip-address common-lisp:nil :type
    (common-lisp:or ip-address common-lisp:null))
   (attached-to common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (is-attached common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export (common-lisp:list 'static-ip 'make-static-ip))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input static-ip))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input static-ip))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'support-code))
      (common-lisp:list
       (common-lisp:cons "supportCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'location))
      (common-lisp:list
       (common-lisp:cons "location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "resourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "ipAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attached-to))
      (common-lisp:list
       (common-lisp:cons "attachedTo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-attached))
      (common-lisp:list
       (common-lisp:cons "isAttached"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input static-ip))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype static-ip-list () '(trivial-types:proper-list static-ip))
 (common-lisp:defun make-static-ip-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list static-ip))
   aws-sdk/generator/shape::members))
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:deftype status-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stop-guisession-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-guisession-request-"))
   (resource-name (common-lisp:error ":resourcename is required") :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-guisession-request 'make-stop-guisession-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-guisession-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-guisession-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-guisession-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-guisession-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-guisession-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-guisession-result 'make-stop-guisession-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-guisession-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-guisession-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-guisession-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-instance-on-idle-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-instance-on-idle-request-"))
   (threshold common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (duration common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-instance-on-idle-request
                    'make-stop-instance-on-idle-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-instance-on-idle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-instance-on-idle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'threshold))
      (common-lisp:list
       (common-lisp:cons "threshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-instance-on-idle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-instance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-instance-request-"))
   (instance-name (common-lisp:error ":instancename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (force common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-instance-request 'make-stop-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-instance-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-instance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-instance-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-instance-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-instance-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-instance-result 'make-stop-instance-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-instance-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-instance-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-instance-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-relational-database-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-relational-database-request-"))
   (relational-database-name
    (common-lisp:error ":relationaldatabasename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (relational-database-snapshot-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-relational-database-request
                    'make-stop-relational-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-relational-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-relational-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-snapshot-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseSnapshotName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-relational-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-relational-database-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-relational-database-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-relational-database-result
                    'make-stop-relational-database-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-relational-database-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-relational-database-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-relational-database-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype string-list ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun make-string-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype string-max256 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subject-alternative-name-list ()
   '(trivial-types:proper-list domain-name))
 (common-lisp:defun make-subject-alternative-name-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key common-lisp:nil :type (common-lisp:or tag-key common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-name (common-lisp:error ":resourcename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (resource-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-result 'make-tag-resource-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-result))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (test-alarm-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-alarm-request-"))
   (alarm-name (common-lisp:error ":alarmname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or alarm-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-alarm-request 'make-test-alarm-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input test-alarm-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input test-alarm-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-name))
      (common-lisp:list
       (common-lisp:cons "alarmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input test-alarm-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (test-alarm-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-test-alarm-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-alarm-result 'make-test-alarm-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input test-alarm-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input test-alarm-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input test-alarm-result))
   common-lisp:nil))
(common-lisp:deftype time-of-day () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (time-period (:copier common-lisp:nil)
      (:conc-name "struct-shape-time-period-"))
   (start common-lisp:nil :type (common-lisp:or iso-date common-lisp:null))
   (end common-lisp:nil :type (common-lisp:or iso-date common-lisp:null)))
 (common-lisp:export (common-lisp:list 'time-period 'make-time-period))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-period))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-period))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "end"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-period))
   common-lisp:nil))
(common-lisp:deftype treat-missing-data () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unauthenticated-exception
     (lightsail-error)
     ((code :initarg :code :initform common-lisp:nil :reader
       unauthenticated-exception-code)
      (docs :initarg :docs :initform common-lisp:nil :reader
       unauthenticated-exception-docs)
      (message :initarg :message :initform common-lisp:nil :reader
       unauthenticated-exception-message)
      (tip :initarg :tip :initform common-lisp:nil :reader
       unauthenticated-exception-tip)))
 (common-lisp:export
  (common-lisp:list 'unauthenticated-exception 'unauthenticated-exception-code
                    'unauthenticated-exception-docs
                    'unauthenticated-exception-message
                    'unauthenticated-exception-tip)))
(common-lisp:progn
 (common-lisp:defstruct
     (unpeer-vpc-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-unpeer-vpc-request-")))
 (common-lisp:export
  (common-lisp:list 'unpeer-vpc-request 'make-unpeer-vpc-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unpeer-vpc-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unpeer-vpc-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unpeer-vpc-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (unpeer-vpc-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-unpeer-vpc-result-"))
   (operation common-lisp:nil :type
    (common-lisp:or operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unpeer-vpc-result 'make-unpeer-vpc-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input unpeer-vpc-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input unpeer-vpc-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input unpeer-vpc-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-name (common-lisp:error ":resourcename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (resource-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-name))
      (common-lisp:list
       (common-lisp:cons "resourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "tagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-result 'make-untag-resource-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-bucket-bundle-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-bucket-bundle-request-"))
   (bucket-name (common-lisp:error ":bucketname is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (bundle-id (common-lisp:error ":bundleid is required") :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-bucket-bundle-request
                    'make-update-bucket-bundle-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bucket-bundle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bucket-bundle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bucket-bundle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-bucket-bundle-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-bucket-bundle-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-bucket-bundle-result
                    'make-update-bucket-bundle-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bucket-bundle-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bucket-bundle-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bucket-bundle-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-bucket-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-bucket-request-"))
   (bucket-name (common-lisp:error ":bucketname is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (access-rules common-lisp:nil :type
    (common-lisp:or access-rules common-lisp:null))
   (versioning common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (readonly-access-accounts common-lisp:nil :type
    (common-lisp:or partner-id-list common-lisp:null))
   (access-log-config common-lisp:nil :type
    (common-lisp:or bucket-access-log-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-bucket-request 'make-update-bucket-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-bucket-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-bucket-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket-name))
      (common-lisp:list
       (common-lisp:cons "bucketName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-rules))
      (common-lisp:list
       (common-lisp:cons "accessRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versioning))
      (common-lisp:list
       (common-lisp:cons "versioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'readonly-access-accounts))
      (common-lisp:list
       (common-lisp:cons "readonlyAccessAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-log-config))
      (common-lisp:list
       (common-lisp:cons "accessLogConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-bucket-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-bucket-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-bucket-result-"))
   (bucket common-lisp:nil :type (common-lisp:or bucket common-lisp:null))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-bucket-result 'make-update-bucket-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-bucket-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-bucket-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-bucket-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-container-service-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-container-service-request-"))
   (service-name (common-lisp:error ":servicename is required") :type
    (common-lisp:or container-service-name common-lisp:null))
   (power common-lisp:nil :type
    (common-lisp:or container-service-power-name common-lisp:null))
   (scale common-lisp:nil :type
    (common-lisp:or container-service-scale common-lisp:null))
   (is-disabled common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (public-domain-names common-lisp:nil :type
    (common-lisp:or container-service-public-domains common-lisp:null))
   (private-registry-access common-lisp:nil :type
    (common-lisp:or private-registry-access-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-container-service-request
                    'make-update-container-service-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-container-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-container-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "serviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'power))
      (common-lisp:list
       (common-lisp:cons "power"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scale))
      (common-lisp:list
       (common-lisp:cons "scale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-disabled))
      (common-lisp:list
       (common-lisp:cons "isDisabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-domain-names))
      (common-lisp:list
       (common-lisp:cons "publicDomainNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-registry-access))
      (common-lisp:list
       (common-lisp:cons "privateRegistryAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-container-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-container-service-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-container-service-result-"))
   (container-service common-lisp:nil :type
    (common-lisp:or container-service common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-container-service-result
                    'make-update-container-service-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-container-service-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-container-service-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-service))
      (common-lisp:list
       (common-lisp:cons "containerService"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-container-service-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-distribution-bundle-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-distribution-bundle-request-"))
   (distribution-name common-lisp:nil :type
    (common-lisp:or resource-name common-lisp:null))
   (bundle-id common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-distribution-bundle-request
                    'make-update-distribution-bundle-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-bundle-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-bundle-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-name))
      (common-lisp:list
       (common-lisp:cons "distributionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bundle-id))
      (common-lisp:list
       (common-lisp:cons "bundleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-bundle-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-distribution-bundle-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-distribution-bundle-result-"))
   (operation common-lisp:nil :type
    (common-lisp:or operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-distribution-bundle-result
                    'make-update-distribution-bundle-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-bundle-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-bundle-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-bundle-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-distribution-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-distribution-request-"))
   (distribution-name (common-lisp:error ":distributionname is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (origin common-lisp:nil :type
    (common-lisp:or input-origin common-lisp:null))
   (default-cache-behavior common-lisp:nil :type
    (common-lisp:or cache-behavior common-lisp:null))
   (cache-behavior-settings common-lisp:nil :type
    (common-lisp:or cache-settings common-lisp:null))
   (cache-behaviors common-lisp:nil :type
    (common-lisp:or cache-behavior-list common-lisp:null))
   (is-enabled common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-distribution-request
                    'make-update-distribution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distribution-name))
      (common-lisp:list
       (common-lisp:cons "distributionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'origin))
      (common-lisp:list
       (common-lisp:cons "origin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-cache-behavior))
      (common-lisp:list
       (common-lisp:cons "defaultCacheBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cache-behavior-settings))
      (common-lisp:list
       (common-lisp:cons "cacheBehaviorSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-behaviors))
      (common-lisp:list
       (common-lisp:cons "cacheBehaviors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-enabled))
      (common-lisp:list
       (common-lisp:cons "isEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-distribution-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-distribution-result-"))
   (operation common-lisp:nil :type
    (common-lisp:or operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-distribution-result
                    'make-update-distribution-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-distribution-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-domain-entry-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-domain-entry-request-"))
   (domain-name (common-lisp:error ":domainname is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (domain-entry (common-lisp:error ":domainentry is required") :type
    (common-lisp:or domain-entry common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-domain-entry-request
                    'make-update-domain-entry-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-entry-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-entry-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "domainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-entry))
      (common-lisp:list
       (common-lisp:cons "domainEntry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-entry-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-domain-entry-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-domain-entry-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-domain-entry-result
                    'make-update-domain-entry-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-entry-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-entry-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-entry-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-instance-metadata-options-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-instance-metadata-options-request-"))
   (instance-name (common-lisp:error ":instancename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (http-tokens common-lisp:nil :type
    (common-lisp:or http-tokens common-lisp:null))
   (http-endpoint common-lisp:nil :type
    (common-lisp:or http-endpoint common-lisp:null))
   (http-put-response-hop-limit common-lisp:nil :type
    (common-lisp:or common-lisp:integer common-lisp:null))
   (http-protocol-ipv6 common-lisp:nil :type
    (common-lisp:or http-protocol-ipv6 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-instance-metadata-options-request
                    'make-update-instance-metadata-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-metadata-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-metadata-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-name))
      (common-lisp:list
       (common-lisp:cons "instanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-tokens))
      (common-lisp:list
       (common-lisp:cons "httpTokens"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-endpoint))
      (common-lisp:list
       (common-lisp:cons "httpEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'http-put-response-hop-limit))
      (common-lisp:list
       (common-lisp:cons "httpPutResponseHopLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-protocol-ipv6))
      (common-lisp:list
       (common-lisp:cons "httpProtocolIpv6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-metadata-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-instance-metadata-options-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-instance-metadata-options-result-"))
   (operation common-lisp:nil :type
    (common-lisp:or operation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-instance-metadata-options-result
                    'make-update-instance-metadata-options-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-metadata-options-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-metadata-options-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-instance-metadata-options-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-load-balancer-attribute-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-load-balancer-attribute-request-"))
   (load-balancer-name (common-lisp:error ":loadbalancername is required")
    :type (common-lisp:or resource-name common-lisp:null))
   (attribute-name (common-lisp:error ":attributename is required") :type
    (common-lisp:or load-balancer-attribute-name common-lisp:null))
   (attribute-value (common-lisp:error ":attributevalue is required") :type
    (common-lisp:or string-max256 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-load-balancer-attribute-request
                    'make-update-load-balancer-attribute-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-load-balancer-attribute-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-load-balancer-attribute-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'load-balancer-name))
      (common-lisp:list
       (common-lisp:cons "loadBalancerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-name))
      (common-lisp:list
       (common-lisp:cons "attributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-value))
      (common-lisp:list
       (common-lisp:cons "attributeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-load-balancer-attribute-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-load-balancer-attribute-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-load-balancer-attribute-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-load-balancer-attribute-result
                    'make-update-load-balancer-attribute-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-load-balancer-attribute-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-load-balancer-attribute-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-load-balancer-attribute-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-relational-database-parameters-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-relational-database-parameters-request-"))
   (relational-database-name
    (common-lisp:error ":relationaldatabasename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (parameters (common-lisp:error ":parameters is required") :type
    (common-lisp:or relational-database-parameter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-relational-database-parameters-request
                    'make-update-relational-database-parameters-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-relational-database-parameters-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-relational-database-parameters-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-relational-database-parameters-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-relational-database-parameters-result (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-relational-database-parameters-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-relational-database-parameters-result
                    'make-update-relational-database-parameters-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-relational-database-parameters-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-relational-database-parameters-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-relational-database-parameters-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-relational-database-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-relational-database-request-"))
   (relational-database-name
    (common-lisp:error ":relationaldatabasename is required") :type
    (common-lisp:or resource-name common-lisp:null))
   (master-user-password common-lisp:nil :type
    (common-lisp:or sensitive-string common-lisp:null))
   (rotate-master-user-password common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (preferred-backup-window common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (preferred-maintenance-window common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (enable-backup-retention common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (disable-backup-retention common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (publicly-accessible common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (apply-immediately common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (ca-certificate-identifier common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (relational-database-blueprint-id common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-relational-database-request
                    'make-update-relational-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-relational-database-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-relational-database-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-name))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'master-user-password))
      (common-lisp:list
       (common-lisp:cons "masterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rotate-master-user-password))
      (common-lisp:list
       (common-lisp:cons "rotateMasterUserPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-backup-window))
      (common-lisp:list
       (common-lisp:cons "preferredBackupWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-maintenance-window))
      (common-lisp:list
       (common-lisp:cons "preferredMaintenanceWindow"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-backup-retention))
      (common-lisp:list
       (common-lisp:cons "enableBackupRetention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-backup-retention))
      (common-lisp:list
       (common-lisp:cons "disableBackupRetention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "publiclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apply-immediately))
      (common-lisp:list
       (common-lisp:cons "applyImmediately"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ca-certificate-identifier))
      (common-lisp:list
       (common-lisp:cons "caCertificateIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'relational-database-blueprint-id))
      (common-lisp:list
       (common-lisp:cons "relationalDatabaseBlueprintId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-relational-database-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-relational-database-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-relational-database-result-"))
   (operations common-lisp:nil :type
    (common-lisp:or operation-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-relational-database-result
                    'make-update-relational-database-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-relational-database-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-relational-database-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operations))
      (common-lisp:list
       (common-lisp:cons "operations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-relational-database-result))
   common-lisp:nil))
common-lisp:nil
common-lisp:nil
common-lisp:nil
common-lisp:nil
common-lisp:nil
(common-lisp:progn
 (common-lisp:deftype |setupHistoryList| ()
   '(trivial-types:proper-list setup-history))
 (common-lisp:defun make-setuphistorylist
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list setup-history))
   aws-sdk/generator/shape::members))
common-lisp:nil
common-lisp:nil
(common-lisp:progn
 (common-lisp:defun allocate-static-ip
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key static-ip-name)
   (common-lisp:declare (common-lisp:ignorable static-ip-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-allocate-static-ip-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AllocateStaticIp"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'allocate-static-ip))
(common-lisp:progn
 (common-lisp:defun attach-certificate-to-distribution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-name certificate-name)
   (common-lisp:declare
    (common-lisp:ignorable distribution-name certificate-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-attach-certificate-to-distribution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AttachCertificateToDistribution"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'attach-certificate-to-distribution))
(common-lisp:progn
 (common-lisp:defun attach-disk
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key disk-name instance-name disk-path
                     auto-mounting)
   (common-lisp:declare
    (common-lisp:ignorable disk-name instance-name disk-path auto-mounting))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-disk-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AttachDisk"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'attach-disk))
(common-lisp:progn
 (common-lisp:defun attach-instances-to-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name instance-names)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name instance-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-attach-instances-to-load-balancer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AttachInstancesToLoadBalancer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'attach-instances-to-load-balancer))
(common-lisp:progn
 (common-lisp:defun attach-load-balancer-tls-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name certificate-name)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name certificate-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-attach-load-balancer-tls-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AttachLoadBalancerTlsCertificate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'attach-load-balancer-tls-certificate))
(common-lisp:progn
 (common-lisp:defun attach-static-ip
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key static-ip-name instance-name)
   (common-lisp:declare (common-lisp:ignorable static-ip-name instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-static-ip-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AttachStaticIp"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'attach-static-ip))
(common-lisp:progn
 (common-lisp:defun close-instance-public-ports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key port-info instance-name)
   (common-lisp:declare (common-lisp:ignorable port-info instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-close-instance-public-ports-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CloseInstancePublicPorts"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'close-instance-public-ports))
(common-lisp:progn
 (common-lisp:defun copy-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-snapshot-name source-resource-name
                     restore-date use-latest-restorable-auto-snapshot
                     target-snapshot-name source-region)
   (common-lisp:declare
    (common-lisp:ignorable source-snapshot-name source-resource-name
     restore-date use-latest-restorable-auto-snapshot target-snapshot-name
     source-region))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-copy-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CopySnapshot"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'copy-snapshot))
(common-lisp:progn
 (common-lisp:defun create-bucket
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket-name bundle-id tags
                     enable-object-versioning)
   (common-lisp:declare
    (common-lisp:ignorable bucket-name bundle-id tags
     enable-object-versioning))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-bucket-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateBucket"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-bucket))
(common-lisp:progn
 (common-lisp:defun create-bucket-access-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket-name)
   (common-lisp:declare (common-lisp:ignorable bucket-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-bucket-access-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateBucketAccessKey"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-bucket-access-key))
(common-lisp:progn
 (common-lisp:defun create-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-name domain-name
                     subject-alternative-names tags)
   (common-lisp:declare
    (common-lisp:ignorable certificate-name domain-name
     subject-alternative-names tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCertificate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-certificate))
(common-lisp:progn
 (common-lisp:defun create-cloud-formation-stack
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instances)
   (common-lisp:declare (common-lisp:ignorable instances))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-cloud-formation-stack-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCloudFormationStack"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-cloud-formation-stack))
(common-lisp:progn
 (common-lisp:defun create-contact-method
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key protocol contact-endpoint)
   (common-lisp:declare (common-lisp:ignorable protocol contact-endpoint))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-contact-method-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateContactMethod"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-contact-method))
(common-lisp:progn
 (common-lisp:defun create-container-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name power scale tags
                     public-domain-names deployment private-registry-access)
   (common-lisp:declare
    (common-lisp:ignorable service-name power scale tags public-domain-names
     deployment private-registry-access))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-container-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateContainerService"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-container-service))
(common-lisp:progn
 (common-lisp:defun create-container-service-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name containers public-endpoint)
   (common-lisp:declare
    (common-lisp:ignorable service-name containers public-endpoint))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-container-service-deployment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateContainerServiceDeployment"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-container-service-deployment))
(common-lisp:progn
 (common-lisp:defun create-container-service-registry-login ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'lightsail-request :method "POST" :path "/"
                                :operation
                                "CreateContainerServiceRegistryLogin"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'create-container-service-registry-login))
(common-lisp:progn
 (common-lisp:defun create-disk
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key disk-name availability-zone size-in-gb
                     tags add-ons)
   (common-lisp:declare
    (common-lisp:ignorable disk-name availability-zone size-in-gb tags
     add-ons))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-disk-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDisk"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-disk))
(common-lisp:progn
 (common-lisp:defun create-disk-from-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key disk-name disk-snapshot-name
                     availability-zone size-in-gb tags add-ons source-disk-name
                     restore-date use-latest-restorable-auto-snapshot)
   (common-lisp:declare
    (common-lisp:ignorable disk-name disk-snapshot-name availability-zone
     size-in-gb tags add-ons source-disk-name restore-date
     use-latest-restorable-auto-snapshot))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-disk-from-snapshot-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDiskFromSnapshot"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-disk-from-snapshot))
(common-lisp:progn
 (common-lisp:defun create-disk-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key disk-name disk-snapshot-name
                     instance-name tags)
   (common-lisp:declare
    (common-lisp:ignorable disk-name disk-snapshot-name instance-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-disk-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDiskSnapshot"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-disk-snapshot))
(common-lisp:progn
 (common-lisp:defun create-distribution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-name origin
                     default-cache-behavior cache-behavior-settings
                     cache-behaviors bundle-id ip-address-type tags)
   (common-lisp:declare
    (common-lisp:ignorable distribution-name origin default-cache-behavior
     cache-behavior-settings cache-behaviors bundle-id ip-address-type tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-distribution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDistribution"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-distribution))
(common-lisp:progn
 (common-lisp:defun create-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name tags)
   (common-lisp:declare (common-lisp:ignorable domain-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDomain"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-domain))
(common-lisp:progn
 (common-lisp:defun create-domain-entry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name domain-entry)
   (common-lisp:declare (common-lisp:ignorable domain-name domain-entry))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-domain-entry-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDomainEntry"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-domain-entry))
(common-lisp:progn
 (common-lisp:defun create-guisession-access-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name)
   (common-lisp:declare (common-lisp:ignorable resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-guisession-access-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateGUISessionAccessDetails"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-guisession-access-details))
(common-lisp:progn
 (common-lisp:defun create-instance-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-snapshot-name instance-name
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable instance-snapshot-name instance-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-instance-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateInstanceSnapshot"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-instance-snapshot))
(common-lisp:progn
 (common-lisp:defun create-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-names availability-zone
                     custom-image-name blueprint-id bundle-id user-data
                     key-pair-name tags add-ons ip-address-type)
   (common-lisp:declare
    (common-lisp:ignorable instance-names availability-zone custom-image-name
     blueprint-id bundle-id user-data key-pair-name tags add-ons
     ip-address-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-instances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateInstances"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-instances))
(common-lisp:progn
 (common-lisp:defun create-instances-from-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-names attached-disk-mapping
                     availability-zone instance-snapshot-name bundle-id
                     user-data key-pair-name tags add-ons ip-address-type
                     source-instance-name restore-date
                     use-latest-restorable-auto-snapshot)
   (common-lisp:declare
    (common-lisp:ignorable instance-names attached-disk-mapping
     availability-zone instance-snapshot-name bundle-id user-data key-pair-name
     tags add-ons ip-address-type source-instance-name restore-date
     use-latest-restorable-auto-snapshot))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-instances-from-snapshot-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateInstancesFromSnapshot"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-instances-from-snapshot))
(common-lisp:progn
 (common-lisp:defun create-key-pair
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-pair-name tags)
   (common-lisp:declare (common-lisp:ignorable key-pair-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-key-pair-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateKeyPair"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-key-pair))
(common-lisp:progn
 (common-lisp:defun create-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name instance-port
                     health-check-path certificate-name certificate-domain-name
                     certificate-alternative-names tags ip-address-type
                     tls-policy-name)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name instance-port health-check-path
     certificate-name certificate-domain-name certificate-alternative-names
     tags ip-address-type tls-policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-load-balancer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateLoadBalancer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-load-balancer))
(common-lisp:progn
 (common-lisp:defun create-load-balancer-tls-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name certificate-name
                     certificate-domain-name certificate-alternative-names
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name certificate-name
     certificate-domain-name certificate-alternative-names tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-load-balancer-tls-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateLoadBalancerTlsCertificate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-load-balancer-tls-certificate))
(common-lisp:progn
 (common-lisp:defun create-relational-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name
                     availability-zone relational-database-blueprint-id
                     relational-database-bundle-id master-database-name
                     master-username master-user-password
                     preferred-backup-window preferred-maintenance-window
                     publicly-accessible tags)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-name availability-zone
     relational-database-blueprint-id relational-database-bundle-id
     master-database-name master-username master-user-password
     preferred-backup-window preferred-maintenance-window publicly-accessible
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-relational-database-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateRelationalDatabase"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-relational-database))
(common-lisp:progn
 (common-lisp:defun create-relational-database-from-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name
                     availability-zone publicly-accessible
                     relational-database-snapshot-name
                     relational-database-bundle-id
                     source-relational-database-name restore-time
                     use-latest-restorable-time tags)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-name availability-zone
     publicly-accessible relational-database-snapshot-name
     relational-database-bundle-id source-relational-database-name restore-time
     use-latest-restorable-time tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-relational-database-from-snapshot-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateRelationalDatabaseFromSnapshot"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-relational-database-from-snapshot))
(common-lisp:progn
 (common-lisp:defun create-relational-database-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name
                     relational-database-snapshot-name tags)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-name
     relational-database-snapshot-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-relational-database-snapshot-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateRelationalDatabaseSnapshot"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-relational-database-snapshot))
(common-lisp:progn
 (common-lisp:defun delete-alarm
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alarm-name)
   (common-lisp:declare (common-lisp:ignorable alarm-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-alarm-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAlarm"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-alarm))
(common-lisp:progn
 (common-lisp:defun delete-auto-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name date)
   (common-lisp:declare (common-lisp:ignorable resource-name date))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-auto-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAutoSnapshot"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-auto-snapshot))
(common-lisp:progn
 (common-lisp:defun delete-bucket
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket-name force-delete)
   (common-lisp:declare (common-lisp:ignorable bucket-name force-delete))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteBucket"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket))
(common-lisp:progn
 (common-lisp:defun delete-bucket-access-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket-name access-key-id)
   (common-lisp:declare (common-lisp:ignorable bucket-name access-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bucket-access-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteBucketAccessKey"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-bucket-access-key))
(common-lisp:progn
 (common-lisp:defun delete-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-name)
   (common-lisp:declare (common-lisp:ignorable certificate-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCertificate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-certificate))
(common-lisp:progn
 (common-lisp:defun delete-contact-method
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key protocol)
   (common-lisp:declare (common-lisp:ignorable protocol))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-contact-method-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteContactMethod"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-contact-method))
(common-lisp:progn
 (common-lisp:defun delete-container-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name image)
   (common-lisp:declare (common-lisp:ignorable service-name image))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-container-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteContainerImage"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-container-image))
(common-lisp:progn
 (common-lisp:defun delete-container-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name)
   (common-lisp:declare (common-lisp:ignorable service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-container-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteContainerService"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-container-service))
(common-lisp:progn
 (common-lisp:defun delete-disk
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key disk-name force-delete-add-ons)
   (common-lisp:declare (common-lisp:ignorable disk-name force-delete-add-ons))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-disk-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDisk"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-disk))
(common-lisp:progn
 (common-lisp:defun delete-disk-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key disk-snapshot-name)
   (common-lisp:declare (common-lisp:ignorable disk-snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-disk-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDiskSnapshot"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-disk-snapshot))
(common-lisp:progn
 (common-lisp:defun delete-distribution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-name)
   (common-lisp:declare (common-lisp:ignorable distribution-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-distribution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDistribution"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-distribution))
(common-lisp:progn
 (common-lisp:defun delete-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDomain"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-domain))
(common-lisp:progn
 (common-lisp:defun delete-domain-entry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name domain-entry)
   (common-lisp:declare (common-lisp:ignorable domain-name domain-entry))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-domain-entry-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDomainEntry"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-domain-entry))
(common-lisp:progn
 (common-lisp:defun delete-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name force-delete-add-ons)
   (common-lisp:declare
    (common-lisp:ignorable instance-name force-delete-add-ons))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteInstance"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-instance))
(common-lisp:progn
 (common-lisp:defun delete-instance-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-snapshot-name)
   (common-lisp:declare (common-lisp:ignorable instance-snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-instance-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteInstanceSnapshot"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-instance-snapshot))
(common-lisp:progn
 (common-lisp:defun delete-key-pair
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-pair-name expected-fingerprint)
   (common-lisp:declare
    (common-lisp:ignorable key-pair-name expected-fingerprint))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-key-pair-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteKeyPair"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-key-pair))
(common-lisp:progn
 (common-lisp:defun delete-known-host-keys
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name)
   (common-lisp:declare (common-lisp:ignorable instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-known-host-keys-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteKnownHostKeys"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-known-host-keys))
(common-lisp:progn
 (common-lisp:defun delete-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name)
   (common-lisp:declare (common-lisp:ignorable load-balancer-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-load-balancer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteLoadBalancer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-load-balancer))
(common-lisp:progn
 (common-lisp:defun delete-load-balancer-tls-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name certificate-name
                     force)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name certificate-name force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-load-balancer-tls-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteLoadBalancerTlsCertificate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-load-balancer-tls-certificate))
(common-lisp:progn
 (common-lisp:defun delete-relational-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name
                     skip-final-snapshot
                     final-relational-database-snapshot-name)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-name skip-final-snapshot
     final-relational-database-snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-relational-database-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRelationalDatabase"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-relational-database))
(common-lisp:progn
 (common-lisp:defun delete-relational-database-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-snapshot-name)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-relational-database-snapshot-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRelationalDatabaseSnapshot"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-relational-database-snapshot))
(common-lisp:progn
 (common-lisp:defun detach-certificate-from-distribution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-name)
   (common-lisp:declare (common-lisp:ignorable distribution-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-detach-certificate-from-distribution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetachCertificateFromDistribution"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'detach-certificate-from-distribution))
(common-lisp:progn
 (common-lisp:defun detach-disk
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key disk-name)
   (common-lisp:declare (common-lisp:ignorable disk-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-disk-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetachDisk"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'detach-disk))
(common-lisp:progn
 (common-lisp:defun detach-instances-from-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name instance-names)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name instance-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-detach-instances-from-load-balancer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetachInstancesFromLoadBalancer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'detach-instances-from-load-balancer))
(common-lisp:progn
 (common-lisp:defun detach-static-ip
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key static-ip-name)
   (common-lisp:declare (common-lisp:ignorable static-ip-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-static-ip-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetachStaticIp"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'detach-static-ip))
(common-lisp:progn
 (common-lisp:defun disable-add-on
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key add-on-type resource-name)
   (common-lisp:declare (common-lisp:ignorable add-on-type resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-add-on-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisableAddOn"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disable-add-on))
(common-lisp:progn
 (common-lisp:defun download-default-key-pair ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'lightsail-request :method "POST" :path "/"
                                :operation "DownloadDefaultKeyPair"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'download-default-key-pair))
(common-lisp:progn
 (common-lisp:defun enable-add-on
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name add-on-request)
   (common-lisp:declare (common-lisp:ignorable resource-name add-on-request))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-add-on-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "EnableAddOn"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-add-on))
(common-lisp:progn
 (common-lisp:defun export-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-snapshot-name)
   (common-lisp:declare (common-lisp:ignorable source-snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-export-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ExportSnapshot"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'export-snapshot))
(common-lisp:progn
 (common-lisp:defun get-active-names
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-active-names-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetActiveNames"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-active-names))
(common-lisp:progn
 (common-lisp:defun get-alarms
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alarm-name page-token
                     monitored-resource-name)
   (common-lisp:declare
    (common-lisp:ignorable alarm-name page-token monitored-resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-alarms-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAlarms"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-alarms))
(common-lisp:progn
 (common-lisp:defun get-auto-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name)
   (common-lisp:declare (common-lisp:ignorable resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-auto-snapshots-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAutoSnapshots"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-auto-snapshots))
(common-lisp:progn
 (common-lisp:defun get-blueprints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key include-inactive page-token app-category)
   (common-lisp:declare
    (common-lisp:ignorable include-inactive page-token app-category))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-blueprints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetBlueprints"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-blueprints))
(common-lisp:progn
 (common-lisp:defun get-bucket-access-keys
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket-name)
   (common-lisp:declare (common-lisp:ignorable bucket-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-access-keys-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetBucketAccessKeys"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-access-keys))
(common-lisp:progn
 (common-lisp:defun get-bucket-bundles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key include-inactive)
   (common-lisp:declare (common-lisp:ignorable include-inactive))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-bundles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetBucketBundles"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-bundles))
(common-lisp:progn
 (common-lisp:defun get-bucket-metric-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket-name metric-name start-time
                     end-time period statistics unit)
   (common-lisp:declare
    (common-lisp:ignorable bucket-name metric-name start-time end-time period
     statistics unit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bucket-metric-data-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetBucketMetricData"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bucket-metric-data))
(common-lisp:progn
 (common-lisp:defun get-buckets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket-name page-token
                     include-connected-resources)
   (common-lisp:declare
    (common-lisp:ignorable bucket-name page-token include-connected-resources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-buckets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetBuckets"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-buckets))
(common-lisp:progn
 (common-lisp:defun get-bundles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key include-inactive page-token app-category)
   (common-lisp:declare
    (common-lisp:ignorable include-inactive page-token app-category))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-bundles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetBundles"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-bundles))
(common-lisp:progn
 (common-lisp:defun get-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-statuses
                     include-certificate-details certificate-name page-token)
   (common-lisp:declare
    (common-lisp:ignorable certificate-statuses include-certificate-details
     certificate-name page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-certificates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCertificates"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-certificates))
(common-lisp:progn
 (common-lisp:defun get-cloud-formation-stack-records
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-cloud-formation-stack-records-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCloudFormationStackRecords"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-cloud-formation-stack-records))
(common-lisp:progn
 (common-lisp:defun get-contact-methods
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key protocols)
   (common-lisp:declare (common-lisp:ignorable protocols))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-contact-methods-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetContactMethods"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-contact-methods))
(common-lisp:progn
 (common-lisp:defun get-container-apimetadata ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'lightsail-request :method "POST" :path "/"
                                :operation "GetContainerAPIMetadata"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-container-apimetadata))
(common-lisp:progn
 (common-lisp:defun get-container-images
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name)
   (common-lisp:declare (common-lisp:ignorable service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-container-images-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetContainerImages"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-container-images))
(common-lisp:progn
 (common-lisp:defun get-container-log
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name container-name start-time
                     end-time filter-pattern page-token)
   (common-lisp:declare
    (common-lisp:ignorable service-name container-name start-time end-time
     filter-pattern page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-container-log-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetContainerLog"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-container-log))
(common-lisp:progn
 (common-lisp:defun get-container-service-deployments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name)
   (common-lisp:declare (common-lisp:ignorable service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-container-service-deployments-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetContainerServiceDeployments"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-container-service-deployments))
(common-lisp:progn
 (common-lisp:defun get-container-service-metric-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name metric-name start-time
                     end-time period statistics)
   (common-lisp:declare
    (common-lisp:ignorable service-name metric-name start-time end-time period
     statistics))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-container-service-metric-data-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetContainerServiceMetricData"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-container-service-metric-data))
(common-lisp:progn
 (common-lisp:defun get-container-service-powers ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'lightsail-request :method "POST" :path "/"
                                :operation "GetContainerServicePowers"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-container-service-powers))
(common-lisp:progn
 (common-lisp:defun get-container-services
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name)
   (common-lisp:declare (common-lisp:ignorable service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-container-services-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetContainerServices"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-container-services))
(common-lisp:progn
 (common-lisp:defun get-cost-estimate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name start-time end-time)
   (common-lisp:declare
    (common-lisp:ignorable resource-name start-time end-time))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-cost-estimate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetCostEstimate"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-cost-estimate))
(common-lisp:progn
 (common-lisp:defun get-disk
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key disk-name)
   (common-lisp:declare (common-lisp:ignorable disk-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-disk-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetDisk"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-disk))
(common-lisp:progn
 (common-lisp:defun get-disk-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key disk-snapshot-name)
   (common-lisp:declare (common-lisp:ignorable disk-snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-disk-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDiskSnapshot"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-disk-snapshot))
(common-lisp:progn
 (common-lisp:defun get-disk-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-disk-snapshots-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDiskSnapshots"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-disk-snapshots))
(common-lisp:progn
 (common-lisp:defun get-disks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-disks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetDisks"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-disks))
(common-lisp:progn
 (common-lisp:defun get-distribution-bundles ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'lightsail-request :method "POST" :path "/"
                                :operation "GetDistributionBundles"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-distribution-bundles))
(common-lisp:progn
 (common-lisp:defun get-distribution-latest-cache-reset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-name)
   (common-lisp:declare (common-lisp:ignorable distribution-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-distribution-latest-cache-reset-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDistributionLatestCacheReset"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-distribution-latest-cache-reset))
(common-lisp:progn
 (common-lisp:defun get-distribution-metric-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-name metric-name start-time
                     end-time period unit statistics)
   (common-lisp:declare
    (common-lisp:ignorable distribution-name metric-name start-time end-time
     period unit statistics))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-distribution-metric-data-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDistributionMetricData"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-distribution-metric-data))
(common-lisp:progn
 (common-lisp:defun get-distributions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-name page-token)
   (common-lisp:declare (common-lisp:ignorable distribution-name page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-distributions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDistributions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-distributions))
(common-lisp:progn
 (common-lisp:defun get-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name)
   (common-lisp:declare (common-lisp:ignorable domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDomain"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-domain))
(common-lisp:progn
 (common-lisp:defun get-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-domains-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDomains"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-domains))
(common-lisp:progn
 (common-lisp:defun get-export-snapshot-records
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-export-snapshot-records-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetExportSnapshotRecords"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-export-snapshot-records))
(common-lisp:progn
 (common-lisp:defun get-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name)
   (common-lisp:declare (common-lisp:ignorable instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetInstance"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-instance))
(common-lisp:progn
 (common-lisp:defun get-instance-access-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name protocol)
   (common-lisp:declare (common-lisp:ignorable instance-name protocol))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-instance-access-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetInstanceAccessDetails"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-instance-access-details))
(common-lisp:progn
 (common-lisp:defun get-instance-metric-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name metric-name period
                     start-time end-time unit statistics)
   (common-lisp:declare
    (common-lisp:ignorable instance-name metric-name period start-time end-time
     unit statistics))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-instance-metric-data-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetInstanceMetricData"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-instance-metric-data))
(common-lisp:progn
 (common-lisp:defun get-instance-port-states
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name)
   (common-lisp:declare (common-lisp:ignorable instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-instance-port-states-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetInstancePortStates"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-instance-port-states))
(common-lisp:progn
 (common-lisp:defun get-instance-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-snapshot-name)
   (common-lisp:declare (common-lisp:ignorable instance-snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-instance-snapshot-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetInstanceSnapshot"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-instance-snapshot))
(common-lisp:progn
 (common-lisp:defun get-instance-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-instance-snapshots-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetInstanceSnapshots"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-instance-snapshots))
(common-lisp:progn
 (common-lisp:defun get-instance-state
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name)
   (common-lisp:declare (common-lisp:ignorable instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-instance-state-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetInstanceState"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-instance-state))
(common-lisp:progn
 (common-lisp:defun get-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-instances-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetInstances"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-instances))
(common-lisp:progn
 (common-lisp:defun get-key-pair
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-pair-name)
   (common-lisp:declare (common-lisp:ignorable key-pair-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-key-pair-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetKeyPair"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-key-pair))
(common-lisp:progn
 (common-lisp:defun get-key-pairs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token include-default-key-pair)
   (common-lisp:declare
    (common-lisp:ignorable page-token include-default-key-pair))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-key-pairs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetKeyPairs"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-key-pairs))
(common-lisp:progn
 (common-lisp:defun get-load-balancer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name)
   (common-lisp:declare (common-lisp:ignorable load-balancer-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-load-balancer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetLoadBalancer"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-load-balancer))
(common-lisp:progn
 (common-lisp:defun get-load-balancer-metric-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name metric-name period
                     start-time end-time unit statistics)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name metric-name period start-time
     end-time unit statistics))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-load-balancer-metric-data-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetLoadBalancerMetricData"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-load-balancer-metric-data))
(common-lisp:progn
 (common-lisp:defun get-load-balancer-tls-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name)
   (common-lisp:declare (common-lisp:ignorable load-balancer-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-load-balancer-tls-certificates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetLoadBalancerTlsCertificates"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-load-balancer-tls-certificates))
(common-lisp:progn
 (common-lisp:defun get-load-balancer-tls-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-load-balancer-tls-policies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetLoadBalancerTlsPolicies"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-load-balancer-tls-policies))
(common-lisp:progn
 (common-lisp:defun get-load-balancers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-load-balancers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetLoadBalancers"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-load-balancers))
(common-lisp:progn
 (common-lisp:defun get-operation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key operation-id)
   (common-lisp:declare (common-lisp:ignorable operation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-operation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetOperation"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-operation))
(common-lisp:progn
 (common-lisp:defun get-operations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-operations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetOperations"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-operations))
(common-lisp:progn
 (common-lisp:defun get-operations-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name page-token)
   (common-lisp:declare (common-lisp:ignorable resource-name page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-operations-for-resource-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetOperationsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-operations-for-resource))
(common-lisp:progn
 (common-lisp:defun get-regions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key include-availability-zones
                     include-relational-database-availability-zones)
   (common-lisp:declare
    (common-lisp:ignorable include-availability-zones
     include-relational-database-availability-zones))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-regions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRegions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-regions))
(common-lisp:progn
 (common-lisp:defun get-relational-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name)
   (common-lisp:declare (common-lisp:ignorable relational-database-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-relational-database-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRelationalDatabase"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-relational-database))
(common-lisp:progn
 (common-lisp:defun get-relational-database-blueprints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-relational-database-blueprints-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRelationalDatabaseBlueprints"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-relational-database-blueprints))
(common-lisp:progn
 (common-lisp:defun get-relational-database-bundles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token include-inactive)
   (common-lisp:declare (common-lisp:ignorable page-token include-inactive))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-relational-database-bundles-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRelationalDatabaseBundles"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-relational-database-bundles))
(common-lisp:progn
 (common-lisp:defun get-relational-database-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name
                     duration-in-minutes page-token)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-name duration-in-minutes
     page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-relational-database-events-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRelationalDatabaseEvents"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-relational-database-events))
(common-lisp:progn
 (common-lisp:defun get-relational-database-log-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name log-stream-name
                     start-time end-time start-from-head page-token)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-name log-stream-name start-time
     end-time start-from-head page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-relational-database-log-events-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRelationalDatabaseLogEvents"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-relational-database-log-events))
(common-lisp:progn
 (common-lisp:defun get-relational-database-log-streams
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name)
   (common-lisp:declare (common-lisp:ignorable relational-database-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-relational-database-log-streams-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRelationalDatabaseLogStreams"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-relational-database-log-streams))
(common-lisp:progn
 (common-lisp:defun get-relational-database-master-user-password
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name
                     password-version)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-name password-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-relational-database-master-user-password-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRelationalDatabaseMasterUserPassword"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-relational-database-master-user-password))
(common-lisp:progn
 (common-lisp:defun get-relational-database-metric-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name metric-name
                     period start-time end-time unit statistics)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-name metric-name period
     start-time end-time unit statistics))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-relational-database-metric-data-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRelationalDatabaseMetricData"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-relational-database-metric-data))
(common-lisp:progn
 (common-lisp:defun get-relational-database-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name page-token)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-name page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-relational-database-parameters-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRelationalDatabaseParameters"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-relational-database-parameters))
(common-lisp:progn
 (common-lisp:defun get-relational-database-snapshot
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-snapshot-name)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-relational-database-snapshot-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRelationalDatabaseSnapshot"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-relational-database-snapshot))
(common-lisp:progn
 (common-lisp:defun get-relational-database-snapshots
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-relational-database-snapshots-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRelationalDatabaseSnapshots"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-relational-database-snapshots))
(common-lisp:progn
 (common-lisp:defun get-relational-databases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-relational-databases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRelationalDatabases"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-relational-databases))
(common-lisp:progn
 (common-lisp:defun get-setup-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name page-token)
   (common-lisp:declare (common-lisp:ignorable resource-name page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-setup-history-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSetupHistory"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-setup-history))
(common-lisp:progn
 (common-lisp:defun get-static-ip
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key static-ip-name)
   (common-lisp:declare (common-lisp:ignorable static-ip-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-static-ip-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetStaticIp"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-static-ip))
(common-lisp:progn
 (common-lisp:defun get-static-ips
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-token)
   (common-lisp:declare (common-lisp:ignorable page-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-static-ips-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetStaticIps"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-static-ips))
(common-lisp:progn
 (common-lisp:defun import-key-pair
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-pair-name public-key-base64)
   (common-lisp:declare
    (common-lisp:ignorable key-pair-name public-key-base64))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-key-pair-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ImportKeyPair"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-key-pair))
(common-lisp:progn
 (common-lisp:defun is-vpc-peered ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'lightsail-request :method "POST" :path "/"
                                :operation "IsVpcPeered"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'is-vpc-peered))
(common-lisp:progn
 (common-lisp:defun open-instance-public-ports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key port-info instance-name)
   (common-lisp:declare (common-lisp:ignorable port-info instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-open-instance-public-ports-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "OpenInstancePublicPorts"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'open-instance-public-ports))
(common-lisp:progn
 (common-lisp:defun peer-vpc ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'lightsail-request :method "POST" :path "/"
                                :operation "PeerVpc"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'peer-vpc))
(common-lisp:progn
 (common-lisp:defun put-alarm
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alarm-name metric-name
                     monitored-resource-name comparison-operator threshold
                     evaluation-periods datapoints-to-alarm treat-missing-data
                     contact-protocols notification-triggers
                     notification-enabled)
   (common-lisp:declare
    (common-lisp:ignorable alarm-name metric-name monitored-resource-name
     comparison-operator threshold evaluation-periods datapoints-to-alarm
     treat-missing-data contact-protocols notification-triggers
     notification-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-alarm-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "PutAlarm"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-alarm))
(common-lisp:progn
 (common-lisp:defun put-instance-public-ports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key port-infos instance-name)
   (common-lisp:declare (common-lisp:ignorable port-infos instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-instance-public-ports-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutInstancePublicPorts"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-instance-public-ports))
(common-lisp:progn
 (common-lisp:defun reboot-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name)
   (common-lisp:declare (common-lisp:ignorable instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reboot-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RebootInstance"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reboot-instance))
(common-lisp:progn
 (common-lisp:defun reboot-relational-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name)
   (common-lisp:declare (common-lisp:ignorable relational-database-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reboot-relational-database-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RebootRelationalDatabase"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reboot-relational-database))
(common-lisp:progn
 (common-lisp:defun register-container-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name label digest)
   (common-lisp:declare (common-lisp:ignorable service-name label digest))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-container-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterContainerImage"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-container-image))
(common-lisp:progn
 (common-lisp:defun release-static-ip
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key static-ip-name)
   (common-lisp:declare (common-lisp:ignorable static-ip-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-release-static-ip-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ReleaseStaticIp"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'release-static-ip))
(common-lisp:progn
 (common-lisp:defun reset-distribution-cache
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-name)
   (common-lisp:declare (common-lisp:ignorable distribution-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reset-distribution-cache-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResetDistributionCache"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reset-distribution-cache))
(common-lisp:progn
 (common-lisp:defun send-contact-method-verification
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key protocol)
   (common-lisp:declare (common-lisp:ignorable protocol))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-send-contact-method-verification-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SendContactMethodVerification"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-contact-method-verification))
(common-lisp:progn
 (common-lisp:defun set-ip-address-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-type resource-name
                     ip-address-type)
   (common-lisp:declare
    (common-lisp:ignorable resource-type resource-name ip-address-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-ip-address-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetIpAddressType"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-ip-address-type))
(common-lisp:progn
 (common-lisp:defun set-resource-access-for-bucket
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name bucket-name access)
   (common-lisp:declare
    (common-lisp:ignorable resource-name bucket-name access))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-resource-access-for-bucket-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetResourceAccessForBucket"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-resource-access-for-bucket))
(common-lisp:progn
 (common-lisp:defun setup-instance-https
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name email-address domain-names
                     certificate-provider)
   (common-lisp:declare
    (common-lisp:ignorable instance-name email-address domain-names
     certificate-provider))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-setup-instance-https-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetupInstanceHttps"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'setup-instance-https))
(common-lisp:progn
 (common-lisp:defun start-guisession
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name)
   (common-lisp:declare (common-lisp:ignorable resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-guisession-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartGUISession"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-guisession))
(common-lisp:progn
 (common-lisp:defun start-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name)
   (common-lisp:declare (common-lisp:ignorable instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartInstance"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-instance))
(common-lisp:progn
 (common-lisp:defun start-relational-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name)
   (common-lisp:declare (common-lisp:ignorable relational-database-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-relational-database-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartRelationalDatabase"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-relational-database))
(common-lisp:progn
 (common-lisp:defun stop-guisession
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name)
   (common-lisp:declare (common-lisp:ignorable resource-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-guisession-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopGUISession"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-guisession))
(common-lisp:progn
 (common-lisp:defun stop-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name force)
   (common-lisp:declare (common-lisp:ignorable instance-name force))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-instance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopInstance"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-instance))
(common-lisp:progn
 (common-lisp:defun stop-relational-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name
                     relational-database-snapshot-name)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-name
     relational-database-snapshot-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-relational-database-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopRelationalDatabase"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-relational-database))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name resource-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable resource-name resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun test-alarm
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alarm-name state)
   (common-lisp:declare (common-lisp:ignorable alarm-name state))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-alarm-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TestAlarm"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'test-alarm))
(common-lisp:progn
 (common-lisp:defun unpeer-vpc ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'lightsail-request :method "POST" :path "/"
                                :operation "UnpeerVpc"))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'unpeer-vpc))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-name resource-arn tag-keys)
   (common-lisp:declare
    (common-lisp:ignorable resource-name resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-bucket
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket-name access-rules versioning
                     readonly-access-accounts access-log-config)
   (common-lisp:declare
    (common-lisp:ignorable bucket-name access-rules versioning
     readonly-access-accounts access-log-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-bucket-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateBucket"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-bucket))
(common-lisp:progn
 (common-lisp:defun update-bucket-bundle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bucket-name bundle-id)
   (common-lisp:declare (common-lisp:ignorable bucket-name bundle-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-bucket-bundle-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateBucketBundle"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-bucket-bundle))
(common-lisp:progn
 (common-lisp:defun update-container-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name power scale is-disabled
                     public-domain-names private-registry-access)
   (common-lisp:declare
    (common-lisp:ignorable service-name power scale is-disabled
     public-domain-names private-registry-access))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-container-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateContainerService"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-container-service))
(common-lisp:progn
 (common-lisp:defun update-distribution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-name origin
                     default-cache-behavior cache-behavior-settings
                     cache-behaviors is-enabled)
   (common-lisp:declare
    (common-lisp:ignorable distribution-name origin default-cache-behavior
     cache-behavior-settings cache-behaviors is-enabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-distribution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDistribution"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-distribution))
(common-lisp:progn
 (common-lisp:defun update-distribution-bundle
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key distribution-name bundle-id)
   (common-lisp:declare (common-lisp:ignorable distribution-name bundle-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-distribution-bundle-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDistributionBundle"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-distribution-bundle))
(common-lisp:progn
 (common-lisp:defun update-domain-entry
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name domain-entry)
   (common-lisp:declare (common-lisp:ignorable domain-name domain-entry))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-domain-entry-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDomainEntry"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-domain-entry))
(common-lisp:progn
 (common-lisp:defun update-instance-metadata-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-name http-tokens http-endpoint
                     http-put-response-hop-limit http-protocol-ipv6)
   (common-lisp:declare
    (common-lisp:ignorable instance-name http-tokens http-endpoint
     http-put-response-hop-limit http-protocol-ipv6))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-instance-metadata-options-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateInstanceMetadataOptions"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-instance-metadata-options))
(common-lisp:progn
 (common-lisp:defun update-load-balancer-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key load-balancer-name attribute-name
                     attribute-value)
   (common-lisp:declare
    (common-lisp:ignorable load-balancer-name attribute-name attribute-value))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-load-balancer-attribute-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateLoadBalancerAttribute"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-load-balancer-attribute))
(common-lisp:progn
 (common-lisp:defun update-relational-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name
                     master-user-password rotate-master-user-password
                     preferred-backup-window preferred-maintenance-window
                     enable-backup-retention disable-backup-retention
                     publicly-accessible apply-immediately
                     ca-certificate-identifier
                     relational-database-blueprint-id)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-name master-user-password
     rotate-master-user-password preferred-backup-window
     preferred-maintenance-window enable-backup-retention
     disable-backup-retention publicly-accessible apply-immediately
     ca-certificate-identifier relational-database-blueprint-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-relational-database-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateRelationalDatabase"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-relational-database))
(common-lisp:progn
 (common-lisp:defun update-relational-database-parameters
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key relational-database-name parameters)
   (common-lisp:declare
    (common-lisp:ignorable relational-database-name parameters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-relational-database-parameters-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lightsail-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateRelationalDatabaseParameters"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-relational-database-parameters))
