;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/route53resolver/api
  (:use)
  (:nicknames #:aws/route53resolver)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/route53resolver/api)
(common-lisp:progn
 (common-lisp:defclass route53resolver-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "route53resolver"))
 (common-lisp:export 'route53resolver-request))
(common-lisp:progn
 (common-lisp:define-condition route53resolver-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'route53resolver-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServiceErrorException" . internal-service-error-exception)
    ("InvalidNextTokenException" . invalid-next-token-exception)
    ("InvalidParameterException" . invalid-parameter-exception)
    ("InvalidPolicyDocument" . invalid-policy-document)
    ("InvalidRequestException" . invalid-request-exception)
    ("InvalidTagException" . invalid-tag-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceExistsException" . resource-exists-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourceUnavailableException" . resource-unavailable-exception)
    ("ThrottlingException" . throttling-exception)
    ("UnknownResourceException" . unknown-resource-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:deftype action () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (associate-firewall-rule-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-firewall-rule-group-request-"))
   (creator-request-id (common-lisp:error ":creator-request-id is required")
    :type (common-lisp:or creator-request-id common-lisp:null))
   (firewall-rule-group-id
    (common-lisp:error ":firewall-rule-group-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (priority (common-lisp:error ":priority is required") :type
    (common-lisp:or priority common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (mutation-protection common-lisp:nil :type
    (common-lisp:or mutation-protection-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-firewall-rule-group-request
                    'make-associate-firewall-rule-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-firewall-rule-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-firewall-rule-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-id))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mutation-protection))
      (common-lisp:list
       (common-lisp:cons "MutationProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-firewall-rule-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-firewall-rule-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-firewall-rule-group-response-"))
   (firewall-rule-group-association common-lisp:nil :type
    (common-lisp:or firewall-rule-group-association common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-firewall-rule-group-response
                    'make-associate-firewall-rule-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-firewall-rule-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-firewall-rule-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-association))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-firewall-rule-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-resolver-endpoint-ip-address-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-associate-resolver-endpoint-ip-address-request-"))
   (resolver-endpoint-id
    (common-lisp:error ":resolver-endpoint-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (ip-address (common-lisp:error ":ip-address is required") :type
    (common-lisp:or ip-address-update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-resolver-endpoint-ip-address-request
                    'make-associate-resolver-endpoint-ip-address-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-endpoint-ip-address-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-endpoint-ip-address-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-endpoint-ip-address-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-resolver-endpoint-ip-address-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-associate-resolver-endpoint-ip-address-response-"))
   (resolver-endpoint common-lisp:nil :type
    (common-lisp:or resolver-endpoint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-resolver-endpoint-ip-address-response
                    'make-associate-resolver-endpoint-ip-address-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-endpoint-ip-address-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-endpoint-ip-address-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-endpoint))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-endpoint-ip-address-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-resolver-query-log-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-resolver-query-log-config-request-"))
   (resolver-query-log-config-id
    (common-lisp:error ":resolver-query-log-config-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-resolver-query-log-config-request
                    'make-associate-resolver-query-log-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-query-log-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-query-log-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config-id))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfigId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-query-log-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-resolver-query-log-config-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-associate-resolver-query-log-config-response-"))
   (resolver-query-log-config-association common-lisp:nil :type
    (common-lisp:or resolver-query-log-config-association common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-resolver-query-log-config-response
                    'make-associate-resolver-query-log-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-query-log-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-query-log-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config-association))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfigAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-query-log-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-resolver-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-resolver-rule-request-"))
   (resolver-rule-id (common-lisp:error ":resolver-rule-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (vpcid (common-lisp:error ":vpcid is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-resolver-rule-request
                    'make-associate-resolver-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-rule-id))
      (common-lisp:list
       (common-lisp:cons "ResolverRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcid))
      (common-lisp:list
       (common-lisp:cons "VPCId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-resolver-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-resolver-rule-response-"))
   (resolver-rule-association common-lisp:nil :type
    (common-lisp:or resolver-rule-association common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-resolver-rule-response
                    'make-associate-resolver-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-rule-association))
      (common-lisp:list
       (common-lisp:cons "ResolverRuleAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-resolver-rule-response))
   common-lisp:nil))
(common-lisp:deftype autodefined-reverse-flag () 'common-lisp:string)
(common-lisp:deftype block-override-dns-type () 'common-lisp:string)
(common-lisp:deftype block-override-domain () 'common-lisp:string)
(common-lisp:deftype block-override-ttl () 'common-lisp:integer)
(common-lisp:deftype block-response () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (create-firewall-domain-list-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-firewall-domain-list-request-"))
   (creator-request-id (common-lisp:error ":creator-request-id is required")
    :type (common-lisp:or creator-request-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-firewall-domain-list-request
                    'make-create-firewall-domain-list-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-domain-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-domain-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-domain-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-firewall-domain-list-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-firewall-domain-list-response-"))
   (firewall-domain-list common-lisp:nil :type
    (common-lisp:or firewall-domain-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-firewall-domain-list-response
                    'make-create-firewall-domain-list-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-domain-list-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-domain-list-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-domain-list))
      (common-lisp:list
       (common-lisp:cons "FirewallDomainList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-domain-list-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-firewall-rule-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-firewall-rule-group-request-"))
   (creator-request-id (common-lisp:error ":creator-request-id is required")
    :type (common-lisp:or creator-request-id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-firewall-rule-group-request
                    'make-create-firewall-rule-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-rule-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-rule-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-rule-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-firewall-rule-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-firewall-rule-group-response-"))
   (firewall-rule-group common-lisp:nil :type
    (common-lisp:or firewall-rule-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-firewall-rule-group-response
                    'make-create-firewall-rule-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-rule-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-rule-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-rule-group))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-rule-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-firewall-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-firewall-rule-request-"))
   (creator-request-id (common-lisp:error ":creator-request-id is required")
    :type (common-lisp:or creator-request-id common-lisp:null))
   (firewall-rule-group-id
    (common-lisp:error ":firewall-rule-group-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (firewall-domain-list-id
    (common-lisp:error ":firewall-domain-list-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (priority (common-lisp:error ":priority is required") :type
    (common-lisp:or priority common-lisp:null))
   (action (common-lisp:error ":action is required") :type
    (common-lisp:or action common-lisp:null))
   (block-response common-lisp:nil :type
    (common-lisp:or block-response common-lisp:null))
   (block-override-domain common-lisp:nil :type
    (common-lisp:or block-override-domain common-lisp:null))
   (block-override-dns-type common-lisp:nil :type
    (common-lisp:or block-override-dns-type common-lisp:null))
   (block-override-ttl common-lisp:nil :type
    (common-lisp:or block-override-ttl common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-firewall-rule-request
                    'make-create-firewall-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-id))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-domain-list-id))
      (common-lisp:list
       (common-lisp:cons "FirewallDomainListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-response))
      (common-lisp:list
       (common-lisp:cons "BlockResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-override-domain))
      (common-lisp:list
       (common-lisp:cons "BlockOverrideDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-override-dns-type))
      (common-lisp:list
       (common-lisp:cons "BlockOverrideDnsType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-override-ttl))
      (common-lisp:list
       (common-lisp:cons "BlockOverrideTtl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-firewall-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-firewall-rule-response-"))
   (firewall-rule common-lisp:nil :type
    (common-lisp:or firewall-rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-firewall-rule-response
                    'make-create-firewall-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-rule))
      (common-lisp:list
       (common-lisp:cons "FirewallRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-firewall-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-resolver-endpoint-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-resolver-endpoint-request-"))
   (creator-request-id (common-lisp:error ":creator-request-id is required")
    :type (common-lisp:or creator-request-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (security-group-ids (common-lisp:error ":security-group-ids is required")
    :type (common-lisp:or security-group-ids common-lisp:null))
   (direction (common-lisp:error ":direction is required") :type
    (common-lisp:or resolver-endpoint-direction common-lisp:null))
   (ip-addresses (common-lisp:error ":ip-addresses is required") :type
    (common-lisp:or ip-addresses-request common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (resolver-endpoint-type common-lisp:nil :type
    (common-lisp:or resolver-endpoint-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-resolver-endpoint-request
                    'make-create-resolver-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'direction))
      (common-lisp:list
       (common-lisp:cons "Direction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-addresses))
      (common-lisp:list
       (common-lisp:cons "IpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-endpoint-type))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-resolver-endpoint-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-resolver-endpoint-response-"))
   (resolver-endpoint common-lisp:nil :type
    (common-lisp:or resolver-endpoint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-resolver-endpoint-response
                    'make-create-resolver-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-endpoint))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-resolver-query-log-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-resolver-query-log-config-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resolver-query-log-config-name common-lisp:null))
   (destination-arn (common-lisp:error ":destination-arn is required") :type
    (common-lisp:or destination-arn common-lisp:null))
   (creator-request-id (common-lisp:error ":creator-request-id is required")
    :type (common-lisp:or creator-request-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-resolver-query-log-config-request
                    'make-create-resolver-query-log-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-query-log-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-query-log-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-query-log-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-resolver-query-log-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-resolver-query-log-config-response-"))
   (resolver-query-log-config common-lisp:nil :type
    (common-lisp:or resolver-query-log-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-resolver-query-log-config-response
                    'make-create-resolver-query-log-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-query-log-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-query-log-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-query-log-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-resolver-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-resolver-rule-request-"))
   (creator-request-id (common-lisp:error ":creator-request-id is required")
    :type (common-lisp:or creator-request-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (rule-type (common-lisp:error ":rule-type is required") :type
    (common-lisp:or rule-type-option common-lisp:null))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (target-ips common-lisp:nil :type
    (common-lisp:or target-list common-lisp:null))
   (resolver-endpoint-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-resolver-rule-request
                    'make-create-resolver-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-type))
      (common-lisp:list
       (common-lisp:cons "RuleType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-ips))
      (common-lisp:list
       (common-lisp:cons "TargetIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-resolver-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-resolver-rule-response-"))
   (resolver-rule common-lisp:nil :type
    (common-lisp:or resolver-rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-resolver-rule-response
                    'make-create-resolver-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-rule))
      (common-lisp:list
       (common-lisp:cons "ResolverRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resolver-rule-response))
   common-lisp:nil))
(common-lisp:deftype creator-request-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-firewall-domain-list-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-firewall-domain-list-request-"))
   (firewall-domain-list-id
    (common-lisp:error ":firewall-domain-list-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-firewall-domain-list-request
                    'make-delete-firewall-domain-list-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-domain-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-domain-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-domain-list-id))
      (common-lisp:list
       (common-lisp:cons "FirewallDomainListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-domain-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-firewall-domain-list-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-firewall-domain-list-response-"))
   (firewall-domain-list common-lisp:nil :type
    (common-lisp:or firewall-domain-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-firewall-domain-list-response
                    'make-delete-firewall-domain-list-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-domain-list-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-domain-list-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-domain-list))
      (common-lisp:list
       (common-lisp:cons "FirewallDomainList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-domain-list-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-firewall-rule-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-firewall-rule-group-request-"))
   (firewall-rule-group-id
    (common-lisp:error ":firewall-rule-group-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-firewall-rule-group-request
                    'make-delete-firewall-rule-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-rule-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-rule-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-id))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-rule-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-firewall-rule-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-firewall-rule-group-response-"))
   (firewall-rule-group common-lisp:nil :type
    (common-lisp:or firewall-rule-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-firewall-rule-group-response
                    'make-delete-firewall-rule-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-rule-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-rule-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-rule-group))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-rule-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-firewall-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-firewall-rule-request-"))
   (firewall-rule-group-id
    (common-lisp:error ":firewall-rule-group-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (firewall-domain-list-id
    (common-lisp:error ":firewall-domain-list-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-firewall-rule-request
                    'make-delete-firewall-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-id))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-domain-list-id))
      (common-lisp:list
       (common-lisp:cons "FirewallDomainListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-firewall-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-firewall-rule-response-"))
   (firewall-rule common-lisp:nil :type
    (common-lisp:or firewall-rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-firewall-rule-response
                    'make-delete-firewall-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-rule))
      (common-lisp:list
       (common-lisp:cons "FirewallRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-firewall-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-resolver-endpoint-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-resolver-endpoint-request-"))
   (resolver-endpoint-id
    (common-lisp:error ":resolver-endpoint-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-resolver-endpoint-request
                    'make-delete-resolver-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-resolver-endpoint-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-resolver-endpoint-response-"))
   (resolver-endpoint common-lisp:nil :type
    (common-lisp:or resolver-endpoint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-resolver-endpoint-response
                    'make-delete-resolver-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-endpoint))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-resolver-query-log-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-resolver-query-log-config-request-"))
   (resolver-query-log-config-id
    (common-lisp:error ":resolver-query-log-config-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-resolver-query-log-config-request
                    'make-delete-resolver-query-log-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-query-log-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-query-log-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config-id))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfigId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-query-log-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-resolver-query-log-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-resolver-query-log-config-response-"))
   (resolver-query-log-config common-lisp:nil :type
    (common-lisp:or resolver-query-log-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-resolver-query-log-config-response
                    'make-delete-resolver-query-log-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-query-log-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-query-log-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-query-log-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-resolver-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-resolver-rule-request-"))
   (resolver-rule-id (common-lisp:error ":resolver-rule-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-resolver-rule-request
                    'make-delete-resolver-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-rule-id))
      (common-lisp:list
       (common-lisp:cons "ResolverRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-resolver-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-resolver-rule-response-"))
   (resolver-rule common-lisp:nil :type
    (common-lisp:or resolver-rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-resolver-rule-response
                    'make-delete-resolver-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-rule))
      (common-lisp:list
       (common-lisp:cons "ResolverRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resolver-rule-response))
   common-lisp:nil))
(common-lisp:deftype destination-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-firewall-rule-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-firewall-rule-group-request-"))
   (firewall-rule-group-association-id
    (common-lisp:error ":firewall-rule-group-association-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-firewall-rule-group-request
                    'make-disassociate-firewall-rule-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-firewall-rule-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-firewall-rule-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-association-id))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-firewall-rule-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-firewall-rule-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-firewall-rule-group-response-"))
   (firewall-rule-group-association common-lisp:nil :type
    (common-lisp:or firewall-rule-group-association common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-firewall-rule-group-response
                    'make-disassociate-firewall-rule-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-firewall-rule-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-firewall-rule-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-association))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-firewall-rule-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-resolver-endpoint-ip-address-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disassociate-resolver-endpoint-ip-address-request-"))
   (resolver-endpoint-id
    (common-lisp:error ":resolver-endpoint-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (ip-address (common-lisp:error ":ip-address is required") :type
    (common-lisp:or ip-address-update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-resolver-endpoint-ip-address-request
                    'make-disassociate-resolver-endpoint-ip-address-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-endpoint-ip-address-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-endpoint-ip-address-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-endpoint-ip-address-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-resolver-endpoint-ip-address-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disassociate-resolver-endpoint-ip-address-response-"))
   (resolver-endpoint common-lisp:nil :type
    (common-lisp:or resolver-endpoint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-resolver-endpoint-ip-address-response
                    'make-disassociate-resolver-endpoint-ip-address-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-endpoint-ip-address-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-endpoint-ip-address-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-endpoint))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-endpoint-ip-address-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-resolver-query-log-config-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disassociate-resolver-query-log-config-request-"))
   (resolver-query-log-config-id
    (common-lisp:error ":resolver-query-log-config-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-resolver-query-log-config-request
                    'make-disassociate-resolver-query-log-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-query-log-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-query-log-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config-id))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfigId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-query-log-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-resolver-query-log-config-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disassociate-resolver-query-log-config-response-"))
   (resolver-query-log-config-association common-lisp:nil :type
    (common-lisp:or resolver-query-log-config-association common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-resolver-query-log-config-response
                    'make-disassociate-resolver-query-log-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-query-log-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-query-log-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config-association))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfigAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-query-log-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-resolver-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-resolver-rule-request-"))
   (vpcid (common-lisp:error ":vpcid is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (resolver-rule-id (common-lisp:error ":resolver-rule-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-resolver-rule-request
                    'make-disassociate-resolver-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcid))
      (common-lisp:list
       (common-lisp:cons "VPCId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-rule-id))
      (common-lisp:list
       (common-lisp:cons "ResolverRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-resolver-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-resolver-rule-response-"))
   (resolver-rule-association common-lisp:nil :type
    (common-lisp:or resolver-rule-association common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-resolver-rule-response
                    'make-disassociate-resolver-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-rule-association))
      (common-lisp:list
       (common-lisp:cons "ResolverRuleAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-resolver-rule-response))
   common-lisp:nil))
(common-lisp:deftype domain-list-file-url () 'common-lisp:string)
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (filter (:copier common-lisp:nil) (:conc-name "struct-shape-filter-"))
   (name common-lisp:nil :type (common-lisp:or filter-name common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or filter-values common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:deftype filter-name () 'common-lisp:string)
(common-lisp:deftype filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype filter-values ()
   '(trivial-types:proper-list filter-value))
 (common-lisp:defun |make-filter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype filters () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (firewall-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-firewall-config-"))
   (id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (resource-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (owner-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (firewall-fail-open common-lisp:nil :type
    (common-lisp:or firewall-fail-open-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'firewall-config 'make-firewall-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input firewall-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input firewall-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-fail-open))
      (common-lisp:list
       (common-lisp:cons "FirewallFailOpen"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input firewall-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype firewall-config-list ()
   '(trivial-types:proper-list firewall-config))
 (common-lisp:defun |make-firewall-config-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list firewall-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype firewall-domain-import-operation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (firewall-domain-list (:copier common-lisp:nil)
      (:conc-name "struct-shape-firewall-domain-list-"))
   (id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (domain-count common-lisp:nil :type
    (common-lisp:or unsigned common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or firewall-domain-list-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (managed-owner-name common-lisp:nil :type
    (common-lisp:or service-principle common-lisp:null))
   (creator-request-id common-lisp:nil :type
    (common-lisp:or creator-request-id common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or rfc3339time-string common-lisp:null))
   (modification-time common-lisp:nil :type
    (common-lisp:or rfc3339time-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'firewall-domain-list 'make-firewall-domain-list))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input firewall-domain-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input firewall-domain-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-count))
      (common-lisp:list
       (common-lisp:cons "DomainCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-owner-name))
      (common-lisp:list
       (common-lisp:cons "ManagedOwnerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modification-time))
      (common-lisp:list
       (common-lisp:cons "ModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input firewall-domain-list))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (firewall-domain-list-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-firewall-domain-list-metadata-"))
   (id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (creator-request-id common-lisp:nil :type
    (common-lisp:or creator-request-id common-lisp:null))
   (managed-owner-name common-lisp:nil :type
    (common-lisp:or service-principle common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'firewall-domain-list-metadata
                    'make-firewall-domain-list-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          firewall-domain-list-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          firewall-domain-list-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-owner-name))
      (common-lisp:list
       (common-lisp:cons "ManagedOwnerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          firewall-domain-list-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype firewall-domain-list-metadata-list ()
   '(trivial-types:proper-list firewall-domain-list-metadata))
 (common-lisp:defun |make-firewall-domain-list-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            firewall-domain-list-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype firewall-domain-list-status () 'common-lisp:string)
(common-lisp:deftype firewall-domain-name () 'common-lisp:string)
(common-lisp:deftype firewall-domain-update-operation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype firewall-domains ()
   '(trivial-types:proper-list firewall-domain-name))
 (common-lisp:defun |make-firewall-domains|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list firewall-domain-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype firewall-fail-open-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (firewall-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-firewall-rule-"))
   (firewall-rule-group-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (firewall-domain-list-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (priority common-lisp:nil :type (common-lisp:or priority common-lisp:null))
   (action common-lisp:nil :type (common-lisp:or action common-lisp:null))
   (block-response common-lisp:nil :type
    (common-lisp:or block-response common-lisp:null))
   (block-override-domain common-lisp:nil :type
    (common-lisp:or block-override-domain common-lisp:null))
   (block-override-dns-type common-lisp:nil :type
    (common-lisp:or block-override-dns-type common-lisp:null))
   (block-override-ttl common-lisp:nil :type
    (common-lisp:or unsigned common-lisp:null))
   (creator-request-id common-lisp:nil :type
    (common-lisp:or creator-request-id common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or rfc3339time-string common-lisp:null))
   (modification-time common-lisp:nil :type
    (common-lisp:or rfc3339time-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'firewall-rule 'make-firewall-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input firewall-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input firewall-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-id))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-domain-list-id))
      (common-lisp:list
       (common-lisp:cons "FirewallDomainListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-response))
      (common-lisp:list
       (common-lisp:cons "BlockResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-override-domain))
      (common-lisp:list
       (common-lisp:cons "BlockOverrideDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-override-dns-type))
      (common-lisp:list
       (common-lisp:cons "BlockOverrideDnsType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-override-ttl))
      (common-lisp:list
       (common-lisp:cons "BlockOverrideTtl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modification-time))
      (common-lisp:list
       (common-lisp:cons "ModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input firewall-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (firewall-rule-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-firewall-rule-group-"))
   (id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (rule-count common-lisp:nil :type
    (common-lisp:or unsigned common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or firewall-rule-group-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (owner-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (creator-request-id common-lisp:nil :type
    (common-lisp:or creator-request-id common-lisp:null))
   (share-status common-lisp:nil :type
    (common-lisp:or share-status common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or rfc3339time-string common-lisp:null))
   (modification-time common-lisp:nil :type
    (common-lisp:or rfc3339time-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'firewall-rule-group 'make-firewall-rule-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input firewall-rule-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input firewall-rule-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-count))
      (common-lisp:list
       (common-lisp:cons "RuleCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-status))
      (common-lisp:list
       (common-lisp:cons "ShareStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modification-time))
      (common-lisp:list
       (common-lisp:cons "ModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input firewall-rule-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (firewall-rule-group-association (:copier common-lisp:nil)
      (:conc-name "struct-shape-firewall-rule-group-association-"))
   (id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (firewall-rule-group-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (priority common-lisp:nil :type (common-lisp:or priority common-lisp:null))
   (mutation-protection common-lisp:nil :type
    (common-lisp:or mutation-protection-status common-lisp:null))
   (managed-owner-name common-lisp:nil :type
    (common-lisp:or service-principle common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or firewall-rule-group-association-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (creator-request-id common-lisp:nil :type
    (common-lisp:or creator-request-id common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or rfc3339time-string common-lisp:null))
   (modification-time common-lisp:nil :type
    (common-lisp:or rfc3339time-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'firewall-rule-group-association
                    'make-firewall-rule-group-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          firewall-rule-group-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          firewall-rule-group-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-id))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mutation-protection))
      (common-lisp:list
       (common-lisp:cons "MutationProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'managed-owner-name))
      (common-lisp:list
       (common-lisp:cons "ManagedOwnerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modification-time))
      (common-lisp:list
       (common-lisp:cons "ModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          firewall-rule-group-association))
   common-lisp:nil))
(common-lisp:deftype firewall-rule-group-association-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype firewall-rule-group-associations ()
   '(trivial-types:proper-list firewall-rule-group-association))
 (common-lisp:defun |make-firewall-rule-group-associations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            firewall-rule-group-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (firewall-rule-group-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-firewall-rule-group-metadata-"))
   (id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (owner-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (creator-request-id common-lisp:nil :type
    (common-lisp:or creator-request-id common-lisp:null))
   (share-status common-lisp:nil :type
    (common-lisp:or share-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'firewall-rule-group-metadata
                    'make-firewall-rule-group-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          firewall-rule-group-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          firewall-rule-group-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-status))
      (common-lisp:list
       (common-lisp:cons "ShareStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          firewall-rule-group-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype firewall-rule-group-metadata-list ()
   '(trivial-types:proper-list firewall-rule-group-metadata))
 (common-lisp:defun |make-firewall-rule-group-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            firewall-rule-group-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype firewall-rule-group-policy () 'common-lisp:string)
(common-lisp:deftype firewall-rule-group-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype firewall-rules ()
   '(trivial-types:proper-list firewall-rule))
 (common-lisp:defun |make-firewall-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list firewall-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-firewall-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-firewall-config-request-"))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-firewall-config-request
                    'make-get-firewall-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-firewall-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-firewall-config-response-"))
   (firewall-config common-lisp:nil :type
    (common-lisp:or firewall-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-firewall-config-response
                    'make-get-firewall-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-config))
      (common-lisp:list
       (common-lisp:cons "FirewallConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-firewall-domain-list-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-firewall-domain-list-request-"))
   (firewall-domain-list-id
    (common-lisp:error ":firewall-domain-list-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-firewall-domain-list-request
                    'make-get-firewall-domain-list-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-domain-list-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-domain-list-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-domain-list-id))
      (common-lisp:list
       (common-lisp:cons "FirewallDomainListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-domain-list-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-firewall-domain-list-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-firewall-domain-list-response-"))
   (firewall-domain-list common-lisp:nil :type
    (common-lisp:or firewall-domain-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-firewall-domain-list-response
                    'make-get-firewall-domain-list-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-domain-list-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-domain-list-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-domain-list))
      (common-lisp:list
       (common-lisp:cons "FirewallDomainList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-domain-list-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-firewall-rule-group-association-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-firewall-rule-group-association-request-"))
   (firewall-rule-group-association-id
    (common-lisp:error ":firewall-rule-group-association-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-firewall-rule-group-association-request
                    'make-get-firewall-rule-group-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-association-id))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-firewall-rule-group-association-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-firewall-rule-group-association-response-"))
   (firewall-rule-group-association common-lisp:nil :type
    (common-lisp:or firewall-rule-group-association common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-firewall-rule-group-association-response
                    'make-get-firewall-rule-group-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-association))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-firewall-rule-group-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-firewall-rule-group-policy-request-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-firewall-rule-group-policy-request
                    'make-get-firewall-rule-group-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-firewall-rule-group-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-firewall-rule-group-policy-response-"))
   (firewall-rule-group-policy common-lisp:nil :type
    (common-lisp:or firewall-rule-group-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-firewall-rule-group-policy-response
                    'make-get-firewall-rule-group-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-policy))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-firewall-rule-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-firewall-rule-group-request-"))
   (firewall-rule-group-id
    (common-lisp:error ":firewall-rule-group-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-firewall-rule-group-request
                    'make-get-firewall-rule-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-id))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-firewall-rule-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-firewall-rule-group-response-"))
   (firewall-rule-group common-lisp:nil :type
    (common-lisp:or firewall-rule-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-firewall-rule-group-response
                    'make-get-firewall-rule-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-rule-group))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-firewall-rule-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resolver-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resolver-config-request-"))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resolver-config-request
                    'make-get-resolver-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resolver-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resolver-config-response-"))
   (resolver-config common-lisp:nil :type
    (common-lisp:or resolver-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resolver-config-response
                    'make-get-resolver-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-config))
      (common-lisp:list
       (common-lisp:cons "ResolverConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resolver-dnssec-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resolver-dnssec-config-request-"))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resolver-dnssec-config-request
                    'make-get-resolver-dnssec-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-dnssec-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-dnssec-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-dnssec-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resolver-dnssec-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resolver-dnssec-config-response-"))
   (resolver-dnssecconfig common-lisp:nil :type
    (common-lisp:or resolver-dnssec-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resolver-dnssec-config-response
                    'make-get-resolver-dnssec-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-dnssec-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-dnssec-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-dnssecconfig))
      (common-lisp:list
       (common-lisp:cons "ResolverDNSSECConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-dnssec-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resolver-endpoint-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resolver-endpoint-request-"))
   (resolver-endpoint-id
    (common-lisp:error ":resolver-endpoint-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resolver-endpoint-request
                    'make-get-resolver-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resolver-endpoint-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resolver-endpoint-response-"))
   (resolver-endpoint common-lisp:nil :type
    (common-lisp:or resolver-endpoint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resolver-endpoint-response
                    'make-get-resolver-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-endpoint))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resolver-query-log-config-association-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-resolver-query-log-config-association-request-"))
   (resolver-query-log-config-association-id
    (common-lisp:error ":resolver-query-log-config-association-id is required")
    :type (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resolver-query-log-config-association-request
                    'make-get-resolver-query-log-config-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config-association-id))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfigAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resolver-query-log-config-association-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-resolver-query-log-config-association-response-"))
   (resolver-query-log-config-association common-lisp:nil :type
    (common-lisp:or resolver-query-log-config-association common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resolver-query-log-config-association-response
                    'make-get-resolver-query-log-config-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config-association))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfigAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resolver-query-log-config-policy-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-resolver-query-log-config-policy-request-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resolver-query-log-config-policy-request
                    'make-get-resolver-query-log-config-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resolver-query-log-config-policy-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-resolver-query-log-config-policy-response-"))
   (resolver-query-log-config-policy common-lisp:nil :type
    (common-lisp:or resolver-query-log-config-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resolver-query-log-config-policy-response
                    'make-get-resolver-query-log-config-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config-policy))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfigPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resolver-query-log-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resolver-query-log-config-request-"))
   (resolver-query-log-config-id
    (common-lisp:error ":resolver-query-log-config-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resolver-query-log-config-request
                    'make-get-resolver-query-log-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config-id))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfigId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resolver-query-log-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resolver-query-log-config-response-"))
   (resolver-query-log-config common-lisp:nil :type
    (common-lisp:or resolver-query-log-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resolver-query-log-config-response
                    'make-get-resolver-query-log-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-query-log-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resolver-rule-association-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resolver-rule-association-request-"))
   (resolver-rule-association-id
    (common-lisp:error ":resolver-rule-association-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resolver-rule-association-request
                    'make-get-resolver-rule-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-rule-association-id))
      (common-lisp:list
       (common-lisp:cons "ResolverRuleAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resolver-rule-association-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resolver-rule-association-response-"))
   (resolver-rule-association common-lisp:nil :type
    (common-lisp:or resolver-rule-association common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resolver-rule-association-response
                    'make-get-resolver-rule-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-rule-association))
      (common-lisp:list
       (common-lisp:cons "ResolverRuleAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resolver-rule-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resolver-rule-policy-request-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resolver-rule-policy-request
                    'make-get-resolver-rule-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resolver-rule-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resolver-rule-policy-response-"))
   (resolver-rule-policy common-lisp:nil :type
    (common-lisp:or resolver-rule-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resolver-rule-policy-response
                    'make-get-resolver-rule-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-rule-policy))
      (common-lisp:list
       (common-lisp:cons "ResolverRulePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resolver-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resolver-rule-request-"))
   (resolver-rule-id (common-lisp:error ":resolver-rule-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resolver-rule-request
                    'make-get-resolver-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-rule-id))
      (common-lisp:list
       (common-lisp:cons "ResolverRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resolver-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resolver-rule-response-"))
   (resolver-rule common-lisp:nil :type
    (common-lisp:or resolver-rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resolver-rule-response
                    'make-get-resolver-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-rule))
      (common-lisp:list
       (common-lisp:cons "ResolverRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resolver-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-firewall-domains-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-firewall-domains-request-"))
   (firewall-domain-list-id
    (common-lisp:error ":firewall-domain-list-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (operation (common-lisp:error ":operation is required") :type
    (common-lisp:or firewall-domain-import-operation common-lisp:null))
   (domain-file-url (common-lisp:error ":domain-file-url is required") :type
    (common-lisp:or domain-list-file-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-firewall-domains-request
                    'make-import-firewall-domains-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-firewall-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-firewall-domains-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-domain-list-id))
      (common-lisp:list
       (common-lisp:cons "FirewallDomainListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-file-url))
      (common-lisp:list
       (common-lisp:cons "DomainFileUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-firewall-domains-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-firewall-domains-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-firewall-domains-response-"))
   (id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or firewall-domain-list-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-firewall-domains-response
                    'make-import-firewall-domains-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-firewall-domains-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-firewall-domains-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-firewall-domains-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-service-error-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-error-exception
                    'internal-service-error-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-next-token-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-next-token-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'invalid-next-token-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-exception-message)
      (field-name :initarg :field-name :initform common-lisp:nil :reader
       invalid-parameter-exception-field-name)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message
                    'invalid-parameter-exception-field-name)))
(common-lisp:progn
 (common-lisp:define-condition invalid-policy-document
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-policy-document-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-policy-document 'invalid-policy-document-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-tag-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-tag-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-tag-exception 'invalid-tag-exception-message)))
(common-lisp:deftype ip () 'common-lisp:string)
(common-lisp:deftype ip-address-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (ip-address-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-ip-address-request-"))
   (subnet-id (common-lisp:error ":subnet-id is required") :type
    (common-lisp:or subnet-id common-lisp:null))
   (ip common-lisp:nil :type (common-lisp:or ip common-lisp:null))
   (ipv6 common-lisp:nil :type (common-lisp:or ipv6 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ip-address-request 'make-ip-address-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-address-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-address-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip))
      (common-lisp:list
       (common-lisp:cons "Ip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6))
      (common-lisp:list
       (common-lisp:cons "Ipv6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-address-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ip-address-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-ip-address-response-"))
   (ip-id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (subnet-id common-lisp:nil :type
    (common-lisp:or subnet-id common-lisp:null))
   (ip common-lisp:nil :type (common-lisp:or ip common-lisp:null))
   (ipv6 common-lisp:nil :type (common-lisp:or ipv6 common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or ip-address-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or rfc3339time-string common-lisp:null))
   (modification-time common-lisp:nil :type
    (common-lisp:or rfc3339time-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ip-address-response 'make-ip-address-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-address-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-address-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-id))
      (common-lisp:list
       (common-lisp:cons "IpId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip))
      (common-lisp:list
       (common-lisp:cons "Ip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6))
      (common-lisp:list
       (common-lisp:cons "Ipv6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modification-time))
      (common-lisp:list
       (common-lisp:cons "ModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-address-response))
   common-lisp:nil))
(common-lisp:deftype ip-address-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ip-address-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-ip-address-update-"))
   (ip-id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (subnet-id common-lisp:nil :type
    (common-lisp:or subnet-id common-lisp:null))
   (ip common-lisp:nil :type (common-lisp:or ip common-lisp:null))
   (ipv6 common-lisp:nil :type (common-lisp:or ipv6 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ip-address-update 'make-ip-address-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip-address-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip-address-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-id))
      (common-lisp:list
       (common-lisp:cons "IpId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip))
      (common-lisp:list
       (common-lisp:cons "Ip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6))
      (common-lisp:list
       (common-lisp:cons "Ipv6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip-address-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ip-addresses-request ()
   '(trivial-types:proper-list ip-address-request))
 (common-lisp:defun |make-ip-addresses-request|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-address-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype ip-addresses-response ()
   '(trivial-types:proper-list ip-address-response))
 (common-lisp:defun |make-ip-addresses-response|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ip-address-response))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ipv6 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       limit-exceeded-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'limit-exceeded-exception-message
                    'limit-exceeded-exception-resource-type)))
(common-lisp:deftype list-domain-max-results () 'common-lisp:integer)
(common-lisp:deftype list-firewall-configs-max-result () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-firewall-configs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-firewall-configs-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-firewall-configs-max-result common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-firewall-configs-request
                    'make-list-firewall-configs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-configs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-configs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-firewall-configs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-firewall-configs-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (firewall-configs common-lisp:nil :type
    (common-lisp:or firewall-config-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-firewall-configs-response
                    'make-list-firewall-configs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-configs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-configs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-configs))
      (common-lisp:list
       (common-lisp:cons "FirewallConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-configs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-firewall-domain-lists-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-firewall-domain-lists-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-firewall-domain-lists-request
                    'make-list-firewall-domain-lists-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-domain-lists-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-domain-lists-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-domain-lists-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-firewall-domain-lists-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-firewall-domain-lists-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (firewall-domain-lists common-lisp:nil :type
    (common-lisp:or firewall-domain-list-metadata-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-firewall-domain-lists-response
                    'make-list-firewall-domain-lists-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-domain-lists-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-domain-lists-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-domain-lists))
      (common-lisp:list
       (common-lisp:cons "FirewallDomainLists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-domain-lists-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-firewall-domains-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-firewall-domains-request-"))
   (firewall-domain-list-id
    (common-lisp:error ":firewall-domain-list-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-domain-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-firewall-domains-request
                    'make-list-firewall-domains-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-domains-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-domain-list-id))
      (common-lisp:list
       (common-lisp:cons "FirewallDomainListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-domains-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-firewall-domains-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-firewall-domains-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (domains common-lisp:nil :type
    (common-lisp:or firewall-domains common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-firewall-domains-response
                    'make-list-firewall-domains-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-domains-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-domains-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domains))
      (common-lisp:list
       (common-lisp:cons "Domains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-domains-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-firewall-rule-group-associations-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-firewall-rule-group-associations-request-"))
   (firewall-rule-group-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (priority common-lisp:nil :type (common-lisp:or priority common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or firewall-rule-group-association-status common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-firewall-rule-group-associations-request
                    'make-list-firewall-rule-group-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rule-group-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rule-group-associations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-id))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rule-group-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-firewall-rule-group-associations-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-firewall-rule-group-associations-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (firewall-rule-group-associations common-lisp:nil :type
    (common-lisp:or firewall-rule-group-associations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-firewall-rule-group-associations-response
                    'make-list-firewall-rule-group-associations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rule-group-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rule-group-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-associations))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rule-group-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-firewall-rule-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-firewall-rule-groups-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-firewall-rule-groups-request
                    'make-list-firewall-rule-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rule-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rule-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rule-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-firewall-rule-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-firewall-rule-groups-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (firewall-rule-groups common-lisp:nil :type
    (common-lisp:or firewall-rule-group-metadata-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-firewall-rule-groups-response
                    'make-list-firewall-rule-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rule-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rule-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-groups))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rule-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-firewall-rules-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-firewall-rules-request-"))
   (firewall-rule-group-id
    (common-lisp:error ":firewall-rule-group-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (priority common-lisp:nil :type (common-lisp:or priority common-lisp:null))
   (action common-lisp:nil :type (common-lisp:or action common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-firewall-rules-request
                    'make-list-firewall-rules-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rules-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-id))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-firewall-rules-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-firewall-rules-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (firewall-rules common-lisp:nil :type
    (common-lisp:or firewall-rules common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-firewall-rules-response
                    'make-list-firewall-rules-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-rules))
      (common-lisp:list
       (common-lisp:cons "FirewallRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-firewall-rules-response))
   common-lisp:nil))
(common-lisp:deftype list-resolver-configs-max-result () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-resolver-configs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resolver-configs-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or list-resolver-configs-max-result common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resolver-configs-request
                    'make-list-resolver-configs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-configs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-configs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resolver-configs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resolver-configs-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (resolver-configs common-lisp:nil :type
    (common-lisp:or resolver-config-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resolver-configs-response
                    'make-list-resolver-configs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-configs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-configs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-configs))
      (common-lisp:list
       (common-lisp:cons "ResolverConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-configs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resolver-dnssec-configs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resolver-dnssec-configs-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (filters common-lisp:nil :type (common-lisp:or filters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resolver-dnssec-configs-request
                    'make-list-resolver-dnssec-configs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-dnssec-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-dnssec-configs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-dnssec-configs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resolver-dnssec-configs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resolver-dnssec-configs-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (resolver-dnssec-configs common-lisp:nil :type
    (common-lisp:or resolver-dnssec-config-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resolver-dnssec-configs-response
                    'make-list-resolver-dnssec-configs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-dnssec-configs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-dnssec-configs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-dnssec-configs))
      (common-lisp:list
       (common-lisp:cons "ResolverDnssecConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-dnssec-configs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resolver-endpoint-ip-addresses-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resolver-endpoint-ip-addresses-request-"))
   (resolver-endpoint-id
    (common-lisp:error ":resolver-endpoint-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resolver-endpoint-ip-addresses-request
                    'make-list-resolver-endpoint-ip-addresses-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-endpoint-ip-addresses-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-endpoint-ip-addresses-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-endpoint-ip-addresses-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resolver-endpoint-ip-addresses-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-resolver-endpoint-ip-addresses-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (ip-addresses common-lisp:nil :type
    (common-lisp:or ip-addresses-response common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resolver-endpoint-ip-addresses-response
                    'make-list-resolver-endpoint-ip-addresses-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-endpoint-ip-addresses-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-endpoint-ip-addresses-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-addresses))
      (common-lisp:list
       (common-lisp:cons "IpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-endpoint-ip-addresses-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resolver-endpoints-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resolver-endpoints-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (filters common-lisp:nil :type (common-lisp:or filters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resolver-endpoints-request
                    'make-list-resolver-endpoints-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-endpoints-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-endpoints-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-endpoints-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resolver-endpoints-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resolver-endpoints-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (resolver-endpoints common-lisp:nil :type
    (common-lisp:or resolver-endpoints common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resolver-endpoints-response
                    'make-list-resolver-endpoints-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-endpoints-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-endpoints-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-endpoints))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-endpoints-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resolver-query-log-config-associations-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-resolver-query-log-config-associations-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (filters common-lisp:nil :type (common-lisp:or filters common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or sort-by-key common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resolver-query-log-config-associations-request
                    'make-list-resolver-query-log-config-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-query-log-config-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-query-log-config-associations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-query-log-config-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resolver-query-log-config-associations-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-resolver-query-log-config-associations-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (total-count common-lisp:nil :type (common-lisp:or count common-lisp:null))
   (total-filtered-count common-lisp:nil :type
    (common-lisp:or count common-lisp:null))
   (resolver-query-log-config-associations common-lisp:nil :type
    (common-lisp:or resolver-query-log-config-association-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resolver-query-log-config-associations-response
                    'make-list-resolver-query-log-config-associations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-query-log-config-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-query-log-config-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "TotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-filtered-count))
      (common-lisp:list
       (common-lisp:cons "TotalFilteredCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config-associations))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfigAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-query-log-config-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resolver-query-log-configs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resolver-query-log-configs-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (filters common-lisp:nil :type (common-lisp:or filters common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or sort-by-key common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resolver-query-log-configs-request
                    'make-list-resolver-query-log-configs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-query-log-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-query-log-configs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-query-log-configs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resolver-query-log-configs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resolver-query-log-configs-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (total-count common-lisp:nil :type (common-lisp:or count common-lisp:null))
   (total-filtered-count common-lisp:nil :type
    (common-lisp:or count common-lisp:null))
   (resolver-query-log-configs common-lisp:nil :type
    (common-lisp:or resolver-query-log-config-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resolver-query-log-configs-response
                    'make-list-resolver-query-log-configs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-query-log-configs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-query-log-configs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-count))
      (common-lisp:list
       (common-lisp:cons "TotalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-filtered-count))
      (common-lisp:list
       (common-lisp:cons "TotalFilteredCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-configs))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-query-log-configs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resolver-rule-associations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resolver-rule-associations-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (filters common-lisp:nil :type (common-lisp:or filters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resolver-rule-associations-request
                    'make-list-resolver-rule-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-rule-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-rule-associations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-rule-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resolver-rule-associations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resolver-rule-associations-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (resolver-rule-associations common-lisp:nil :type
    (common-lisp:or resolver-rule-associations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resolver-rule-associations-response
                    'make-list-resolver-rule-associations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-rule-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-rule-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-rule-associations))
      (common-lisp:list
       (common-lisp:cons "ResolverRuleAssociations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-rule-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resolver-rules-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resolver-rules-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (filters common-lisp:nil :type (common-lisp:or filters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resolver-rules-request
                    'make-list-resolver-rules-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-rules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-rules-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-rules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resolver-rules-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-resolver-rules-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (resolver-rules common-lisp:nil :type
    (common-lisp:or resolver-rules common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resolver-rules-response
                    'make-list-resolver-rules-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-rules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-rules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-rules))
      (common-lisp:list
       (common-lisp:cons "ResolverRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-resolver-rules-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype mutation-protection-status () 'common-lisp:string)
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype port () 'common-lisp:integer)
(common-lisp:deftype priority () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (put-firewall-rule-group-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-firewall-rule-group-policy-request-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (firewall-rule-group-policy
    (common-lisp:error ":firewall-rule-group-policy is required") :type
    (common-lisp:or firewall-rule-group-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-firewall-rule-group-policy-request
                    'make-put-firewall-rule-group-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-firewall-rule-group-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-firewall-rule-group-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-policy))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-firewall-rule-group-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-firewall-rule-group-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-firewall-rule-group-policy-response-"))
   (return-value common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-firewall-rule-group-policy-response
                    'make-put-firewall-rule-group-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-firewall-rule-group-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-firewall-rule-group-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-value))
      (common-lisp:list
       (common-lisp:cons "ReturnValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-firewall-rule-group-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-resolver-query-log-config-policy-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-put-resolver-query-log-config-policy-request-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (resolver-query-log-config-policy
    (common-lisp:error ":resolver-query-log-config-policy is required") :type
    (common-lisp:or resolver-query-log-config-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-resolver-query-log-config-policy-request
                    'make-put-resolver-query-log-config-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resolver-query-log-config-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resolver-query-log-config-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config-policy))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfigPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resolver-query-log-config-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-resolver-query-log-config-policy-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-put-resolver-query-log-config-policy-response-"))
   (return-value common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-resolver-query-log-config-policy-response
                    'make-put-resolver-query-log-config-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resolver-query-log-config-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resolver-query-log-config-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-value))
      (common-lisp:list
       (common-lisp:cons "ReturnValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resolver-query-log-config-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-resolver-rule-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-resolver-rule-policy-request-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (resolver-rule-policy
    (common-lisp:error ":resolver-rule-policy is required") :type
    (common-lisp:or resolver-rule-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-resolver-rule-policy-request
                    'make-put-resolver-rule-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resolver-rule-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resolver-rule-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-rule-policy))
      (common-lisp:list
       (common-lisp:cons "ResolverRulePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resolver-rule-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-resolver-rule-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-resolver-rule-policy-response-"))
   (return-value common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-resolver-rule-policy-response
                    'make-put-resolver-rule-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resolver-rule-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resolver-rule-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'return-value))
      (common-lisp:list
       (common-lisp:cons "ReturnValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resolver-rule-policy-response))
   common-lisp:nil))
(common-lisp:deftype resolver-autodefined-reverse-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resolver-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-resolver-config-"))
   (id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (resource-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (owner-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (autodefined-reverse common-lisp:nil :type
    (common-lisp:or resolver-autodefined-reverse-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resolver-config 'make-resolver-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resolver-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resolver-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'autodefined-reverse))
      (common-lisp:list
       (common-lisp:cons "AutodefinedReverse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resolver-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resolver-config-list ()
   '(trivial-types:proper-list resolver-config))
 (common-lisp:defun |make-resolver-config-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resolver-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resolver-dnssecvalidation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resolver-dnssec-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-resolver-dnssec-config-"))
   (id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (owner-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (resource-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (validation-status common-lisp:nil :type
    (common-lisp:or resolver-dnssecvalidation-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resolver-dnssec-config 'make-resolver-dnssec-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resolver-dnssec-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resolver-dnssec-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-status))
      (common-lisp:list
       (common-lisp:cons "ValidationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resolver-dnssec-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resolver-dnssec-config-list ()
   '(trivial-types:proper-list resolver-dnssec-config))
 (common-lisp:defun |make-resolver-dnssec-config-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resolver-dnssec-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (resolver-endpoint (:copier common-lisp:nil)
      (:conc-name "struct-shape-resolver-endpoint-"))
   (id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (creator-request-id common-lisp:nil :type
    (common-lisp:or creator-request-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or security-group-ids common-lisp:null))
   (direction common-lisp:nil :type
    (common-lisp:or resolver-endpoint-direction common-lisp:null))
   (ip-address-count common-lisp:nil :type
    (common-lisp:or ip-address-count common-lisp:null))
   (host-vpcid common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or resolver-endpoint-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or rfc3339time-string common-lisp:null))
   (modification-time common-lisp:nil :type
    (common-lisp:or rfc3339time-string common-lisp:null))
   (resolver-endpoint-type common-lisp:nil :type
    (common-lisp:or resolver-endpoint-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resolver-endpoint 'make-resolver-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resolver-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resolver-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'direction))
      (common-lisp:list
       (common-lisp:cons "Direction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address-count))
      (common-lisp:list
       (common-lisp:cons "IpAddressCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'host-vpcid))
      (common-lisp:list
       (common-lisp:cons "HostVPCId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modification-time))
      (common-lisp:list
       (common-lisp:cons "ModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-endpoint-type))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resolver-endpoint))
   common-lisp:nil))
(common-lisp:deftype resolver-endpoint-direction () 'common-lisp:string)
(common-lisp:deftype resolver-endpoint-status () 'common-lisp:string)
(common-lisp:deftype resolver-endpoint-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resolver-endpoints ()
   '(trivial-types:proper-list resolver-endpoint))
 (common-lisp:defun |make-resolver-endpoints|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resolver-endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (resolver-query-log-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-resolver-query-log-config-"))
   (id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (owner-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or resolver-query-log-config-status common-lisp:null))
   (share-status common-lisp:nil :type
    (common-lisp:or share-status common-lisp:null))
   (association-count common-lisp:nil :type
    (common-lisp:or count common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or resolver-query-log-config-name common-lisp:null))
   (destination-arn common-lisp:nil :type
    (common-lisp:or destination-arn common-lisp:null))
   (creator-request-id common-lisp:nil :type
    (common-lisp:or creator-request-id common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or rfc3339time-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resolver-query-log-config
                    'make-resolver-query-log-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resolver-query-log-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resolver-query-log-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-status))
      (common-lisp:list
       (common-lisp:cons "ShareStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-count))
      (common-lisp:list
       (common-lisp:cons "AssociationCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resolver-query-log-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resolver-query-log-config-association (:copier common-lisp:nil)
      (:conc-name "struct-shape-resolver-query-log-config-association-"))
   (id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (resolver-query-log-config-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (resource-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or resolver-query-log-config-association-status
                    common-lisp:null))
   (error common-lisp:nil :type
    (common-lisp:or resolver-query-log-config-association-error
                    common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or resolver-query-log-config-association-error-message
                    common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or rfc3339time-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resolver-query-log-config-association
                    'make-resolver-query-log-config-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resolver-query-log-config-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resolver-query-log-config-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-query-log-config-id))
      (common-lisp:list
       (common-lisp:cons "ResolverQueryLogConfigId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resolver-query-log-config-association))
   common-lisp:nil))
(common-lisp:deftype resolver-query-log-config-association-error ()
  'common-lisp:string)
(common-lisp:deftype resolver-query-log-config-association-error-message ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resolver-query-log-config-association-list ()
   '(trivial-types:proper-list resolver-query-log-config-association))
 (common-lisp:defun |make-resolver-query-log-config-association-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resolver-query-log-config-association))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resolver-query-log-config-association-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resolver-query-log-config-list ()
   '(trivial-types:proper-list resolver-query-log-config))
 (common-lisp:defun |make-resolver-query-log-config-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resolver-query-log-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resolver-query-log-config-name () 'common-lisp:string)
(common-lisp:deftype resolver-query-log-config-policy () 'common-lisp:string)
(common-lisp:deftype resolver-query-log-config-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resolver-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-resolver-rule-"))
   (id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (creator-request-id common-lisp:nil :type
    (common-lisp:or creator-request-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (domain-name common-lisp:nil :type
    (common-lisp:or domain-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or resolver-rule-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null))
   (rule-type common-lisp:nil :type
    (common-lisp:or rule-type-option common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (target-ips common-lisp:nil :type
    (common-lisp:or target-list common-lisp:null))
   (resolver-endpoint-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (owner-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null))
   (share-status common-lisp:nil :type
    (common-lisp:or share-status common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or rfc3339time-string common-lisp:null))
   (modification-time common-lisp:nil :type
    (common-lisp:or rfc3339time-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resolver-rule 'make-resolver-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resolver-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resolver-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creator-request-id))
      (common-lisp:list
       (common-lisp:cons "CreatorRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-type))
      (common-lisp:list
       (common-lisp:cons "RuleType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-ips))
      (common-lisp:list
       (common-lisp:cons "TargetIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'owner-id))
      (common-lisp:list
       (common-lisp:cons "OwnerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'share-status))
      (common-lisp:list
       (common-lisp:cons "ShareStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modification-time))
      (common-lisp:list
       (common-lisp:cons "ModificationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resolver-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resolver-rule-association (:copier common-lisp:nil)
      (:conc-name "struct-shape-resolver-rule-association-"))
   (id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (resolver-rule-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (vpcid common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or resolver-rule-association-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resolver-rule-association
                    'make-resolver-rule-association))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resolver-rule-association))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resolver-rule-association))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-rule-id))
      (common-lisp:list
       (common-lisp:cons "ResolverRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpcid))
      (common-lisp:list
       (common-lisp:cons "VPCId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resolver-rule-association))
   common-lisp:nil))
(common-lisp:deftype resolver-rule-association-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resolver-rule-associations ()
   '(trivial-types:proper-list resolver-rule-association))
 (common-lisp:defun |make-resolver-rule-associations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resolver-rule-association))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (resolver-rule-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-resolver-rule-config-"))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (target-ips common-lisp:nil :type
    (common-lisp:or target-list common-lisp:null))
   (resolver-endpoint-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resolver-rule-config 'make-resolver-rule-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resolver-rule-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resolver-rule-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-ips))
      (common-lisp:list
       (common-lisp:cons "TargetIps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resolver-rule-config))
   common-lisp:nil))
(common-lisp:deftype resolver-rule-policy () 'common-lisp:string)
(common-lisp:deftype resolver-rule-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resolver-rules ()
   '(trivial-types:proper-list resolver-rule))
 (common-lisp:defun |make-resolver-rules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resolver-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-exists-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-exists-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-exists-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-exists-exception
                    'resource-exists-exception-message
                    'resource-exists-exception-resource-type)))
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-in-use-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message
                    'resource-in-use-exception-resource-type)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-type)))
(common-lisp:progn
 (common-lisp:define-condition resource-unavailable-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-unavailable-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-unavailable-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-unavailable-exception
                    'resource-unavailable-exception-message
                    'resource-unavailable-exception-resource-type)))
(common-lisp:deftype rfc3339time-string () 'common-lisp:string)
(common-lisp:deftype rule-type-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-ids ()
   '(trivial-types:proper-list resource-id))
 (common-lisp:defun |make-security-group-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype service-principle () 'common-lisp:string)
(common-lisp:deftype share-status () 'common-lisp:string)
(common-lisp:deftype sort-by-key () 'common-lisp:string)
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:deftype status-message () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (target-address (:copier common-lisp:nil)
      (:conc-name "struct-shape-target-address-"))
   (ip common-lisp:nil :type (common-lisp:or ip common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or port common-lisp:null))
   (ipv6 common-lisp:nil :type (common-lisp:or ipv6 common-lisp:null)))
 (common-lisp:export (common-lisp:list 'target-address 'make-target-address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip))
      (common-lisp:list
       (common-lisp:cons "Ip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6))
      (common-lisp:list
       (common-lisp:cons "Ipv6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype target-list ()
   '(trivial-types:proper-list target-address))
 (common-lisp:defun |make-target-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list target-address))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unknown-resource-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unknown-resource-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unknown-resource-exception
                    'unknown-resource-exception-message)))
(common-lisp:deftype unsigned () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-firewall-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-firewall-config-request-"))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (firewall-fail-open (common-lisp:error ":firewall-fail-open is required")
    :type (common-lisp:or firewall-fail-open-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-firewall-config-request
                    'make-update-firewall-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-fail-open))
      (common-lisp:list
       (common-lisp:cons "FirewallFailOpen"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-firewall-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-firewall-config-response-"))
   (firewall-config common-lisp:nil :type
    (common-lisp:or firewall-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-firewall-config-response
                    'make-update-firewall-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-config))
      (common-lisp:list
       (common-lisp:cons "FirewallConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-firewall-domains-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-firewall-domains-request-"))
   (firewall-domain-list-id
    (common-lisp:error ":firewall-domain-list-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (operation (common-lisp:error ":operation is required") :type
    (common-lisp:or firewall-domain-update-operation common-lisp:null))
   (domains (common-lisp:error ":domains is required") :type
    (common-lisp:or firewall-domains common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-firewall-domains-request
                    'make-update-firewall-domains-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-domains-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-domain-list-id))
      (common-lisp:list
       (common-lisp:cons "FirewallDomainListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation))
      (common-lisp:list
       (common-lisp:cons "Operation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domains))
      (common-lisp:list
       (common-lisp:cons "Domains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-domains-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-firewall-domains-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-firewall-domains-response-"))
   (id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or firewall-domain-list-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-firewall-domains-response
                    'make-update-firewall-domains-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-domains-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-domains-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-domains-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-firewall-rule-group-association-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-firewall-rule-group-association-request-"))
   (firewall-rule-group-association-id
    (common-lisp:error ":firewall-rule-group-association-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (priority common-lisp:nil :type (common-lisp:or priority common-lisp:null))
   (mutation-protection common-lisp:nil :type
    (common-lisp:or mutation-protection-status common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-firewall-rule-group-association-request
                    'make-update-firewall-rule-group-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-rule-group-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-rule-group-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-association-id))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupAssociationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mutation-protection))
      (common-lisp:list
       (common-lisp:cons "MutationProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-rule-group-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-firewall-rule-group-association-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-firewall-rule-group-association-response-"))
   (firewall-rule-group-association common-lisp:nil :type
    (common-lisp:or firewall-rule-group-association common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-firewall-rule-group-association-response
                    'make-update-firewall-rule-group-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-rule-group-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-rule-group-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-association))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupAssociation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-rule-group-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-firewall-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-firewall-rule-request-"))
   (firewall-rule-group-id
    (common-lisp:error ":firewall-rule-group-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (firewall-domain-list-id
    (common-lisp:error ":firewall-domain-list-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (priority common-lisp:nil :type (common-lisp:or priority common-lisp:null))
   (action common-lisp:nil :type (common-lisp:or action common-lisp:null))
   (block-response common-lisp:nil :type
    (common-lisp:or block-response common-lisp:null))
   (block-override-domain common-lisp:nil :type
    (common-lisp:or block-override-domain common-lisp:null))
   (block-override-dns-type common-lisp:nil :type
    (common-lisp:or block-override-dns-type common-lisp:null))
   (block-override-ttl common-lisp:nil :type
    (common-lisp:or block-override-ttl common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-firewall-rule-request
                    'make-update-firewall-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-rule-group-id))
      (common-lisp:list
       (common-lisp:cons "FirewallRuleGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firewall-domain-list-id))
      (common-lisp:list
       (common-lisp:cons "FirewallDomainListId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action))
      (common-lisp:list
       (common-lisp:cons "Action"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-response))
      (common-lisp:list
       (common-lisp:cons "BlockResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-override-domain))
      (common-lisp:list
       (common-lisp:cons "BlockOverrideDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'block-override-dns-type))
      (common-lisp:list
       (common-lisp:cons "BlockOverrideDnsType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-override-ttl))
      (common-lisp:list
       (common-lisp:cons "BlockOverrideTtl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-firewall-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-firewall-rule-response-"))
   (firewall-rule common-lisp:nil :type
    (common-lisp:or firewall-rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-firewall-rule-response
                    'make-update-firewall-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'firewall-rule))
      (common-lisp:list
       (common-lisp:cons "FirewallRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-firewall-rule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-ip-address (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-ip-address-"))
   (ip-id (common-lisp:error ":ip-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (ipv6 (common-lisp:error ":ipv6 is required") :type
    (common-lisp:or ipv6 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-ip-address 'make-update-ip-address))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-ip-address))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-ip-address))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-id))
      (common-lisp:list
       (common-lisp:cons "IpId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6))
      (common-lisp:list
       (common-lisp:cons "Ipv6"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-ip-address))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype update-ip-addresses ()
   '(trivial-types:proper-list update-ip-address))
 (common-lisp:defun |make-update-ip-addresses|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list update-ip-address))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (update-resolver-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-resolver-config-request-"))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (autodefined-reverse-flag
    (common-lisp:error ":autodefined-reverse-flag is required") :type
    (common-lisp:or autodefined-reverse-flag common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-resolver-config-request
                    'make-update-resolver-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'autodefined-reverse-flag))
      (common-lisp:list
       (common-lisp:cons "AutodefinedReverseFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-resolver-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-resolver-config-response-"))
   (resolver-config common-lisp:nil :type
    (common-lisp:or resolver-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-resolver-config-response
                    'make-update-resolver-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-config))
      (common-lisp:list
       (common-lisp:cons "ResolverConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-resolver-dnssec-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-resolver-dnssec-config-request-"))
   (resource-id (common-lisp:error ":resource-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (validation (common-lisp:error ":validation is required") :type
    (common-lisp:or validation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-resolver-dnssec-config-request
                    'make-update-resolver-dnssec-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-dnssec-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-dnssec-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-id))
      (common-lisp:list
       (common-lisp:cons "ResourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation))
      (common-lisp:list
       (common-lisp:cons "Validation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-dnssec-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-resolver-dnssec-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-resolver-dnssec-config-response-"))
   (resolver-dnssecconfig common-lisp:nil :type
    (common-lisp:or resolver-dnssec-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-resolver-dnssec-config-response
                    'make-update-resolver-dnssec-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-dnssec-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-dnssec-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-dnssecconfig))
      (common-lisp:list
       (common-lisp:cons "ResolverDNSSECConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-dnssec-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-resolver-endpoint-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-resolver-endpoint-request-"))
   (resolver-endpoint-id
    (common-lisp:error ":resolver-endpoint-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or name common-lisp:null))
   (resolver-endpoint-type common-lisp:nil :type
    (common-lisp:or resolver-endpoint-type common-lisp:null))
   (update-ip-addresses common-lisp:nil :type
    (common-lisp:or update-ip-addresses common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-resolver-endpoint-request
                    'make-update-resolver-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-endpoint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolver-endpoint-type))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpointType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-ip-addresses))
      (common-lisp:list
       (common-lisp:cons "UpdateIpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-resolver-endpoint-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-resolver-endpoint-response-"))
   (resolver-endpoint common-lisp:nil :type
    (common-lisp:or resolver-endpoint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-resolver-endpoint-response
                    'make-update-resolver-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-endpoint))
      (common-lisp:list
       (common-lisp:cons "ResolverEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-resolver-rule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-resolver-rule-request-"))
   (resolver-rule-id (common-lisp:error ":resolver-rule-id is required") :type
    (common-lisp:or resource-id common-lisp:null))
   (config (common-lisp:error ":config is required") :type
    (common-lisp:or resolver-rule-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-resolver-rule-request
                    'make-update-resolver-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-rule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-rule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-rule-id))
      (common-lisp:list
       (common-lisp:cons "ResolverRuleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config))
      (common-lisp:list
       (common-lisp:cons "Config"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-rule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-resolver-rule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-resolver-rule-response-"))
   (resolver-rule common-lisp:nil :type
    (common-lisp:or resolver-rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-resolver-rule-response
                    'make-update-resolver-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-rule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-rule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolver-rule))
      (common-lisp:list
       (common-lisp:cons "ResolverRule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resolver-rule-response))
   common-lisp:nil))
(common-lisp:deftype validation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (route53resolver-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defun associate-firewall-rule-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creator-request-id firewall-rule-group-id
                     vpc-id priority name mutation-protection tags)
   (common-lisp:declare
    (common-lisp:ignorable creator-request-id firewall-rule-group-id vpc-id
     priority name mutation-protection tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-firewall-rule-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "AssociateFirewallRuleGroup" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-firewall-rule-group))
(common-lisp:progn
 (common-lisp:defun associate-resolver-endpoint-ip-address
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-endpoint-id ip-address)
   (common-lisp:declare
    (common-lisp:ignorable resolver-endpoint-id ip-address))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-resolver-endpoint-ip-address-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "AssociateResolverEndpointIpAddress" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-resolver-endpoint-ip-address))
(common-lisp:progn
 (common-lisp:defun associate-resolver-query-log-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-query-log-config-id resource-id)
   (common-lisp:declare
    (common-lisp:ignorable resolver-query-log-config-id resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-resolver-query-log-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "AssociateResolverQueryLogConfig" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-resolver-query-log-config))
(common-lisp:progn
 (common-lisp:defun associate-resolver-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-rule-id name vpcid)
   (common-lisp:declare (common-lisp:ignorable resolver-rule-id name vpcid))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-resolver-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "AssociateResolverRule" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-resolver-rule))
(common-lisp:progn
 (common-lisp:defun create-firewall-domain-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creator-request-id name tags)
   (common-lisp:declare (common-lisp:ignorable creator-request-id name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-firewall-domain-list-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "CreateFirewallDomainList" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-firewall-domain-list))
(common-lisp:progn
 (common-lisp:defun create-firewall-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creator-request-id firewall-rule-group-id
                     firewall-domain-list-id priority action block-response
                     block-override-domain block-override-dns-type
                     block-override-ttl name)
   (common-lisp:declare
    (common-lisp:ignorable creator-request-id firewall-rule-group-id
     firewall-domain-list-id priority action block-response
     block-override-domain block-override-dns-type block-override-ttl name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-firewall-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "CreateFirewallRule" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-firewall-rule))
(common-lisp:progn
 (common-lisp:defun create-firewall-rule-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creator-request-id name tags)
   (common-lisp:declare (common-lisp:ignorable creator-request-id name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-firewall-rule-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "CreateFirewallRuleGroup" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-firewall-rule-group))
(common-lisp:progn
 (common-lisp:defun create-resolver-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creator-request-id name
                     security-group-ids direction ip-addresses tags
                     resolver-endpoint-type)
   (common-lisp:declare
    (common-lisp:ignorable creator-request-id name security-group-ids direction
     ip-addresses tags resolver-endpoint-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-resolver-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "CreateResolverEndpoint" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-resolver-endpoint))
(common-lisp:progn
 (common-lisp:defun create-resolver-query-log-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name destination-arn creator-request-id
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable name destination-arn creator-request-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-resolver-query-log-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "CreateResolverQueryLogConfig" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-resolver-query-log-config))
(common-lisp:progn
 (common-lisp:defun create-resolver-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creator-request-id name rule-type
                     domain-name target-ips resolver-endpoint-id tags)
   (common-lisp:declare
    (common-lisp:ignorable creator-request-id name rule-type domain-name
     target-ips resolver-endpoint-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-resolver-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "CreateResolverRule" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-resolver-rule))
(common-lisp:progn
 (common-lisp:defun delete-firewall-domain-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-domain-list-id)
   (common-lisp:declare (common-lisp:ignorable firewall-domain-list-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-firewall-domain-list-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteFirewallDomainList" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-firewall-domain-list))
(common-lisp:progn
 (common-lisp:defun delete-firewall-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-rule-group-id
                     firewall-domain-list-id)
   (common-lisp:declare
    (common-lisp:ignorable firewall-rule-group-id firewall-domain-list-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-firewall-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteFirewallRule" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-firewall-rule))
(common-lisp:progn
 (common-lisp:defun delete-firewall-rule-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-rule-group-id)
   (common-lisp:declare (common-lisp:ignorable firewall-rule-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-firewall-rule-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteFirewallRuleGroup" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-firewall-rule-group))
(common-lisp:progn
 (common-lisp:defun delete-resolver-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-endpoint-id)
   (common-lisp:declare (common-lisp:ignorable resolver-endpoint-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resolver-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteResolverEndpoint" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-resolver-endpoint))
(common-lisp:progn
 (common-lisp:defun delete-resolver-query-log-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-query-log-config-id)
   (common-lisp:declare (common-lisp:ignorable resolver-query-log-config-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-resolver-query-log-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteResolverQueryLogConfig" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-resolver-query-log-config))
(common-lisp:progn
 (common-lisp:defun delete-resolver-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-rule-id)
   (common-lisp:declare (common-lisp:ignorable resolver-rule-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resolver-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "DeleteResolverRule" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-resolver-rule))
(common-lisp:progn
 (common-lisp:defun disassociate-firewall-rule-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-rule-group-association-id)
   (common-lisp:declare
    (common-lisp:ignorable firewall-rule-group-association-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-firewall-rule-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "DisassociateFirewallRuleGroup" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-firewall-rule-group))
(common-lisp:progn
 (common-lisp:defun disassociate-resolver-endpoint-ip-address
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-endpoint-id ip-address)
   (common-lisp:declare
    (common-lisp:ignorable resolver-endpoint-id ip-address))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-resolver-endpoint-ip-address-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "DisassociateResolverEndpointIpAddress" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-resolver-endpoint-ip-address))
(common-lisp:progn
 (common-lisp:defun disassociate-resolver-query-log-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-query-log-config-id resource-id)
   (common-lisp:declare
    (common-lisp:ignorable resolver-query-log-config-id resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-resolver-query-log-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "DisassociateResolverQueryLogConfig" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-resolver-query-log-config))
(common-lisp:progn
 (common-lisp:defun disassociate-resolver-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpcid resolver-rule-id)
   (common-lisp:declare (common-lisp:ignorable vpcid resolver-rule-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-resolver-rule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "DisassociateResolverRule" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-resolver-rule))
(common-lisp:progn
 (common-lisp:defun get-firewall-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id)
   (common-lisp:declare (common-lisp:ignorable resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-firewall-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetFirewallConfig" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-firewall-config))
(common-lisp:progn
 (common-lisp:defun get-firewall-domain-list
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-domain-list-id)
   (common-lisp:declare (common-lisp:ignorable firewall-domain-list-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-firewall-domain-list-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetFirewallDomainList" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-firewall-domain-list))
(common-lisp:progn
 (common-lisp:defun get-firewall-rule-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-rule-group-id)
   (common-lisp:declare (common-lisp:ignorable firewall-rule-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-firewall-rule-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetFirewallRuleGroup" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-firewall-rule-group))
(common-lisp:progn
 (common-lisp:defun get-firewall-rule-group-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-rule-group-association-id)
   (common-lisp:declare
    (common-lisp:ignorable firewall-rule-group-association-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-firewall-rule-group-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetFirewallRuleGroupAssociation" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-firewall-rule-group-association))
(common-lisp:progn
 (common-lisp:defun get-firewall-rule-group-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-firewall-rule-group-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetFirewallRuleGroupPolicy" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-firewall-rule-group-policy))
(common-lisp:progn
 (common-lisp:defun get-resolver-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id)
   (common-lisp:declare (common-lisp:ignorable resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resolver-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetResolverConfig" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resolver-config))
(common-lisp:progn
 (common-lisp:defun get-resolver-dnssec-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id)
   (common-lisp:declare (common-lisp:ignorable resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-resolver-dnssec-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetResolverDnssecConfig" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resolver-dnssec-config))
(common-lisp:progn
 (common-lisp:defun get-resolver-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-endpoint-id)
   (common-lisp:declare (common-lisp:ignorable resolver-endpoint-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resolver-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetResolverEndpoint" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resolver-endpoint))
(common-lisp:progn
 (common-lisp:defun get-resolver-query-log-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-query-log-config-id)
   (common-lisp:declare (common-lisp:ignorable resolver-query-log-config-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-resolver-query-log-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetResolverQueryLogConfig" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resolver-query-log-config))
(common-lisp:progn
 (common-lisp:defun get-resolver-query-log-config-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-query-log-config-association-id)
   (common-lisp:declare
    (common-lisp:ignorable resolver-query-log-config-association-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-resolver-query-log-config-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetResolverQueryLogConfigAssociation" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resolver-query-log-config-association))
(common-lisp:progn
 (common-lisp:defun get-resolver-query-log-config-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-resolver-query-log-config-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetResolverQueryLogConfigPolicy" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resolver-query-log-config-policy))
(common-lisp:progn
 (common-lisp:defun get-resolver-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-rule-id)
   (common-lisp:declare (common-lisp:ignorable resolver-rule-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resolver-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetResolverRule" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resolver-rule))
(common-lisp:progn
 (common-lisp:defun get-resolver-rule-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-rule-association-id)
   (common-lisp:declare (common-lisp:ignorable resolver-rule-association-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-resolver-rule-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetResolverRuleAssociation" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resolver-rule-association))
(common-lisp:progn
 (common-lisp:defun get-resolver-rule-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn)
   (common-lisp:declare (common-lisp:ignorable arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resolver-rule-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "GetResolverRulePolicy" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resolver-rule-policy))
(common-lisp:progn
 (common-lisp:defun import-firewall-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-domain-list-id operation
                     domain-file-url)
   (common-lisp:declare
    (common-lisp:ignorable firewall-domain-list-id operation domain-file-url))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-firewall-domains-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ImportFirewallDomains" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-firewall-domains))
(common-lisp:progn
 (common-lisp:defun list-firewall-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-firewall-configs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListFirewallConfigs" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-firewall-configs))
(common-lisp:progn
 (common-lisp:defun list-firewall-domain-lists
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-firewall-domain-lists-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListFirewallDomainLists" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-firewall-domain-lists))
(common-lisp:progn
 (common-lisp:defun list-firewall-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-domain-list-id max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable firewall-domain-list-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-firewall-domains-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListFirewallDomains" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-firewall-domains))
(common-lisp:progn
 (common-lisp:defun list-firewall-rule-group-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-rule-group-id vpc-id priority
                     status max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable firewall-rule-group-id vpc-id priority status
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-firewall-rule-group-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListFirewallRuleGroupAssociations" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-firewall-rule-group-associations))
(common-lisp:progn
 (common-lisp:defun list-firewall-rule-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-firewall-rule-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListFirewallRuleGroups" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-firewall-rule-groups))
(common-lisp:progn
 (common-lisp:defun list-firewall-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-rule-group-id priority action
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable firewall-rule-group-id priority action max-results
     next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-firewall-rules-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListFirewallRules" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-firewall-rules))
(common-lisp:progn
 (common-lisp:defun list-resolver-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-resolver-configs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListResolverConfigs" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resolver-configs))
(common-lisp:progn
 (common-lisp:defun list-resolver-dnssec-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token filters)
   (common-lisp:declare (common-lisp:ignorable max-results next-token filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-resolver-dnssec-configs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListResolverDnssecConfigs" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resolver-dnssec-configs))
(common-lisp:progn
 (common-lisp:defun list-resolver-endpoint-ip-addresses
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-endpoint-id max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable resolver-endpoint-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-resolver-endpoint-ip-addresses-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListResolverEndpointIpAddresses" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resolver-endpoint-ip-addresses))
(common-lisp:progn
 (common-lisp:defun list-resolver-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token filters)
   (common-lisp:declare (common-lisp:ignorable max-results next-token filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-resolver-endpoints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListResolverEndpoints" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resolver-endpoints))
(common-lisp:progn
 (common-lisp:defun list-resolver-query-log-config-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token filters sort-by
                     sort-order)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token filters sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-resolver-query-log-config-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListResolverQueryLogConfigAssociations" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resolver-query-log-config-associations))
(common-lisp:progn
 (common-lisp:defun list-resolver-query-log-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token filters sort-by
                     sort-order)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token filters sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-resolver-query-log-configs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListResolverQueryLogConfigs" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resolver-query-log-configs))
(common-lisp:progn
 (common-lisp:defun list-resolver-rule-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token filters)
   (common-lisp:declare (common-lisp:ignorable max-results next-token filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-resolver-rule-associations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListResolverRuleAssociations" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resolver-rule-associations))
(common-lisp:progn
 (common-lisp:defun list-resolver-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token filters)
   (common-lisp:declare (common-lisp:ignorable max-results next-token filters))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-resolver-rules-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListResolverRules" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-resolver-rules))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "ListTagsForResource" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-firewall-rule-group-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn firewall-rule-group-policy)
   (common-lisp:declare (common-lisp:ignorable arn firewall-rule-group-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-firewall-rule-group-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "PutFirewallRuleGroupPolicy" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-firewall-rule-group-policy))
(common-lisp:progn
 (common-lisp:defun put-resolver-query-log-config-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn resolver-query-log-config-policy)
   (common-lisp:declare
    (common-lisp:ignorable arn resolver-query-log-config-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-resolver-query-log-config-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "PutResolverQueryLogConfigPolicy" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-resolver-query-log-config-policy))
(common-lisp:progn
 (common-lisp:defun put-resolver-rule-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn resolver-rule-policy)
   (common-lisp:declare (common-lisp:ignorable arn resolver-rule-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-resolver-rule-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "PutResolverRulePolicy" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-resolver-rule-policy))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "TagResource" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "UntagResource" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-firewall-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id firewall-fail-open)
   (common-lisp:declare (common-lisp:ignorable resource-id firewall-fail-open))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-firewall-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateFirewallConfig" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-firewall-config))
(common-lisp:progn
 (common-lisp:defun update-firewall-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-domain-list-id operation
                     domains)
   (common-lisp:declare
    (common-lisp:ignorable firewall-domain-list-id operation domains))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-firewall-domains-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateFirewallDomains" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-firewall-domains))
(common-lisp:progn
 (common-lisp:defun update-firewall-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-rule-group-id
                     firewall-domain-list-id priority action block-response
                     block-override-domain block-override-dns-type
                     block-override-ttl name)
   (common-lisp:declare
    (common-lisp:ignorable firewall-rule-group-id firewall-domain-list-id
     priority action block-response block-override-domain
     block-override-dns-type block-override-ttl name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-firewall-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateFirewallRule" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-firewall-rule))
(common-lisp:progn
 (common-lisp:defun update-firewall-rule-group-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key firewall-rule-group-association-id
                     priority mutation-protection name)
   (common-lisp:declare
    (common-lisp:ignorable firewall-rule-group-association-id priority
     mutation-protection name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-firewall-rule-group-association-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateFirewallRuleGroupAssociation" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-firewall-rule-group-association))
(common-lisp:progn
 (common-lisp:defun update-resolver-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id autodefined-reverse-flag)
   (common-lisp:declare
    (common-lisp:ignorable resource-id autodefined-reverse-flag))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-resolver-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateResolverConfig" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-resolver-config))
(common-lisp:progn
 (common-lisp:defun update-resolver-dnssec-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-id validation)
   (common-lisp:declare (common-lisp:ignorable resource-id validation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-resolver-dnssec-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateResolverDnssecConfig" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-resolver-dnssec-config))
(common-lisp:progn
 (common-lisp:defun update-resolver-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-endpoint-id name
                     resolver-endpoint-type update-ip-addresses)
   (common-lisp:declare
    (common-lisp:ignorable resolver-endpoint-id name resolver-endpoint-type
     update-ip-addresses))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-resolver-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateResolverEndpoint" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-resolver-endpoint))
(common-lisp:progn
 (common-lisp:defun update-resolver-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resolver-rule-id config)
   (common-lisp:declare (common-lisp:ignorable resolver-rule-id config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-resolver-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'route53resolver-request aws-sdk/generator/operation::input "POST" "/"
        "UpdateResolverRule" "2018-04-01"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-resolver-rule))
